@q parser.web                    @>

@q Created by Laurence D. Finston (LDF) Wed 15 Sep 2021 07:40:04 AM CEST  @>

@q * (1) Copyright and License. @>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing.  @>
@q Copyright (C) 2021 The Free Software Foundation, Inc. @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify  @>
@q it under the terms of the GNU General Public License as published by  @>
@q the Free Software Foundation; either version 3 of the License, or  @>
@q (at your option) any later version.   @>

@q GNU 3DLDF is distributed in the hope that it will be useful,  @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of  @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  @>
@q GNU General Public License for more details.   @>

@q You should have received a copy of the GNU General Public License  @>
@q along with GNU 3DLDF; if not, write to the Free Software  @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q GNU 3DLDF is a GNU package.   @>
@q It is part of the GNU Project of the   @>
@q Free Software Foundation  @>
@q and is published under the GNU General Public License.  @>
@q See the website http://www.gnu.org  @>
@q for more information.    @>
@q GNU 3DLDF is available for downloading from  @>
@q http://www.gnu.org/software/3dldf/LDF.html. @>

@q Please send bug reports to Laurence.Finston@gmx.de @>
@q The mailing list help-3dldf@gnu.org is available for people to  @>
@q ask other users for help.   @>
@q The mailing list info-3dldf@gnu.org is for sending  @>
@q announcements to users. To subscribe to these mailing lists, send an  @>
@q email with ``subscribe <email-address>'' as the subject.   @>

@q The author can be contacted at:     @>

@q Laurence D. Finston 		       @>
@q c/o Free Software Foundation, Inc.  @>
@q 51 Franklin St, Fifth Floor 	       @>
@q Boston, MA  02110-1301  	       @>
@q USA                                 @>                             

@q Laurence.Finston@gmx.de  @>


@q * (1) Parser.  @>
@* Parser.
\initials{LDF 2021.08.15.}

@q ** (2) Include files.@>
@ Include files.

@<Include files@>=

#include <stdlib.h>
#include <stdio.h>
#include <stdarg.h>
#include <limits.h>
#include <ctype.h>
#include <signal.h>

#include <algorithm>
#include <bitset>
#include <fstream>
#include <iomanip>
#include <ios>
#include <iostream>
#include <iterator>
#include <time.h>
#include <math.h>
#include <sstream>   
#include <map>
#include <vector>
#include <deque>
#include <map>

// #include <stack>
// #include <set>

#include "../config.h"

#include <mysql.h>

typedef void* yyscan_t;

using namespace std;

#include "parser.hxx"
#include "scanner.hxx"
#include "stars.hxx"
#include "classes.hxx"

@q ** (2) Declarations of additional functions.@>
@ Declarations of additional functions.

@<Declarations of additional functions@>=

int 
yylex(YYSTYPE* lvalp, yyscan_t parameter);

int
yywrap(void);

int
yyerror(void* v, char const* s);

@q ** (2) Options.@>
@ Options.

@<Options@>=
@=%verbose@>@;@/
@=%define api.pure@>@;@/
@=%parse-param {yyscan_t parameter}@>@;@/
@=%lex-param {yyscan_t parameter}@>@;@/
@=%debug@>

@q ** (2) |union| declaration.@>
@ {\bf union} declaration.

@<|union| declaration@>=

@=%union {@>

  int int_value;
  bool bool_value;
  unsigned int uint_value;
  unsigned long int ulint_value;
  float float_value;
  char string_value[1024];
  void *pointer_value;

@=}@>

@q ** (2) Token and type declarations.@>
@ Token and type declarations.

@q *** (3) Code @>

@<Token and type declarations@>=

%token<int_value> ASTERISK@;@/
%token<int_value> COMMA@;@/
%token<int_value> SEMI_COLON@;@/
%token<int_value> INPUT@;@/
%token<int_value> OUTPUT@;@/
%token<int_value> OUT@;@/
%token<int_value> IN@;@/
%token<int_value> APPEND@;@/
%token<int_value> FILE_YY@;@/
%token<int_value> OPEN@;@/
%token<int_value> CLOSE@;@/
%token<int_value> CLOSED@;@/
%token<int_value> END@;@/
%token<int_value> ENDINPUT@;@/
%token<int_value> SELECT@;@/
%token<int_value> ALL@;@/
%token<int_value> FROM@;@/
%token<int_value> WHERE@;@/
%token<int_value> EQUAL@;@/
%token<int_value> NOT_EQUAL@;@/
%token<int_value> NOT@;@/
%token<int_value> GREATER_THAN@;@/
%token<int_value> LESS_THAN;@/
%token<int_value> GREATER_THAN_OR_EQUAL@;@/
%token<int_value> LESS_THAN_OR_EQUAL@;@/
%token<int_value> ORDER_BY@;@/
%token<int_value> BY@;@/
%token<int_value> ORDER@;@/
%token<int_value> ASCENDING@;@/
%token<int_value> DESCENDING@;@/
%token<int_value> UNIQUE@;@/
%token<int_value> LIMIT@;@/
%token<int_value> OFFSET@;@/
%token<int_value> ID@;@/
%token<int_value> QUERY@;@/
%token<int_value> AND@;@/
%token<int_value> OR@;@/
%token<int_value> XOR@;@/
%token<int_value> NOT_AND@;@/
%token<int_value> NOT_OR@;@/
%token<int_value> NOT_XOR@;@/
%token<int_value> APPROX@;@/
%token<int_value> APPROX_RANK_APPARENT_MAGNITUDE@;
%token<int_value> SORT@;@/
%token<int_value> VECTOR@;@/
%token<int_value> RANK@;@/
%token<int_value> APPARENT@;@/
%token<int_value> APPARENT_MAGNITUDE@;@/
%token<int_value> ABSOLUTE@;@/
%token<int_value> ABSOLUTE_MAGNITUDE@;@/
%token<int_value> MAGNITUDE@;@/
%token<int_value> APPARENT_MAGNITUDE_VARIES@;@/
%token<int_value> ABSOLUTE_MAGNITUDE_VARIES@;@/
%token<int_value> IS_BINARY@;@/
%token<int_value> IS_MULTIPLE@;@/
%token<int_value> IS_BINARY_COMPONENT@;@/
%token<int_value> IS_ECLIPSING_BINARY@;@/
%token<int_value> NOTES@;@/
%token<int_value> VARIES@;@/
%token<int_value> IS@;@/
%token<int_value> BINARY@;@/
%token<int_value> MULTIPLE@;@/
%token<int_value> COMMON@;@/
%token<int_value> COMMON_NAME@;@/
%token<int_value> NAME@;@/
%token<int_value> GREEK@;@/
%token<int_value> GREEK_NAME@;@/
%token<int_value> LATIN@;@/
%token<int_value> LATIN_NAME@;@/
%token<int_value> ARABIC@;@/
%token<int_value> ARABIC_NAME@;@/
%token<int_value> GENITIVE@;@/
%token<int_value> FLAMSTEED_DESIGNATION_NUMBER@;@/
%token<int_value> NUMBER@;@/
%token<int_value> BS_HR_NUMBER@;@/
%token<int_value> DESIGNATION@;@/
%token<int_value> BAYER_DESIGNATION_GREEK_LETTER@;@/
%token<int_value> BAYER_DESIGNATION_GREEK_LETTER_TEX@;@/
%token<int_value> BAYER_DESIGNATION_EXTENSION@;@/
%token<int_value> ABBREVIATION@;@/
%token<int_value> RIGHT_ASCENSION@;@/
%token<int_value> RIGHT@;@/
%token<int_value> ASCENSION@;@/

/* !!START HERE:  LDF 2021.09.18.  Declare tokens "DECLINATION_HOURS" ... */ 

%token<int_value> DECLINATION@;@/
%token<int_value> ECLIPTIC@;@/
%token<int_value> HOUR@;@/
%token<int_value> HOURS@;@/
%token<int_value> MINUTE@;@/
%token<int_value> MINUTES@;@/
%token<int_value> SECOND@;@/
%token<int_value> SECONDS@;@/
%token<int_value> DEGREES@;@/
%token<int_value> DECIMAL@;@/
%token<int_value> RIGHT_ASCENSION_HOURS@;@/
%token<int_value> RIGHT_ASCENSION_MINUTES@;@/
%token<float_value> RIGHT_ASCENSION_SECONDS@;@/
%token<int_value> RIGHT_ASCENSION_DEGREES@;@/
%token<float_value> RIGHT_ASCENSION_DECIMAL_DEGREES@;@/
%token<float_value> RIGHT_ASCENSION_DECIMAL_HOURS@;@/
%token<int_value> DECLINATION_DEGREES@;@/
%token<int_value> DECLINATION_MINUTES@;@/
%token<float_value> DECLINATION_SECONDS@;@/
%token<float_value> DECLINATION_DECIMAL_DEGREES@;@/
%token<int_value> STAR_CONSTANT_NAME@;@/
%token<int_value> CONSTANT@;@/
%token<int_value> COMPARE@;@/
%token<int_value> LOWEST@;@/
%token<int_value> HIGHEST@;@/
%token<int_value> INTEGER@;@/
%token<bool_value> BOOLEAN@;@/
%token<float_value> FLOAT@;@/
%token<string_value> STRING@;@/
%token<int_value> STAR@;@/
%token<int_value> STARS@;@/
%token<int_value> STAR_VECTOR@;@/
%token<int_value> CONSTELLATION@;@/
%token<int_value> CONSTELLATION_VECTOR@;@/
%token<int_value> CONSTELLATION_FULL_NAME@;@/
%token<int_value> CONSTELLATION_ABBREVIATION@;@/
%token<int_value> CONSTELLATION_NAME_GENITIVE@;@/
%token<int_value> CONSTELLATION_NUMBER@;@/
%token<int_value> CONSTELLATIONS@;@/
%token<int_value> PLANET@;@/
%token<int_value> PLANETS@;@/
%token<int_value> PLANET_VECTOR@;@/
%token<int_value> SIDEREAL_TIME@;@/
%token<int_value> UNIVERSAL_TIME@;@/
%token<int_value> GREENWICH_TIME@;@/
%token<int_value> LOCAL_TIME@;@/
%token<int_value> SOLAR_TIME@;@/
%token<int_value> MEDIAN_SOLAR_TIME@;@/
%token<int_value> TIME@;@/
%token<int_value> SIDEREAL@;@/
%token<int_value> UNIVERSAL@;@/
%token<int_value> GREENWICH@;@/
%token<int_value> LOCAL@;@/
%token<int_value> SOLAR@;@/

%token<int_value> TRANSFORM@;@/
%token<int_value> TRANSFORMS@;@/
%token<int_value> POINT@;@/
%token<int_value> POINTS@;@/
%token<int_value> PATH@;@/
%token<int_value> PATHS@;@/
%token<int_value> PICTURE@;@/
%token<int_value> PICTURES@;@/
%token<int_value> SONG@;@/
%token<int_value> SONGS@;@/
%token<int_value> SONG_VECTOR@;@/

%token<int_value> COUNT@;@/
%token<int_value> WRITE@;@/

%token<int_value> TAXONOMY@;@/
%token<int_value> KINGDOM@;@/
%token<int_value> KINGDOMS@;@/
%token<int_value> PHYLUM@;@/
%token<int_value> PHYLA@;@/
%token<int_value> CLASS@;@/
%token<int_value> CLASSES@;@/
@q ORDER already declared.  @>
%token<int_value> ORDERS@;@/
%token<int_value> FAMILY@;@/
%token<int_value> FAMILIES@;@/
%token<int_value> GENUS@;@/
%token<int_value> GENERA@;@/
%token<int_value> SPECIES@;@/

@q ** (2) Rules.  @>
@ Rules.

@<Rules@>=

@q *** (3) Program.  @>
@ Program.

@<Rules@>=

@=program: statement_list END@>
{

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `statement:  END'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    scanner_node->end_flag = true;

#if 1 
    cerr << "scanner_node->id       == " << scanner_node->id << endl
         << "scanner_node->end_flag == " << scanner_node->end_flag << endl;
#endif 

    return 0;
};

@q *** (3) statement_list:  EMPTY.  @>
@ \<statement list>.

@q **** (4) statement_list --> EMPTY.  @>

@<Rules@>=

@=statement_list: /* EMPTY  */  @>
{
    if (DEBUG)
    {
        cerr << "In `yyparse', rule `statement_list:  EMPTY'." 
             << endl;
    }

};

@q **** (4) statement_list --> statement_list statement.  @>

@ \<statement list> $\longrightarrow$ \<statement list> \<statement>.

@<Rules@>=

@=statement_list: statement_list statement @>
{

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `statement_list: statement_list statement'." 
             << endl;

    }  /* |if (DEBUG)|  */  

};

@q *** (3) Statement.  @>
@ Statement.

@q *** (3) Statement:  INPUT STRING.  @>

@ Statement: INPUT STRING.

@q **** (4) statement --> INPUT STRING @>

@ \<statement> $\longrightarrow$ \.{INPUT} \.{STRING}.

@<Rules@>=

@=statement: INPUT STRING@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `statement:  INPUT STRING'." 
             << endl 
             << "$2 == " << @=$2@>
             << endl;

    }  /* |if (DEBUG)|  */  

    scanner_node->input_filename.assign(@=$2@>);        

    return 2;

@q ***** (5) @>
   
};

@q *** (3) Statement:  ENDINPUT.  @>
@ Statement.

@q **** (4) statement --> ENDINPUT  @>

@ \<statement> $\longrightarrow$ \.{ENDINPUT}. 

@<Rules@>=

@=statement: ENDINPUT@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `statement:  ENDINPUT'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>
   
    return 0;

};

@q *** (3) @>
@
@<Token and type declarations@>=
%type<int_value> modifier@;@/
%type<int_value> modifier_list@;@/
%type<int_value> table_name@;@/
%type<int_value> where_list@;@/
%type<int_value> where_item@;@/
%type<string_value> combined_string@;@/


@q *** (3) Statement:  QUERY table_name modifier_list.  @>

@ Statement: QUERY table_name modifier_list.

@<Rules@>=
@=statement: QUERY table_name modifier_list@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    bool DEBUG = true; /* |false| */ 

    Star curr_star;

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `statement:  QUERY table_name modifier_list'." 
             << endl;

        cerr << "`table_name' == ";

        if (@=$2@> == STARS) 
        {
           cerr << "`STARS'." << endl;
        }

        else if (@=$2@> == SONGS) 
        {
           cerr << "`SONGS'." << endl;
        }

        cerr << "`scanner_node->limit'   == " << scanner_node->limit << endl
             << "`scanner_node->offset'  == " << scanner_node->offset << endl
             << "`scanner_node->count'   == " << scanner_node->count << endl
             << "`scanner_node->lowest'  == " << scanner_node->lowest << endl
             << "`scanner_node->highest' == " << scanner_node->highest << endl;


        cerr << "`scanner_node->where_vector.size()' == " << scanner_node->where_vector.size() 
             << endl;

        if (scanner_node->where_vector.size() > 0)
        {
            cerr << "`scanner_node->where_vector':" << endl;
        }

        for (vector<Where_Type>::iterator iter = scanner_node->where_vector.begin();
             iter != scanner_node->where_vector.end();
             ++iter)
        {
           iter->show();
        }


    }  /* |if (DEBUG)|  */  

@q ***** (5) @>
@
@<Rules@>=

    if (DEBUG) 
       cerr << "`scanner_node->table_field_vector.size()' == " << scanner_node->table_field_vector.size() 
            << endl;

    if (DEBUG && scanner_node->table_field_vector.size() > 0)
       cerr << "`scanner_node->table_field_vector':" << endl;

    for (vector<int>::iterator iter = scanner_node->table_field_vector.begin();
         iter != scanner_node->table_field_vector.end();
         ++iter)
    {
@q ****** (6) @>

        if (DEBUG) 
           cerr << "Field:  `" << table_field_map[*iter] << "'." << endl;

@q ****** (6) @>

    }  /* |for| */
            
@q ***** (5) @>
@
@<Rules@>=

        if (@=$2@> == STARS) 
        {
@q ****** (6) @>

           sql_strm.str("");

           sql_strm << "select common_name, greek_name, latin_name, "
                    << "arabic_name, flamsteed_designation_number, "
                    << "bayer_designation_greek_letter, bayer_designation_greek_letter_tex, "
                    << "bayer_designation_extension, bs_hr_number, "
                    << "approx_rank_apparent_magnitude, apparent_magnitude, "
                    << "absolute_magnitude, apparent_magnitude_varies, "
                    << "absolute_magnitude_varies, constellation_abbreviation, "
                    << "constellation_full_name, constellation_name_genitive, "
                    << "constellation_number, right_ascension_hours, right_ascension_minutes, "
                    << "right_ascension_seconds, right_ascension_decimal_hours, "
                    << "right_ascension_decimal_degrees, declination_degrees, "
                    << "declination_minutes, declination_seconds, declination_decimal_degrees, "
                    << "is_binary, is_multiple, is_binary_component, is_eclipsing_binary, "
                    << "notes "
                    << "from 3dldf.Stars";
@q ****** (6) @>
@
@<Rules@>=

           if (scanner_node->where_vector.size() > 0) 
              sql_strm << " where ";
  
           for (vector<Where_Type>::iterator iter = scanner_node->where_vector.begin();
                iter != scanner_node->where_vector.end();
                ++iter)
           {
               if (iter->logical_operator > Where_Type::NULL_TYPE)
                   sql_strm << " " << operator_map[iter->logical_operator] << " ";

               sql_strm << table_field_map[iter->field] << " " << operator_map[iter->operator_wt] << " ";

               if (iter->arg_type == Where_Type::INT_TYPE)
                  sql_strm << iter->arg_int;
               else if (iter->arg_type == Where_Type::FLOAT_TYPE)
                  sql_strm << iter->arg_float;
               else if (iter->arg_type == Where_Type::BOOL_TYPE)
                  sql_strm << iter->arg_bool;
               else if (iter->arg_type == Where_Type::STRING_TYPE)
                  sql_strm << "\"" << iter->arg_str << "\"";
           }

@q ****** (6) @>
@
@<Rules@>=

           if (scanner_node->table_field_vector.size() > 0)
             sql_strm << " order by ";

           string comma_str = "";

           for (vector<int>::iterator iter = scanner_node->table_field_vector.begin();
                iter != scanner_node->table_field_vector.end();
                ++iter)
           {
               sql_strm << comma_str << table_field_map[*iter];

               if (comma_str.empty())
                  comma_str = ", ";
           }

           if (scanner_node->limit > 0)
              sql_strm << " limit " << scanner_node->limit;

           if (scanner_node->offset > 0)
              sql_strm << " offset " << scanner_node->offset;

           sql_strm << ";";

           if (DEBUG)
           {
               cerr << "`sql_strm.str()' == " << sql_strm.str() << endl;
cerr << "XXX Enter <RETURN> to continue: ";
getchar(); 
           }

@q ****** (6) @>


           status = submit_mysql_query(sql_strm.str());

           if (status != 0)
           {
               cerr << "ERROR!  In parser, rule `statement: QUERY table_name modifier_list':"
                    << endl
                    << "`submit_mysql_query' failed, returning " << status << "." << endl
                    << "Failed to query database for `Stars'." << endl 
                    << "Will try to continue." << endl;

               if (result)
               {
                   mysql_free_result(result);
                   result = 0;
               }
               goto END_QUERY_RULE;
           }

@q ****** (6) @>

           else if (DEBUG)
           { 
               cerr << "In parser, rule `statement: QUERY table_name modifier_list':"
                    << endl
                    << "`submit_mysql_query' succeeded, returning 0." << endl
                    << "Queried database for `Stars' successfully." << endl;
           }       

@q ****** (6) @>
@
@<Rules@>=

           scanner_node->star_vector.clear();

           do      
           {
@q ******* (7) @>


/* !!START HERE:  LDF 2021.09.19.  Add APPEND argument to rule.  Then, if it's true,
   don't clear star_vector.  */ 


               curr_row = mysql_fetch_row(result);

               if (curr_row == 0)
               {
                   if (DEBUG) 
                     cerr << "`mysql_fetch_row' returned NULL:" 
                	  << endl;

                   if (*mysql_error(mysql))
                     {
                       cerr << "ERROR!  In parser, rule `statement: QUERY table_name modifier_list':"
                            << endl 
                            << "`mysql_fetch_row' failed, returning NULL." << endl
                	    << "Error:  " << mysql_error(mysql) << endl
                	    << "Will try to continue."
                	    << endl;

                       if (result)
                       {
                           mysql_free_result(result);
                           result = 0;
                       }
                       goto END_QUERY_RULE;

                     }
                   else if (DEBUG)
                     {
                       cerr << "No more rows." << endl;
                     }

                   break;

               }  /* |if (curr_row == 0)|  */

               else
               {
                  curr_star.clear();
                  curr_star.set(curr_row);
                  scanner_node->star_vector.push_back(curr_star);

#if 0
                  if (DEBUG) 
                  {
                     curr_star.show("curr_star:");
                  }
#endif 

               }
               

@q ******* (7) @>

           } while (curr_row != 0);

@q ****** (6) @>

           if (result)
           {
               mysql_free_result(result);
               result = 0;
           }

           if (DEBUG) 
           {
               cerr << "`scanner_node->star_vector.size()'  == " << scanner_node->star_vector.size() << endl;
cerr << "XXX Enter <RETURN> to continue: ";
getchar(); 
           }

@q ****** (6) @>

        }  /* |if (@=$2@> == STARS) | */


@q ***** (5) @>  
@
@<Rules@>=
   
        else if (@=$2@> == SONGS) 
        {
           sql_strm.str("");

           sql_strm << "select * from Songs.Songs order by title limit 1;";

           status = submit_mysql_query(sql_strm.str());

           if (status != 0)
           {
               cerr << "ERROR!  In parser, rule `statement: QUERY table_name modifier_list':"
                    << endl
                    << "`submit_mysql_query' failed, returning " << status << "." << endl
                    << "Failed to query database for `Songs'." << endl 
                    << "Will try to continue." << endl;

               if (result)
               {
                   mysql_free_result(result);
                   result = 0;
               }
               goto END_QUERY_RULE;

           }
           else if (DEBUG)
           { 
               cerr << "In parser, rule `statement: QUERY table_name modifier_list':"
                    << endl
                    << "`submit_mysql_query' succeeded, returning 0." << endl
                    << "Queried database for `Songs' successfully." << endl;
           }       

        }  /* |else if (@=$2@> == SONGS)|  */


@q ****** (6) @>
@
@<Rules@>=

       if (result)
       {
           mysql_free_result(result);
           result = 0;
       }

@q ***** (5) @>

END_QUERY_RULE:
;

};

@q *** (3) @>
@
@<Rules@>=
@=table_name: STARS@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_name:  STARS'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    @=$$@> = STARS;

};

@q *** (3) @>
@
@<Rules@>=
@=table_name: SONGS@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_name:  SONGS'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    @=$$@> = SONGS;

};


@q *** (3) @>
@
@<Rules@>=
@=table_name: KINGDOMS@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_name:  KINGDOMS'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    @=$$@> = KINGDOMS;

};

@q *** (3) @>
@
@<Rules@>=
@=table_name: PHYLA@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_name:  PHYLA'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    @=$$@> = PHYLA;

};

@q *** (3) @>
@
@<Rules@>=
@=table_name: CLASSES@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_name:  CLASSES'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    @=$$@> = CLASSES;

};

@q *** (3) @>
@
@<Rules@>=
@=table_name: ORDERS@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_name:  ORDERS'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    @=$$@> = ORDERS;

};

@q *** (3) @>
@
@<Rules@>=
@=table_name: FAMILIES@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_name:  FAMILIES'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    @=$$@> = FAMILIES;

};

@q *** (3) @>
@
@<Rules@>=
@=table_name: GENERA@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_name:  GENERA'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    @=$$@> = GENERA;

};

@q *** (3) @>
@
@<Rules@>=
@=table_name: SPECIES@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_name:  SPECIES'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    @=$$@> = SPECIES;

};

@q *** (3) @>

@ modifier_list: \.{EMPTY}.

@<Rules@>=
@=modifier_list: /* EMPTY */@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `modifier_list: EMPTY'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    scanner_node->where_vector.clear();
    scanner_node->table_field_vector.clear();

    @=$$@> = 0;

};

@ modifier_list: modifier_list modifier.

@<Rules@>=
@=modifier_list: modifier_list modifier@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `modifier_list: modifier_list modifier'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    @=$$@> = 0;

};

@q **** (4) @>

@ modifier: LIMIT INTEGER.

@<Rules@>=
@=modifier: LIMIT INTEGER@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `modifier: LIMIT INTEGER'." 
             << endl
             << "`INTEGER' == " << @=$2@> << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>
 
    scanner_node->limit = @=$2@>;
   
    @=$$@> = 0;

};

@ modifier: OFFSET INTEGER.

@<Rules@>=
@=modifier: OFFSET INTEGER@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `modifier: OFFSET INTEGER'." 
             << endl
             << "`INTEGER' == " << @=$2@> << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>
 
    scanner_node->offset = @=$2@>;
   
    @=$$@> = 0;

};

@q **** (4) @>

@ modifier: COUNT INTEGER.

@<Rules@>=
@=modifier: COUNT INTEGER@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `modifier: COUNT INTEGER'." 
             << endl
             << "`INTEGER' == " << @=$2@> << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>
 
    scanner_node->count = @=$2@>;
   
    @=$$@> = 0;

};

@q **** (4) @>

@ modifier: LOWEST INTEGER.

@<Rules@>=
@=modifier: LOWEST INTEGER@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `modifier: LOWEST INTEGER'." 
             << endl
             << "`INTEGER' == " << @=$2@> << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>
 
    scanner_node->lowest = @=$2@>;
   
    @=$$@> = 0;

};

@q **** (4) @>

@ modifier: HIGHEST INTEGER.

@<Rules@>=
@=modifier: HIGHEST INTEGER@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `modifier: HIGHEST INTEGER'." 
             << endl
             << "`INTEGER' == " << @=$2@> << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>
 
    scanner_node->highest = @=$2@>;
   
    @=$$@> = 0;

};

@q **** (4) @>

@ modifier: ORDER_BY table_field_list.

@<Rules@>=
@=modifier: ORDER_BY table_field_list@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `modifier: ORDER_BY TABLE_FIELD'." 
             << endl
             << "`INTEGER' == " << @=$2@> << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>
   
    @=$$@> = 0;

};


@q **** (4) @>

@ modifier: WHERE where_list.

@<Rules@>=
@=modifier: WHERE where_list@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `modifier: WHERE where_list'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>
   
    @=$$@> = 0;

};



@q **** (4) @>

@ where_list: EMPTY.

@<Rules@>=
@=where_list: /* Empty  */@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `where_list: EMPTY'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>
   
    @=$$@> = 0;

};


@q **** (4) @>

@ where_list: where_list where_item.

@<Rules@>=
@=where_list: where_list where_item@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `where_list: where_list where_item'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>
   
    @=$$@> = 0;

};


@q **** (4) @>

@ where_list: where_list where_item.

@<Rules@>=
@=where_list: where_list where_item@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `where_list: where_list where_item'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>
   
    @=$$@> = 0;

};

@q **** (4) @>

@ where_item: logical_operator table_field EQUAL INTEGER.

@<Rules@>=
@=where_item: logical_operator table_field EQUAL INTEGER@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `where_item: logical_operator table_field EQUAL INTEGER'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    Where_Type w;

    w.logical_operator = @=$1@>; 
    w.field            = @=$2@>;
    w.operator_wt      = Where_Type::EQUAL_TYPE;
    w.arg_type         = Where_Type::INT_TYPE;
    w.arg_int          = @=$4@>;
   
    scanner_node->where_vector.push_back(w);

    @=$$@> = 0;

};

@q **** (4) @>

@ where_item: logical_operator table_field NOT_EQUAL INTEGER.

@<Rules@>=
@=where_item: logical_operator table_field NOT_EQUAL INTEGER@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `where_item: logical_operator table_field NOT_EQUAL INTEGER'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    Where_Type w;

    w.logical_operator = @=$1@>; 
    w.field            = @=$2@>;
    w.operator_wt      = Where_Type::NOT_EQUAL_TYPE;
    w.arg_type         = Where_Type::INT_TYPE;
    w.arg_int          = @=$4@>;
   
    scanner_node->where_vector.push_back(w);

    @=$$@> = 0;

};

@q **** (4) @>

@ where_item: logical_operator table_field GREATER_THAN INTEGER.

@<Rules@>=
@=where_item: logical_operator table_field GREATER_THAN INTEGER@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `where_item: logical_operator table_field GREATER_THAN INTEGER'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    Where_Type w;

    w.logical_operator = @=$1@>; 
    w.field            = @=$2@>;
    w.operator_wt      = Where_Type::GREATER_THAN_TYPE;
    w.arg_type         = Where_Type::INT_TYPE;
    w.arg_int          = @=$4@>;
   
    scanner_node->where_vector.push_back(w);

    @=$$@> = 0;

};


@q **** (4) @>

@ where_item: logical_operator table_field GREATER_THAN_OR_EQUAL INTEGER.

@<Rules@>=
@=where_item: logical_operator table_field GREATER_THAN_OR_EQUAL INTEGER@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `where_item: logical_operator table_field GREATER_THAN_OR_EQUAL INTEGER'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    Where_Type w;

    w.logical_operator = @=$1@>; 
    w.field            = @=$2@>;
    w.operator_wt      = Where_Type::GREATER_THAN_OR_EQUAL_TYPE;
    w.arg_type         = Where_Type::INT_TYPE;
    w.arg_int          = @=$4@>;
   
    scanner_node->where_vector.push_back(w);

    @=$$@> = 0;

};

@q **** (4) @>

@ where_item: logical_operator table_field LESS_THAN INTEGER.

@<Rules@>=
@=where_item: logical_operator table_field LESS_THAN INTEGER@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `where_item: logical_operator table_field LESS_THAN INTEGER'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    Where_Type w;

    w.logical_operator = @=$1@>; 
    w.field            = @=$2@>;
    w.operator_wt      = Where_Type::LESS_THAN_TYPE;
    w.arg_type         = Where_Type::INT_TYPE;
    w.arg_int          = @=$4@>;
   
    scanner_node->where_vector.push_back(w);

    @=$$@> = 0;

};

@q **** (4) @>

@ where_item: logical_operator table_field LESS_THAN_OR_EQUAL INTEGER.

@<Rules@>=
@=where_item: logical_operator table_field LESS_THAN_OR_EQUAL INTEGER@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `where_item: logical_operator table_field LESS_THAN_OR_EQUAL INTEGER'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    Where_Type w;

    w.logical_operator = @=$1@>; 
    w.field            = @=$2@>;
    w.operator_wt      = Where_Type::LESS_THAN_OR_EQUAL_TYPE;
    w.arg_type         = Where_Type::INT_TYPE;
    w.arg_int          = @=$4@>;
   
    scanner_node->where_vector.push_back(w);

    @=$$@> = 0;

};

@q **** (4) @>

@ where_item: logical_operator table_field EQUAL FLOAT.

@<Rules@>=
@=where_item: logical_operator table_field EQUAL FLOAT@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `where_item: logical_operator table_field EQUAL FLOAT'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    Where_Type w;

    w.logical_operator = @=$1@>; 
    w.field            = @=$2@>;
    w.operator_wt      = Where_Type::EQUAL_TYPE;
    w.arg_type         = Where_Type::FLOAT_TYPE;
    w.arg_float        = @=$4@>;
   
    scanner_node->where_vector.push_back(w);

    @=$$@> = 0;

};

@q **** (4) @>

@ where_item: logical_operator table_field NOT_EQUAL FLOAT.

@<Rules@>=
@=where_item: logical_operator table_field NOT_EQUAL FLOAT@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `where_item: logical_operator table_field NOT_EQUAL FLOAT'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    Where_Type w;

    w.logical_operator = @=$1@>; 
    w.field            = @=$2@>;
    w.operator_wt      = Where_Type::NOT_EQUAL_TYPE;
    w.arg_type         = Where_Type::FLOAT_TYPE;
    w.arg_float        = @=$4@>;
   
    scanner_node->where_vector.push_back(w);

    @=$$@> = 0;

};

@q **** (4) @>

@ where_item: logical_operator table_field GREATER_THAN FLOAT.

@<Rules@>=
@=where_item: logical_operator table_field GREATER_THAN FLOAT@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `where_item: logical_operator table_field GREATER_THAN FLOAT'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    Where_Type w;

    w.logical_operator = @=$1@>; 
    w.field            = @=$2@>;
    w.operator_wt      = Where_Type::GREATER_THAN_TYPE;
    w.arg_type         = Where_Type::FLOAT_TYPE;
    w.arg_float        = @=$4@>;
   
    scanner_node->where_vector.push_back(w);

    @=$$@> = 0;

};


@q **** (4) @>

@ where_item: logical_operator table_field GREATER_THAN_OR_EQUAL FLOAT.

@<Rules@>=
@=where_item: logical_operator table_field GREATER_THAN_OR_EQUAL FLOAT@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `where_item: logical_operator table_field GREATER_THAN_OR_EQUAL FLOAT'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    Where_Type w;

    w.logical_operator = @=$1@>; 
    w.field            = @=$2@>;
    w.operator_wt      = Where_Type::GREATER_THAN_OR_EQUAL_TYPE;
    w.arg_type         = Where_Type::FLOAT_TYPE;
    w.arg_float        = @=$4@>;
   
    scanner_node->where_vector.push_back(w);

    @=$$@> = 0;

};

@q **** (4) @>

@ where_item: logical_operator table_field LESS_THAN FLOAT.

@<Rules@>=
@=where_item: logical_operator table_field LESS_THAN FLOAT@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `where_item: logical_operator table_field LESS_THAN FLOAT'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    Where_Type w;

    w.logical_operator = @=$1@>; 
    w.field            = @=$2@>;
    w.operator_wt      = Where_Type::LESS_THAN_TYPE;
    w.arg_type         = Where_Type::FLOAT_TYPE;
    w.arg_float        = @=$4@>;
   
    scanner_node->where_vector.push_back(w);

    @=$$@> = 0;

};

@q **** (4) @>

@ where_item: logical_operator table_field LESS_THAN_OR_EQUAL FLOAT.

@<Rules@>=
@=where_item: logical_operator table_field LESS_THAN_OR_EQUAL FLOAT@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `where_item: logical_operator table_field LESS_THAN_OR_EQUAL FLOAT'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    Where_Type w;

    w.logical_operator = @=$1@>; 
    w.field            = @=$2@>;
    w.operator_wt      = Where_Type::LESS_THAN_OR_EQUAL_TYPE;
    w.arg_type         = Where_Type::FLOAT_TYPE;
    w.arg_float        = @=$4@>;
   
    scanner_node->where_vector.push_back(w);

    @=$$@> = 0;

};


@q **** (4) @>

@ where_item: logical_operator table_field EQUAL STRING.

@<Rules@>=
@=where_item: logical_operator table_field EQUAL STRING@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `where_item: logical_operator table_field EQUAL STRING'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    Where_Type w;

    w.logical_operator = @=$1@>; 
    w.field            = @=$2@>;
    w.operator_wt      = Where_Type::EQUAL_TYPE;
    w.arg_type         = Where_Type::STRING_TYPE;
    w.arg_str          = @=$4@>;
   
    scanner_node->where_vector.push_back(w);

    @=$$@> = 0;

};

@q **** (4) @>

@ where_item: logical_operator table_field NOT_EQUAL STRING.

@<Rules@>=
@=where_item: logical_operator table_field NOT_EQUAL STRING@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `where_item: logical_operator table_field NOT_EQUAL STRING'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    Where_Type w;

    w.logical_operator = @=$1@>; 
    w.field            = @=$2@>;
    w.operator_wt      = Where_Type::NOT_EQUAL_TYPE;
    w.arg_type         = Where_Type::STRING_TYPE;
    w.arg_str          = @=$4@>;
   
    scanner_node->where_vector.push_back(w);

    @=$$@> = 0;

};

@q *** (3) logical_operator.  @>
@ |logical_operator|.  

@<Token and type declarations@>=

%type<int_value> logical_operator@;@/

@q *** (3) @>
@
@<Rules@>=
@=logical_operator: /* Empty  */@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `logical_operator: EMPTY'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    @=$$@> = Where_Type::NULL_TYPE;

};

@q *** (3) @>
@
@<Rules@>=
@=logical_operator: AND@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `logical_operator: AND'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    @=$$@> = Where_Type::AND_TYPE;

};

@q *** (3) @>
@
@<Rules@>=
@=logical_operator: OR@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `logical_operator: OR'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    @=$$@> = Where_Type::OR_TYPE;

};

@q *** (3) @>
@
@<Rules@>=
@=logical_operator: NOT@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `logical_operator: NOT'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    @=$$@> = Where_Type::NOT_TYPE;

};


@q *** (3) @>
@
@<Rules@>=
@=logical_operator: XOR@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `logical_operator: XOR'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    @=$$@> = Where_Type::XOR_TYPE;

};


@q *** (3) @>
@
@<Rules@>=
@=logical_operator: NOT_AND@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `logical_operator: NOT_AND'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    @=$$@> = Where_Type::NOT_AND_TYPE;

};

@q *** (3) @>
@
@<Rules@>=
@=logical_operator: NOT_OR@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `logical_operator: NOT_OR'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    @=$$@> = Where_Type::NOT_OR_TYPE;

};

@q *** (3) @>
@
@<Rules@>=
@=logical_operator: NOT_XOR@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `logical_operator: NOT_XOR'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    @=$$@> = Where_Type::NOT_XOR_TYPE;

};



@q *** (3) @>

@q **** (4) combined_string --> STRING  @>

@ \<combined string> $\longrightarrow$ \.{STRING}.

@<Rules@>=

@=combined_string: STRING@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `statement:  combined_string:  STRING'."  
             << endl 
             << "STRING == " << @=$1@> << endl;

    }  /* |if (DEBUG)|  */  

    memset(@=$$@>, 0,  1024);
    strcat(@=$$@>, @=$1@>);

@q ***** (5) @>

};

@q **** (4) combined_string --> combined_string STRING  @>

@ \<combined string> $\longrightarrow$ \<combined string> \.{STRING}.

@<Rules@>=

@=combined_string: combined_string STRING@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `combined_string: combined_string STRING'." 
             << endl 
             << "combined_string == " << @=$1@> << endl
             << "STRING          == " << @=$2@> << endl;

    }  /* |if (DEBUG)|  */  

    memset(@=$$@>, '\0',  1024);

    if (strlen(@=$1@>) + strlen(@=$2@>) > 1023)
    {
       cerr << "ERROR!  In parser, rule `combined_string: combined_string STRING':"
            << endl 
            << "Total length of `$1' (`combined_string') and `$2' (`STRING') exceeds limit:"
            << endl 
            << strlen(@=$1@>) << " + " << strlen(@=$1@>) << " == " << (strlen(@=$1@>) + strlen(@=$2@>))
            << endl
            << "Setting value of rule (`$$' == `combined_string') to the empty string and will try to continue."
            << endl;

    }
    else
    {
        strcat(@=$$@>, @=$1@>);
        strcat(@=$$@>, " ");
        strcat(@=$$@>, @=$2@>);
    }
    
   if (DEBUG)
   { 
       cerr << "`$$' == " << @=$$@> << endl;
   }  

@q ***** (5) @>

};

@q *** (3) Statement:  SEMI_COLON.  @>
@ Statement:  SEMI_COLON.

@q **** (4) statement --> SEMI_COLON  @>

@ \<statement> $\longrightarrow$ \.{SEMI\_COLON}. 

@<Rules@>=

@=statement: SEMI_COLON@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `statement:  SEMI_COLON'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>
   
};

@q *** (3) @>
@
@<Token and type declarations@>=
%type<int_value> item_vector@;@/
%type<pointer_value> table_field_list@;@/
%type<int_value> table_field@;@/

@q *** (3) Statement  @>

@ Statement:  SORT item_vector BY table_field_list.

@q **** (4) statement:  SORT item_vector BY table_field_list  @>

@ 
@<Rules@>=
@=statement: SORT item_vector BY table_field_list@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `statement:  SORT item_vector BY table_field_list'." 
             << endl;

        if (@=$2@> == STAR_VECTOR)
           cerr << "Will sort `star_vector'." << endl;
        else if (@=$2@> == SONG_VECTOR)
           cerr << "Will sort `song_vector'." << endl;

        cerr << "`scanner_node->table_field_vector.size()' == " 
             << scanner_node->table_field_vector.size() << endl;

        int i = 0;

        for (vector<int>::iterator iter = scanner_node->table_field_vector.begin();
             iter != scanner_node->table_field_vector.end();
             ++iter)
        {
            cerr << "`table_field' " << i++ << ":  " << *iter << endl;
        }
         

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>
@
@<Rules@>=

    if (@=$2@> == STAR_VECTOR)
    {
        if (scanner_node->star_vector.empty())
        {
            cerr << "WARNING:  In parser, rule `statement:  SORT item_vector BY table_field_list':" 
                 << endl 
                 << "`scanner_node->star_vector' is empty.  Nothing to sort." << endl 
                 << "Continuing." << endl;
        }  

    }  /* |if (@=$2@> == STAR_VECTOR)| */

@q ***** (5) @>
@
@<Rules@>=

    else if (@=$2@> == SONG_VECTOR)
    {
        if (scanner_node->song_vector.empty())
        {
            cerr << "WARNING:  In parser, rule `statement:  SORT item_vector BY table_field_list':" 
                 << endl 
                 << "`scanner_node->song_vector' is empty.  Nothing to sort." << endl 
                 << "Continuing." << endl;
        }  

    }  /* |if (@=$2@> == SONG_VECTOR)| */

@q ***** (5) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=item_vector: STAR_VECTOR@>
{
@q **** (4) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `item_vector: STAR_VECTOR'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = STAR_VECTOR;

@q **** (4) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=item_vector: SONG_VECTOR@>
{
@q **** (4) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `item_vector: SONG_VECTOR'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = SONG_VECTOR;

@q **** (4) @>

};

@q *** (3) @>
@
@<Rules@>=
@=table_field_list: /* Empty  */@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field_list: EMPTY'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = 0;


@q ***** (5) @>
   
};

@q *** (3) @>
@
@<Rules@>=
@=table_field_list: table_field_list table_field@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field_list: table_field_list table_field'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    scanner_node->table_field_vector.push_back(@=$2@>);

@q ***** (5) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=table_field_list: table_field_list COMMA table_field@>
{
@q ***** (5) @>

    Scanner_Node scanner_node = static_cast<Scanner_Node>(yyget_extra(parameter));

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field_list: table_field_list COMMA table_field'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    scanner_node->table_field_vector.push_back(@=$3@>);
  
};

@q *** (3) @>
@ 
@<Rules@>=

@=table_field: APPROX_RANK_APPARENT_MAGNITUDE@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field: APPROX_RANK_APPARENT_MAGNITUDE'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = APPROX_RANK_APPARENT_MAGNITUDE;

@q ***** (5) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=table_field: COMMON_NAME@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field: COMMON_NAME'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = COMMON_NAME;

@q ***** (5) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=table_field: GREEK_NAME@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field: GREEK_NAME'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = GREEK_NAME;

@q ***** (5) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=table_field: LATIN_NAME@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field: LATIN_NAME'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = LATIN_NAME;

@q ***** (5) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=table_field: ARABIC_NAME@>
{
@q ***** (5) @>

    bool DEBUG = true; /* |false| */ 

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field: ARABIC_NAME'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = ARABIC_NAME;

@q ***** (5) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=table_field: FLAMSTEED_DESIGNATION_NUMBER@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field: FLAMSTEED_DESIGNATION_NUMBER'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = FLAMSTEED_DESIGNATION_NUMBER;

@q ***** (5) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=table_field: BAYER_DESIGNATION_GREEK_LETTER@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field: BAYER_DESIGNATION_GREEK_LETTER'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = BAYER_DESIGNATION_GREEK_LETTER;

@q ***** (5) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=table_field: BAYER_DESIGNATION_GREEK_LETTER_TEX@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field: BAYER_DESIGNATION_GREEK_LETTER_TEX'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = BAYER_DESIGNATION_GREEK_LETTER_TEX;

@q ***** (5) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=table_field: BAYER_DESIGNATION_EXTENSION@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field: BAYER_DESIGNATION_EXTENSION'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = BAYER_DESIGNATION_EXTENSION;

@q ***** (5) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=table_field: BS_HR_NUMBER@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field: BS_HR_NUMBER'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = BS_HR_NUMBER;

@q ***** (5) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=table_field: APPARENT_MAGNITUDE@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field: APPARENT_MAGNITUDE'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = APPARENT_MAGNITUDE;

@q ***** (5) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=table_field: ABSOLUTE_MAGNITUDE@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field: ABSOLUTE_MAGNITUDE'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = ABSOLUTE_MAGNITUDE;

@q ***** (5) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=table_field: CONSTELLATION_ABBREVIATION@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field: CONSTELLATION_ABBREVIATION'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = CONSTELLATION_ABBREVIATION;

@q ***** (5) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=table_field: CONSTELLATION_FULL_NAME@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field: CONSTELLATION_FULL_NAME'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = CONSTELLATION_FULL_NAME;

@q ***** (5) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=table_field: CONSTELLATION_NAME_GENITIVE@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field: CONSTELLATION_NAME_GENITIVE'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = CONSTELLATION_NAME_GENITIVE;

@q ***** (5) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=table_field: CONSTELLATION_NUMBER@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field: CONSTELLATION_NUMBER'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = CONSTELLATION_NUMBER;

@q ***** (5) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=table_field: RIGHT_ASCENSION_HOURS@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field: RIGHT_ASCENSION_HOURS'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = RIGHT_ASCENSION_HOURS;

@q ***** (5) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=table_field: RIGHT_ASCENSION_MINUTES@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field: RIGHT_ASCENSION_MINUTES'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = RIGHT_ASCENSION_MINUTES;

@q ***** (5) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=table_field: RIGHT_ASCENSION_SECONDS@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field: RIGHT_ASCENSION_SECONDS'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = RIGHT_ASCENSION_SECONDS;

@q ***** (5) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=table_field: RIGHT_ASCENSION_DECIMAL_HOURS@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field: RIGHT_ASCENSION_DECIMAL_HOURS'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = RIGHT_ASCENSION_DECIMAL_HOURS;

@q ***** (5) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=table_field: RIGHT_ASCENSION_DECIMAL_DEGREES@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field: RIGHT_ASCENSION_DECIMAL_DEGREES'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = RIGHT_ASCENSION_DECIMAL_DEGREES;

@q ***** (5) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=table_field: DECLINATION_DEGREES@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field: DECLINATION_DEGREES'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = DECLINATION_DEGREES;

@q ***** (5) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=table_field: DECLINATION_MINUTES@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field: DECLINATION_MINUTES'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = DECLINATION_MINUTES;

@q ***** (5) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=table_field: DECLINATION_SECONDS@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field: DECLINATION_SECONDS'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = DECLINATION_SECONDS;

@q ***** (5) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=table_field: DECLINATION_DECIMAL_DEGREES@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field: DECLINATION_DECIMAL_DEGREES'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = DECLINATION_DECIMAL_DEGREES;

@q ***** (5) @>
   
};

@q *** (3) @>
@ 
@<Rules@>=

@=table_field: IS_BINARY@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field: IS_BINARY'." 
             << endl;

    }  /* |if (DEBUG)|  */  

    @=$$@> = IS_BINARY;

@q ***** (5) @>
   
};

@q *** (3) @>
@
@<Rules@>=
@=table_field: IS_MULTIPLE@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field:  IS_MULTIPLE'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    @=$$@> = IS_MULTIPLE;

};
  

@q *** (3) @>
@
@<Rules@>=
@=table_field: IS_BINARY_COMPONENT@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field:  IS_BINARY_COMPONENT'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    @=$$@> = IS_BINARY_COMPONENT;

};


@q *** (3) @>
@
@<Rules@>=
@=table_field: IS_ECLIPSING_BINARY@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field:  IS_ECLIPSING_BINARY'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    @=$$@> = IS_ECLIPSING_BINARY;

};


@q *** (3) @>
@
@<Rules@>=
@=table_field: NOTES@>
{
@q ***** (5) @>

    if (DEBUG)
    {
        cerr << "*** Parser:  Rule `table_field:  NOTES'." 
             << endl;

    }  /* |if (DEBUG)|  */  

@q ***** (5) @>

    @=$$@> = NOTES;

};


@
@<Garbage@>=
/* Empty  */

@ Putting parser together.
@c
@=%{@>
typedef float real;
class Scanner_Type;
typedef Scanner_Type *Scanner_Node;
@<Include files@>@;@/
int submit_mysql_query(string query_str);
bool DEBUG = true;  /* |false|  */
static stringstream temp_strm;
static stringstream sql_strm;
static int status;
extern MYSQL_RES *result;
extern MYSQL_ROW curr_row;
extern MYSQL *mysql;
extern unsigned int row_ctr; 
extern unsigned int field_ctr;
extern long affected_rows;
@<Declarations of additional functions@>@;@/
#if 0 
@<Garbage@>@;@/
#endif 
@=%}@>
@<Options@>@;@/
@<|union| declaration@>@;@/
@<Token and type declarations@>@;@/
@=%%@>
@q Rules @>
@<Rules@>@;@/

@q * (1) Emacs-Lisp code for use in indirect buffers  @>

@q (progn (cweb-mode) (outline-minor-mode) (setq abbrev-mode t)        @>

@q * (1) Local variables for Emacs @>

@q * Local variables for Emacs.@>
@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q abbrev-mode:t @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q fill-column:80 @>
@q End: @>

