@q accsdtbs.web  @>
@q Created by Laurence D. Finston (LDF) Thu 24 Jun 2021 08:45:33 PM CEST @>

@q * (1) Copyright and License. @>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing.  @>
@q Copyright (C) 2021 The Free Software Foundation, Inc. @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify  @>
@q it under the terms of the GNU General Public License as published by  @>
@q the Free Software Foundation; either version 3 of the License, or  @>
@q (at your option) any later version.   @>

@q GNU 3DLDF is distributed in the hope that it will be useful,  @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of  @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  @>
@q GNU General Public License for more details.   @>

@q You should have received a copy of the GNU General Public License  @>
@q along with GNU 3DLDF; if not, write to the Free Software  @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q GNU 3DLDF is a GNU package.   @>
@q It is part of the GNU Project of the   @>
@q Free Software Foundation  @>
@q and is published under the GNU General Public License.  @>
@q See the website http://www.gnu.org  @>
@q for more information.    @>
@q GNU 3DLDF is available for downloading from  @>
@q http://www.gnu.org/software/3dldf/LDF.html. @>

@q Please send bug reports to Laurence.Finston@gmx.de @>
@q The mailing list help-3dldf@gnu.org is available for people to  @>
@q ask other users for help.   @>
@q The mailing list info-3dldf@gnu.org is for sending  @>
@q announcements to users. To subscribe to these mailing lists, send an  @>
@q email with ``subscribe <email-address>'' as the subject.   @>

@q The author can be contacted at:     @>

@q Laurence D. Finston 		       @>
@q c/o Free Software Foundation, Inc.  @>
@q 51 Franklin St, Fifth Floor 	       @>
@q Boston, MA  02110-1301  	       @>
@q USA                                 @>                             

@q Laurence.Finston@gmx.de  @>


@ Access database.

This program can be used to access the database.                                 
It can contain ``one-off'' or ``"throwaway'' code for updating tables in 
the database with calculated values or for other purposes.                                    
\initials{LDF 2021.09.10.}

https://www.timecalculator.net/time-to-decimal

How to Calculate Decimal from Time

To get the total decimal hours we use the formula: h = hours + (minutes / 60) + (seconds / 3600).
To get the total decimal minutes we use the formula: m = (hours * 60) + minutes + (seconds / 60).
To get the total decimal seconds we use the formula: s = (hours * 3600) + (minutes * 60) + seconds.

@ As of 2021.6.27.:  Call like this, for example, to calculate right_ascension_decimal_hours and */
declination_decimal_degrees:  accsdtbs "common_name = \"Cor Caroli\""

@q ** (2) @>
@
@<Include files@>=

#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>

#include <mysql.h>

#include <ios>
#include <iostream>
#include <iomanip>
#include <iterator>
#include <new>
#include <algorithm>
#include <string> 
#include <exception>
#include <stdexcept>
#include <sstream>   
#include <fstream>   
#include <vector>
#include <deque>


using namespace std;

typedef void* yyscan_t;

#include "parser.hxx"
#include "scanner.hxx"
#include "classes.hxx"
#include "accsgtpt.hxx"


@q ** (2) @>
@
@<Global variable declarations@>=

vector<Star*> star_vector;

MYSQL_RES *result;
MYSQL_ROW curr_row;
MYSQL *mysql;
unsigned int row_ctr; 
unsigned int field_ctr;
long affected_rows;
stringstream sql_strm;

int trace_value = 0;

int
submit_mysql_query(string query_str);

@q ** (2) @>
@
@<|main| definition@>=
int
main(int argc, char *argv[])
{
@q *** (3) @>

   bool DEBUG = true; /* |false| */ 

   ifstream in_strm;

   FILE *fp = 0;

   cerr << "accsdtbs 1.0" << endl
        << "Copyright (C) 2021 The Free Software Foundation, Inc."
        << endl 
        << "Author:  Laurence D. Finston"
        << endl;

   int status = 0;

   unsigned int mysql_timeout = 120;


   cerr << "argc == " << argc << "." << endl;

@q *** (3) @>
@
@<|main| definition@>=

   status = process_command_line_options(argc, argv);

   if (status != 0)
   {
       cerr << "ERROR!  In `main':  `process_command_line_options' failed, returning " << status << "."
            << endl 
            << "Exiting `accsdtbs' unsuccessfully with exit status 1." 
            << endl;

       exit(1);
   }
   else if (DEBUG)
   { 
       cerr << "In `main':  `process_command_line_options' succeeded, returning 0."
            << endl;
   }  

   cerr << "where_str_vector.size()  == " << where_str_vector.size() << endl
        << "order_str_vector.size()  == " << order_str_vector.size() << endl
        << "limit_stars              == " << limit_stars << endl
        << "offset_stars             == " << offset_stars << endl
        << "query_type_vector.size() == " << query_type_vector.size() 
        << endl;

   int i = 0;

   if (query_type_vector.size() > 0)
      cerr << "query_type_vector:" << endl;
   else 
      cerr << "query_type_vector is empty.  Not showing." << endl;

   for (vector<int>::iterator iter = query_type_vector.begin();
        iter != query_type_vector.end();
        ++iter)
   {
      cerr << i++ << ".  " << *iter << " ==  ";

      if (*iter == STARS_QUERY)
          cerr << "STARS_QUERY";
      else if (*iter == POINTS_QUERY)
          cerr << "POINTS_QUERY";
      else if (*iter == PATHS_QUERY)
          cerr << "PATHS_QUERY";
      else if (*iter == PICTURES_QUERY)
          cerr << "PICTURES_QUERY";

      cerr << endl;
   }   

   i = 0;

   if (where_str_vector.size() > 0)
      cerr << "where_str_vector:" << endl;
   else 
      cerr << "where_str_vector is empty.  Not showing." << endl;

   for (vector<string>::iterator iter = where_str_vector.begin();
        iter != where_str_vector.end();
        ++iter)
   {
      cerr << i++ << ".  " << *iter << endl;
   }   

   i = 0;

   if (order_str_vector.size() > 0)
      cerr << "order_str_vector:" << endl;
   else 
      cerr << "order_str_vector is empty.  Not showing." << endl;

   for (vector<string>::iterator iter = order_str_vector.begin();
        iter != order_str_vector.end();
        ++iter)
   {
      cerr << i++ << ".  " << *iter << endl;
   }   

   if (instruction_filename.length() > 0)
   {
       cerr << "instruction_filename.length() == " << instruction_filename.length() << " (> 0)"
            << endl 
            << "Will read instructions from instruction file \"" << instruction_filename << "\"."
            << endl
            << "Ignoring other options.  Will clear vectors." << endl;

        query_type_vector.clear();
        where_str_vector.clear();
        order_str_vector.clear();

        

   }

 
@q *** (3) @>
@
@<|main| definition@>=

   mysql = mysql_init(0);

    if (mysql != 0) 
    {
          cerr << "In `main':"
                    << endl
                    << "mysql_init succeeded." << endl; 
    }
    else
    {
       cerr << "ERROR!"
            << endl
            << "`mysql_init failed'.  Failed to access database." 
            << endl
            << "Exiting program unsuccessfully with exit status 1."
            << endl;

       exit(1);

    }

    mysql_options(mysql, MYSQL_OPT_CONNECT_TIMEOUT, &mysql_timeout); 

    if (!mysql_real_connect(mysql, "localhost", "3dldf", 0, "3dldf", 0, NULL, 0))
    {
        cerr << "ERROR! In `main':  `mysql_real_connect' failed, returning NULL." 
                  << endl 
                  << "Failed to connect to database: Error: " << mysql_error(mysql) 
                  << endl
                  << "Exiting program unsuccessfully with exit status 1."
                  << endl;
        return 1;
    }
    else
    { 
        cerr << "In `main':  `mysql_real_connect' succeeded." << endl;
   }  

@q **** (4) @>

#if 0 
   if (stars_query > 0)
   {
@q ***** (5) @>

       if (DEBUG)
       { 
           cerr << "In `main':  `stars_query' == " << stars_query << " (> 1)" << endl 
                << "Calling `query_database_for_stars'." << endl;
       }     

       status = query_database_for_stars(where_str, order_str, limit_stars, offset_stars);

@q ***** (5) @>

       if (status != 0)
       {
          cerr << "ERROR! In `main':  `query_database_for_stars' failed, returning " << status << "." 
                    << endl
                    << "Exiting program unsuccessfully with exit status 1."
                    << endl;

          exit(1);
       }   

@q ***** (5) @>

       else if (DEBUG)
       { 
          cerr << "In `main':  `query_database_for_stars' succeeded, returning 0."
                    << endl;

       }   

@q ***** (5) @>

   }  /* |if (stars_query > 0)| */

   else if (DEBUG)
   { 
       cerr << "In `main':  `stars_query' == " << stars_query << " (<= 0)" << endl 
            << "Not calling `query_database_for_stars'." << endl;
   }     

#endif 

@q **** (4) @>

@q *** (3) @>
@
@<|main| definition@>=

#if 0 
   int BUFFER_SIZE = 256;

   char buffer[BUFFER_SIZE];
   memset(buffer, 0, BUFFER_SIZE);

   char *buffer_ptr = 0;
#endif 

   Scanner_Node scanner_node = new Scanner_Type(1);

   yyscan_t parameter;

   parameter = static_cast<void*>(scanner_node);

   yylex_init(&parameter);      

   yyset_extra(scanner_node, parameter);

   YY_BUFFER_STATE yy_buffer_state;

   if (trace_value > 0)
      yydebug = 1; 
   else 
      yydebug = 0; 

@q *** (3) @>

   deque<IO_Type>::iterator iter;

   IO_Type curr_io_type;

   while (io_deque.size() > 0)
   {
@q **** (4) @>

      iter = io_deque.begin();
      cerr << "iter->in_filename == " << iter->in_filename << endl;

      if (iter->in_file != 0)
      {
          cerr << "`iter->in_file' != 0 is non-NULL."
               << endl 
               << "Will continue reading from `iter->in_filename' == " << iter->in_filename
               << endl;
      }
      else /* |iter->in_file == 0|  */
      {
@q ***** (5) @>
          cerr << "`iter->in_file' is NULL."
               << endl 
               << "Will open `iter->in_filename' == " << iter->in_filename << " for reading."
               << endl;

          errno = 0;
          iter->in_file = fopen(iter->in_filename.c_str(), "r");

          if (iter->in_file == 0)
          {
             cerr << "ERROR!  In `main':  `fopen' failed, returning NULL." << endl
                  << "Failed to open file `" << iter->in_filename << "' for reading." << endl 
                  << "`errno' == " << errno << " == " << strerror(errno) << endl
                  << "Will try to continue."
                  << endl;

             continue;
          }
          else if (DEBUG)
          { 
             cerr << "In `main':  `fopen' succeeded, returning non-NULL." << endl
                  << "Opened file `" << iter->in_filename << "' for reading successfully." << endl; 
          }    

          yypush_buffer_state(yy_create_buffer(iter->in_file, YY_BUF_SIZE, parameter), parameter);

@q ***** (5) @>

      }  /* |else| (|!YY_CURRENT_BUFFER|)  */

@q **** (4) @>
@
@<|main| definition@>=

      status = yyparse(parameter);

      if (DEBUG)
      { 
          cerr << "`yyparse' returned " << status << "." << endl;
      }  

      if (status == 2)
      {
@q ***** (5) @>

          if (DEBUG)
          { 
              cerr << "`yyparse' returned 2.  Read `input' command." 
                   << endl
                   << "`scanner_node->input_filename' == " << scanner_node->input_filename
                   << endl;
          }     

          io_deque.push_front(IO_Type());
          io_deque.front().in_filename = scanner_node->input_filename;
          io_deque.front().in_file = 0;

          continue;
      

@q ***** (5) @>

      }  /* |if (status == 2)|  */

@q *** (3) @>
@
@<|main| definition@>=

      else
      {

          if (DEBUG)
          { 
              cerr << "`yyparse' returned " << status << "."
                   << endl 
                   << "Read to `endinput' command, `end' command or EOF (end of file)." 
                   << endl 
                   << "Closing `iter->infile'."
                   << endl;
          }     

           fclose(iter->in_file);
           io_deque.pop_front();
           yypop_buffer_state(parameter);     			

      }

@q **** (4) @>
@
@<|main| definition@>=

      if (scanner_node->end_flag)
      {
         if (DEBUG)
         { 
            cerr << "In `main':  `scanner_node->end_flag' is `true'." << endl
                 << "Not reading any more input from files."
                 << endl;
         }      

         for (deque<IO_Type>::iterator a_iter = io_deque.begin(); 
              a_iter != io_deque.end(); 
              ++a_iter)
         {
             fclose(iter->in_file);
         }

         io_deque.clear(); 

         break; 

      }  /* |if (scanner_node->end_flag)|  */

@q **** (4) @>

   }  /* |while|  */

@q *** (3) @>
@
@<|main| definition@>=

   if (!scanner_node->end_flag)
   {

      if (DEBUG)
      { 
          cerr << "Setting `fp' to `stdin' and calling `yyparse' again." << endl;
      }  

      fp = stdin;
       
      yyrestart(fp, parameter);

      status = yyparse(parameter);

      if (DEBUG)
      { 
          cerr << "`yyparse' returned " << status << "." << endl;
      }  

   }  /* |if (!scanner_node->end_flag)| */

@q *** (3) @>

   else if (DEBUG)
   { 
       cerr << "In `main':  `scanner_node->end_flag' is `true'." << endl
            << "Not reading from standard input."
            << endl;
   }  

@q *** (3) @>

   cerr << "Exiting `accsdtbs' successfully with exit status 0." << endl;

   exit(0);

}  /* End of |main| definition  */


@q ** (2) @>
@      
@<Function declarations@>=
int
submit_mysql_query(string query_str);

@q *** (3) Definition @>
@
@<|submit_mysql_query| definition@>=      
int
submit_mysql_query(string query_str)
{
  int status = 0;

   mysql_query(mysql, query_str.c_str());

   if (status != 0)
     {
          
       cerr  << "ERROR!  In `|submit_mysql_query|':"
	     << endl 
	     << "`mysql_query' failed, returning " << status << ":"
	     << endl 
	     << "Error:  " << mysql_error(mysql)
	     << endl 
	     << "Error number:  " << mysql_errno(mysql)
	     << endl 
	     << "Exiting function unsuccessfully with return value 1." 
	     << endl;

       return 1;
         
     }  /* |if| (|mysql_query| failed.)  */
     else
        cerr << "`mysql_query' succeeded, returning 0." << endl;

   result = mysql_store_result(mysql);        

   if (result == 0)
   {
     cerr  << "In `submit_mysql_query':  "
          << "`mysql_store_result' returned 0." << endl 
          << "No results.  Exiting function successfully with return value 2."
          << endl;
          
     return 2;

   }  /* |if| (No result)  */

   else
   {
       row_ctr   = mysql_num_rows(result);
       field_ctr = mysql_num_fields(result);

       cerr << "In `|submit_mysql_query|':  "
            << "`mysql_store_result' returned results." 
            << endl
            << "`row_ctr' == " << row_ctr 
            << endl
            << "`field_ctr' == " << field_ctr 
            << endl;

   
       affected_rows = (long) mysql_affected_rows(mysql);

       cerr << "`affected_rows' == " << affected_rows
            << endl;

   }

   return 0;
   
}  /* |submit_mysql_query| definition */

@q ** (2) Calculate decimals.  @>

@ Calculate decimals.

@q *** (3) Declaration  @>

@<Function declarations@>=
int
calculate_decimals(void);

@q *** (3) Definition  @>
@
@<|calculate_decimals| definition@>=
int
calculate_decimals(void)
{
@q **** (4) @>

   bool DEBUG = true; /* |false| */ 

   float ra_decimal_hours;
   float decl_decimal_degrees;

   int status = 0;
   
   int decl_sign;

   cerr << "Entering `calculate_decimals'." << endl
        << "Calculating right_ascension_decimal_hours and `declination_decimal_degrees'." 
        << endl; 

   cerr << "`star_vector.size()' == " << star_vector.size() << endl;

   if (star_vector.size() == 0)
   {
      cerr << "In `calculate_decimals':" << endl 
           << "`star_vector' is empty."  << endl 
           << "Exiting function successfully with return value 0." 
           << endl;

      return 0;
   }

@q **** (4) @>

   for (vector<Star*>::iterator iter = star_vector.begin();
       iter != star_vector.end(); 
       ++iter)
   {
@q ***** (5) @>

      if (   (*iter)->right_ascension_decimal_hours != 0
          && (*iter)->right_ascension_decimal_degrees != 0
          && (*iter)->declination_decimal_degrees != 0)
      {
           cerr << "For star ";

           if (!(*iter)->common_name.empty())
              cerr << (*iter)->common_name << ", ";

           cerr << (*iter)->bayer_designation_greek_letter << " " 
                << (*iter)->constellation_abbreviation << ":" << endl
                << "`right_ascension_decimal_hours', "
                << "`right_ascension_decimal_degrees' and"
                << endl 
                << "`declination_decimal_degrees' are all non-zero."
                << endl 
                << "No need to calculate them.  Continuing." << endl;

           continue;  

      }  /* |if|  */

@q ***** (5) @>
@
@<|calculate_decimals| definition@>=

      ra_decimal_hours =   (*iter)->right_ascension_hours + ((*iter)->right_ascension_minutes / 60.0)
                         + ((*iter)->right_ascension_seconds / 3600.0);

      if ((*iter)->declination_degrees >= 1)
          decl_sign = 1;
      else
          decl_sign = -1;

      decl_decimal_degrees = decl_sign * (abs((*iter)->declination_degrees) + ((*iter)->declination_minutes / 60.0)
                         + ((*iter)->declination_seconds / 3600.0));

      if (ra_decimal_hours == 0.0 && decl_decimal_degrees == 0.0)
      {

           cerr << "For star ";

           if (!(*iter)->common_name.empty())
              cerr << (*iter)->common_name << ", ";

           cerr << (*iter)->bayer_designation_greek_letter << " " 
                << (*iter)->constellation_abbreviation << ":" << endl
                << "`ra_decimal_degrees' and `decl_decimal_degrees' are both 0.0."
                << endl 
                << "Not updating database for star.  Continuing." << endl;

         continue;
      }

@q ***** (5) @>
@
@<|calculate_decimals| definition@>=

      sql_strm << "update Stars set ";

      if (ra_decimal_hours != 0)
         sql_strm << "right_ascension_decimal_hours = " << ra_decimal_hours;

      if (ra_decimal_hours != 0 && decl_decimal_degrees != 0)
         sql_strm  << ", ";

      if (decl_decimal_degrees != 0)
         sql_strm  << "declination_decimal_degrees = " << decl_decimal_degrees;

      sql_strm << " where bs_hr_number = " << (*iter)->bs_hr_number;

      cerr << "`sql_strm.str()' == " << sql_strm.str() << endl;

      status = submit_mysql_query(sql_strm.str());

      cerr << "`submit_mysql_query' returned " << status << endl;
 
      sql_strm.str("");

      cerr << endl;

@q ***** (5) @>

   }  /* |for|  */

@q **** (4) @>

   if (DEBUG)
   { 
      cerr << "Exiting `calculate_decimals' successfully with return value 0." << endl;
   }  

   return 0;

}  /* End of |calculate_decimals| definition  */


@q ** (2) Query database for |Stars|.  @>

@ Query database for |Stars|.

@q *** (3) Declaration  @>

@<Function declarations@>=
int
query_database_for_stars(string wwhere_str, string oorder_str, int llimit_stars, int ooffset_stars);

@q *** (3) Definition  @>
@
@<|query_database_for_stars| definition@>=

int
query_database_for_stars(string wwhere_str, string oorder_str, int llimit_stars, int ooffset_stars)
{
@q **** (4) @>

   bool DEBUG = true; /* |false| */ 

   if (DEBUG)
   { 
      cerr << "Entering `query_database_for_stars'." << endl;
   }  

   int status = 0;

   Star *star = 0;

   stringstream sql_strm;

   curr_row = 0;

   sql_strm << "select "
            << "common_name, "
            << "greek_name, "
            << "latin_name, "
            << "arabic_name, "
            << "flamsteed_designation_number, "
            << "bayer_designation_greek_letter, "
            << "bayer_designation_greek_letter_tex, "
            << "bayer_designation_extension, "
            << "bs_hr_number, "
            << "approx_rank_apparent_magnitude, "
            << "apparent_magnitude, "
            << "absolute_magnitude, "
            << "apparent_magnitude_varies, "
            << "absolute_magnitude_varies, "
            << "constellation_abbreviation, "
            << "constellation_full_name, "
            << "constellation_name_genitive, "
            << "constellation_number, "
            << "right_ascension_hours, "
            << "right_ascension_minutes, "
            << "right_ascension_seconds, "
            << "right_ascension_decimal_hours, "
            << "right_ascension_decimal_degrees, "
            << "declination_degrees, "
            << "declination_minutes, "
            << "declination_seconds, "
            << "declination_decimal_degrees, "
            << "is_binary, "
            << "is_multiple, "
            << "is_binary_component, "
            << "is_eclipsing_binary "
            << "from Stars ";

      sql_strm << wwhere_str << " " << oorder_str;

      if (llimit_stars > 0)
         sql_strm << " limit " << llimit_stars;

      if (ooffset_stars > 0)
         sql_strm << " offset " << ooffset_stars;

      sql_strm << ";";

      cerr << "`sql_strm.str()' == " << sql_strm.str() << endl;

   status = submit_mysql_query(sql_strm.str());

   sql_strm.str("");

   if (status != 0)
   {
      cerr << "ERROR!"
           << endl
           << "`submit_mysql_query' failed, returning " 
           << status << "." << endl 
           << "MySQL error:  " << mysql_error(mysql)
           << endl 
           << "MySQL error number:  " << mysql_errno(mysql)
           << endl;
   }

   else 
   {
      cerr << "In `query_database_for_stars':"
           << endl
           << "`submit_mysql_query' succeeded, returning 0."
           << endl 
           << "`affected_rows' == " << affected_rows
           << endl 
           << "`row_ctr' == " << row_ctr
           << endl 
           << "`field_ctr' == " << field_ctr
           << endl;
   }

@q **** (4) @>

@ Process the contents of |curr_row|.

@<|query_database_for_stars| definition@>=

   do 
   {
@q ***** (5) @>

       curr_row = mysql_fetch_row(result);

       if (curr_row == 0)
       {

         cerr << "`mysql_fetch_row' returned NULL." 
              << endl;

         if (*mysql_error(mysql))
         {
            cerr << "ERROR!  In `query_database_for_stars':  `mysql_fetch_row' failed "
                 << "returning NULL." << endl
                 << "Error:  " << mysql_error(mysql) << endl
                 << "Exiting function unsuccessfully with return value 1."
                 << endl;

            if (result)
            {
                mysql_free_result(result);
                result = 0;
            }

            return 1;

         }

         else
         {
           cerr << "No more rows." << endl;
          
           break;
         }

       }  /* |if (curr_row == 0)|  */

       else 
       {
#if 0
              cerr << "In `query_database_for_stars':"
                   << endl 
                   << "`mysql_fetch_row' succeeded, `curr_row' is non-NULL."
                   << endl;
#endif 
          }      

         try
         {
            star = new Star;
         }

         catch(bad_alloc)
         {
             cerr << "ERROR! In `query_database_for_stars':"
                  << endl 
                  << "`create_new<Star>' failed.  Rethrowing `bad_alloc'."
                  << endl;

             throw;
         }

#if 0
            cerr << "In `query_database_for_stars':"
                 << endl 
                 << "`new Star' succeeded."
                 << endl;
#endif 

         status = star->set(curr_row);

         if (status != 0)
         {
             cerr << "ERROR! In `query_database_for_stars':"
                  << endl 
                  << "`Star::set' failed, returning " << status << "." << endl
                  << "Exiting function unsuccessfully with return value 1."
                  << endl;

             if (result)
             {
                 mysql_free_result(result);
                 result = 0;
             }         

             exit(1);

         }  /* |if (status != 0)|  */

#if 0
             cerr << "In `query_database_for_stars':"
                  << endl 
                  << "`Star::set' succeeded, returning 0."
                  << endl;
#endif 
  
         star_vector.push_back(star);


@q ***** (5) @>

   } while (curr_row != 0);

@q **** (4) @>
@
@<|query_database_for_stars| definition@>=

   /* Free |result|  */

   if (result)
   {
       mysql_free_result(result);
       result = 0;
   }

   cerr << "star_vector.size() == " << star_vector.size() << endl;


@q **** (4) @>
@
@<|query_database_for_stars| definition@>=

   stringstream s;
   int i = 1;

   if (show_stars > 0)
   {

       if (star_vector.size() > 0)
          cerr << "`star_vector':" << endl;
       else
          cerr << "`star_vector' is empty.  Not showing." << endl;

       for (vector<Star*>::iterator iter = star_vector.begin();
            iter != star_vector.end();
            ++iter)
       {
          s << "Star " << i++ << ":";

          (*iter)->show(s.str());

          s.str("");
       }

       cerr << "Showed " << star_vector.size() << " stars." << endl;   

   }  /* |if| */

@q **** (4) Calculate right ascension decimal hours and decimal degrees and declination decimal degrees.  @>

@ Calculate right ascension decimal hours and decimal degrees and declination decimal degrees.  

@<|query_database_for_stars| definition@>=

   if (decimals_calculate > 0)
   {

       if (DEBUG)
       { 
           cerr << "Calculating right ascension decimal hours and decimal degrees and declination decimal degrees."
                << endl;  
       }     

       status = calculate_decimals();

       if (status != 0)
       {
           cerr << "ERROR!  In `query_database_for_stars':  `calculate_decimals' failed, returning " << status << "."
                << endl
                << "Will try to continue."
                << endl;
       }
       else if (DEBUG)
       { 
           cerr << "In `query_database_for_stars':  `calculate_decimals' succeeded, returning 0."
                << endl;
       }   

   }  /* |if (decimals_calculate > 0)|  */

@q **** (4) Write TeX.  @>
@ Write TeX.  
@<|query_database_for_stars| definition@>=

   if (DEBUG)
   { 
      cerr << "In `query_database_for_stars':  `write_tex' == " << write_tex << endl;
   }  

   if (write_tex > 0)
   {
@q ***** (5) @>

       char timestamp_str[32];
       memset(timestamp_str, 0, 32);

#if 0 
       errno = 0;      
       char temp_filename[] = "starinfo_XXXXXX.tex";


       status = mkstemps(temp_filename, 4);

       if (status == -1)
       {
          cerr << "ERROR:  In `query_database_for_stars':  `mkstemps' failed, returning -1:" 
               << endl
               << "Error:  " << strerror(errno)
               << "Not writing TeX file.  Will try to continue." 
               << endl;
       }

@q ***** (5) @>
@
@<|query_database_for_stars| definition@>=
       else
#else
     
       char temp_filename[] = "starinfo_constellations.tex";

#endif 

@q ***** (5) @>
@
@<|query_database_for_stars| definition@>=

       {
@q ****** (6) @>

#if 0 
           if (DEBUG)
           { 
               cerr << "In `query_database_for_stars':"
                    << endl 
                    << "`mkstemps' succeeded, returning file descriptor for file "
                    << "`" << temp_filename << "'."                      
                    << endl;
           }         

           close(status);
#endif 

@q ****** (6) @>

           errno = 0;
           FILE* fp = popen("date +\"%Y.%m.%d %r\"", "r");

           if (fp == 0)
           {
              cerr << "ERROR:  In `query_database_for_stars':  `popen' failed, returning NULL:" 
                   << endl
                   << "Error:  " << strerror(errno)
                   << "Failed to generate timestamp.  Continuing." 
                   << endl;               

           }

@q ****** (6) @>
@
@<|query_database_for_stars| definition@>=

           else 
           {
@q ******* (7) @>

              if (DEBUG)
              { 
                  cerr << "In `query_database_for_stars':"
                       << endl 
                       << "`popen' succeeded, returning FILE pointer."
                       << endl;
              }         
          
@q ******* (7) @>


              errno = 0;
              status = fread(timestamp_str, 1, 32, fp);

              timestamp_str[strlen(timestamp_str) - 1] = '\0';

              if (status == 0)
              {
                  cerr << "ERROR:  In `query_database_for_stars':  `fread' failed, returning 0:" 
                       << endl
                       << "Error:  " << strerror(errno)
                       << "Failed to read timestamp.  Continuing." 
                       << endl;               
              }
              else
              {
                  cerr << "In `query_database_for_stars':  `fread' succeeded, returning " << status << "." 
                       << endl
                       << "`timestamp_str' == " << timestamp_str << endl;

              }
 
              fclose(fp),
              fp = 0;

@q ******* (7) @>

           }  /* |else|  */

@q ****** (6) @>
@
@<|query_database_for_stars| definition@>=

           ofstream out_strm;
           out_strm.open(temp_filename);

           out_strm << "%% " << temp_filename << endl 
                    << "%% Generated by `accsdtbs' " << timestamp_str 
                    << endl << endl;

@q ****** (6) @>
@
@<|query_database_for_stars| definition@>=

           string u;

/* !!START HERE:  LDF 2021.09.12.  Add code for headings with constellations.  Use a different macro */ 
/* instead of \starinfo.   */

           if (constellation_sort)
              stable_sort(star_vector.begin(), star_vector.end(), compare_constellation_full_name);

           string prev_constellation;

           int constellation_ctr = 1;

           string common_name_str;
           string bayer_designation_str;

           for (vector<Star*>::iterator iter = star_vector.begin();
                iter != star_vector.end();
                ++iter)
           {

@q ******* (7) @>

             if ((*iter)->constellation_full_name != prev_constellation)
                out_strm << "\\hbox{{\\largebx " << constellation_ctr++ << ".  " 
                         << (*iter)->constellation_full_name << "}}" 
                         << endl 
                         << "\\vskip\\baselineskip" << endl;

             prev_constellation = (*iter)->constellation_full_name;

             if ((*iter)->approx_rank_apparent_magnitude <= 0)
                continue;
             else if ((*iter)->approx_rank_apparent_magnitude < 10)
                u = "00";
             else if ((*iter)->approx_rank_apparent_magnitude < 100)
                u = "0";
             else 
                u = "";

              common_name_str = (*iter)->common_name;
              bayer_designation_str = (*iter)->bayer_designation_greek_letter_tex;
              bayer_designation_str.append(" ");
              bayer_designation_str.append((*iter)->constellation_name_genitive);

/* !!START HERE:  LDF 2021.09.12.  Figure out a way to get large, bold italic Greek letters in headings. */
/* (Use \fam).  Also, try to get polaris into the generated files.                                       */ 

              if (common_name_str == bayer_designation_str)
                 bayer_designation_str = "";

              out_strm << "%% " << (*iter)->common_name << endl;

              out_strm << "\\bayertoks={" << bayer_designation_str << "}"
                       << "\\starinfo{" << u << (*iter)->approx_rank_apparent_magnitude << "}"
                       << "{" << (*iter)->approx_rank_apparent_magnitude << "}"
                       << "{" << common_name_str << "}"
                       << "{$" << (*iter)->right_ascension_hours << "\\rm{h}\\thinspace "
                       << (*iter)->right_ascension_minutes << "^\\prime\\thinspace "
                       << (*iter)->right_ascension_seconds << "^{\\prime\\prime}$}"
                       << "{$" << (*iter)->declination_degrees << "^\\circ\\thinspace "
                       << (*iter)->declination_minutes << "^\\prime\\thinspace "
                       << (*iter)->declination_seconds << "^{\\prime\\prime}$}"
                       << "{";

@q ******* (7) @>

              if ((    ((*iter)->right_ascension_decimal_degrees >= 337.5)
                    && ((*iter)->right_ascension_decimal_degrees  < 360.0))
                  || (   ((*iter)->right_ascension_decimal_degrees >= 0.0)
                      && ((*iter)->right_ascension_decimal_degrees  < 22.5)))
                 out_strm << "1/";

              else if (   ((*iter)->right_ascension_decimal_degrees >= 22.5)
                       && ((*iter)->right_ascension_decimal_degrees  < 67.5))
                 out_strm << "2/";

              else if (   ((*iter)->right_ascension_decimal_degrees >= 67.5)
                       && ((*iter)->right_ascension_decimal_degrees  < 112.5))
                 out_strm << "3/";

              else if (   ((*iter)->right_ascension_decimal_degrees >= 112.5)
                       && ((*iter)->right_ascension_decimal_degrees  < 157.5))
                 out_strm << "4/";

              else if (   ((*iter)->right_ascension_decimal_degrees >= 157.5)
                       && ((*iter)->right_ascension_decimal_degrees  < 202.5))
                 out_strm << "5/";

              else if (   ((*iter)->right_ascension_decimal_degrees >= 202.5)
                       && ((*iter)->right_ascension_decimal_degrees  < 247.5))
                 out_strm << "6/";

              else if (   ((*iter)->right_ascension_decimal_degrees >= 247.5)
                       && ((*iter)->right_ascension_decimal_degrees  < 292.5))
                 out_strm << "7/";

              else if (   ((*iter)->right_ascension_decimal_degrees >= 247.5)
                       && ((*iter)->right_ascension_decimal_degrees  < 337.5))
                 out_strm << "8/";


@q ******* (7) @>

              if (   ((*iter)->right_ascension_decimal_degrees >= 0.0)
                  && ((*iter)->right_ascension_decimal_degrees  <  22.5))
                 out_strm << "1";

              else if (   ((*iter)->right_ascension_decimal_degrees >= 22.5)
                       && ((*iter)->right_ascension_decimal_degrees  < 45.0))
                 out_strm << "2";

              else if (   ((*iter)->right_ascension_decimal_degrees >= 45.0)
                       && ((*iter)->right_ascension_decimal_degrees  < 67.5))
                 out_strm << "3";

              else if (   ((*iter)->right_ascension_decimal_degrees >= 67.5)
                       && ((*iter)->right_ascension_decimal_degrees  < 90.0))
                 out_strm << "4";

              else if (   ((*iter)->right_ascension_decimal_degrees >= 90.0)
                       && ((*iter)->right_ascension_decimal_degrees  < 112.5))
                 out_strm << "5";

              else if (   ((*iter)->right_ascension_decimal_degrees >= 112.5)
                       && ((*iter)->right_ascension_decimal_degrees  < 135.0))
                 out_strm << "6";

              else if (   ((*iter)->right_ascension_decimal_degrees >= 135.0)
                       && ((*iter)->right_ascension_decimal_degrees  < 157.5))
                 out_strm << "7";

              else if (   ((*iter)->right_ascension_decimal_degrees >= 157.5)
                       && ((*iter)->right_ascension_decimal_degrees  < 180.0))
                 out_strm << "8";

              else if (   ((*iter)->right_ascension_decimal_degrees >= 180.0)
                       && ((*iter)->right_ascension_decimal_degrees  < 202.5))
                 out_strm << "9";

              else if (   ((*iter)->right_ascension_decimal_degrees >= 202.5)
                       && ((*iter)->right_ascension_decimal_degrees  < 225.0))
                 out_strm << "10";

              else if (   ((*iter)->right_ascension_decimal_degrees >= 225.0)
                       && ((*iter)->right_ascension_decimal_degrees  < 247.5))
                 out_strm << "11";

              else if (   ((*iter)->right_ascension_decimal_degrees >= 247.5)
                       && ((*iter)->right_ascension_decimal_degrees  < 270.0))
                 out_strm << "12";

              else if (   ((*iter)->right_ascension_decimal_degrees >= 270.0)
                       && ((*iter)->right_ascension_decimal_degrees  < 292.5))
                 out_strm << "13";

              else if (   ((*iter)->right_ascension_decimal_degrees >= 292.5)
                       && ((*iter)->right_ascension_decimal_degrees  < 315.0))
                 out_strm << "14";

              else if (   ((*iter)->right_ascension_decimal_degrees >= 315.0)
                       && ((*iter)->right_ascension_decimal_degrees  < 337.5))
                 out_strm << "15";

              else if (   ((*iter)->right_ascension_decimal_degrees >= 337.5)
                       && ((*iter)->right_ascension_decimal_degrees  < 360.0))
                 out_strm << "16";

@q ******* (7) @>

              out_strm << "}"
                       << "{" << (*iter)->apparent_magnitude;


              if ((*iter)->apparent_magnitude_varies)
                  out_strm  << "v";

              out_strm << "}{" << (*iter)->absolute_magnitude;

              if ((*iter)->absolute_magnitude_varies)
                  out_strm  << "v";
 
              out_strm << "}{" << (*iter)->constellation_full_name << "}" << endl;


           }

@q ****** (6) @>
@
@<|query_database_for_stars| definition@>=

           out_strm << endl 
                    << "%% Local Variables:"       << endl 
                    << "%% mode:plain-TeX"         << endl 
                    << "%% auto-fill-function:nil" << endl 
                    << "%% abbrev-mode:t"          << endl 
                    << "%% End:"                   << endl 
                    << endl;

           out_strm.close();

           cerr << "Wrote TeX code to file " << temp_filename << endl;
 
@q ****** (6) @>

       }  /* |else| (or end-of-group) */

@q ***** (5) @>

   }  /* |if (write_tex > 0)|  */
     
@q **** (4) @>
@
@<|query_database_for_stars| definition@>=

#if 0 /* 1   */

   int prev_bs_hr_number = 0;

   cerr << "Duplicates:" << endl;

   for (vector<Star*>::iterator iter = star_vector.begin();
       iter != star_vector.end(); 
       ++iter)
   {
       if ((*iter)->bs_hr_number == prev_bs_hr_number)
          cerr << prev_bs_hr_number << endl;
        
       prev_bs_hr_number = (*iter)->bs_hr_number;
   }
#endif 

@q **** (4) @>

   if (DEBUG)
   { 
      cerr << "Exiting `query_database_for_stars' successfully with return value 0." 
           << endl;
   }  

   return 0;

}  /* End of |query_database_for_stars| definition  */





@q *** (3) @>

@q ** (2) @>
@
@c
@<Include files@>@;
typedef float real;
@<Global variable declarations@>@;
@<Function declarations@>@;
@<|main| definition@>@;
@<|submit_mysql_query| definition@>@;
@<|calculate_decimals| definition@>@;
@<|query_database_for_stars| definition@>@;

/* Local Variables:       */
/* mode:CWEB              */
/* auto-fill-function:nil */
/* End:                   */
