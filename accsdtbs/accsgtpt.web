@q accsgtpt.web @>
@q Created by Laurence D. Finston (LDF) Fri 10 Sep 2021 10:53:45 PM CEST @>

@q * (1) Process command line options.  @>

@q ** (2) Include files.  @>
@ Include files.  

@<Include files@>=

#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <getopt.h>
#include <errno.h>

#include <mysql.h>

#include <ios>
#include <iostream>
#include <iterator>
#include <new>
#include <exception>
#include <iomanip>
#include <sstream>   
#include <fstream>
#include <stdexcept>
#include <string> 
#include <cstring> 
#include <vector>
#include <deque>
#include <map>

using namespace std;

typedef void* yyscan_t;


#include "parser.hxx"
#include "scanner.hxx"
#include "stars.hxx"
#include "classes.hxx"


@q * (1) @>

@q ** (2) @>
@
@<Global variables@>=

extern const int STARS_QUERY    = 1;
extern const int POINTS_QUERY   = 2;
extern const int PATHS_QUERY    = 3;
extern const int PICTURES_QUERY = 4;

vector<string> where_str_vector;
vector<string> order_str_vector;
vector<int> query_type_vector;

int limit_stars         = 200;
int offset_stars        = 0;
int show_stars          = 0;  
int decimals_calculate  = 0;
int stars_query         = 0;
int points_query        = 0;
int paths_query         = 0;
int pictures_query      = 0;
int write_tex           = 0;
bool constellation_sort = false;

string instruction_filename;

@q ** (2) @>
@
@<|extern| declarations for global variables@>=

extern int limit_stars;
extern int offset_stars;
extern int show_stars;
extern int show_stars;
extern int decimals_calculate;
extern int stars_query;
extern int points_query;
extern int paths_query;
extern int pictures_query;
extern int write_tex;
extern int constellation_sort;
extern vector<string> where_str_vector;
extern vector<string> order_str_vector;
extern vector<int> query_type_vector;
extern const int STARS_QUERY;
extern const int POINTS_QUERY;
extern const int PATHS_QUERY;
extern const int PICTURES_QUERY;
extern const int PATHS_QUERY;

extern string instruction_filename;

@q * (1) @>
@ Process command line options.

@q ** (2) Declaration  @>
@
@<|process_command_line_options| declaration@>=
int
process_command_line_options(int argc, char *argv[]);

@q *** (3) Definition  @>
@
@<|process_command_line_options| definition@>=
int
process_command_line_options(int argc, char *argv[])
{
@q **** (4) @>

  bool DEBUG = true; /* |false| */ 

  IO_Type curr_io_type;

  int status = 0;
  int option_ctr = 0;

  string temp_str;

  const unsigned int HELP_INDEX  =  0;    
  const unsigned int TRACE_INDEX =  1;    

@q **** (4) Option struct.@>
@ Option struct.

@<|process_command_line_options| definition@>=

  static struct option long_options[] = {
    {"help", 0, 0, 0},
    {"trace", 0, 0, 0},
    {0, 0, 0, 0}
  };
  
  int option_index = 0;
  int this_option_optind = optind ? optind : 1;  

@q **** (4) Loop for handling options.@>
@*2 Loop for handling options.

@<|process_command_line_options| definition@>=

  while (1) 
  {
@q ***** (5) @>

    temp_str = "";

    option_ctr = getopt_long_only(argc, argv, "", long_options, &option_index);

    if (DEBUG)
    {
        cerr << "option_ctr == " << option_ctr << endl;
        cerr << "option_index == " << option_index << endl;
        if (optarg)
          cerr << "optarg == " << optarg << endl;
    }

@q ***** (5) @>

    if (option_ctr == -1)
    {
        if (DEBUG)
          cerr << "No more option arguments." << endl << endl ;
        break;
    }

@q ***** (5) @>

    if (option_ctr == 0)
    {
        if (DEBUG)
          {
            cerr << "option \"" << long_options[option_index].name << "\"";
            if (optarg)
              cerr << " with arg \"" << optarg << "\"";
            cerr << endl;
          }

@q ***** (5) @>
@
@<|process_command_line_options| definition@>=

        if (option_index == HELP_INDEX)
        {
            cerr << "accsdtbs 1.0" << endl 
                 << "Valid options for accsdtbs are:" << endl
                 << endl 
                 << "--help:  Prints this message and exits with exit status 0." << endl 
                 << endl; 

            if (DEBUG)
            {
               cerr << "Exiting `accsdtb' successfully with exit status 0." << endl;
            }
 
            exit(0);

        } /* |if (option_index == HELP_INDEX)|  */


@q ***** (5) @>
@
@<|process_command_line_options| definition@>=

        else if (option_index == TRACE_INDEX)
        {

            if (DEBUG)
            { 
               cerr << "Option:  `trace'.  Setting `trace_value' = 1."
                    << endl; 
            }  

            trace_value = 1;

        } /* |else if (option_index == TRACE_INDEX)|  */

@q ***** (5) Invalid option_index value.@>
@ Invalid {\tt option\_index} value.

@<|process_command_line_options| definition@>=

        else 
        {
            cerr << "ERROR!  In `process_command_line_options':" << endl 
                 << "option_index has invalid value: "
                 << option_index << endl
                 << "Will try to continue." 
                 << endl << endl ;
        }

    }  /* |if (option_ctr == 0)|  */

@q ***** (5) Ambiguous option.@>
@ Ambiguous option.

@<|process_command_line_options| definition@>=

    else if (option_ctr == '?')
    {
        cerr << "`getopt_long_only' returned ambiguous match. Breaking."
             << endl << endl ;
        break;
    }

@q ***** (5) Invalid option.@>
@ Invalid option.

@<|process_command_line_options| definition@>=

    else
    {
       cerr << "`getopt_long_only' returned invalid option."
            << endl ;
    }

@q ***** (5) End of while loop.@>
@ End of while loop.
@<|process_command_line_options| definition@>=

   }  /* |while|  */

@q **** (4) Non-option arguments.@>
@*2 Non-option arguments.

@<|process_command_line_options| definition@>=

@q  *** (3) Non-option command line arguments.   @>
        
@q  **** (4)  @>

  if (optind < argc)
  {
@q  ***** (5)  @>

       if (DEBUG)
       {
          cerr << "non-option ARGV-elements: ";

       }  /* |if (DEBUG)|  */ 

       int j = optind;

@q  ***** (5)  @>

       for (int i = 0; j < argc;  ++i, ++j)
       {
@q  ****** (6)  @>

           if (DEBUG)
           {
               cerr << "argv[" << j << "] == " << argv[j] << endl
                    << "strlen(argv[j]) == " << strlen(argv[j]) << endl;

           }  /* |if (DEBUG)|  */ 

           curr_io_type.in_filename.assign(argv[j]);
           io_deque.push_back(curr_io_type);


@q  ****** (6)  @>


       }  /* |for| */ 
   
@q  ***** (5)  @>
 
  } /* |if (optind < argc)|  */
  
@q **** (4) @>

   if (DEBUG)
   { 
      cerr << "io_deque.size() == " << io_deque.size() << endl;
   }  

@q **** (4) @>
@
@<|process_command_line_options| definition@>=

    if (DEBUG)
    {
      cerr << "Exiting 'process_command_line_options' successfully with return value 0."  << endl;
    }

    return 0;

}  /* End of |process_command_line_options| definition.  */

@q *** (3) @>

@q ** (2) @>

@q * (1) @>

@q ** (2) @>
@
@(accsgtpt.hxx@>=
@<|extern| declarations for global variables@>@;
@<|process_command_line_options| declaration@>@;

@q ** (2) @>
@
@c
typedef float real;
class Scanner_Type;
typedef Scanner_Type *Scanner_Node;
@<Include files@>@;
@<Global variables@>@;
extern int trace_value;
@<|process_command_line_options| definition@>@;


/* Local Variables:       */
/* mode:CWEB              */
/* auto-fill-function:nil */
/* End:                   */
