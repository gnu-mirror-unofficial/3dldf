@q accsgtpt.web @>
@q Created by Laurence D. Finston (LDF) Fri 10 Sep 2021 10:53:45 PM CEST @>

@q * (1) Process command line options.  @>

@q ** (2) Include files.  @>
@ Include files.  

@<Include files@>=

#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <getopt.h>
#include <errno.h>

#include <mysql.h>

#include <ios>
#include <iostream>
#include <iterator>
#include <new>
#include <exception>
#include <iomanip>
#include <sstream>   
#include <fstream>
#include <stdexcept>
#include <string> 
#include <cstring> 
#include <vector>
#include <deque>

using namespace std;

typedef void* yyscan_t;

#include "parser.hxx"
#include "scanner.hxx"
#include "classes.hxx"


@q * (1) @>

@q ** (2) @>
@
@<Global variables@>=

extern const int STARS_QUERY    = 1;
extern const int POINTS_QUERY   = 2;
extern const int PATHS_QUERY    = 3;
extern const int PICTURES_QUERY = 4;

vector<string> where_str_vector;
vector<string> order_str_vector;
vector<int> query_type_vector;

int limit_stars         = 200;
int offset_stars        = 0;
int show_stars          = 0;  
int decimals_calculate  = 0;
int stars_query         = 0;
int points_query        = 0;
int paths_query         = 0;
int pictures_query      = 0;
int write_tex           = 0;
bool constellation_sort = false;

string instruction_filename;

@q ** (2) @>
@
@<|extern| declarations for global variables@>=

extern int limit_stars;
extern int offset_stars;
extern int show_stars;
extern int show_stars;
extern int decimals_calculate;
extern int stars_query;
extern int points_query;
extern int paths_query;
extern int pictures_query;
extern int write_tex;
extern int constellation_sort;
extern vector<string> where_str_vector;
extern vector<string> order_str_vector;
extern vector<int> query_type_vector;
extern const int STARS_QUERY;
extern const int POINTS_QUERY;
extern const int PATHS_QUERY;
extern const int PICTURES_QUERY;
extern const int PATHS_QUERY;

extern string instruction_filename;

@q * (1) @>
@ Process command line options.

@q ** (2) Declaration  @>
@
@<|process_command_line_options| declaration@>=
int
process_command_line_options(int argc, char *argv[]);

@q *** (3) Definition  @>
@
@<|process_command_line_options| definition@>=
int
process_command_line_options(int argc, char *argv[])
{
@q **** (4) @>

  bool DEBUG = true; /* |false| */ 

  int status = 0;
  int option_ctr = 0;

  string temp_str;

  const unsigned int HELP_INDEX                  =  0;    
  const unsigned int WHERE_INDEX                 =  1;
  const unsigned int NO_WHERE_INDEX              =  2;
  const unsigned int ORDER_BY_INDEX              =  3;
  const unsigned int LIMIT_INDEX                 =  4;
  const unsigned int OFFSET_INDEX                =  5;
  const unsigned int SHOW_STARS_INDEX            =  6;
  const unsigned int DECIMALS_CALCULATE_INDEX    =  7;
  const unsigned int STARS_QUERY_INDEX           =  8;
  const unsigned int POINTS_QUERY_INDEX          =  9;
  const unsigned int PATHS_QUERY_INDEX           = 10;
  const unsigned int PICTURES_QUERY_INDEX        = 11;
  const unsigned int WRITE_TEX_INDEX             = 12; 
  const unsigned int CONSTELLATION_SORT_INDEX    = 13; 
  const unsigned int INSTRUCTION_FILE_INDEX      = 14;     

@q **** (4) Option struct.@>
@ Option struct.

@<|process_command_line_options| definition@>=

  static struct option long_options[] = {
    {"help", 0, 0, 0},
    {"where", 2, 0, 0},
    {"no-where", 0, 0, 0},
    {"order-by", 2, 0, 0},
    {"limit", 1, 0, 0},
    {"offset", 1, 0, 0},
    {"show-stars", 2, 0, 0},
    {"decimals-calculate", 0, 0, 0},
    {"stars-query", 0, 0, 0},    
    {"points-query", 0, 0, 0},    
    {"paths-query", 0, 0, 0},    
    {"pictures-query", 0, 0, 0},
    {"write-tex", 2, 0, 0},
    {"constellation-sort", 0, 0, 0},
    {"instruction-file", 1, 0, 0},
    {0, 0, 0, 0}
  };
  
  int option_index = 0;
  int this_option_optind = optind ? optind : 1;  

@q **** (4) Loop for handling options.@>
@*2 Loop for handling options.

@<|process_command_line_options| definition@>=

  while (1) 
  {
@q ***** (5) @>

    temp_str = "";

    option_ctr = getopt_long_only(argc, argv, "", long_options, &option_index);

    if (DEBUG)
    {
        cerr << "option_ctr == " << option_ctr << endl;
        cerr << "option_index == " << option_index << endl;
        if (optarg)
          cerr << "optarg == " << optarg << endl;
    }

@q ***** (5) @>

    if (option_ctr == -1)
    {
        if (DEBUG)
          cerr << "No more option arguments." << endl << endl ;
        break;
    }

@q ***** (5) @>

    if (option_ctr == 0)
    {
        if (DEBUG)
          {
            cerr << "option \"" << long_options[option_index].name << "\"";
            if (optarg)
              cerr << " with arg \"" << optarg << "\"";
            cerr << endl;
          }

@q ***** (5) @>
@
@<|process_command_line_options| definition@>=

        if (option_index == HELP_INDEX)
        {
            cerr << "accsdtbs 1.0" << endl 
                 << "Valid options for accsdtbs are:" << endl
                 << endl 
                 << "--help:                Prints this message and exits with exit status 0." << endl 
                 << endl 
                 << "--where:               `where' clause for database query (without keyword \"where\")." << endl
                 << "                       Optional argument.  If omitted, the default is used." 
                 << endl << endl 
                 << "--no-where:            Suppress `where' clause for database query." << endl << endl 
                 << "--order-by:            `order by' clause for database query (without keywords \"order by\")." << endl 
                 << "                       Optional argument.  If omitted, the default is used." 
                 << endl << endl 
                 << "--limit:               `limit' clause for database query (integer > 0)." << endl << endl 
                 << "--offset:              `offset' clause for database query (integer > 0)." << endl << endl 
                 << "--show-stars:          Show the `Stars' returned by the database query (optional argument:  integer)." 
                 << endl << endl 
                 << "--decimals-calculate:  Calculate right ascension and declination decimal degrees" << endl 
                 << "                       for the `Stars' returned by the database query." << endl << endl 
                 << "--stars-query:         Query the database for `Stars'." << endl << endl
                 << "--points-query:        Query the database for `Points'." << endl << endl
                 << "--paths-query:         Query the database for `Paths'." << endl << endl
                 << "--pictures-query:      Query the database for `Pictures'." << endl << endl
                 << "--write-tex:           Write TeX file with calls to the macro \"\\starinfo\"" << endl
                 << "                       (optional argument:  integer)." << endl 
                 << "--constellation-sort:  Sort stars by constellation full name." << endl << endl 
                 << "--instruction-file:    Ignore other command-line options and read instructions from" << endl 
                 << "                       the file specified in the required argument." << endl 
                 << endl; 

            if (DEBUG)
            {
               cerr << "Exiting `accsdtb' successfully with exit status 0." << endl;
            }
 
            exit(0);

        } /* |if (option_index == HELP_INDEX)|  */

@q ***** (5) @>
@
@<|process_command_line_options| definition@>=

        else if (option_index == WHERE_INDEX)
        {
            cerr << "`option_index' == `WHERE_INDEX'" << endl;

            temp_str = "";

            if (optarg && strlen(optarg) > 0)
            {
               temp_str = optarg;
            }  
            else
               temp_str = "approx_rank_apparent_magnitude > 0 and approx_rank_apparent_magnitude <= 200";

            temp_str.insert(0, "where ");

            if (DEBUG)
            { 
               cerr << "`temp_str' == " <<  temp_str << endl;
            }

            where_str_vector.push_back(temp_str);


        } /* |else if (option_index == WHERE_INDEX)|  */

@q ***** (5) @>
@
@<|process_command_line_options| definition@>=

        else if (option_index == NO_WHERE_INDEX)
        {
            cerr << "`option_index' == `NO_WHERE_INDEX'" << endl;

            where_str_vector.push_back("");

        } /* |else if (option_index == NO_WHERE_INDEX)|  */


@q ***** (5) @>
@
@<|process_command_line_options| definition@>=

        else if (option_index == ORDER_BY_INDEX)
        {
            cerr << "`option_index' == `ORDER_BY_INDEX'" << endl;

            temp_str = "";

            if (optarg && strlen(optarg) > 0)
            {
               temp_str = optarg;
            }  
            else
               temp_str = "approx_rank_apparent_magnitude";

            temp_str.insert(0, "order_by ");

            if (DEBUG)
            { 
               cerr << "`temp_str' == " <<  temp_str << endl;
            }

            order_str_vector.push_back(temp_str);

        } /* |else if (option_index == ORDER_BY_INDEX)|  */

@q ***** (5) @>
@
@<|process_command_line_options| definition@>=

        else if (option_index == LIMIT_INDEX)
        {
            cerr << "`option_index' == `LIMIT_INDEX'" << endl;

            limit_stars = atoi(optarg);

            if (DEBUG)
            { 
               cerr << "`limit_stars' == " <<  limit_stars << endl;
            }          

        } /* |else if (option_index == LIMIT_INDEX)|  */

@q ***** (5) @>
@
@<|process_command_line_options| definition@>=

        else if (option_index == OFFSET_INDEX)
        {
            cerr << "`option_index' == `OFFSET_INDEX'" << endl;

            offset_stars = atoi(optarg);

            if (DEBUG)
            { 
               cerr << "`offset_stars' == " <<  offset_stars << endl;
            }          

        } /* |else if (option_index == OFFSET_INDEX)|  */

@q ***** (5) @>
@
@<|process_command_line_options| definition@>=

        else if (option_index == SHOW_STARS_INDEX)
        {
            cerr << "`option_index' == `SHOW_STARS_INDEX'" << endl;

            if (optarg && strlen(optarg) > 0)
               show_stars = atoi(optarg);
            else
               show_stars = 1;

            if (DEBUG)
            { 
               cerr << "`show_stars' == " << show_stars << endl;
            }


        } /* |else if (option_index == SHOW_STARS_INDEX)|  */

@q ***** (5) @>
@
@<|process_command_line_options| definition@>=

        else if (option_index == DECIMALS_CALCULATE_INDEX)
        {
            cerr << "`option_index' == `DECIMALS_CALCULATE_INDEX'" << endl;

            decimals_calculate = 1;

        } /* |else if (option_index == DECIMALS_CALCULATE_INDEX)|  */

@q ***** (5) @>
@
@<|process_command_line_options| definition@>=

        else if (option_index == STARS_QUERY_INDEX)
        {
            cerr << "`option_index' == `STARS_QUERY_INDEX'" << endl;

            query_type_vector.push_back(STARS_QUERY); 

            stars_query = 1;

        } /* |else if (option_index == STARS_QUERY_INDEX)|  */

@q ***** (5) @>
@
@<|process_command_line_options| definition@>=

        else if (option_index == POINTS_QUERY_INDEX)
        {
            cerr << "`option_index' == `POINTS_QUERY_INDEX'" << endl;

            query_type_vector.push_back(POINTS_QUERY); 

            points_query = 1;

        } /* |else if (option_index == POINTS_QUERY_INDEX)|  */

@q ***** (5) @>
@
@<|process_command_line_options| definition@>=

        else if (option_index == PATHS_QUERY_INDEX)
        {
            cerr << "`option_index' == `PATHS_QUERY_INDEX'" << endl;

            query_type_vector.push_back(PATHS_QUERY); 

            paths_query = 1;

        } /* |else if (option_index == PATHS_QUERY_INDEX)|  */

@q ***** (5) @>
@
@<|process_command_line_options| definition@>=

        else if (option_index == PICTURES_QUERY_INDEX)
        {
            cerr << "`option_index' == `PICTURES_QUERY_INDEX'" << endl;

            query_type_vector.push_back(PICTURES_QUERY); 

            pictures_query = 1;

        } /* |else if (option_index == PICTURES_QUERY_INDEX)|  */

@q ***** (5) @>
@
@<|process_command_line_options| definition@>=

        else if (option_index == WRITE_TEX_INDEX)
        {
            cerr << "`option_index' == `WRITE_TEX_INDEX'" << endl;

            if (optarg && strlen(optarg) > 0)
               write_tex = atoi(optarg);
            else
               write_tex = 1;

            if (DEBUG)
            { 
               cerr << "`write_tex' == " << write_tex << endl;
            }

        } /* |else if (option_index == WRITE_TEX_INDEX)|  */

@q ***** (5) @>
@
@<|process_command_line_options| definition@>=

        else if (option_index == CONSTELLATION_SORT_INDEX)
        {
            cerr << "`option_index' == `CONSTELLATION_SORT_INDEX'" << endl;

            constellation_sort = true;

        } /* |else if (option_index == CONSTELLATION_SORT_INDEX)|  */

@q ***** (5) @>
@
@<|process_command_line_options| definition@>=

        else if (option_index == INSTRUCTION_FILE_INDEX)
        {
            cerr << "`option_index' == `INSTRUCTION_FILE_INDEX'" << endl;

            instruction_filename = optarg;

            if (DEBUG)
            { 
               cerr << "`instruction_filename' == " << instruction_filename << endl;
cerr << "XXX Enter <RETURN> to continue: ";
getchar(); 
            }          

        } /* |else if (option_index == INSTRUCTION_FILE_INDEX)|  */

@q ***** (5) Invalid option_index value.@>
@ Invalid {\tt option\_index} value.

@<|process_command_line_options| definition@>=

        else 
        {
            cerr << "ERROR!  In `process_command_line_options':" << endl 
                 << "option_index has invalid value: "
                 << option_index << endl
                 << "Will try to continue." 
                 << endl << endl ;
        }

    }  /* |if (option_ctr == 0)|  */

@q ***** (5) Ambiguous option.@>
@ Ambiguous option.

@<|process_command_line_options| definition@>=

    else if (option_ctr == '?')
    {
        cerr << "`getopt_long_only' returned ambiguous match. Breaking."
             << endl << endl ;
        break;
    }

@q ***** (5) Invalid option.@>
@ Invalid option.

@<|process_command_line_options| definition@>=

    else
    {
       cerr << "`getopt_long_only' returned invalid option."
            << endl ;
    }

@q ***** (5) End of while loop.@>
@ End of while loop.
@<|process_command_line_options| definition@>=

   }  /* |while|  */

@q **** (4) Non-option arguments.@>
@*2 Non-option arguments.

@<|process_command_line_options| definition@>=
        
     if (optind < argc)
     {
         if (DEBUG)
           cerr << "non-option ARGV-elements: ";

         for (int i = 0; optind < argc; ++i, ++optind)
         {
             if (DEBUG)
             {
               cerr << "argv[" << optind << "] == " << argv[optind] << endl ;
               cerr << "strlen(argv[optind]) == " << strlen(argv[optind]) << endl;
             }

         } /* |for| */ 
            
     }  

@q **** (4) @>
@
@<|process_command_line_options| definition@>=

    if (DEBUG)
    {
      cerr << "Exiting 'process_command_line_options' successfully with return value 0."  << endl;
    }

    return 0;

}  /* End of |process_command_line_options| definition.  */

@q *** (3) @>

@q ** (2) @>

@q * (1) @>

@q ** (2) @>
@
@(accsgtpt.hxx@>=
@<|extern| declarations for global variables@>@;
@<|process_command_line_options| declaration@>@;

@q ** (2) @>
@
@c
@<Include files@>@;
@<Global variables@>@;
@<|process_command_line_options| definition@>@;


/* Local Variables:       */
/* mode:CWEB              */
/* auto-fill-function:nil */
/* End:                   */
