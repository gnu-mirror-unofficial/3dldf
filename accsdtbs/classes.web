@q classes.web @>
          
@q Created by Laurence D. Finston (LDF) Wed 15 Sep 2021 02:30:53 PM CEST @>

@q * (1) Copyright and License. @>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing.  @>
@q Copyright (C) 2021 The Free Software Foundation, Inc. @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify  @>
@q it under the terms of the GNU General Public License as published by  @>
@q the Free Software Foundation; either version 3 of the License, or  @>
@q (at your option) any later version.   @>

@q GNU 3DLDF is distributed in the hope that it will be useful,  @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of  @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  @>
@q GNU General Public License for more details.   @>

@q You should have received a copy of the GNU General Public License  @>
@q along with GNU 3DLDF; if not, write to the Free Software  @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q GNU 3DLDF is a GNU package.   @>
@q It is part of the GNU Project of the   @>
@q Free Software Foundation  @>
@q and is published under the GNU General Public License.  @>
@q See the website http://www.gnu.org  @>
@q for more information.    @>
@q GNU 3DLDF is available for downloading from  @>
@q http://www.gnu.org/software/3dldf/LDF.html. @>

@q Please send bug reports to Laurence.Finston@gmx.de @>
@q The mailing list help-3dldf@gnu.org is available for people to  @>
@q ask other users for help.   @>
@q The mailing list info-3dldf@gnu.org is for sending  @>
@q announcements to users. To subscribe to these mailing lists, send an  @>
@q email with ``subscribe <email-address>'' as the subject.   @>

@q The author can be contacted at:     @>

@q Laurence D. Finston 		       @>
@q c/o Free Software Foundation, Inc.  @>
@q 51 Franklin St, Fifth Floor 	       @>
@q Boston, MA  02110-1301  	       @>
@q USA                                 @>                             

@q Laurence.Finston@gmx.de  @>



@q * (1)  Include files.@>
@ Include files.

@<Include files@>=

#include <stdlib.h>
#include <stdio.h>
#include <mysql.h>
#include <errno.h>
#include <float.h>
#include <fstream>
#include <limits.h>
#include <stdarg.h>
#include <stdexcept>

#include <mysql.h>

#include <algorithm>
#include <exception>
#include <functional>
#include <iomanip>
#include <ios>
#include <iostream>
#include <iterator>
#include <new>
#include <sstream>   
#include <fstream>   
#include <string> 
#include <vector>
#include <deque>

using namespace std;

#include "../config.h"

typedef void* yyscan_t;  

#include "parser.hxx"
#include "scanner.hxx"

@q * (1) Class declarations.  @>
@* Class declarations.
\initials{LDF 2021.08.15.}

@q ** (2) @>

@
@<class declarations@>=
struct
IO_Type
{
   string in_filename;
   string out_filename;

   FILE *in_file;

   long in_file_pos;

   ofstream out_file_tex;
   ofstream out_file_html;

   IO_Type(void) {in_file_pos = 0; in_file = static_cast<FILE *>(0); return;}
   IO_Type(const IO_Type &i) {in_filename = i.in_filename; 
                              out_filename = i.out_filename; 
                              in_file = 0;
                              in_file_pos = 0;
                              return;}

};


@q ** (2) @>

@*1 |class Scanner_Type|.
@
@<class declarations@>=
class
Scanner_Type
{
    friend int yyparse(yyscan_t);
    friend int yylex(YYSTYPE* lvalp, yyscan_t parameter);
    friend int main(int argc, char *argv[]);

    int id;
  
    bool end_flag;

    string input_filename;

    public:

       Scanner_Type(void) {id = 0; end_flag = false; return;};
       Scanner_Type(int i) : id(i) {end_flag = false; return;};

       int clear(void) {id = 0; end_flag = false; return 0;};

};

typedef Scanner_Type *Scanner_Node;

@q ** (2) @>
@
@<|class Star| declaration@>=

class Star
{

      friend int main(int argc, char *argv[]);
      friend int calculate_decimals(void);
      friend int query_database_for_stars(string wwhere_str, string oorder_str, int llimit_stars, int ooffset_stars);

      friend bool compare_star_constant_name(Star *, Star *);
      friend bool compare_common_name(Star *s, Star *);
      friend bool compare_flamsteed_designation_number(Star *s, Star *);
      friend bool compare_bayer_designation_greek_letter(Star *s, Star *);
      friend bool compare_bayer_designation_greek_letter_tex(Star *s, Star *);
      friend bool compare_bs_hr_number(Star *s, Star *);
      friend bool compare_bs_number(Star *s, Star *);
      friend bool compare_hr_number(Star *s, Star *);
      friend bool compare_approx_rank_apparent_magnitude(Star *s, Star *);
      friend bool compare_apparent_magnitude(Star *s, Star *); 
      friend bool compare_absolute_magnitude(Star *s, Star *);     
      friend bool compare_constellation_abbreviation(Star *s, Star *);
      friend bool compare_constellation_full_name(Star *s, Star *);
      friend bool compare_constellation_name_genitive(Star *s, Star *);
      friend bool compare_constellation_number(Star *s, Star *);
      friend bool compare_right_ascension_hours(Star *s, Star *t);
      friend bool compare_right_ascension_minutes(Star *s, Star *t);
      friend bool compare_right_ascension_seconds(Star *s, Star *t);
      friend bool compare_right_ascension_decimal_hours(Star *s, Star *t);
      friend bool compare_right_ascension_decimal_degrees(Star *s, Star *t);
      friend bool compare_declination_degrees(Star *s, Star *t);
      friend bool compare_declination_minutes(Star *s, Star *t);
      friend bool compare_declination_seconds(Star *s, Star *t);
      friend bool compare_declination_decimal_degrees(Star *s, Star *t);
      friend bool compare_is_binary(Star *s, Star *t);

      string common_name;                                   
      string greek_name;                                    
      string latin_name;                                    
      string arabic_name;                                   
      int flamsteed_designation_number;                     
      string bayer_designation_greek_letter;                
      string bayer_designation_greek_letter_tex;            
      string bayer_designation_extension;
      int bs_hr_number;                                     
      int approx_rank_apparent_magnitude;                   
      real apparent_magnitude;                              
      real absolute_magnitude;                              
      bool apparent_magnitude_varies;                       
      bool absolute_magnitude_varies;                       
      string constellation_abbreviation;                    
      string constellation_full_name;                       
      string constellation_name_genitive;                   
      int constellation_number;                             
      int right_ascension_hours;                            
      int right_ascension_minutes;                          
      real right_ascension_seconds;                         
      real right_ascension_decimal_hours;                   
      real right_ascension_decimal_degrees;                 
      int declination_degrees;                              
      int declination_minutes;                              
      real declination_seconds;                             
      real declination_decimal_degrees;                     
      int is_binary;                                        
      int is_multiple;
      int is_binary_component;
      int is_eclipsing_binary; 
      string notes;                                                              

   public:                                                  
                                                            
      @<Declare |Star| functions@>@;                        


};

@q ** (2) Star functions.  @>
@ Star functions.  

@q *** (3) Set @>
@ Set.

@q **** (4) Declaration  @>

@<Declare |Star| functions@>=
int 
set(MYSQL_ROW curr_row);

@q **** (4) Definition  @>
@
@<Define |Star| functions@>=
int
Star::set(MYSQL_ROW curr_row)
{
@q ***** (5) @>

   bool DEBUG = false;  /* |true|  */

   if (DEBUG)
      cerr << "Entering `Star::set'." << endl;

   if (curr_row == 0)
   {
       cerr << "ERROR!  In `Star::set':"
                 << endl
                 << "`curr_row' is NULL.  Can't set `Star'."
                 << endl 
                 << "Exiting program unsuccessfully with exit status 1."
                 << endl;

       return 1;

   }

@q ***** (5) @>

      int i = 0;

      common_name = curr_row[i++];
      greek_name = curr_row[i++];
      latin_name = curr_row[i++];
      arabic_name = curr_row[i++];
      flamsteed_designation_number = atoi(curr_row[i++]);
      bayer_designation_greek_letter = curr_row[i++];
      bayer_designation_greek_letter_tex = curr_row[i++];
      bayer_designation_extension = curr_row[i++];
      bs_hr_number = atoi(curr_row[i++]);
      approx_rank_apparent_magnitude = atoi(curr_row[i++]);
      apparent_magnitude = atof(curr_row[i++]);
      absolute_magnitude = atof(curr_row[i++]);
      apparent_magnitude_varies = static_cast<bool>(atoi(curr_row[i++]));
      absolute_magnitude_varies = static_cast<bool>(atoi(curr_row[i++]));
      constellation_abbreviation = curr_row[i++];
      constellation_full_name = curr_row[i++];
      constellation_name_genitive = curr_row[i++];
      constellation_number = atoi(curr_row[i++]);
      right_ascension_hours = atoi(curr_row[i++]);
      right_ascension_minutes = atoi(curr_row[i++]);
      right_ascension_seconds = atof(curr_row[i++]);
      right_ascension_decimal_hours = atof(curr_row[i++]);
      right_ascension_decimal_degrees = atof(curr_row[i++]);
      declination_degrees = atoi(curr_row[i++]);
      declination_minutes = atoi(curr_row[i++]);
      declination_seconds = atof(curr_row[i++]);
      declination_decimal_degrees = atof(curr_row[i++]);
      is_binary = atoi(curr_row[i++]);
      is_multiple = atoi(curr_row[i++]);
      is_binary_component = atoi(curr_row[i++]);
      is_eclipsing_binary = atoi(curr_row[i++]);
      notes = curr_row[i++];

@q ***** (5) @>

   return 0;

}  /* End of |Star::set| definition  */

@q ** (2) @>
@
@<Declare |Star| functions@>=
void 
show(string text) const;

@
@<Define |Star| functions@>=
void 
Star::show(string text) const
{

    bool DEBUG = false; /* |true| */ 

    if (DEBUG)
       cerr << "Entering `Star::show'." << endl;

    if (text == "")
       text = "Star:";

    cerr << "common_name:                         " << common_name << endl
         << "greek_name:                          " << greek_name << endl 
         << "latin_name:                          " << latin_name << endl 
         << "arabic_name:                         " << arabic_name << endl 
         << "flamsteed_designation_number:        " << flamsteed_designation_number << endl 
         << "bayer_designation_greek_letter:      " << bayer_designation_greek_letter << endl 
         << "bayer_designation_greek_letter_tex:  " << bayer_designation_greek_letter_tex << endl 
         << "bayer_designation_extension:         " << bayer_designation_extension << endl 
         << "bs_hr_number:                        " << bs_hr_number << endl 
         << "approx_rank_apparent_magnitude:      " << approx_rank_apparent_magnitude << endl 
         << "apparent_magnitude:                  " << apparent_magnitude << endl 
         << "absolute_magnitude:                  " << absolute_magnitude << endl 
         << "apparent_magnitude_varies:           " << apparent_magnitude_varies << endl 
         << "absolute_magnitude_varies:           " << absolute_magnitude_varies << endl 
         << "constellation_abbreviation:          " << constellation_abbreviation << endl 
         << "constellation_full_name:             " << constellation_full_name << endl 
         << "constellation_name_genitive:         " << constellation_name_genitive << endl 
         << "constellation_number:                " << constellation_number << endl 
         << "right_ascension_hours:               " << right_ascension_hours << endl 
         << "right_ascension_minutes:             " << right_ascension_minutes << endl 
         << "right_ascension_seconds:             " << right_ascension_seconds << endl 
         << "right_ascension_decimal_hours:       " << right_ascension_decimal_hours << endl 
         << "right_ascension_decimal_degrees:     " << right_ascension_decimal_degrees << endl 
         << "declination_degrees:                 " << declination_degrees << endl 
         << "declination_minutes:                 " << declination_minutes << endl 
         << "declination_seconds:                 " << declination_seconds << endl 
         << "declination_decimal_degrees:         " << declination_decimal_degrees << endl 
         << "is_binary:                           " << is_binary << endl
         << "is_multiple:                         " << is_multiple << endl 
         << "is_binary_component:                 " << is_binary_component << endl 
         << "is_eclipsing_binary:                 " << is_eclipsing_binary << endl 
         << "notes:                               " << notes << endl 
         << endl; 

    if (DEBUG)
       cerr << "Exiting `Star::show' successfully with void return value." << endl;

    return;

} /* End of |Star::show| definition.  */

@q *** (3) operator==@>
@ Equality operator (|operator==|).
\initials{LDF 2021.06.24.}

\LOG
\initials{LDF 2021.06.24.}
Added this function.
\ENDLOG

@q **** (4) Declaration  @>

@<Declare |Star| functions@>=
bool
operator==(const Star &s);

@q **** (4) Definition.  @>
@
@<Define |Star| functions@>= 
bool
Star::operator==(const Star &s)
{
   if (bs_hr_number > 0 && s.bs_hr_number > 0 && bs_hr_number == s.bs_hr_number)
   {
      return true;
   }

   if (common_name != "" && s.common_name != "" && common_name == s.common_name)
   {
      return true;
   }

   if (   bayer_designation_greek_letter     != "" && bayer_designation_greek_letter ==  s.bayer_designation_greek_letter
       && bayer_designation_greek_letter_tex != "" && bayer_designation_greek_letter_tex ==  s.bayer_designation_greek_letter_tex
       && constellation_name_genitive        != "" && s.constellation_name_genitive != ""
       && constellation_name_genitive        == s.constellation_name_genitive)
   {
     return true;
   }   

   return false;
}

@q ** (2) Comparison functions for |class Star|.  @>
@ Comparison functions for |class Star|.

@q *** (3) Compare |common_name|.@>
@*7 Compare |common_name|.
\initials{LDF 2021.06.22.}

\LOG
\initials{LDF 2021.06.22.}
Added this function.
\ENDLOG

@q **** (4) Declaration.  @>
@
@<Declare non-member functions for |class Star|@>=
bool
compare_common_name(Star *s, Star *t);

@q **** (4) Definition.  @>
@
@<Define non-member functions for |class Star|@>=
bool
compare_common_name(Star *s, Star *t)
{
   return s->common_name < t->common_name;
}

@q *** (3) Compare |flamsteed_designation_number|.@>
@*7 Compare |flamsteed_designation_number|.
\initials{LDF 2021.06.22.}

\LOG
\initials{LDF 2021.06.22.}
Added this function.
\ENDLOG

@q **** (4) Declaration.  @>
@
@<Declare non-member functions for |class Star|@>=
bool
compare_flamsteed_designation_number(Star *s, Star *t);

@q **** (4) Definition.  @>
@
@<Define non-member functions for |class Star|@>=
bool
compare_flamsteed_designation_number(Star *s, Star *t)
{
   return s->flamsteed_designation_number < t->flamsteed_designation_number;
}

@q *** (3) Compare |bayer_designation_greek_letter|.@>
@*7 Compare |bayer_designation_greek_letter|.
\initials{LDF 2021.06.22.}

\LOG
\initials{LDF 2021.06.22.}
Added this function.
\ENDLOG

@q **** (4) Declaration.  @>
@
@<Declare non-member functions for |class Star|@>=
bool
compare_bayer_designation_greek_letter(Star *s, Star *t);

@q **** (4) Definition.  @>
@
@<Define non-member functions for |class Star|@>=
bool
compare_bayer_designation_greek_letter(Star *s, Star *t)
{
   return s->bayer_designation_greek_letter < t->bayer_designation_greek_letter;
}


@q *** (3) Compare |bayer_designation_greek_letter_tex|.@>
@*7 Compare |bayer_designation_greek_letter_tex|.
\initials{LDF 2021.09.08.}

\LOG
\initials{LDF 2021.09.08.}
Added this function.
\ENDLOG

@q **** (4) Declaration.  @>
@
@<Declare non-member functions for |class Star|@>=
bool
compare_bayer_designation_greek_letter_tex(Star *s, Star *t);

@q **** (4) Definition.  @>
@
@<Define non-member functions for |class Star|@>=
bool
compare_bayer_designation_greek_letter_tex(Star *s, Star *t)
{
   return s->bayer_designation_greek_letter_tex < t->bayer_designation_greek_letter_tex;
}


@q *** (3) Compare |bs_hr_number|.@>
@*7 Compare |bs_hr_number|.
\initials{LDF 2021.06.22.}

\LOG
\initials{LDF 2021.06.22.}
Added this function.
\ENDLOG

@q **** (4) Declaration.  @>
@
@<Declare non-member functions for |class Star|@>=
bool
compare_bs_hr_number(Star *s, Star *t);

@q **** (4) Definition.  @>
@
@<Define non-member functions for |class Star|@>=
bool
compare_bs_hr_number(Star *s, Star *t)
{
   return s->bs_hr_number < t->bs_hr_number;
}

@q *** (3) Compare |bs_number|.@>
@*7 Compare |bs_number|.
\initials{LDF 2021.06.22.}

\LOG
\initials{LDF 2021.06.22.}
Added this function.
\ENDLOG

@q **** (4) Declaration.  @>
@
@<Declare non-member functions for |class Star|@>=
bool
compare_bs_number(Star *s, Star *t);

@q **** (4) Definition.  @>
@
@<Define non-member functions for |class Star|@>=
bool
compare_bs_number(Star *s, Star *t)
{
   return compare_bs_hr_number(s, t);
}

@q *** (3) Compare |hr_number|.@>
@*7 Compare |hr_number|.
\initials{LDF 2021.06.22.}

\LOG
\initials{LDF 2021.06.22.}
Added this function.
\ENDLOG

@q **** (4) Declaration.  @>
@
@<Declare non-member functions for |class Star|@>=
bool
compare_hr_number(Star *s, Star *t);

@q **** (4) Definition.  @>
@
@<Define non-member functions for |class Star|@>=
bool
compare_hr_number(Star *s, Star *t)
{
   return compare_bs_hr_number(s, t);
}

@q *** (3) Compare |approx_rank_apparent_magnitude|.@>
@*7 Compare |approx_rank_apparent_magnitude|.
\initials{LDF 2021.06.22.}

\LOG
\initials{LDF 2021.06.22.}
Added this function.
\ENDLOG

@q **** (4) Declaration.  @>
@
@<Declare non-member functions for |class Star|@>=
bool
compare_approx_rank_apparent_magnitude(Star *s, Star *t);

@q **** (4) Definition.  @>
@
@<Define non-member functions for |class Star|@>=
bool
compare_approx_rank_apparent_magnitude(Star *s, Star *t)
{
   return s->approx_rank_apparent_magnitude < t->approx_rank_apparent_magnitude;
}

@q *** (3) Compare |apparent_magnitude|.@>
@*7 Compare |apparent_magnitude|.
\initials{LDF 2021.07.10.}

\LOG
\initials{LDF 2021.07.10.}
Added this function.
\ENDLOG

@q **** (4) Declaration.  @>
@
@<Declare non-member functions for |class Star|@>=
bool
compare_apparent_magnitude(Star *s, Star *t);

@q **** (4) Definition.  @>
@
@<Define non-member functions for |class Star|@>=
bool
compare_apparent_magnitude(Star *s, Star *t)
{
   return s->apparent_magnitude < t->apparent_magnitude;
}

@q *** (3) Compare |absolute_magnitude|.@>
@*7 Compare |absolute_magnitude|.
\initials{LDF 2021.09.06.}

\LOG
\initials{LDF 2021.09.06.}
Added this function.
\ENDLOG

@q **** (4) Declaration.  @>
@
@<Declare non-member functions for |class Star|@>=
bool
compare_absolute_magnitude(Star *s, Star *t);

@q **** (4) Definition.  @>
@
@<Define non-member functions for |class Star|@>=
bool
compare_absolute_magnitude(Star *s, Star *t)
{
   return s->absolute_magnitude < t->absolute_magnitude;
}

@q *** (3) Compare |constellation_abbreviation|.@>
@*7 Compare |constellation_abbreviation|.
\initials{LDF 2021.06.22.}

\LOG
\initials{LDF 2021.06.22.}
Added this function.
\ENDLOG

@q **** (4) Declaration.  @>
@
@<Declare non-member functions for |class Star|@>=
bool
compare_constellation_abbreviation(Star *s, Star *t);

@q **** (4) Definition.  @>
@
@<Define non-member functions for |class Star|@>=
bool
compare_constellation_abbreviation(Star *s, Star *t)
{
   return s->constellation_abbreviation < t->constellation_abbreviation;
}

@q *** (3) Compare |constellation_full_name|.@>
@*7 Compare |constellation_full_name|.
\initials{LDF 2021.06.22.}

\LOG
\initials{LDF 2021.06.22.}
Added this function.
\ENDLOG

@q **** (4) Declaration.  @>
@
@<Declare non-member functions for |class Star|@>=
bool
compare_constellation_full_name(Star *s, Star *t);

@q **** (4) Definition.  @>
@
@<Define non-member functions for |class Star|@>=
bool
compare_constellation_full_name(Star *s, Star *t)
{
   return s->constellation_full_name < t->constellation_full_name;
}

@q *** (3) Compare |constellation_name_genitive|.@>
@*7 Compare |constellation_name_genitive|.
\initials{LDF 2021.06.22.}

\LOG
\initials{LDF 2021.06.22.}
Added this function.
\ENDLOG

@q **** (4) Declaration.  @>
@
@<Declare non-member functions for |class Star|@>=
bool
compare_constellation_name_genitive(Star *s, Star *t);

@q **** (4) Definition.  @>
@
@<Define non-member functions for |class Star|@>=
bool
compare_constellation_name_genitive(Star *s, Star *t)
{
   return s->constellation_name_genitive < t->constellation_name_genitive;
}

@q *** (3) Compare |constellation_number|.@>
@*7 Compare |constellation_number|.
\initials{LDF 2021.06.22.}

\LOG
\initials{LDF 2021.06.22.}
Added this function.
\ENDLOG

@q **** (4) Declaration.  @>
@
@<Declare non-member functions for |class Star|@>=
bool
compare_constellation_number(Star *s, Star *t);

@q **** (4) Definition.  @>
@
@<Define non-member functions for |class Star|@>=
bool
compare_constellation_number(Star *s, Star *t)
{
   return s->constellation_number < t->constellation_number;
}

@q *** (3) Compare |compare_right_ascension_hours|.@>
@*7 Compare |compare_right_ascension_hours|.
\initials{LDF 2021.6.27.}

\LOG
\initials{LDF 2021.6.27.}
Added this function.
\ENDLOG

@q **** (4) Declaration.  @>
@
@<Declare non-member functions for |class Star|@>=
bool
compare_right_ascension_hours(Star *s, Star *t);

@q **** (4) Definition.  @>
@
@<Define non-member functions for |class Star|@>=
bool
compare_right_ascension_hours(Star *s, Star *t)
{
   return s->right_ascension_hours < t->right_ascension_hours;
}

@q *** (3) Compare |compare_right_ascension_minutes|.@>
@*7 Compare |compare_right_ascension_minutes|.
\initials{LDF 2021.6.27.}

\LOG
\initials{LDF 2021.6.27.}
Added this function.
\ENDLOG

@q **** (4) Declaration.  @>
@
@<Declare non-member functions for |class Star|@>=
bool
compare_right_ascension_minutes(Star *s, Star *t);

@q **** (4) Definition.  @>
@
@<Define non-member functions for |class Star|@>=
bool
compare_right_ascension_minutes(Star *s, Star *t)
{
   return s->right_ascension_minutes < t->right_ascension_minutes;
}

@q *** (3) Compare |compare_right_ascension_seconds|.@>
@*7 Compare |compare_right_ascension_seconds|.
\initials{LDF 2021.6.27.}

\LOG
\initials{LDF 2021.6.27.}
Added this function.
\ENDLOG

@q **** (4) Declaration.  @>
@
@<Declare non-member functions for |class Star|@>=
bool
compare_right_ascension_seconds(Star *s, Star *t);

@q **** (4) Definition.  @>
@
@<Define non-member functions for |class Star|@>=
bool
compare_right_ascension_seconds(Star *s, Star *t)
{
   return s->right_ascension_seconds < t->right_ascension_seconds;
}

@q *** (3) Compare |compare_right_ascension_decimal_hours|.@>
@*7 Compare |compare_right_ascension_decimal_hours|.
\initials{LDF 2021.6.27.}

\LOG
\initials{LDF 2021.6.27.}
Added this function.
\ENDLOG

@q **** (4) Declaration.  @>
@
@<Declare non-member functions for |class Star|@>=
bool
compare_right_ascension_decimal_hours(Star *s, Star *t);

@q **** (4) Definition.  @>
@
@<Define non-member functions for |class Star|@>=
bool
compare_right_ascension_decimal_hours(Star *s, Star *t)
{
   return s->right_ascension_decimal_hours < t->right_ascension_decimal_hours;
}

@q *** (3) Compare |compare_right_ascension_decimal_degrees|.@>
@*7 Compare |compare_right_ascension_decimal_degrees|.
\initials{LDF 2021.6.27.}

\LOG
\initials{LDF 2021.6.27.}
Added this function.
\ENDLOG

@q **** (4) Declaration.  @>
@
@<Declare non-member functions for |class Star|@>=
bool
compare_right_ascension_decimal_degrees(Star *s, Star *t);

@q **** (4) Definition.  @>
@
@<Define non-member functions for |class Star|@>=
bool
compare_right_ascension_decimal_degrees(Star *s, Star *t)
{
   return s->right_ascension_decimal_degrees < t->right_ascension_decimal_degrees;
}

@q *** (3) Compare |compare_declination_degrees|.@>
@*7 Compare |compare_declination_degrees|.
\initials{LDF 2021.6.27.}

\LOG
\initials{LDF 2021.6.27.}
Added this function.
\ENDLOG

@q **** (4) Declaration.  @>
@
@<Declare non-member functions for |class Star|@>=
bool
compare_declination_degrees(Star *s, Star *t);

@q **** (4) Definition.  @>
@
@<Define non-member functions for |class Star|@>=
bool
compare_declination_degrees(Star *s, Star *t)
{
   return s->declination_degrees < t->declination_degrees;
}

@q *** (3) Compare |compare_declination_minutes|.@>
@*7 Compare |compare_declination_minutes|.
\initials{LDF 2021.6.27.}

\LOG
\initials{LDF 2021.6.27.}
Added this function.
\ENDLOG

@q **** (4) Declaration.  @>
@
@<Declare non-member functions for |class Star|@>=
bool
compare_declination_minutes(Star *s, Star *t);

@q **** (4) Definition.  @>
@
@<Define non-member functions for |class Star|@>=
bool
compare_declination_minutes(Star *s, Star *t)
{
   return s->declination_minutes < t->declination_minutes;
}

@q *** (3) Compare |compare_declination_seconds|.@>
@*7 Compare |compare_declination_seconds|.
\initials{LDF 2021.6.27.}

\LOG
\initials{LDF 2021.6.27.}
Added this function.
\ENDLOG

@q **** (4) Declaration.  @>
@
@<Declare non-member functions for |class Star|@>=
bool
compare_declination_seconds(Star *s, Star *t);

@q **** (4) Definition.  @>
@
@<Define non-member functions for |class Star|@>=
bool
compare_declination_seconds(Star *s, Star *t)
{
   return s->declination_seconds < t->declination_seconds;
}

@q *** (3) Compare |compare_declination_decimal_degrees|.@>
@*7 Compare |compare_declination_decimal_degrees|.
\initials{LDF 2021.6.27.}

\LOG
\initials{LDF 2021.6.27.}
Added this function.
\ENDLOG

@q **** (4) Declaration.  @>
@
@<Declare non-member functions for |class Star|@>=
bool
compare_declination_decimal_degrees(Star *s, Star *t);

@q **** (4) Definition.  @>
@
@<Define non-member functions for |class Star|@>=
bool
compare_declination_decimal_degrees(Star *s, Star *t)
{
   return s->declination_decimal_degrees < t->declination_decimal_degrees;
}

@q *** (3) Compare |compare_is_binary|.@>
@*7 Compare |compare_is_binary|.
\initials{LDF 2021.6.27.}

\LOG
\initials{LDF 2021.6.27.}
Added this function.
\ENDLOG

@q **** (4) Declaration.  @>
@
@<Declare non-member functions for |class Star|@>=
bool
compare_is_binary(Star *s, Star *t);

@q **** (4) Definition.  @>
@
@<Define non-member functions for |class Star|@>=
bool
compare_is_binary(Star *s, Star *t)
{
   return s->is_binary < t->is_binary;
}

@q *** (3) Compare |Star| pointers.@>
@*7 Compare |Star| pointers.
\initials{LDF 2021.06.24.}

\LOG
\initials{LDF 2021.06.24.}
Added this function.
\ENDLOG

@q **** (4) Declaration.  @>
@
@<Declare non-member functions for |class Star|@>=
bool compare_star_pointers(Star *s, Star *t);


@q **** (4) Definition.  @>
@
@<Define non-member functions for |class Star|@>=
bool
compare_star_pointers(Star *s, Star *t)
{
   if (s == 0 || t == 0)
      return false;

   return *s == *t;
}




@q * (1) Putting classes together.@>
@* Putting classes together.

@q ** (2) This is what's compiled.@>
@ This is what's compiled.

@c
@<Include files@>@;
typedef float real;
@<class declarations@>@;@/
@<|class Star| declaration@>@;
@<Declare non-member functions for |class Star|@>@;
@<Define |Star| functions@>@;
@<Define non-member functions for |class Star|@>@;
deque<IO_Type> io_deque;

@q **** (4) This is what's written to the header file `classes.hxx'.  @>

@ This is what's written to the header file \filename{classes.hxx}.
@
@(classes.hxx@>=
#ifndef CLASSES_H
#define CLASSES_H 1
using namespace std;
typedef float real;
@<class declarations@>@;@/
@<|class Star| declaration@>@;
@<Declare non-member functions for |class Star|@>@;
extern deque<IO_Type> io_deque;
#endif 



@q * Emacs-Lisp code for use in indirect buffers when using the          @>
@q   GNU Emacs editor.  The local variable list is not evaluated when an @>
@q   indirect buffer is visited, so it's necessary to evaluate the       @>
@q   following s-expression in order to use the facilities normally      @>
@q   accessed via the local variables list.                              @>
@q   \initials{LDF 2004.02.12}.                                          @>
@q   (progn (cweb-mode) (outline-minor-mode)                   (ignore " @>
@q ")  (setq fill-column 80) (column-number-mode 1))                     @>

@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q makefile:"makefile" @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q End: @>

