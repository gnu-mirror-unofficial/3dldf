@q paraellp.web @>
@q Created by Laurence D. Finston Wed Jan 25 12:55:27 CET 2006 @>

@q * (0) Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing. @>
@q Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, @>
@q 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022 The Free Software Foundation, Inc.  @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version. @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details. @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html. @>

@q (``@@'' stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de @>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston                 @> 
@q c/o Free Software Foundation, Inc.  @>
@q 51 Franklin St, Fifth Floor         @> 
@q Boston, MA  02110-1301              @>
@q USA                                 @>

@q Laurence.Finston@@gmx.de (@@ stands for a single ``at'' sign.)@>

@q * (0) Elliptical Paraboloids.@>
@** Elliptical Paraboloids\quad ({\tt paraellp\PERIOD web}).\hfil

\LOG
\initials{LDF 2006.01.25.}
Created this file.
\ENDLOG 

\immediate\write\functexifile{File:  paraellp.web^^J}

@q * (1) Include files.@>
@ Include files.

@<Include files@>=

#include "loader.h++"
#include "pspglb.h++"
#include "io.h++"
#include "creatnew.h++"
#include "pntrvctr.h++"
#include "primes.h++"
#include "complex.h++"
#include "matrices.h++"
#include "colors.h++"
#include "transfor.h++"
#include "pens.h++"
#include "dashptrn.h++"
#include "shapes.h++"  
#include "pictures.h++"  
#include "points.h++"
#include "lines.h++"
#include "planes.h++"
#include "nurbs.h++"
#include "paths.h++"
#include "curves.h++"
#include "polygons.h++"
#include "triangle.h++"
#include "rectangs.h++"
#include "conicsct.h++"
#include "ellipses.h++"
#include "sprellps.h++"
#include "circles.h++"
#include "ellpsslc.h++"
#include "crclslc.h++"
#include "parabola.h++"
#include "hyprbola.h++"
#include "cncsctlt.h++"
#include "arc.h++"
#include "helices.h++"
#include "origami.h++"
#include "solids.h++"
#include "solfaced.h++"
#include "cuboid.h++"
#include "polyhed.h++"
#include "ddchdrn.h++"
#include "rhtchdrn.h++"
#include "plyhdslc.h++"
#include "cones.h++"
#include "cylinder.h++" 
#include "ellpsoid.h++" 
#include "parabold.h++" 

@q * (1) Elliptical_Paraboloid class definition.@>
@* {\bf Elliptical\_Paraboloid} class definition.
\initials{LDF 2006.01.25.}

\LOG
\initials{LDF 2006.01.25.}
Added this |class| definition.
\ENDLOG

@<Define |class Elliptical_Paraboloid|@>=

class Elliptical_Paraboloid : public Paraboloid
{

   protected:

   public:

  @<Declare |Elliptical_Paraboloid| functions@>@;
};

@q ** (2) Static member variable definitions.@>
@*1 Static member variable definitions.
\initials{LDF 2006.01.25.}

@q *** (3) Code.@> 

@<Define |static| |class Elliptical_Paraboloid| data members@>=

@q * (1) Constructors and setting functions.@>
@* Constructors and setting functions.@>
\initials{LDF 2006.01.25.}

@q ** (2) Default constructor.  No arguments.@>
@*1 Default constructor. No arguments.
@^\cfunc{Elliptical\_Paraboloid}{Elliptical\_Paraboloid}@>
\cfunctexi{Elliptical\_Paraboloid}{Elliptical\_Paraboloid}
\initials{LDF 2006.01.25.}

\LOG
\initials{LDF 2006.01.25.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@>

@<Declare |Elliptical_Paraboloid| functions@>=
Elliptical_Paraboloid(void);

@q *** (3) Definition.@>

@
@<Define |Elliptical_Paraboloid| functions@>= 
Elliptical_Paraboloid::Elliptical_Paraboloid(void)
{

#if 0 
   shape_type = ELLIPTICAL_PARABOLOID_TYPE;
   type = ELLIPTICAL_PARABOLOID_NULL_TYPE;
   axis_x = axis_y = axis_z = 0;
   divisions_x = divisions_y = divisions_z = 0;
  
   parabola_point_count = 0;
#endif 

   return;

}

@q ** (2) Setting function.@> 
@*1 Setting function.
\initials{LDF 2006.01.25.}

\LOG
\initials{LDF 2006.01.25.}
Added this function.
\ENDLOG

@q *** (3) Declaration.  @>

@<Declare |Elliptical_Paraboloid| functions@>=
virtual
int
set(Paraboloid_Set_Option_Struct* options = 0, Scanner_Node scanner_node = 0);

@q *** (3) Definition.  @>

@
@<Define |Elliptical_Paraboloid| functions@>= 
int
Elliptical_Paraboloid::set(Paraboloid_Set_Option_Struct* options, Scanner_Node scanner_node)
{

@q **** (4) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q **** (4).@>

    if (options->type != ELLIPTICAL_TYPE)
       {
           cerr_strm << thread_name << "ERROR!  In `Elliptical_Paraboloid::set()':"
                     << endl
                     << "`options->type' != `Paraboloid::ELLIPTICAL_TYPE'.  "
                     << "This shouldn't happen."
                     << endl 
                     << "Deleting `options', setting it to 0, and exiting function "
                     << "unsuccessfully with return value 1.";
            
           log_message(cerr_strm);
           cerr_message(cerr_strm, error_stop_value);
           cerr_strm.str("");

           delete options;
           options = 0;

           return 1;

       }  /* |if (options->type != ELLIPTICAL_TYPE)|  */

@q **** (4)@> 

    type = ELLIPTICAL_TYPE;

@q **** (4)@> 
 
   return 0;

}  /* End of |Elliptical_Paraboloid::set| definition.  */

@q * (1) Destructor.@> 
@* Destructor.
\initials{LDF 2006.01.25.}

\LOG
\initials{LDF 2006.01.25.}
Added this function.
\ENDLOG

@<Declare |Elliptical_Paraboloid| functions@>=
virtual
~Elliptical_Paraboloid(void);

@q *** (3) Definition.  @>

@
@<Define |Elliptical_Paraboloid| functions@>= 
Elliptical_Paraboloid::~Elliptical_Paraboloid(void)
{
   for (vector<Parabola*>::iterator iter = main_parabolae.begin();
        iter != main_parabolae.end();  
        ++iter)
       {
          delete *iter;
          *iter = 0;
       }

   main_parabolae.clear();    

   return;
}

@q * (1) Pseudo-constructor for dynamic allocation.@>
@* Pseudo-constructor for dynamic allocation.

@q ** (2) Pointer argument.@>
@*1 Pointer argument.
@^\cfunc{elliptical\_Paraboloid}{create\_new\_elliptical\_paraboloid}@>
\cfunctexi{elliptical\_Paraboloid}{create\_new\_elliptical\_paraboloid}
\initials{LDF 2006.01.25.}

\LOG
\initials{LDF 2006.01.25.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare non-member template functions for |Elliptical_Paraboloid|@>=
Elliptical_Paraboloid* 
create_new(const Elliptical_Paraboloid* c, Scanner_Node scanner_node);

@q ** (2) Reference argument.@>
@*1 Reference argument.
\initials{LDF 2006.01.25.}

\LOG
\initials{LDF 2006.01.25.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare non-member template functions for |Elliptical_Paraboloid|@>=
Elliptical_Paraboloid* 
create_new(const Elliptical_Paraboloid& c, Scanner_Node scanner_node);

@q * (1) Returning elements and information.@>
@* Returning elements and information.

@q ** (2) Get |Shape| type.@> 
@*1 Get {\bf Shape} type.
\initials{LDF 2006.01.25.}

\LOG
\initials{LDF 2006.01.25.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Elliptical_Paraboloid| functions@>=
virtual 
inline
unsigned short 
get_shape_type(void) const
{
   return ELLIPTICAL_PARABOLOID_TYPE;
}

@q ** (2) Size.@> 
@*1 Size.
\initials{LDF 2006.01.25.}

\LOG
\initials{LDF 2006.01.25.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Elliptical_Paraboloid| functions@>=
virtual 
unsigned int
size(void);

@q *** (3) Definition.@> 

@
@<Define |Elliptical_Paraboloid| functions@>=
unsigned int
Elliptical_Paraboloid::size(void)
{
   return 0;
}

@q ** (2) Location.@> 
@*1 Location.
\initials{LDF 2006.01.25.}

Return values:\hfil\break
\item{0}: |Point| lies on the surface of the |Elliptical_Paraboloid|.
%
\item{1}: |Point| lies within the |Elliptical_Paraboloid|.
%
\item{-1}: |Point| lies outside the |Elliptical_Paraboloid|.
%
\item{-2}: |Elliptical_Paraboloid::standardize| failed to put the |Elliptical_Paraboloid| 
into standard position.\hfil\break 
\initials{LDF 2006.01.25.}

\LOG
\initials{LDF 2006.01.25.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Elliptical_Paraboloid| functions@>=
Signed_Byte
location(Point p, Scanner_Node scanner_node = 0, bool no_transform = false) const;

@q *** (3) Definition.@> 
@
@<Define |Elliptical_Paraboloid| functions@>=
Signed_Byte
Elliptical_Paraboloid::location(Point p, Scanner_Node scanner_node, bool no_transform) const
{
@q **** (4) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q **** (4).@>

   return -2;

}  /* End of |Elliptical_Paraboloid::location| definition.  */

@q * (1) Predicates.@> 
@* Predicates.
\initials{LDF 2006.01.25.}

\LOG
\initials{LDF 2006.01.25.}
Added this section.
\ENDLOG

@q ** (2) Is elliptical_paraboloidal.@>
@*1 Is elliptical-paraboloidal.
\initials{LDF 2006.01.25.}

\LOG
\initials{LDF 2006.01.25.}
Added this section.
\ENDLOG

@q *** (3) |Solid| version.@> 
@*2 {\bf Solid} version.
@^\cfunc{Solid}{is\_elliptical\_paraboloidal}@>
\cfunctexi{Solid}{is\_elliptical\_paraboloidal}
\initials{LDF 2006.01.25.}

\LOG
\initials{LDF 2006.01.25.}
Added this function.  It is declared in \filename{solids.web}.
It currently has a dummy definition and returns |false|.
\ENDLOG

@q **** (4) Definition.@> 
  
@
@<Define |Solid| functions@>=
bool
Solid::is_elliptical_paraboloidal(Scanner_Node scanner_node) const
{

@q ***** (5) Preliminaries.@> 

  bool DEBUG = false; /* |true| */

  using namespace Scan_Parse;

  stringstream cerr_strm;

  bool error_stop_value   = true;
  bool warning_stop_value = true;
  string thread_name      = "";

  if (scanner_node)
     scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                   &error_stop_value,
                                                   &warning_stop_value);

@q ***** (5)@>  
  
   return false;

} /* End of |Solid::is_elliptical_paraboloidal| definition.  */

@q ** (2) Standardize.@> 
@*1 Standardize.
\initials{LDF 2006.01.25.}

\LOG
\initials{LDF 2006.01.25.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Elliptical_Paraboloid| functions@>=
virtual
Transform* 
standardize(Scanner_Node scanner_node = 0) const;

@q *** (3) Definition.@> 

@
@<Define |Elliptical_Paraboloid| functions@>=
Transform* 
Elliptical_Paraboloid::standardize(Scanner_Node scanner_node) const
{

@q **** (4) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q **** (4).@>

    return 0;

}  /* End of |Elliptical_Paraboloid::standardize| definition.  */

@q * (1) Intersections.@> 
@* Intersections.

@q * (1) Putting Elliptical_Paraboloid together. @>
@* Putting {\bf Elliptical\_Paraboloid} together.

\immediate\write\functexifile{^^JEnd of file:  paraellp.web^^J}

@q ** (2) This is what's compiled.@> 

This is what's compiled.

@c
@<Include files@>@;
@<Define |class Elliptical_Paraboloid|@>@;
@<Define |static| |class Elliptical_Paraboloid| data members@>@;
@<Define |Elliptical_Paraboloid| functions@>@;
@<Declare non-member template functions for |Elliptical_Paraboloid|@>@;
@<Define |Solid| functions@>@;

@q ** (2) This is what's written to "paraellp.h".@> 

@ This is what's written to \filename{paraellp.h}.

@(paraellp.h@>=
@<Define |class Elliptical_Paraboloid|@>@;
@<Declare non-member template functions for |Elliptical_Paraboloid|@>@;

@q * Emacs-Lisp code for use in indirect buffers when using the          @>
@q   GNU Emacs editor.  The local variable list is not evaluated when an @>
@q   indirect buffer is visited, so it's necessary to evaluate the       @>
@q   following s-expression in order to use the facilities normally      @>
@q   accessed via the local variables list.                              @>
@q   \initials{LDF 2004.02.12}.                                          @>
@q   (progn (cweb-mode) (outline-minor-mode t) (setq fill-column 80))    @>

@q * Local variables for Emacs.@>
@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q run-gxx-on-file:"main.c" @>
@q run-cweb-on-file:"main.web" @>
@q run-cweave-on-file:"3DLDF.web" @>
@q run-mp-on-file:"persp.mp" @>
@q makefile:"makefile" @>
@q executable-name:"pp" @>
@q use-g++:t @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q End: @>
