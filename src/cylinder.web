@q cylinder.web @>
                       
@q * (0) Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing. @>
@q Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, @>
@q 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021 The Free Software Foundation, Inc.  @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version. @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details. @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html. @>

@q (``@@'' stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de @>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston                 @> 
@q c/o Free Software Foundation, Inc.  @>
@q 51 Franklin St, Fifth Floor         @> 
@q Boston, MA  02110-1301              @>
@q USA                                 @>

@q Laurence.Finston@@gmx.de (@@ stands for a single ``at'' sign.)@>

@q * (0) Cylinder.@>
@** Cylinder\quad ({\tt cylinders\PERIOD web}).\hfil 

\LOG
\initials{LDF 2005.05.24.}
Created this file.
\ENDLOG

@f Cylinder Shape  

@q * (1) Include files.@>
@ Include files.

@<Include files@>=
#include "loader.h++"
#include "pspglb.h++"
#include "io.h++"
#include "creatnew.h++"
#include "pntrvctr.h++"
#include "primes.h++"
#include "complex.h++"
#include "matrices.h++"
#include "colors.h++"
#include "transfor.h++"
#include "pens.h++"   
#include "dashptrn.h++"
#include "shapes.h++"
#include "pictures.h++"
#include "points.h++"
#include "lines.h++"
#include "planes.h++"
#include "nurbs.h++"
#include "paths.h++"
#include "curves.h++"
#include "polygons.h++"
#include "triangle.h++"
#include "rectangs.h++"
#include "conicsct.h++"
#include "ellipses.h++" 
#include "circles.h++"
#include "ellpsslc.h++"
#include "crclslc.h++"
#include "parabola.h++"
#include "hyprbola.h++"
#include "cncsctlt.h++"
#include "arc.h++"
#include "helices.h++"
#include "origami.h++"

#if 0
   #include "patterns.h++"
#endif 

#include "solids.h++"
#include "solfaced.h++"
#include "cuboid.h++"
#include "polyhed.h++"
#include "ddchdrn.h++"
#include "rhtchdrn.h++"
#include "plyhdslc.h++"
#include "cones.h++" 

@q * (1) Cylinder class definition.@>
@* {\bf Cylinder} class definition.
\initials{LDF 2005.05.24.}

|Solid| has a |Point center| member, so it's not necessary to declare one in
|Cylinder|.
\initials{LDF 2006.11.06.}

\LOG
\initials{LDF 2005.05.24.}
Added this |class| definition.

\initials{LDF 2006.11.06.}
Added the following data members:
|unsigned short type|,
|Path* base|,
|Path* cap|,
|real radius|, |real axis_x|, |real axis_y|, and |real axis_z|.

\initials{LDF 2006.11.08.}
Added |unsigned int base_point_count| and |unsigned int divisions|.
\ENDLOG

@<Define |class Cylinder|@>=

class Cylinder : public Solid
{

   protected:

      Point direction;

      real angle;

      unsigned short type;

      real radius;

      real axis_x;
      real axis_y;
      real axis_z;
 
      Path* base;
      Path* cap;

      unsigned int base_point_count;
      unsigned int divisions;

public:

  @<Declare |Cylinder| functions@>@;
};

@q * (1) Constructors and setting functions.@>
@* Constructors and setting functions.@>
\initials{LDF 2005.05.24.}

@q ** (2) Default constructor.  No arguments.@>
@*1 Default constructor. No arguments.
@^\cfunc{Cylinder}{Cylinder}@>
\cfunctexi{Cylinder}{Cylinder}
\initials{LDF 2005.05.24.}

\LOG
\initials{LDF 2005.05.24.}
Added this function.
\ENDLOG

@q *** (3) Declaration.  @>

@<Declare |Cylinder| functions@>=
Cylinder(void);

@q *** (3) Definition.  @>

@
@<Define |Cylinder| functions@>= 
Cylinder::Cylinder(void)
{

   shape_type = CYLINDER_TYPE;

   center.set(0, 0, 0);
   direction.set(0, 0, 0);

   angle = 0;

   radius = 0;

   axis_x = 0;
   axis_y = 0;
   axis_z = 0;

type = NULL_SHAPE_TYPE;
   base = 0;
   cap = 0;

return;

}  /* End of default |Cylinder| constructor definition.  */

@q ** (2) Setting function with |Cylinder_Set_Option_Struct| argument.@> 
@*1 Setting function with |Cylinder_Set_Option_Struct| argument.
\initials{LDF 2006.11.06.}

\LOG
\initials{LDF 2006.11.06.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Cylinder| functions@>=
int
set(Cylinder_Set_Option_Struct* options, Scanner_Node scanner_node);

@q *** (3) Definition.@> 

@
@<Define |Cylinder| functions@>=
int
Cylinder::set(Cylinder_Set_Option_Struct* options, 
              Scanner_Node scanner_node)
{

@q **** (4) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q **** (4)@> 

#if DEBUG_COMPILE
   if (DEBUG)
      {
          cerr_strm << thread_name << "Entering `Cylinder::set()'.";

          log_message(cerr_strm);
          cerr_message(cerr_strm);
          cerr_strm.str("");

      }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@; 

@q **** (4) WARNING:  |options == static_cast<Cylinder_Set_Option_Struct*>(0)|.@> 
@ WARNING:  |options == static_cast<Cylinder_Set_Option_Struct*>(0)|.
\initials{LDF 2006.11.06.}

@<Define |Cylinder| functions@>=

    if (options == static_cast<Cylinder_Set_Option_Struct*>(0))
    {  
         cerr_strm << "WARNING!  In `Cylinder::set()':"
                   << endl 
                   << "`options' is null.  Not setting `Cylinder'."
                   << endl
                   << "Exiting function unsuccessfully with return value 1.";
         log_message(cerr_strm);
         cerr_message(cerr_strm, warning_stop_value);
         cerr_strm.str("");

         return 1;
         
    }  /* |if (options == static_cast<Cylinder_Set_Option_Struct*>(0))|  */

@q **** (4) |center|.@> 
@ |center|.
\initials{LDF 2006.11.06.}

@<Define |Cylinder| functions@>=

    if (options->center != static_cast<Point*>(0))
    {
        center = *options->center;

    }  /* |if (options->center == static_cast<Point*>(0))|  */

@q **** (4) |direction|.@> 
@ |direction|.
\initials{LDF 2006.11.06.}

@<Define |Cylinder| functions@>=

    if (options->direction != static_cast<Point*>(0))
    {
        direction = *options->direction;

    }  /* |if (options->direction == static_cast<Point*>(0))|  */

@q **** (4) |type|.@> 
@ |type|.
\initials{LDF 2006.11.06.}

@<Define |Cylinder| functions@>=

#if DEBUG_COMPILE
   if (DEBUG)
      {
           cerr_strm << "`options->type' == " << type_name_map[options->type] << endl;
           log_message(cerr_strm);
           cerr_message(cerr_strm);
           cerr_strm.str("");

           if (options->radius)
              cerr << "*options->radius == " << *options->radius << endl;
           else 
              cerr << "options->radius is NULL." << endl;

           if (options->axis_x)
              cerr << "*options->axis_x == " << *options->axis_x << endl;
           else 
              cerr << "options->axis_x is NULL." << endl;

           if (options->axis_y)
              cerr << "*options->axis_y == " << *options->axis_y << endl;
           else 
              cerr << "options->axis_y is NULL." << endl;

           if (options->axis_z)
              cerr << "*options->axis_z == " << *options->axis_z << endl;
           else 
              cerr << "options->axis_z is NULL." << endl;

      }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@; 

@q ***** (5) |ELLIPTICAL_CYLINDER_TYPE|@> 

@ |ELLIPTICAL_CYLINDER_TYPE|.
\initials{LDF 2006.11.08.}

\LOG
\initials{LDF 2006.11.08.}
Added code to this section.
\ENDLOG 

@<Define |Cylinder| functions@>=

    if (options->type == ELLIPTICAL_CYLINDER_TYPE)
    {

        type = ELLIPTICAL_CYLINDER_TYPE;

        if (options->axis_x && options->axis_z)
        {
            axis_x = *options->axis_x;
            axis_z = *options->axis_z;
        }

        else if (options->axis_x)
           axis_x = axis_z = *options->axis_x;

        else if (options->axis_z)
           axis_x = axis_z = *options->axis_z;

        else if (options->radius)
           axis_x = axis_z = *options->radius;

        else
           axis_x = axis_z = 1;
   
        base_point_count = options->base_point_count;

        if (base_point_count == 0)
           base_point_count = 32;

        Ellipse* e = create_new<Ellipse>(0);
        Point p(0, 0, 0);
        e->set(p, axis_x, axis_z, 0, 0, 0, base_point_count);
        base = static_cast<Path*>(e); 
        ellipses.push_back(e);

        if (options->axis_y != static_cast<real*>(0))
            axis_y = *options->axis_y;
        else
            axis_y = 1;

        divisions = options->divisions;

        if (divisions > 1)
        {
            real distance;
            for (int i = 1; i < divisions; ++i)
            {
                distance = i * axis_y /divisions;
                e = create_new<Ellipse>(0);
                p.set(0, distance, 0);
                e->set(p, axis_x, axis_z, 0, 0, 0, base_point_count);                 
                ellipses.push_back(e);

            }  /* |for|  */

         }  /* |if|  */

        p.set(0, axis_y, 0);
        e =  create_new<Ellipse>(0);
        e->set(p, axis_x, axis_z, 0, 0, 0, base_point_count);
        cap = static_cast<Path*>(e); 
        ellipses.push_back(e);
        
        Path* q;

        for (int i = 0; i < base_point_count; ++i)
        {
           q = create_new<Path>(0);
           q->set(base->get_point(i), cap->get_point(i));
           paths.push_back(q);
        }

        center.set(0, .5 * axis_y, 0);

        if (options->center != static_cast<Point*>(0))
           shift(*options->center - center);

    }  /* |if (options->type == ELLIPTICAL_CYLINDER_TYPE)|  */  

@q ***** (5) |CIRCULAR_CYLINDER_TYPE|@> 
@ |CIRCULAR_CYLINDER_TYPE|.
\initials{LDF 2006.11.08.}

@<Define |Cylinder| functions@>=

    else if (options->type == CIRCULAR_CYLINDER_TYPE)
    {

        type = CIRCULAR_CYLINDER_TYPE;

        if (options->radius != static_cast<real*>(0))
           radius = *options->radius;
        else if (   (options->axis_x && !options->axis_z)
                 || (   options->axis_x && options->axis_z
                     && *options->axis_x == *options->axis_z))
           radius = *options->axis_x;
        else if (!options->axis_x && options->axis_z)
           radius = *options->axis_z;
        else if (   options->axis_x && options->axis_z
                 && (*options->axis_x != *options->axis_z))
        { 
            cerr_strm << "WARNING!  In `Cylinder::set':"
                      << endl 
                      << "`(*options->axis_x'  == " << *options->axis_x
                      << ") !=  (`*options->axis_z'  == " << *options->axis_z
                      << ")"
                      << endl
                      << "Setting `radius' to " << *options->axis_x
                      << " (*options->axis_x).";

            log_message(cerr_strm);
            cerr_message(cerr_strm, warning_stop_value);
            cerr_strm.str("");
            radius = *options->axis_x;
        }
        else 
           radius = 1;

        base_point_count = options->base_point_count;

        if (base_point_count == 0)
           base_point_count = 32;

        Circle* c = create_new<Circle>(0);
        Point p(0, 0, 0);
        c->set(p, 2 * radius, 0, 0, 0, base_point_count);
        base = static_cast<Path*>(c); 
        circles.push_back(c);

        if (options->axis_y != 0)
            axis_y = *options->axis_y;
        else
            axis_y = 1;

        divisions = options->divisions;

        if (divisions > 1)
        {
            real distance;
            for (int i = 1; i < divisions; ++i)
            {
                distance = i * axis_y /divisions;
                c = create_new<Circle>(0);
                p.set(0, distance, 0);
                c->set(p, 2 * radius, 0, 0, 0, base_point_count);                 
                circles.push_back(c);

            }  /* |for|  */

         }  /* |if|  */

        p.set(0, axis_y, 0);
        c =  create_new<Circle>(0);
        c->set(p, 2 * radius, 0, 0, 0, base_point_count);
        cap = static_cast<Path*>(c); 
        circles.push_back(c);
        
        Path* q;

        for (int i = 0; i < base_point_count; ++i)
        {
           q = create_new<Path>(0);
           q->set(base->get_point(i), cap->get_point(i));
           paths.push_back(q);
        }

        center.set(0, .5 * axis_y, 0);

        if (options->center != static_cast<Point*>(0))
           shift(*options->center - center);

    }  /* |else if (options->type == CIRCULAR_CYLINDER_TYPE)|  */

@q ***** (5) |PARABOLIC_CYLINDER_TYPE|@> 

    else if (options->type == PARABOLIC_CYLINDER_TYPE)
    {

        type = PARABOLIC_CYLINDER_TYPE;

    }  

@q ***** (5) |HYPERBOLIC_CYLINDER_TYPE|@> 

    else if (options->type == HYPERBOLIC_CYLINDER_TYPE)
    {

        type = HYPERBOLIC_CYLINDER_TYPE;

    }  

@q ***** (5) ERROR HANDLING: Invalid type.@>
@ ERROR HANDLING: Invalid type.
\initials{LDF 2006.11.06.}

@<Define |Cylinder| functions@>=

    else 
    {

        cerr_strm << "ERROR!  In `Cylinder::set':"
                  << "Invalid `options->type':  " << type_name_map[options->type]
                  << " (" << options->type << ")."
                  << endl
                  << "Exiting function unsuccessfully with return value 1.";
        log_message(cerr_strm);
        cerr_message(cerr_strm);
        cerr_strm.str("");

        return 1;

    }  /* |else| (Invalid type)  */

@q **** (4)@> 

#if DEBUG_COMPILE
   if (DEBUG)
      {
          cerr_strm << thread_name << "Exiting `Cylinder::set()' "
                    << "successfully with return value 0.";

          log_message(cerr_strm);
          cerr_message(cerr_strm);
          cerr_strm.str("");

      }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@; 

   delete options;
   options = 0;

   return 0;

@q **** (4)@> 

}  /* End of |Cylinder::set| definition.  */

@q * (1) Destructor.@> 
@* Destructor.
\initials{LDF 2005.05.24.}

\LOG
\initials{LDF 2005.05.24.}
Added this function.

\initials{LDF 2006.11.08.}
Now deleting |base| and |cap|.
\ENDLOG

@<Declare |Cylinder| functions@>=
virtual
~Cylinder(void);

@q *** (3) Definition.  @>

@
@<Define |Cylinder| functions@>=
Cylinder::~Cylinder(void)
{

   delete base;
   delete cap;
  
   return;
}

@q * (1) Pseudo-constructor for dynamic allocation.@>
@* Pseudo-constructor for dynamic allocation.

@q ** (2) Pointer argument.@>
@*1 Pointer argument.
@^\cfunc{Cylinder}{create\_new\_cylinder}@>
\cfunctexi{Cylinder}{create\_new\_cylinder}
\initials{LDF 2005.05.24.}

\LOG
\initials{LDF 2005.05.24.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare non-member template functions for |Cylinder|@>=
Cylinder* 
create_new(const Cylinder* c, Scanner_Node scanner_node);

@q ** (2) Reference argument.@>
@*1 Reference argument.
\initials{LDF 2005.05.24.}

\LOG
\initials{LDF 2005.05.24.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare non-member template functions for |Cylinder|@>=
Cylinder* 
create_new(const Cylinder& c, Scanner_Node scanner_node);

@q * (1) Assignment.@> 
@* Assignment.
\initials{LDF 2005.05.24.}

\LOG
\initials{LDF 2005.05.24.}
Added this section.
\ENDLOG

@q ** (2) Assignment from a |Cylinder|.@> 
@*1 Assignment from a |Cylinder|.
\initials{LDF 2005.05.24.}

\LOG
\initials{LDF 2005.05.24.}
Added this function.

\initials{LDF 2006.11.08.}
@:BUG FIX@> BUG FIX:  Changed the way |base| and |cap| are set.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Cylinder| functions@>=
virtual
Cylinder&
operator=(const Cylinder& c);

@q *** (3) Definition.@> 

@
@<Define |Cylinder| functions@>=

Cylinder&
Cylinder::operator=(const Cylinder& c)
{

@q **** (4)@> 

    if (this == &c) /* Make sure it's not self-assignment. */
       return *this;

@q **** (4)@> 

    direction = c.direction;

    angle  = c.angle;
    type   = c.type;

    radius = c.radius;

    axis_x = c.axis_x;
    axis_y = c.axis_y;
    axis_z = c.axis_z;

    base_point_count = c.base_point_count;
    divisions        = c.divisions;

    Solid::operator=(c);

@q **** (4)@> 

    if (c.type == ELLIPTICAL_CYLINDER_TYPE)
    {

        base = ellipses[0];
        cap  = ellipses.back();

    }

@q **** (4)@> 

    else if (c.type == CIRCULAR_CYLINDER_TYPE)
    {

        base = circles[0];
        cap  = circles.back();

    }

@q **** (4)@> 

    else if (c.type == PARABOLIC_CYLINDER_TYPE)
    {

        base = parabolae[0];
        cap  = parabolae.back();

    }

@q **** (4)@> 

    else if (c.type == HYPERBOLIC_CYLINDER_TYPE)
    {

        base = hyperbolae[0];
        cap  = hyperbolae.back();

    }

@q **** (4)@> 

    return *this;

}  /* End of |Cylinder::operator=(const Cylinder& h)| definition.  */

@q * (1) Returning elements and information.@>
@* Returning elements and information.

@q ** (2) Get |Shape| type.@> 
@*1 Get {\bf Shape} type.
\initials{LDF 2005.05.24.}

\LOG
\initials{LDF 2005.05.24.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Cylinder| functions@>=
virtual 
inline
unsigned short 
get_shape_type(void) const
{
   return CYLINDER_TYPE;
}

@q ** (2) Get base center.@> 
@*1 Get base center.
\initials{LDF 2006.11.06.}

\LOG
\initials{LDF 2006.11.06.}
Added this function.

\initials{LDF 2006.11.08.}
Added code for the case |type == ELLIPTICAL_CYLINDER_TYPE|.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Cylinder| functions@>=
void*
get_base_center(void* v);

@q *** (3) Definition.@> 

@
@<Define |Cylinder| functions@>=
void*
Cylinder::get_base_center(void* v)
{

@q **** (4)@> 

        Point* p = 0;

@q **** (4)@> 
   
    if (type == CIRCULAR_CYLINDER_TYPE && base != static_cast<Path*>(0))
    {
         p = create_new<Point>(0);
     
         *p = static_cast<Circle*>(base)->get_center();

         return static_cast<void*>(p);
    }

@q **** (4)@> 

    else if (type == ELLIPTICAL_CYLINDER_TYPE && base != static_cast<Path*>(0))
    {
         p = create_new<Point>(0);
     
         *p = static_cast<Ellipse*>(base)->get_center();

         return static_cast<void*>(p);
    }

@q **** (4)@> 

    else 
      return 0;

}  /* End of |Cylinder::get_base_center| definition.  */

@q ** (2) Get cap center.@> 
@*1 Get cap center.
\initials{LDF 2006.11.06.}

\LOG
\initials{LDF 2006.11.06.}
Added this function.

\initials{LDF 2006.11.08.}
Added code for the case |type == ELLIPTICAL_CYLINDER_TYPE|.
\ENDLOG

@<Declare |Cylinder| functions@>=
void*
get_cap_center(void* v);

@
@<Define |Cylinder| functions@>=
void*
Cylinder::get_cap_center(void* v)
{

@q **** (4)@> 

    Point* p;

    if (type == CIRCULAR_CYLINDER_TYPE && cap != static_cast<Path*>(0))
    {
         p = create_new<Point>(0);
     
         *p = static_cast<Circle*>(cap)->get_center();
         return static_cast<void*>(p);
    }

@q **** (4)@> 

    else if (type == ELLIPTICAL_CYLINDER_TYPE && cap != static_cast<Path*>(0))
    {
         p = create_new<Point>(0);
     
         *p = static_cast<Ellipse*>(cap)->get_center();

         return static_cast<void*>(p);
    }

@q **** (4)@> 

    else 
      return 0;

}  /* End of |Cylinder::get_cap_center| definition.  */

@q ** (2) Location.@> 
@*1 Location.
\initials{LDF 2006.11.08.}

\LOG
\initials{LDF 2006.11.08.}
Added this function.  Currently, it just returns 0.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Cylinder| functions@>=
Signed_Byte
location(Point p, Scanner_Node scanner_node = 0, bool no_transform = false) const;

@q *** (3) Definition.@> 
@
@<Define |Cylinder| functions@>=

Signed_Byte
Cylinder::location(Point p, Scanner_Node scanner_node, bool no_transform) const
{
    return 0;
   
}  /* End of |Cylinder::location| definition. */

@q * (1) Predicates.@> 
@* Predicates.
\initials{LDF 2005.05.20.}

\LOG
\initials{LDF 2005.05.20.}
Added this section.
\ENDLOG

@q ** (2) Is cylindrical.@>
@*1 Is cylindrical.

@q *** (3) |Solid| version.@> 
@*2 {\bf Solid} version.
@^\cfunc{Solid}{is\_cylindrical}@>
\cfunctexi{Solid}{is\_cylindrical}
\initials{LDF 2005.05.24.}

\LOG
\initials{LDF 2005.05.24.}
Added this function.  It is declared in \filename{solids.web}.
It currently has a dummy definition and returns |false|.
\ENDLOG

@q **** (4) Definition.@> 
  
@
@<Define |Solid| functions@>=
bool
Solid::is_cylindrical(Scanner_Node scanner_node) const
{

@q ***** (5) Preliminaries.@> 

  bool DEBUG = false; /* |true| */

  using namespace Scan_Parse;

  stringstream cerr_strm;

  bool error_stop_value   = true;
  bool warning_stop_value = true;
  string thread_name      = "";

  if (scanner_node)
     scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                   &error_stop_value,
                                                   &warning_stop_value);

@q ***** (5)@>  
  
   return false;

} /* End of |Solid::is_cylindrical()| definition.  */

@q * (1) Transformations.@>
@* Transformations. 
\initials{LDF 2005.05.24.}

\LOG
\initials{LDF 2005.05.24.}
Added this section.
\ENDLOG

@q *** (3) Multiplication by a |Transform| with assignment.@>
@*2 Multiplication by a |Transform| with assignment.
@^\cofunc{Cylinder}{*=}@>
\cofunctexi{Cylinder}{*=}
\initials{LDF 2005.05.24.}

\LOG
\initials{LDF 2005.05.24.}
Added this function.
\ENDLOG 

@<Declare |Cylinder| functions@>=
virtual
Transform
operator*=(const Transform& t);

@
@<Define |Cylinder| functions@>=
Transform
Cylinder::operator*=(const Transform& t)
{

   return Solid::operator*=(t);
}

@q ** (2) Rotatation around the main axes.@>
@*1 Rotation  around the main axes. 
@^\cfunc{Cylinder}{rotate}@>
\cfunctexi{Cylinder}{rotate}
\initials{LDF 2005.05.24.}

\LOG
\initials{LDF 2005.05.24.}
Added this function.
\ENDLOG

@<Declare |Cylinder| functions@>=
virtual
Transform 
rotate(const real x, const real y = 0, const real z = 0);

@
@<Define |Cylinder| functions@>=
Transform 
Cylinder::rotate(const real x, const real y, const real z)
{
  Transform t;
  t.rotate(x, y, z);
  return operator*=(t);
}

@q ** (2) Scale. @>
@*1 Scale. 
@^\cfunc{Cylinder}{scale}@>
\cfunctexi{Cylinder}{scale}
\initials{LDF 2005.05.24.}

\LOG
\initials{LDF 2005.05.24.}
Added this function.
\ENDLOG

@<Declare |Cylinder| functions@>=
virtual
Transform 
scale(real x, real y = 1, real z = 1);

@
@<Define |Cylinder| functions@>=
Transform 
Cylinder::scale(real x, real y, real z)
{
   Transform t;
   t.scale(x, y, z);
   return operator*=(t);
}

@q ** (2) Shear.@>
@*1 Shear. 
@^\cfunc{Cylinder}{shear}@>
\cfunctexi{Cylinder}{shear}
\initials{LDF 2005.05.24.}

\LOG
\initials{LDF 2005.05.24.}
Added this function.
\ENDLOG

@<Declare |Cylinder| functions@>=

virtual
Transform 
shear(real xy, real xz = 0, real yx = 0, real yz = 0, 
      real zx = 0, real zy = 0);

@
@<Define |Cylinder| functions@>=
Transform 
Cylinder::shear(real xy, real xz, real yx, real yz, 
      real zx, real zy)
{
  Transform t;
  t.shear(xy, xz, yx, yz, zx, zy);
  return operator*=(t);

}

@q ** (2) Shift.@>
@*1 Shift. 
\initials{LDF 2005.05.24.}

\LOG
\initials{LDF 2005.05.24.}
Added this section.
\ENDLOG

@q *** (3) |real| arguments.@>
@*2 {\bf real} arguments. 
@^\cfunc{Cylinder}{shift}@>
\cfunctexi{Cylinder}{shift}
\initials{LDF 2005.05.24.}

\LOG
\initials{LDF 2005.05.24.}
Added this function.
\ENDLOG

@<Declare |Cylinder| functions@>=
virtual
Transform 
shift(real xx, real yy = 0, real zz = 0);

@
@<Define |Cylinder| functions@>=
Transform
Cylinder::shift(real xx, real yy, real zz)
{
  Transform t;
  t.shift(xx, yy, zz);
  return operator*=(t);
}

@q *** (3) Point argument.@>

@*2 {\bf Point} argument. 
@^\cfunc{Cylinder}{shift}@>
\cfunctexi{Cylinder}{shift}
\initials{LDF 2005.05.24.}

\LOG
\initials{LDF 2005.05.24.}
Added this function.
\ENDLOG

@<Declare |Cylinder| functions@>=
virtual
Transform 
shift(const Point& p);

@
@<Define |Cylinder| functions@>=
Transform 
Cylinder::shift(const Point& p)
{
  return shift(p.get_x(), p.get_y(), p.get_z());
}

@q ** (2) Shift times. @>
@*1 Shift times. 
\initials{LDF 2005.05.24.}

@q *** (3) real arguments. @>

@*2 {\bf real} arguments. 
@^\cfunc{Cylinder}{shift\_times}@>
\cfunctexi{Cylinder}{shift\_times}
\initials{LDF 2005.05.24.}

\LOG
\initials{LDF 2005.05.24.}
Added this function.  It's commented-out, because 
|Solid::shift_times()| currently doesn't exist.
\ENDLOG

@<Declare |Cylinder| functions@>=

#if 0 

virtual
void 
shift_times(real x, real y = 1, real z = 1);

#endif 

@
@<Define |Cylinder| functions@>=

#if 0 
void 
Cylinder::shift_times(real x, real y, real z)
{

    Solid::shift_times(x, y, z);
  
    return;
}
#endif 

@q *** (3) Point argument. @>

@*2 {\bf Point} argument. 
@^\cfunc{Cylinder}{shift\_times}@>
\cfunctexi{Cylinder}{shift\_times}
\initials{LDF 2005.05.24.}

\LOG
\initials{LDF 2005.05.24.}
It's commented-out, because 
|Solid::shift_times()| currently doesn't exist.
\ENDLOG

@<Declare |Cylinder| functions@>=
#if 0 
virtual
void
shift_times(const Point& p);
#endif 

@
@<Define |Cylinder| functions@>=
#if 0 
void
Cylinder::shift_times(const Point& p)
{
  return shift_times(p.get_x(), p.get_y(), p.get_z());
}
#endif 

@q ** (2) Rotatation around an arbitrary axis.@>
@*1 Rotatation around an arbitrary axis. 
\initials{LDF 2005.05.24.}

\LOG
\initials{LDF 2005.05.24.}
Added this section.
\ENDLOG

@q *** (3) Point arguments.@>

@*2 {\bf Point} arguments.
@^\cfunc{Cylinder}{rotate}@>
\cfunctexi{Cylinder}{rotate}
\initials{LDF 2005.05.24.}

\LOG
\initials{LDF 2005.05.24.}
Added this function.
\ENDLOG

@<Declare |Cylinder| functions@>=

virtual
Transform 
rotate(const Point& p0, const Point& p1, const real angle = 180);

@
@<Define |Cylinder| functions@>=
Transform 
Cylinder::rotate(const Point& p0, const Point& p1, const real angle)
{
  Transform t;
  t.rotate(p0, p1, angle);
  return operator*=(t);
}

@q *** (3) Path argument.@>

@*2 {\bf Path} arguments.
@^\cfunc{Cylinder}{rotate}@>
\cfunctexi{Cylinder}{rotate}
\initials{LDF 2005.05.24.}

\LOG
\initials{LDF 2005.05.24.}
Added this function.
\ENDLOG

@<Declare |Cylinder| functions@>=

virtual
Transform 
rotate(const Path& p, const real angle = 180);

@
@<Define |Cylinder| functions@>=

Transform 
Cylinder::rotate(const Path& p, const real angle)
{
   if (!p.is_linear())
     {
        return INVALID_TRANSFORM;
     }

   return rotate(p.get_point(0),
                 p.get_last_point(), angle);  
}   

@q ** (2) Standardize.@> 
@*1 Standardize.
\initials{LDF 2006.11.08.}

\LOG
\initials{LDF 2006.11.08.}
Added this function.  Currently, it just returns 0.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Cylinder| functions@>=
Transform* 
standardize(Scanner_Node scanner_node = 0) const;

@q *** (3) Definition.@> 

@
@<Define |Cylinder| functions@>=
Transform* 
Cylinder::standardize(Scanner_Node scanner_node) const
{

    return 0;

}  /* End of |Cylinder::standardize| definition.  */

@q * (1) Show.@> 
@* Show.
\initials{LDF 2005.05.24.}

\LOG
\initials{LDF 2005.05.24.}
Added this function.
\ENDLOG

@q ** (2) Declaration.@> 

@<Declare |Cylinder| functions@>=

virtual 
void 
show(string text = "", 
     char coords = 'w',
     const bool do_persp = true, 
     const bool do_apply = true,
     Focus* f = 0, 
     const unsigned short proj = 0,
     const real factor = 1) const;

@q ** (2) Definition.@> 

@
@<Define |Cylinder| functions@>=
void 
Cylinder::show(string text, char coords,
            const bool do_persp, const bool do_apply,
            Focus* f, const unsigned short proj,
            const real factor) const

{
   if (text == "")
      text = "Cylinder:";

   Solid::show(text, coords, do_persp, do_apply,
               f, proj, factor);

   center.show("center:");

   cerr << "`type' == `" << type_name_map[type] << "'" 
        << endl
        << "`radius' == " << radius 
        << endl
        << "`axis_x' == " << axis_x 
        << endl
        << "`axis_y' == " << axis_y 
        << endl
        << "`axis_z' == " << axis_z 
        << endl;

   return;

} /* End of |Cylinder::show()| definition.  */

@q * (1) Cylinder_Set_Option_Struct.@> 
@* {\bf Cylinder\_Set\_Option\_Struct}.
\initials{LDF 2005.05.25.}

\LOG
\initials{LDF 2005.05.25.}
Added this section.
\ENDLOG

@q ** (2) Struct definition.@> 
@*1 Struct definition.
\initials{LDF 2005.05.25.}

\LOG
\initials{LDF 2005.05.25.}
Added this |struct| definition.

\initials{LDF 2006.11.06.}
Added the |real*| data members |radius|, |axis_x|, |axis_y|, and
|axis_z|.

\initials{LDF 2006.11.06.}
Added |unsigned int base_point_count|.

\initials{LDF 2006.11.08.}
Added |unsigned int divisions|.
\ENDLOG

@<Define |struct Cylinder_Set_Option_Struct|@>=

struct
Cylinder_Set_Option_Struct
{
   Point* center;
   Point* direction;
   unsigned short type;
   real* radius;
   real* axis_x;
   real* axis_y;
   real* axis_z;

   unsigned int base_point_count;
   unsigned int divisions;

   @<Declare |Cylinder_Set_Option_Struct| functions@>@;

};

@q ** (2) |Cylinder_Set_Option_Struct| functions.@> 
@*1 {\bf Cylinder\_Set\_Option\_Struct} functions.
\initials{LDF 2005.05.25.}

\LOG
\initials{LDF 2005.05.25.}
Added this section.
\ENDLOG

@q *** (3) Constructors.  @>
@*2 Constructors.
\initials{LDF 2005.05.25.}

\LOG
\initials{LDF 2005.05.25.}
Added this section.
\ENDLOG

@q **** (4) Default constructor.@>   
@*3 Default constructor.
\initials{LDF 2005.05.25.}

\LOG
\initials{LDF 2005.05.25.}
Added this function.
\ENDLOG

@q ***** (5) Declaration.@>  

@<Declare |Cylinder_Set_Option_Struct| functions@>=

Cylinder_Set_Option_Struct(void);

@q ***** (5) Definition.@>  

@
@<Define |Cylinder_Set_Option_Struct| functions@>=

Cylinder_Set_Option_Struct::Cylinder_Set_Option_Struct(void) 
{
    center           = 0;
    direction        = 0;
    type             = Shape::CIRCULAR_CYLINDER_TYPE;
    radius           = 0;
    axis_x           = 0;
    axis_y           = 0;
    axis_z           = 0;

    base_point_count = 0;
    divisions        = 0;

}

@q *** (3) Destructor.@> 
@*2 Destructor.
\initials{LDF 2005.05.25.}

\LOG
\initials{LDF 2005.05.25.}
Added this function.
\ENDLOG

@q **** (4) Declaration.@>  

@<Declare |Cylinder_Set_Option_Struct| functions@>=

~Cylinder_Set_Option_Struct(void); 

@q **** (4) Definition.@>  

@
@<Define |Cylinder_Set_Option_Struct| functions@>=

Cylinder_Set_Option_Struct::~Cylinder_Set_Option_Struct(void) 
{
    delete center;
    delete direction;
 
    delete radius;
    delete axis_x;
    delete axis_y;
    delete axis_z;

    return;
}

@q *** (3) Clear.@> 
@*2 Clear.
\initials{LDF 2005.05.25.}

\LOG
\initials{LDF 2005.05.25.}
Added this function.
\ENDLOG

@q **** (4) Declaration.@>  

@<Declare |Cylinder_Set_Option_Struct| functions@>=

int 
clear(void); 

@q **** (4) Definition.@>  

@
@<Define |Cylinder_Set_Option_Struct| functions@>=

int
Cylinder_Set_Option_Struct::clear(void) 
{
    delete center;
    center           = 0;

    delete direction;
    direction        = 0;

    type             = Shape::CIRCULAR_CYLINDER_TYPE;
    delete radius;
    radius           = 0;
    delete axis_x; 
    axis_x           = 0;
    delete axis_y; 
    axis_y           = 0;
    delete axis_z; 
    axis_z           = 0;

    base_point_count = 0;
    divisions        = 0;

    return 0;

}  /* End of |Cylinder_Set_Option_Struct::clear()| definition.  */

@q * (1) Putting Cylinder together. @>
@* Putting {\bf Cylinder} together.

This is what's compiled.
@c
@<Include files@>@;
@<Define |class Cylinder|@>@;
@<Define |struct Cylinder_Set_Option_Struct|@>@;
@<Define |Cylinder| functions@>@;
@<Define |Cylinder_Set_Option_Struct| functions@>@;
@<Declare non-member template functions for |Cylinder|@>@;
@<Define |Solid| functions@>@;

@ This is what's written to \filename{cylinder.h}.
@(cylinder.h@>=
@<Define |class Cylinder|@>@;
@<Define |struct Cylinder_Set_Option_Struct|@>@;
@<Declare non-member template functions for |Cylinder|@>@;

@q * Emacs-Lisp code for use in indirect buffers when using the          @>
@q   GNU Emacs editor.  The local variable list is not evaluated when an @>
@q   indirect buffer is visited, so it's necessary to evaluate the       @>
@q   following s-expression in order to use the facilities normally      @>
@q   accessed via the local variables list.                              @>
@q   \initials{LDF 2004.02.12}.                                          @>
@q   (progn (cweb-mode) (outline-minor-mode t) (setq fill-column 70))    @>

@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q run-gxx-on-file:"main.c" @>
@q run-cweb-on-file:"main.web" @>
@q run-cweave-on-file:"3DLDF.web" @>
@q makefile:"makefile" @>
@q executable-name:"pp" @>
@q use-g++:t @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q End: @>
