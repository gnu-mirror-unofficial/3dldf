%%%% sample3.lmc
%%%% Created by Laurence D. Finston (LDF) Sat 03 Jul 2021 11:27:34 PM CEST

%% * (1) Copyright and License.

%%%% This file is part of GNU 3DLDF, a package for three-dimensional drawing.  
%%%% Copyright (C) 2021 The Free Software Foundation  

%%%% GNU 3DLDF is free software; you can redistribute it and/or modify 
%%%% it under the terms of the GNU General Public License as published by 
%%%% the Free Software Foundation; either version 3 of the License, or 
%%%% (at your option) any later version.  

%%%% GNU 3DLDF is distributed in the hope that it will be useful, 
%%%% but WITHOUT ANY WARRANTY; without even the implied warranty of 
%%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
%%%% GNU General Public License for more details.  

%%%% You should have received a copy of the GNU General Public License 
%%%% along with GNU 3DLDF; if not, write to the Free Software 
%%%% Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA 

%%%% GNU 3DLDF is a GNU package.  
%%%% It is part of the GNU Project of the  
%%%% Free Software Foundation 
%%%% and is published under the GNU General Public License. 
%%%% See the website http://www.gnu.org 
%%%% for more information.   
%%%% GNU 3DLDF is available for downloading from 
%%%% http://www.gnu.org/software/3dldf/LDF.html.
  

%%%% Please send bug reports to Laurence.Finston@gmx.de
%%%% The mailing list help-3dldf@gnu.org is available for people to 
%%%% ask other users for help.  
%%%% The mailing list info-3dldf@gnu.org is for sending 
%%%% announcements to users. To subscribe to these mailing lists, send an 
%%%% email with ``subscribe <email-address>'' as the subject.  

%%%% The author can be contacted at: 

%%%% Laurence D. Finston 
%%%% c/o Free Software Foundation, Inc. 
%%%% 51 Franklin St, Fifth Floor 
%%%% Boston, MA  02110-1301  
%%%% USA

%%%% Laurence.Finston@gmx.de

% * (1) Beginning of 3DLDF code.

verbatim_metapost "verbatimtex \font\largebf=cmbx12\font\Largebf=cmbx14 etex;";

%% *** (3) Draw spherical biangle

picture bi_ang_pict[];  %% Global
point p[];
numeric biangle_width[];

macro get_spherical_biangles;

def get_spherical_biangles {numeric rad} =

  circle c[];
  numeric a[];
  numeric radius[];
  numeric circum[];
  path edge[];
  numeric n[];
  string u[];

  radius0 := rad;
  c0 := unit_circle scaled (radius0, 0, radius0) rotated (90, 0);
  a2 := circumference c0;   %% a2 == Circumference of horizontal great circle.

  %draw c0 with_color red;

  p0 := (-radius0, 0);
  p1 := (radius0, 0);

%message "magnitude (p1 - p0) (diameter of c0):";
%show magnitude (p1 - p0);

  %draw p0 -- p1;  %% Horizontal line through origin.

  %dotlabel.lft("$p_0$", p0);
  %dotlabel.rt("$p_1$", p1);

  p2 := (0, -radius0);
  p3 := (0, radius0);

  %draw p2 -- p3;  %% Vertical line through origin.

  %dotlabel.bot("$p_2$", p2);
  %dotlabel.top("$p_3$", p3);

  j := 4;
  for i = 11.25 step 11.25 until 78.75:
    p[j] := p1 rotated (0, 0, i);
    p[j + 1] := (0, ypart p[j]);
    %draw p[j + 1] -- p[j];
    %dotlabel.rt("$p_{" & decimal j & "}$", p[j]);
    radius[j] := magnitude(p[j] - p[j + 1]);
    c[j] := unit_circle scaled (radius[j], 0, radius[j]);
    circum[j] := circumference c[j];
    biangle_width[j] := circum[j] / 8;
    message "biangle_width[" & decimal j & "]:";
    show biangle_width[j];
    j += 2;
  endfor;

%% **** (4)

%draw c0 with_color red;

  edge0 := null_path; 
  edge1 := null_path; 
  edge2 := null_path;  
  edge3 := null_path;  

  edge0 += ..;
  edge1 += ..;
  edge2 += ..;
  edge3 += ..;

  n0 := a2 / 8;  %% 1/8 of circumference of c0 == width of spherical biangles at 0 deg. declination.
  n1 := a2 / 32; %% 1/32 of circumference of red circle == Distance between the declination lines in 
%% increments of 11.25 deg.

  p20 := (-.5n0, 0);
  p21 := (.5n0, 0);

  draw p20 -- p21;               %% Horizontal line through origin (0 deg.), i.e., midline of spherical biangle.
  label.rt("$0^\circ$", p21 shifted (1cm, 0));

  dotlabel.lft("$p_{20}$", p20);
  dotlabel.rt("$p_{21}$", p21);

  edge0 += p20;
  edge1 += p21;
  edge2 += p20;
  edge3 += p21;


  p22 := (0, -.25a2);
  p23 := (0, .25a2);

  dotlabel.bot("$p_{22}$", p22);
  dotlabel.top("$p_{23}$", p23);
  label("$90^\circ$", p22 shifted (0, -.75cm));
  label("$90^\circ$", p23 shifted (0, .75cm));

  draw p22 -- p23;  %% Vertical line through origin---Half of circumference.

  j := 24;
  k := 4;
  for i = 1 step 1 until 7:
    p[j]     := (-.5biangle_width[k], (i * n1));
    p[j + 1] := (.5biangle_width[k], (i * n1));
    draw p[j] -- p[j + 1];
    dotlabel.lft("$p_{" & decimal j & "}$", p[j]);
    dotlabel.rt("$p_{" & decimal (j + 1) & "}$", p[j + 1]);
    label("$" & decimal (11.25 * i) & "^\circ$", p[j + 1] shifted (1.5cm, 0));
    edge0 += p[j];
    edge1 += p[j + 1];
    j += 2;
    k += 2;
  endfor;

  j := 1;

  for i := 24 step 2 until 37:
    p[20 + i] := p[i] rotated (180, 0);
    p[20 + 1 + i] := p[i + 1] rotated (180, 0);
    dotlabel.lft("$p_{" & decimal (20 + i) & "}$", p[20 + i]);
    dotlabel.rt("$p_{" & decimal (20 + i + 1) & "}$", p[20 + i + 1]);
    draw p[20 + i] -- p[20 + i + 1];
    label("$-" & decimal (11.25 * j) & "^\circ$", p[20 + i + 1] shifted (1.5cm, 0));
    j += 1;
  endfor;

  dotlabel.lft("$p_{24}$", p24);
  dotlabel.rt("$p_{25}$", p25);

  edge0 += p23;
  edge1 += p23;

  edge2 := edge0 rotated (180, 0);
  edge3 := edge1 rotated (180, 0);

  draw edge0;
  draw edge1;
  draw edge2;
  draw edge3;

  for i = 0 upto 8:
    bi_ang_pict[i] := current_picture;
    dotlabel.urt("{\largebf " & decimal i & "}", origin) bi_ang_pict[i];
  endfor;

  label("RA $337.5^\circ$", p22 shifted (-1.5cm, -.75cm)) bi_ang_pict[0];
  label("RA $22.5^\circ$",  p22 shifted (1.5cm, -.75cm)) bi_ang_pict[0];
  
  clear current_picture;
  
enddef;


endinput;

%% ** (2) End of 3DLDF code.

%% * (1) Emacs-Lisp code for use in indirect buffers when using the          
%%   	 GNU Emacs editor.  The local variable list is not evaluated when an 
%%   	 indirect buffer is visited, so it's necessary to evaluate the       
%%   	 following s-expression in order to use the facilities normally      
%%   	 accessed via the local variables list.                              
%%   	 \initials{LDF 2004.02.12}.                                          

%% (progn (metafont-mode) (outline-minor-mode t) (setq fill-column 80))    


%% * (1) Local variables for Emacs.

%% Local Variables:
%% mode:Metapost
%% eval:(outline-minor-mode t)
%% eval:(read-abbrev-file abbrev-file-name)
%% abbrev-mode:t
%% outline-regexp:"%% [*\f]+"
%% End:
