@q predctes.web @>
@q Created Laurence D. Finston Wed Nov 28 10:59:09 CET 2007 @>

@q * (0) Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing. @>
@q Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, @>
@q 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022 The Free Software Foundation, Inc. @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version. @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details. @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html. @>

@q (``@@'' stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de @>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston                 @> 
@q c/o Free Software Foundation, Inc.  @>
@q 51 Franklin St, Fifth Floor         @> 
@q Boston, MA  02110-1301              @>
@q USA                                 @>

@q Laurence.Finston@@gmx.de (@@ stands for a single ``at'' sign.)@>

@q * (0) Predicates.@>
@** Predicates\quad ({\tt predctes\PERIOD web}).\hfil

\LOG
\initials{LDF 2007.11.28.}
Created this file.
\ENDLOG 

@q * (1) Include files.@>
@ Include files.
\initials{LDF 2007.11.28.}

@<Include files@>=

#include "loader.h++"
#include "pspglb.h++"
#include "io.h++"
#include "creatnew.h++"
#include "pntrvctr.h++"
#include "primes.h++"
#include "complex.h++"
#include "matrices.h++"
#include "colors.h++"
#include "transfor.h++"
#include "pens.h++"
#include "dashptrn.h++"
#include "shapes.h++"  
#include "pictures.h++"  
#include "points.h++"
#include "lines.h++"
#include "planes.h++"
#include "nurbs.h++"
#include "paths.h++"
#include "curves.h++"
#include "polygons.h++"
#include "triangle.h++"
#include "rectangs.h++"
#include "conicsct.h++"
#include "ellipses.h++"
#include "sprellps.h++"
#include "circles.h++"
#include "ellpsslc.h++"
#include "crclslc.h++"
#include "parabola.h++"
#include "hyprbola.h++"
#include "cncsctlt.h++"
#include "arc.h++"
#include "helices.h++"
#include "origami.h++"
#include "solids.h++"
#include "solfaced.h++"
#include "cuboid.h++"
#include "polyhed.h++"
#include "ddchdrn.h++"
#include "rhtchdrn.h++"
#include "plyhdslc.h++"
#include "cones.h++"
#include "cylinder.h++" 
#include "ellpsoid.h++"
#include "spheres.h++" 
#include "sphrdevl.h++"
#include "parabold.h++"
#include "paraellp.h++"
#include "parahypr.h++" 
#include "glyphs.h++"
#include "pctfncs0.h++"
#include "utility.h++"
#include "pntrvcf0.h++"

@q * (1) Predicate struct definition.@>
@* {\bf Predicate} struct definition.
\initials{LDF 2007.11.28.}

\LOG
\initials{LDF 2007.11.28.}
Added this |struct| definition.
\ENDLOG

@<Declare |struct Predicate|@>=

struct Predicate : public Solid
{

   @<Declare |Predicate| constants@>@;

   bool (*func_0)(void* v, 
                  const unsigned short type_v,
                  void* parameter,
                  void* w,
                  const unsigned short type_w);

   @<Declare |Predicate| functions@>@;
};

@q ** (2) Static member variable declarations and initializations.@>
@*1 Static member variable declarations and initializations.
\initials{LDF 2007.11.28.}

\LOG
\initials{LDF 2007.11.28.}
Added this section.
\ENDLOG

@q *** (3) Declarations.@> 

@<Declare |Predicate| constants@>=

   static const unsigned short PRED_NULL_TYPE;
   static const unsigned short PRED_PATH_TYPE;

@q **** (4) Initializations.@>
@
@<Initialize |static| |struct Predicate| data members@>=

   const unsigned short Predicate::PRED_NULL_TYPE = 0;
   const unsigned short Predicate::PRED_PATH_TYPE = 1;

@q * (1) Predicate functions.@>
@*  {\bf Predicate} functions.
\initials{LDF 2007.11.28.}

\LOG
\initials{LDF 2007.11.28.}
Added this section.
\ENDLOG

@q ** (2) Constructors and setting functions.@>
@*1 Constructors and setting functions.@>
\initials{LDF 2007.11.28.}

@q *** (3) Default constructor.  No arguments.@>
@*2 Default constructor. No arguments.
@^\cfunc{Predicate}{Predicate}@>
\initials{LDF 2007.11.28.}

\LOG
\initials{LDF 2007.11.28.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@>

@<Declare |Predicate| functions@>=
Predicate(void);

@q **** (4) Definition.@>

@
@<Define |Predicate| functions@>= 
Predicate::Predicate(void)
{
    return;
}

@** (2) Destructor.
@*1 Destructor.
\initials{LDF 2007.11.28.}

\LOG
\initials{LDF 2007.11.28.}
Added this function.
\ENDLOG

@<Declare |Predicate| functions@>=
virtual
~Predicate(void);

@q *** (3) Definition.@>

@
@<Define |Predicate| functions@>= 
Predicate::~Predicate(void)
{
   return;
}

@q ** (2) Operators.@>
@*1 Operators.
\initials{LDF 2007.11.28.}

\LOG
\initials{LDF 2007.11.28.}
Added this section.
\ENDLOG

@q *** (3) Function Call Operator (|operator|).@>
@*2 Function Call Operator ({\bf operator()}).
\initials{LDF 2007.11.28.}

\LOG
\initials{LDF 2007.11.28.}
Added this function.
\ENDLOG

@<Declare |Predicate| functions@>=
bool
operator()(void* v, 
           const unsigned short type_v,
           void* parameter = 0,
           void* w = 0,
           const unsigned short type_w = 0);

@q *** (3) Definition.@>

@
@<Define |Predicate| functions@>= 
bool
Predicate::operator()(void* v, 
                      const unsigned short type_v,
                      void* parameter,
                      void* w,
                      const unsigned short type_w)
{
@q **** (4) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   Scanner_Node scanner_node = static_cast<Scanner_Node>(parameter);

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q **** (4).@>

#if DEBUG_COMPILE
   if (DEBUG)
   {
       cerr_strm << thread_name << "Entering `Predicate::operator()'.";

       log_message(cerr_strm);
       cerr_message(cerr_strm);
       cerr_strm.str("");

   }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@;

@q **** (4).@>

#if DEBUG_COMPILE
   if (DEBUG)
   {
       cerr_strm << thread_name << "Exiting `Predicate::operator()'.";

       log_message(cerr_strm);
       cerr_message(cerr_strm);
       cerr_strm.str("");

   }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@;

@q **** (4).@>

   return func_0(v, type_v, parameter, w, type_w);

}  /* End of |Predicate::operator| definition.  */

@q ** (2) Actual predicate functions.@>
@*1 Actual predicate functions.
\initials{LDF 2007.11.28.}

\LOG
\initials{LDF 2007.11.28.}
Added this section.
\ENDLOG

@q *** (3) Functions for testing object types.@>
@*2 Functions for testing object types.
\initials{LDF 2007.11.28.}

\LOG
\initials{LDF 2007.11.28.}
Added this section.
\ENDLOG

@q **** (4) is_quadrilateral_type.@>
@*3 Is {\bf Quadrilateral} Type.
\initials{LDF 2007.11.28.}

\LOG
\initials{LDF 2007.11.28.}
Added this function.
\ENDLOG

@q ***** (5) Declaration.@>

@<Declare non-|Predicate| functions@>=
bool 
is_quadrilateral_type(void* v, 
                      const unsigned short type_v,
                      void* parameter = 0,
                      void* w = 0,
                      const unsigned short type_w = 0);

@q ***** (5) Definition.@>

@
@<Define non-|Predicate| functions@>= 
bool 
is_quadrilateral_type(void* v, 
                      const unsigned short type_v,
                      void* parameter,
                      void* w,
                      const unsigned short type_w)

{
@q ****** (6) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   Scanner_Node scanner_node = static_cast<Scanner_Node>(parameter);

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ****** (6)@>

#if DEBUG_COMPILE
   if (DEBUG)
   {
       cerr_strm << thread_name << "Entering `is_quadrilateral_type'.";

       log_message(cerr_strm);
       cerr_message(cerr_strm);
       cerr_strm.str("");

   }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@;

@q ****** (6)@>

#if DEBUG_COMPILE
   if (DEBUG)
   {
       cerr_strm << thread_name << "Exiting `is_quadrilateral_type'.";

       log_message(cerr_strm);
       cerr_message(cerr_strm);
       cerr_strm.str("");

   }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@;

   return false;

}  /* End of |is_quadrilateral_type| definition.  */

@q ** (2) Returning elements and information.@>
@*1 Returning elements and information.
\initials{LDF 2007.11.28.}

\LOG
\initials{LDF 2007.11.28.}
Added this section.
\ENDLOG

@q ** (2) Show.@> 
@*1 Show.
\initials{LDF 2007.11.28.}

\LOG
\initials{LDF 2007.11.28.}
Added this function.
\ENDLOG

@q ** (2) Declaration.@> 

@<Declare |Predicate| functions@>=

@q ** (2) Definition.@> 

@
@<Define |Predicate| functions@>=

@q * (1) Putting Predicate together. @>
@* Putting {\bf Predicate} together.

@q ** (2) This is what's compiled.@> 

This is what's compiled.

@c
@<Include files@>@;
@<Declare |struct Predicate|@>@;
@<Initialize |static| |struct Predicate| data members@>@;
@<Declare non-|Predicate| functions@>@;
@<Define |Predicate| functions@>@;
@<Define non-|Predicate| functions@>@;

@q ** (2) This is what's written to "predctes.h".@> 

@ This is what's written to \filename{predctes.h}.

\LOG
\initials{LDF 2007.11.28.}
Added preprocessor directives to prevent source files from 
including \filename{predctes.h} more than once.
\ENDLOG 

@(predctes.h@>=
#ifndef LDF_PREDCTES_KNOWN
#define LDF_PREDCTES_KNOWN 1
@<Declare |struct Predicate|@>@;
@<Declare non-|Predicate| functions@>@;
#endif

@q * Emacs-Lisp code for use in indirect buffers when using the          @>
@q   GNU Emacs editor.  The local variable list is not evaluated when an @>
@q   indirect buffer is visited, so it's necessary to evaluate the       @>
@q   following s-expression in order to use the facilities normally      @>
@q   accessed via the local variables list.                              @>
@q   \initials{LDF 2004.02.12}.                                          @>
@q   (progn (cweb-mode) (outline-minor-mode t) (setq fill-column 80))    @>

@q * Local variables for Emacs.@>
@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q run-gxx-on-file:"main.c" @>
@q run-cweb-on-file:"main.web" @>
@q run-cweave-on-file:"3DLDF.web" @>
@q run-mp-on-file:"persp.mp" @>
@q makefile:"makefile" @>
@q executable-name:"pp" @>
@q use-g++:t @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q End: @>
