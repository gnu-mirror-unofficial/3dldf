%% ** (2) macro get_flat_panels

macro get_flat_panels;

def get_flat_panels {numeric ttab_width}=

  point p[];
  path q[];
  point r[];
  point W[];
  path u[];
  transform t[];
  numeric k;
  numeric m;
  numeric n[];
  numeric v;
  point temp_a;      
  point temp_b;
  point temp_c;

  path temp_path_a;
  path temp_path_b;

  path temp_path_c;
  path temp_path_d;
  
  v := 0;
  
  k := 0;
  m := 0;
  for i = 0 upto 15:   % 15:
    t1 := identity shifted ((i * 5cm), 0);
    if i == 8:
      v := 1;
    fi;
    for j = 1 upto 7: 
      t0 := identity; 
      q[m] := D[i][j];    
      %draw q[m] on_picture flat_quadrant_picture[v];
      p[k] := get_point (3) q[m];
      %dotlabel.top("$p_{" & decimal k & "}$", p[k]) on_picture flat_quadrant_picture[v];
      p[k+1] := get_point (0) q[m];
      %dotlabel.top("$p_{" & decimal (k+1) & "}$", p[k+1]) on_picture flat_quadrant_picture[v];
      p[k+2] := get_point (1) q[m];
      %dotlabel.top("$p_{" & decimal (k+2) & "}$", p[k+2]) on_picture flat_quadrant_picture[v];
      p[k+3] := get_point (2) q[m];
      %dotlabel.top("$p_{" & decimal (k+3) & "}$", p[k+3]) on_picture flat_quadrant_picture[v];
      n0 := (p[k+2] - p[k]) angle (p[k+1] - p[k]);
      n1 := (p[k+3] - p[k]) angle (p[k+1] - p[k]);
      %message "n0:";
      %show n0;
      %message "n1:";
      %show n1;
      n2 := magnitude(p[k+1] - p[k]);
      n3 := magnitude(p[k+2] - p[k]);
      n4 := magnitude(p[k+3] - p[k]);
      %message "n2:";
      %show n2;
      %message "n3:";
      %show n3;
      %message "n4:";
      %show n4;

      p[k+4] := origin;
      p[k+5] := p[k+4] shifted (n2, 0);
      p[k+6] := (p[k+4] shifted (n3, 0)) rotated (0, 0, n0);
      p[k+7] := (p[k+4] shifted (n4, 0)) rotated (0, 0, n1); 

      q[m+1] := p[k+4] -- p[k+5] -- p[k+6] -- p[k+7] -- cycle;
      %message "q[" & decimal (m+1) & "]:";
      %show q[m+1];

      p[k+8] := mediate(p[k+4], p[k+5]);
      p[k+9] := mediate(p[k+6], p[k+7]);

      if j == 1:
        q[m+1] *= t1;
	if do_black:
	  fill q[m+1] with_color black on_picture flat_quadrant_picture[v];
 	  draw q[m+1] with_color dark_gray on_picture flat_quadrant_picture[v+2];
	else:
	  draw q[m+1] with_color dark_gray on_picture flat_quadrant_picture[v];
	fi;
	if do_black:
	  fill q[m+1] rotated (180, 0) with_color black on_picture flat_quadrant_picture[v];
	  draw q[m+1] rotated (180, 0) with_color dark_gray on_picture flat_quadrant_picture[v+2];
	else:
	  draw q[m+1] rotated (180, 0) with_color dark_gray on_picture flat_quadrant_picture[v];
	fi;
        if j == 7:
          %dotlabel.llft("$p_{" & decimal (k+4) & "}$", p[k+4]) on_picture flat_quadrant_picture[v];
          %dotlabel.lrt("$p_{" & decimal (k+5) & "}$", p[k+5]) on_picture flat_quadrant_picture[v];
          %dotlabel.urt("$p_{" & decimal (k+6) & "}$", p[k+6]) on_picture flat_quadrant_picture[v];
          %dotlabel.ulft("$p_{" & decimal (k+7) & "}$", p[k+7]) on_picture flat_quadrant_picture[v];
          %dotlabel.bot("$p_{" & decimal (k+8) & "}$", p[k+8]) on_picture flat_quadrant_picture[v];
          %dotlabel.top("$p_{" & decimal (k+9) & "}$", p[k+9]) on_picture flat_quadrant_picture[v];
        fi;
      fi;

      if j > 1:
        p[k+10] := get_point (0) q[m-1];
        p[k+11] := get_point (1) q[m-1];
        p[k+12] := get_point (2) q[m-1];
        p[k+13] := get_point (3) q[m-1];
        p[k+14] := mediate(p[k+10], p[k+11], .5);
        p[k+15] := mediate(p[k+12], p[k+13], .5);
        n5 := magnitude(p[k+15] - p[k+14]);

        %t0 := identity shifted by (p[k-7] - p[k+14]);
        %t0 := identity shifted (0, ((j-1) * 2cm));
        t0 := identity shifted by (p[k+15]- p[k+8]);

        p[k+4] *= t0;
        p[k+5] *= t0;
        p[k+6] *= t0;
        p[k+7] *= t0;
        p[k+8] *= t0;
        p[k+9] *= t0;

        if j == 7:
          % dotlabel.lft("$p_{" & decimal (k+4) & "}$", p[k+4]) on_picture flat_quadrant_picture[v];
          % dotlabel.rt("$p_{" & decimal (k+5) & "}$", p[k+5]) on_picture flat_quadrant_picture[v];
          % dotlabel.rt("$p_{" & decimal (k+6) & "}$", p[k+6]) on_picture flat_quadrant_picture[v];
          % dotlabel.lft("$p_{" & decimal (k+7) & "}$", p[k+7]) on_picture flat_quadrant_picture[v];
          % dotlabel.bot("$p_{" & decimal (k+8) & "}$", p[k+8]) on_picture flat_quadrant_picture[v];
          % dotlabel.top("$p_{" & decimal (k+9) & "}$", p[k+9]) on_picture flat_quadrant_picture[v];
        fi;

        q[m+1] *= t0;
        
	if do_black:
	  fill q[m+1] with_color black on_picture flat_quadrant_picture[v];
	  draw q[m+1] with_color dark_gray on_picture flat_quadrant_picture[v+2];
	  fill q[m+1] rotated (180, 0) with_color black on_picture flat_quadrant_picture[v];
	  draw q[m+1] rotated (180, 0) with_color dark_gray on_picture flat_quadrant_picture[v+2];
	else:
	  draw q[m+1] with_color dark_gray on_picture flat_quadrant_picture[v];
	  draw q[m+1] rotated (180, 0) with_color dark_gray on_picture flat_quadrant_picture[v];
	fi;

        if j == 7:
          %dotlabel.lft("$p_{" & decimal (k+10) & "}$", p[k+10]) on_picture flat_quadrant_picture[v];
          %dotlabel.rt("$p_{"  & decimal (k+11) & "}$", p[k+11]) on_picture flat_quadrant_picture[v];
          %dotlabel.rt("$p_{"  & decimal (k+12) & "}$", p[k+12]) on_picture flat_quadrant_picture[v];
          %dotlabel.lft("$p_{" & decimal (k+13) & "}$", p[k+13]) on_picture flat_quadrant_picture[v];
          %dotlabel.top("$p_{"  & decimal (k+14) & "}$", p[k+14]) on_picture flat_quadrant_picture[v];
          %dotlabel.bot("$p_{"  & decimal (k+15) & "}$", p[k+15]) on_picture flat_quadrant_picture[v];
        fi;
        
      fi;

      flat_quadrant[i][j] := q[m+1];
      flat_quadrant[i][-j] := q[m+1] rotated (180, 0);

      %draw ((get_point (0) flat_quadrant[i][j]) -- (get_point(2) flat_quadrant[i][j]);

      temp_a := mediate(get_point (0) flat_quadrant[i][j], get_point (1) flat_quadrant[i][j], .5);
      temp_b := mediate(get_point (2) flat_quadrant[i][j], get_point (3) flat_quadrant[i][j], .5);
      temp_c := mediate(temp_a, temp_b, .5) shifted (-1.75cm, 0);
      
      %draw flat_quadrant[i][j] with_color red with_pen medium_pen on_picture flat_quadrant_picture[v];
      %drawdot get_point (0) flat_quadrant[i][j] with_color red with_pen medium_pen on_picture flat_quadrant_picture[v];
      %draw get_point (0) flat_quadrant[i][j] -- get_point (2) flat_quadrant[i][j]
      %with_color red with_pen medium_pen on_picture flat_quadrant_picture[v];
      label(decimal i & "/" & decimal j, temp_c) on_picture flat_quadrant_picture[v];
      label(decimal i & "/-" & decimal j, temp_c rotated (180, 0)) on_picture flat_quadrant_picture[v];
      
      k += 16;
      m += 2;
    endfor;
  endfor;

  v := 0;

  for i := 0 upto 15:
    if i == 8:
      v := 1;
    fi;

    q[m] := T[i][8];

    % message "m:";
    % show m;

    p[k] := get_point (0) q[m];
    p[k+1] := get_point (1) q[m];
    p[k+2] := get_point (2) q[m];

    n0 := magnitude (p[k+1] - p[k]);
    n1 := magnitude (p[k+2] - p[k]);
    n2 := (p[k+2] - p[k]) angle (p[k+1] - p[k]);

    p[k+3] := (n1, 0) rotated (0, 0, n2); 
    p[k+4] := (.5n0, 0);
    
    q[m+1] := origin -- (n0, 0) -- p[k+3] -- cycle; 

    t2 := identity shifted by (p[105 + (i * 112)] - p[k+4]);

    q[m+1] *= t2;

    q[m+2] := q[m+1] rotated (180, 0);

    if do_black:
      draw q[m+1] with_color dark_gray on_picture flat_quadrant_picture[v+2];
      fill q[m+1] with_color black on_picture flat_quadrant_picture[v];
      draw q[m+2] with_color dark_gray on_picture flat_quadrant_picture[v+2];
      fill q[m+2] with_color black on_picture flat_quadrant_picture[v];
    else:
      draw q[m+1] with_color dark_gray on_picture flat_quadrant_picture[v];
      draw q[m+2] with_color dark_gray on_picture flat_quadrant_picture[v];
    fi;


    
    flat_quadrant[i][8]  := q[m+1];
    flat_quadrant[i][-8] := q[m+2];
    k += 5;
    m += 3;
  endfor;

  point temp_pt;
  
  v := 0;
  j := 0;
  m := 226;
  for i = 0 upto 15:
    if i == 8:
      v := 1;
    fi;
    temp_pt := get_point (2) q[m];
    label.lft("RA $" & decimal j & "^\circ$", temp_pt shifted (-.375cm, 0)) on_picture flat_quadrant_picture[v];
    label.rt("RA $" & decimal (j + 22.5) & "^\circ$",  temp_pt shifted (.375cm, 0)) on_picture flat_quadrant_picture[v];
    j += 22.5;
    m += 3;
  endfor;
  

  % drawdot get_point (2) q[229] with_color green with_pen Large_pen on_picture flat_quadrant_picture[0];
  % drawdot get_point (2) q[232] with_color green with_pen Large_pen on_picture flat_quadrant_picture[0];
  % drawdot get_point (2) q[235] with_color green with_pen Large_pen on_picture flat_quadrant_picture[0];
  % drawdot get_point (2) q[238] with_color green with_pen Large_pen on_picture flat_quadrant_picture[0];
  % drawdot get_point (2) q[241] with_color green with_pen Large_pen on_picture flat_quadrant_picture[0];
  % drawdot get_point (2) q[244] with_color green with_pen Large_pen on_picture flat_quadrant_picture[0];
  % drawdot get_point (2) q[247] with_color green with_pen Large_pen on_picture flat_quadrant_picture[0];

  % drawdot get_point (2) q[250] with_color green with_pen Large_pen on_picture flat_quadrant_picture[1];
  % drawdot get_point (2) q[253] with_color green with_pen Large_pen on_picture flat_quadrant_picture[1];
  % drawdot get_point (2) q[256] with_color green with_pen Large_pen on_picture flat_quadrant_picture[1];
  % drawdot get_point (2) q[259] with_color green with_pen Large_pen on_picture flat_quadrant_picture[1];
  % drawdot get_point (2) q[262] with_color green with_pen Large_pen on_picture flat_quadrant_picture[1];
  % drawdot get_point (2) q[265] with_color green with_pen Large_pen on_picture flat_quadrant_picture[1];
  % drawdot get_point (2) q[268] with_color green with_pen Large_pen on_picture flat_quadrant_picture[1];
  % drawdot get_point (2) q[271] with_color green with_pen Large_pen on_picture flat_quadrant_picture[1];
  
  r0 := p4;
  r1 := p5;
    
  % drawdot q[2] with_color red with_pen Large_pen on_picture flat_quadrant_picture[0];
  % drawdot q[2] with_color red with_pen Large_pen on_picture flat_quadrant_picture[0];


  %dotlabel.lft("$r_0$", r0) on_picture flat_quadrant_picture[0];
  %dotlabel.rt("$r_1$", r1) on_picture flat_quadrant_picture[0];

  j := 2;
  for i := 1 step 2 until 13:
    %draw q[i] with_color cyan with_pen medium_pen on_picture flat_quadrant_picture[0];
    r[j]   := get_point (3) q[i];
    r[j+1] := get_point (2) q[i];
    %dotlabel.lft("$r_{" & decimal j & "}$", r[j]) on_picture flat_quadrant_picture[0];
    %dotlabel.rt("$r_{" & decimal (j+1) & "}$", r[j+1]) on_picture flat_quadrant_picture[0];
    j += 2;
  endfor;

  %draw q225 with_color cyan with_pen medium_pen on_picture flat_quadrant_picture[0];

  r[17] := get_point (2) q[225];
  %dotlabel.top("$r_{17}$", r17) on_picture flat_quadrant_picture[0];

  temp_angle := 30;
  temp_distance_a := .2;
  temp_distance_b := .25;

  u100 := flat_quadrant[0][1];
  %draw u100 on_picture flat_quadrant_picture[0] with_color red with_pen Large_pen;

  u101 := flat_quadrant[1][1];
  %draw u101 on_picture flat_quadrant_picture[0] with_color blue with_pen Large_pen;

  u102 := flat_quadrant[8][1];
  %draw u102 on_picture flat_quadrant_picture[1] with_color blue with_pen Large_pen;
  
  t3 := identity shifted by (get_point (0) u101 - get_point (0) u100);
  t4 := identity shifted by (get_point (0) u102 - get_point (0) u100);
  
  k := 0;
  j := 0;
  for i := 1 step 2 until 15:
    if i < 15:
      W[j] := mediate(r[i], r[i+2], temp_distance_a);
    else:
      W[j] := mediate(r[i], r[i+2], temp_distance_b);
    fi;
    if i < 15:
      W[j+1] := W[j] shifted (ttab_width, 0);
    else:
      W[j+1] := W[j] shifted (ttab_width - .175cm, 0);
    fi;
    W[j+2] := W[j] shifted (0, 0, 1);
    W[j+3] := W[j+1] rotated_around (W[j], W[j+2]) temp_angle;
    %dotlabel.rt("$r_{" & decimal (i+20) & "}$", W[j+3]) on_picture flat_quadrant_picture[0];

    if i < 15:
      W[j+4] := mediate(r[i], r[i+2], (1 - temp_distance_a));  
    else:
      W[j+4] := mediate(r[i], r[i+2], (1 - temp_distance_b));
    fi;

    if i < 15:
      W[j+5] := W[j+4] shifted (ttab_width, 0);
    else:
      W[j+5] := W[j+4] shifted (ttab_width - .175cm, 0);
    fi;
    
    W[j+6] := W[j+4] shifted (0, 0, 1);
    W[j+7] := W[j+5] rotated_around (W[j+4], W[j+6]) -temp_angle;
    %dotlabel.rt("$r_{" & decimal (i+24) & "}$", W[j+7]) on_picture flat_quadrant_picture[0];

    u[k] := W[j] -- W[j+3] -- W[j+7] -- W[j+4] -- cycle;
    draw u[k] with_color dark_gray on_picture flat_quadrant_picture[0];

    draw u[k] transformed t3 with_color dark_gray on_picture flat_quadrant_picture[0];
    %draw u[k] shifted (5cm, 0) on_picture flat_quadrant_picture[0];
    
    u[k+1] := u[k] rotated (180, 0);
    draw u[k+1] with_color dark_gray on_picture flat_quadrant_picture[0];

    temp_path_a := u[k];
    temp_path_b := u[k+1];

    temp_path_c := u[k] transformed t4;
    temp_path_d := u[k+1] transformed t4;

    draw temp_path_c with_color dark_gray on_picture flat_quadrant_picture[1];
    draw temp_path_d with_color dark_gray on_picture flat_quadrant_picture[1];
    
    for A := 1 upto 7:
      temp_path_a *= t3;
      temp_path_b *= t3;
      draw temp_path_a with_color dark_gray on_picture flat_quadrant_picture[0];
      draw temp_path_b with_color dark_gray on_picture flat_quadrant_picture[0];
      temp_path_c *= t3;
      temp_path_d *= t3;
      draw temp_path_c with_color dark_gray on_picture flat_quadrant_picture[1];
      draw temp_path_d with_color dark_gray on_picture flat_quadrant_picture[1];
    endfor;

    k += 2;
    j += 8;
  endfor;

enddef;

%% *** (3)

