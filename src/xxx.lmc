%% * (1) Copyright and License.

%%%% This file is part of GNU 3DLDF, a package for three-dimensional drawing.  
%%%% Copyright (C) 2021 The Free Software Foundation  

%%%% GNU 3DLDF is free software; you can redistribute it and/or modify 
%%%% it under the terms of the GNU General Public License as published by 
%%%% the Free Software Foundation; either version 3 of the License, or 
%%%% (at your option) any later version.  

%%%% GNU 3DLDF is distributed in the hope that it will be useful, 
%%%% but WITHOUT ANY WARRANTY; without even the implied warranty of 
%%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
%%%% GNU General Public License for more details.  

%%%% You should have received a copy of the GNU General Public License 
%%%% along with GNU 3DLDF; if not, write to the Free Software 
%%%% Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA 

%%%% GNU 3DLDF is a GNU package.  
%%%% It is part of the GNU Project of the  
%%%% Free Software Foundation 
%%%% and is published under the GNU General Public License. 
%%%% See the website http://www.gnu.org 
%%%% for more information.   
%%%% GNU 3DLDF is available for downloading from 
%%%% http://www.gnu.org/software/3dldf/LDF.html.
  
%%%% Please send bug reports to Laurence.Finston@gmx.de
%%%% The mailing list help-3dldf@gnu.org is available for people to 
%%%% ask other users for help.  
%%%% The mailing list info-3dldf@gnu.org is for sending 
%%%% announcements to users. To subscribe to these mailing lists, send an 
%%%% email with ``subscribe <email-address>'' as the subject.  

%%%% The author can be contacted at: 

%%%% Laurence D. Finston 
%%%% c/o Free Software Foundation, Inc. 
%%%% 51 Franklin St, Fifth Floor 
%%%% Boston, MA  02110-1301  
%%%% USA

%%%% Laurence.Finston@gmx.de


def get_flat_panels {numeric ttab_width}=

  point p[];
  path q[];
  point r[];
  point W[];
  path u[];
  transform t[];
  numeric k;
  numeric m;
  numeric n[];
  numeric v;
  point temp_a;      
  point temp_b;
  point temp_c;

  path temp_path_a;
  path temp_path_b;

  path temp_path_c;
  path temp_path_d;

  boolean do_labels;

  do_labels := true; %% false
  
  v := 0;
  
  k := 0;
  m := 0;

  for i = 0 upto 15:   % 15:
    t1 := identity shifted ((i * 5cm), 0);
    if i == 8:
      v := 1;
    fi;
    for j = 1 upto 7: 
      t0 := identity; 
      q[m] := D[i][j];    
      %draw q[m] on_picture flat_quadrant_picture[v];
      p[k] := get_point (3) q[m];
      if do_labels:
        % dotlabel.top("$p_{" & decimal k & "}$", p[k]) on_picture flat_quadrant_picture[v];
      fi;
      p[k+1] := get_point (0) q[m];
      if do_labels:
        % dotlabel.top("$p_{" & decimal (k+1) & "}$", p[k+1]) on_picture flat_quadrant_picture[v];
      fi;
      p[k+2] := get_point (1) q[m];
      if do_labels:
        % dotlabel.top("$p_{" & decimal (k+2) & "}$", p[k+2]) on_picture flat_quadrant_picture[v];
      fi;
      p[k+3] := get_point (2) q[m];
      if do_labels:
        % dotlabel.top("$p_{" & decimal (k+3) & "}$", p[k+3]) on_picture flat_quadrant_picture[v];
      fi;
      n0 := (p[k+2] - p[k]) angle (p[k+1] - p[k]);
      n1 := (p[k+3] - p[k]) angle (p[k+1] - p[k]);
      %message "n0:";
      %show n0;
      %message "n1:";
      %show n1;
      n2 := magnitude(p[k+1] - p[k]);
      n3 := magnitude(p[k+2] - p[k]);
      n4 := magnitude(p[k+3] - p[k]);
      %message "n2:";
      %show n2;
      %message "n3:";
      %show n3;
      %message "n4:";
      %show n4;

      p[k+4] := origin;
      p[k+5] := p[k+4] shifted (n2, 0);
      p[k+6] := (p[k+4] shifted (n3, 0)) rotated (0, 0, n0);
      p[k+7] := (p[k+4] shifted (n4, 0)) rotated (0, 0, n1); 

      q[m+1] := p[k+4] -- p[k+5] -- p[k+6] -- p[k+7] -- cycle;
      %message "q[" & decimal (m+1) & "]:";
      %show q[m+1];

      p[k+8] := mediate(p[k+4], p[k+5]);
      p[k+9] := mediate(p[k+6], p[k+7]);

      if j == 1:
        q[m+1] *= t1;

        % if v == 1:
        %   message "m+1 == " & decimal (m+1);
        %   pause;
        % fi;
        
        if do_black:
          fill q[m+1] with_color black on_picture flat_quadrant_picture[v];
          draw q[m+1] with_color dark_gray on_picture flat_quadrant_picture[v+2];
        else:
          draw q[m+1] with_color dark_gray on_picture flat_quadrant_picture[v];
        fi;
        if do_black:
          fill q[m+1] rotated (180, 0) with_color black on_picture flat_quadrant_picture[v];
          draw q[m+1] rotated (180, 0) with_color dark_gray on_picture flat_quadrant_picture[v+2];
        else:
          draw q[m+1] rotated (180, 0) with_color dark_gray on_picture flat_quadrant_picture[v];
        fi;
        if j == 7:
          if do_labels:
            % dotlabel.llft("$p_{" & decimal (k+4) & "}$", p[k+4]) on_picture flat_quadrant_picture[v];
          %   dotlabel.lrt("$p_{" & decimal (k+5) & "}$", p[k+5]) on_picture flat_quadrant_picture[v];
          %   dotlabel.urt("$p_{" & decimal (k+6) & "}$", p[k+6]) on_picture flat_quadrant_picture[v];
          %   dotlabel.ulft("$p_{" & decimal (k+7) & "}$", p[k+7]) on_picture flat_quadrant_picture[v];
          %   dotlabel.bot("$p_{" & decimal (k+8) & "}$", p[k+8]) on_picture flat_quadrant_picture[v];
          %   dotlabel.top("$p_{" & decimal (k+9) & "}$", p[k+9]) on_picture flat_quadrant_picture[v];
          fi;
        fi;
      fi;
      
      if j > 1:
        p[k+10] := get_point (0) q[m-1];
        p[k+11] := get_point (1) q[m-1];
        p[k+12] := get_point (2) q[m-1];
        p[k+13] := get_point (3) q[m-1];
        p[k+14] := mediate(p[k+10], p[k+11], .5);
        p[k+15] := mediate(p[k+12], p[k+13], .5);
        n5 := magnitude(p[k+15] - p[k+14]);

        %t0 := identity shifted by (p[k-7] - p[k+14]);
        %t0 := identity shifted (0, ((j-1) * 2cm));
        t0 := identity shifted by (p[k+15]- p[k+8]);

        p[k+4] *= t0;
        p[k+5] *= t0;
        p[k+6] *= t0;
        p[k+7] *= t0;
        p[k+8] *= t0;
        p[k+9] *= t0;

        if j == 7:
          if do_labels:
            % dotlabel.lft("$p_{" & decimal (k+4) & "}$", p[k+4]) on_picture flat_quadrant_picture[v];
            % dotlabel.rt("$p_{" & decimal (k+5) & "}$", p[k+5]) on_picture flat_quadrant_picture[v];
            % dotlabel.rt("$p_{" & decimal (k+6) & "}$", p[k+6]) on_picture flat_quadrant_picture[v];
            % dotlabel.lft("$p_{" & decimal (k+7) & "}$", p[k+7]) on_picture flat_quadrant_picture[v];
            % dotlabel.bot("$p_{" & decimal (k+8) & "}$", p[k+8]) on_picture flat_quadrant_picture[v];
            % dotlabel.top("$p_{" & decimal (k+9) & "}$", p[k+9]) on_picture flat_quadrant_picture[v];
          fi;
        fi;

        q[m+1] *= t0;
        
        if do_black:
          fill q[m+1] with_color black on_picture flat_quadrant_picture[v];
          draw q[m+1] with_color dark_gray on_picture flat_quadrant_picture[v+2];
          fill q[m+1] rotated (180, 0) with_color black on_picture flat_quadrant_picture[v];
          draw q[m+1] rotated (180, 0) with_color dark_gray on_picture flat_quadrant_picture[v+2];
        else:
          draw q[m+1] with_color dark_gray on_picture flat_quadrant_picture[v];
          draw q[m+1] rotated (180, 0) with_color dark_gray on_picture flat_quadrant_picture[v];
        fi;

        if j == 7:
          if do_labels:
            % dotlabel.lft("$p_{" & decimal (k+10) & "}$", p[k+10]) on_picture flat_quadrant_picture[v];
            % dotlabel.rt("$p_{"  & decimal (k+11) & "}$", p[k+11]) on_picture flat_quadrant_picture[v];
            % dotlabel.rt("$p_{"  & decimal (k+12) & "}$", p[k+12]) on_picture flat_quadrant_picture[v];
            % dotlabel.lft("$p_{" & decimal (k+13) & "}$", p[k+13]) on_picture flat_quadrant_picture[v];
            % dotlabel.top("$p_{"  & decimal (k+14) & "}$", p[k+14]) on_picture flat_quadrant_picture[v];
            % dotlabel.bot("$p_{"  & decimal (k+15) & "}$", p[k+15]) on_picture flat_quadrant_picture[v];
          fi;
        fi;
        
      fi;

      flat_quadrant[i][j] := q[m+1];
      flat_quadrant[i][-j] := q[m+1] rotated (180, 0);

      %draw ((get_point (0) flat_quadrant[i][j]) -- (get_point(2) flat_quadrant[i][j]);

      temp_a := mediate(get_point (0) flat_quadrant[i][j], get_point (1) flat_quadrant[i][j], .5);
      temp_b := mediate(get_point (2) flat_quadrant[i][j], get_point (3) flat_quadrant[i][j], .5);
      temp_c := mediate(temp_a, temp_b, .5) shifted (-1.75cm, 0);
      
      %draw flat_quadrant[i][j] with_color red with_pen medium_pen on_picture flat_quadrant_picture[v];
      %drawdot get_point (0) flat_quadrant[i][j] with_color red with_pen medium_pen on_picture flat_quadrant_picture[v];
      %draw get_point (0) flat_quadrant[i][j] -- get_point (2) flat_quadrant[i][j]
      %with_color red with_pen medium_pen on_picture flat_quadrant_picture[v];
      %label(decimal i & "/" & decimal j, temp_c) on_picture flat_quadrant_picture[v];
      %label(decimal i & "/-" & decimal j, temp_c rotated (180, 0)) on_picture flat_quadrant_picture[v];
      
      k += 16;
      m += 2;
    endfor;
  endfor;

  v := 0;

  for i := 0 upto 15:
    if i == 8:
      v := 1;
    fi;

    q[m] := T[i][8];

    % message "m:";
    % show m;

    p[k] := get_point (0) q[m];
    p[k+1] := get_point (1) q[m];
    p[k+2] := get_point (2) q[m];

    n0 := magnitude (p[k+1] - p[k]);
    n1 := magnitude (p[k+2] - p[k]);
    n2 := (p[k+2] - p[k]) angle (p[k+1] - p[k]);

    p[k+3] := (n1, 0) rotated (0, 0, n2); 
    p[k+4] := (.5n0, 0);
    
    q[m+1] := origin -- (n0, 0) -- p[k+3] -- cycle; 

    t2 := identity shifted by (p[105 + (i * 112)] - p[k+4]);

    q[m+1] *= t2;

    q[m+2] := q[m+1] rotated (180, 0);

    if do_black:
      draw q[m+1] with_color dark_gray on_picture flat_quadrant_picture[v+2];
      fill q[m+1] with_color black on_picture flat_quadrant_picture[v];
      draw q[m+2] with_color dark_gray on_picture flat_quadrant_picture[v+2];
      fill q[m+2] with_color black on_picture flat_quadrant_picture[v];
    else:
      draw q[m+1] with_color dark_gray on_picture flat_quadrant_picture[v];
      draw q[m+2] with_color dark_gray on_picture flat_quadrant_picture[v];
    fi;
    
    flat_quadrant[i][8]  := q[m+1];
    flat_quadrant[i][-8] := q[m+2];
    k += 5;
    m += 3;
  endfor;

  point temp_pt;
  
  v := 0;
  j := 0;
  m := 226;
  for i = 0 upto 15:
    if i == 8:
      v := 1;
    fi;
    temp_pt := get_point (2) q[m];
    label.lft("RA $" & decimal j & "^\circ$", temp_pt shifted (-.375cm, 0)) on_picture flat_quadrant_picture[v];
    label.rt("RA $" & decimal (j + 22.5) & "^\circ$",  temp_pt shifted (.375cm, 0)) on_picture flat_quadrant_picture[v];
    j += 22.5;
    m += 3;
  endfor;
  

  % drawdot get_point (2) q[229] with_color green with_pen Large_pen on_picture flat_quadrant_picture[0];
  % drawdot get_point (2) q[232] with_color green with_pen Large_pen on_picture flat_quadrant_picture[0];
  % drawdot get_point (2) q[235] with_color green with_pen Large_pen on_picture flat_quadrant_picture[0];
  % drawdot get_point (2) q[238] with_color green with_pen Large_pen on_picture flat_quadrant_picture[0];
  % drawdot get_point (2) q[241] with_color green with_pen Large_pen on_picture flat_quadrant_picture[0];
  % drawdot get_point (2) q[244] with_color green with_pen Large_pen on_picture flat_quadrant_picture[0];
  % drawdot get_point (2) q[247] with_color green with_pen Large_pen on_picture flat_quadrant_picture[0];

  % drawdot get_point (2) q[250] with_color green with_pen Large_pen on_picture flat_quadrant_picture[1];
  % drawdot get_point (2) q[253] with_color green with_pen Large_pen on_picture flat_quadrant_picture[1];
  % drawdot get_point (2) q[256] with_color green with_pen Large_pen on_picture flat_quadrant_picture[1];
  % drawdot get_point (2) q[259] with_color green with_pen Large_pen on_picture flat_quadrant_picture[1];
  % drawdot get_point (2) q[262] with_color green with_pen Large_pen on_picture flat_quadrant_picture[1];
  % drawdot get_point (2) q[265] with_color green with_pen Large_pen on_picture flat_quadrant_picture[1];
  % drawdot get_point (2) q[268] with_color green with_pen Large_pen on_picture flat_quadrant_picture[1];
  % drawdot get_point (2) q[271] with_color green with_pen Large_pen on_picture flat_quadrant_picture[1];
  
  r0 := p4;
  r1 := p5;
    
  % drawdot q[2] with_color red with_pen Large_pen on_picture flat_quadrant_picture[0];
  % drawdot q[2] with_color red with_pen Large_pen on_picture flat_quadrant_picture[0];

  if do_labels:
    % dotlabel.lft("$r_0$", r0) on_picture flat_quadrant_picture[0];
    % dotlabel.rt("$r_1$", r1) on_picture flat_quadrant_picture[0];
  fi;

  j := 2;
  for i := 1 step 2 until 13:
    %draw q[i] with_color cyan with_pen medium_pen on_picture flat_quadrant_picture[0];
    r[j]   := get_point (3) q[i];
    r[j+1] := get_point (2) q[i];
    if do_labels:
      dotlabel.lft("$r_{" & decimal j & "}$", r[j]) on_picture flat_quadrant_picture[0];
      dotlabel.rt("$r_{" & decimal (j+1) & "}$", r[j+1]) on_picture flat_quadrant_picture[0];
    fi;
    j += 2;
  endfor;

  %draw q225 with_color cyan with_pen medium_pen on_picture flat_quadrant_picture[0];

  r[17] := get_point (2) q[225];

  if do_labels:
     dotlabel.top("$r_{17}$", r17) on_picture flat_quadrant_picture[0];
  fi;

  for i = 0 step 2 until 12:
    r18 := mediate(r[i], r[i+2], .5);
    %dotlabel.lft("$r_{18}$", r18) on_picture flat_quadrant_picture[0];
    r19 := r18 shifted (0, 0, 1);
    r20 := (mediate(r[i], r[i+2], .75)) rotated_around (r18, r19) 90;
    %dotlabel.lft("$r_{20}$", r20) on_picture flat_quadrant_picture[0];
    r21 := mediate(r[i], r[i+2], .2);
    r22 := mediate(r[i+2], r[i], .2);
    %dotlabel.rt("$r_{21}$", r21) on_picture flat_quadrant_picture[0];
    %dotlabel.rt("$r_{22}$", r22) on_picture flat_quadrant_picture[0];
    r23 := r21 shifted by (r20 - r18);
    r24 := r22 shifted by (r20 - r18);
    r25 := mediate(r23, r24, .2);
    r26 := mediate(r24, r23, .2);
    %dotlabel.lft("$r_{25}$", r25) on_picture flat_quadrant_picture[0];
    %dotlabel.lft("$r_{26}$", r26) on_picture flat_quadrant_picture[0];

    u0 := r21 -- r25 -- r26 -- r22;
    
    draw u0  on_picture flat_quadrant_picture[0];
    draw u0 rotated (180, 0) on_picture flat_quadrant_picture[0];
    draw u0 shifted by (get_point (1) flat_quadrant[8][1] - (get_point (1) flat_quadrant[0][1]))
      on_picture flat_quadrant_picture[1];
    draw (u0 rotated (180, 0)) shifted by (get_point (1) flat_quadrant[8][1] - (get_point (1) flat_quadrant[0][1]))
      on_picture flat_quadrant_picture[1];

    u1 := u0;
    t3 := identity shifted (5cm, 0);
    
    for j = 1 upto 7:
      u1 *= t3;
      draw u1 on_picture flat_quadrant_picture[0];
      draw u1 rotated (180, 0) on_picture flat_quadrant_picture[0];
      draw u1 shifted by (get_point (1) flat_quadrant[8][1] - (get_point (1) flat_quadrant[0][1]))
	on_picture flat_quadrant_picture[1];
      draw (u1 rotated (180, 0)) shifted by (get_point (1) flat_quadrant[8][1] - (get_point (1) flat_quadrant[0][1]))
	on_picture flat_quadrant_picture[1];
    endfor;

    u1 := u0;
    
    %draw u0 on_picture flat_quadrant_picture[1];
    %draw u0 rotated (180, 0) on_picture flat_quadrant_picture[1];
    
    % for j = 0 upto 7:
    %   u1 *= t3;
    %   draw u1 on_picture flat_quadrant_picture[1];
    %   draw u1 rotated (180, 0) on_picture flat_quadrant_picture[1];
    % endfor;

  endfor;

  r27 := mediate(r14, r17, .2);
  r28 := mediate(r17, r14, .3);
  r29 := mediate(r27, r28, .5);
  r30 := r29 shifted (0, 0, 1);
  r31 := r28 rotated_around (r29, r30) 90;

  r32 := (.125cm * unit_vector(r31 - r29)) shifted r29;

  u2 := (r27 -- r28) shifted by (r32 - r29);
  u3 := r27 -- (r27 shifted by (r32 - r29));
  u4 := r28 -- (r28 shifted by (r32 - r29));

  t4 := identity shifted (5cm, 0);
  
  for i = 0 upto 7:
    draw u2 on_picture flat_quadrant_picture[0];
    draw u3 on_picture flat_quadrant_picture[0];
    draw u4 on_picture flat_quadrant_picture[0];
    draw u2 rotated (180, 0) on_picture flat_quadrant_picture[0];
    draw u3 rotated (180, 0) on_picture flat_quadrant_picture[0];
    draw u4 rotated (180, 0) on_picture flat_quadrant_picture[0];

    draw u2 shifted by (get_point (1) flat_quadrant[8][1] - (get_point (1) flat_quadrant[0][1]))
      on_picture flat_quadrant_picture[1];
    draw u3 shifted by (get_point (1) flat_quadrant[8][1] - (get_point (1) flat_quadrant[0][1]))
      on_picture flat_quadrant_picture[1];
    draw u4 shifted by (get_point (1) flat_quadrant[8][1] - (get_point (1) flat_quadrant[0][1]))
      on_picture flat_quadrant_picture[1];

    draw (u2 shifted by (get_point (1) flat_quadrant[8][1] - (get_point (1) flat_quadrant[0][1])))
      rotated (180, 0) on_picture flat_quadrant_picture[1];
    draw (u3 shifted by (get_point (1) flat_quadrant[8][1] - (get_point (1) flat_quadrant[0][1])))
      rotated (180, 0) on_picture flat_quadrant_picture[1];
    draw (u4 shifted by (get_point (1) flat_quadrant[8][1] - (get_point (1) flat_quadrant[0][1])))
      rotated (180, 0) on_picture flat_quadrant_picture[1];

    u2 *= u3 *= u4 *= t4;
  endfor;
    
  dotlabel.rt("$r_{27}$", r27) on_picture flat_quadrant_picture[0];
  dotlabel.rt("$r_{28}$", r28) on_picture flat_quadrant_picture[0];
  %dotlabel.rt("$r_{29}$", r29) on_picture flat_quadrant_picture[0];
  %dotlabel.lft("$r_{32}$", r32) on_picture flat_quadrant_picture[0];  
  
  
  % draw flat_quadrant[8][1] with_color blue with_pen medium_pen on_picture flat_quadrant_picture[1];
  % draw flat_quadrant[8][2] with_color red with_pen medium_pen on_picture flat_quadrant_picture[1];
  % draw flat_quadrant[8][3] with_color green with_pen medium_pen on_picture flat_quadrant_picture[1];
  % draw flat_quadrant[8][4] with_color cyan with_pen medium_pen on_picture flat_quadrant_picture[1];
  %draw flat_quadrant[8][8] with_color cyan with_pen medium_pen on_picture flat_quadrant_picture[1];



  
enddef;

%% ** (2) End of 3DLDF code.

%% * (1) Emacs-Lisp code for use in indirect buffers when using the          
%%       GNU Emacs editor.  The local variable list is not evaluated when an 
%%       indirect buffer is visited, so it's necessary to evaluate the       
%%       following s-expression in order to use the facilities normally      
%%       accessed via the local variables list.                              
%%       \initials{LDF 2004.02.12}.                                          

%% (progn (metafont-mode) (outline-minor-mode t) (setq fill-column 80))    

%% * (1) Local variables for Emacs.

%% Local Variables:
%% mode:Metapost
%% eval:(outline-minor-mode t)
%% eval:(read-abbrev-file abbrev-file-name)
%% abbrev-mode:t
%% outline-regexp:"%% [*\f]+"
%% End:

