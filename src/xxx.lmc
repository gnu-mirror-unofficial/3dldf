%% ** (2) macro draw_stitches
    
macro draw_stitches;

def draw_stitches {boolean do_labels} =

  message "Entering draw_stitches.";
    
  point P[];
  
  if false:
    draw edge0 with_pen pencircle scaled (3pt, 3pt) with_color green on_picture qv[0];
    draw edge1 with_pen pencircle scaled (3pt, 3pt) with_color cyan on_picture qv[0];
    draw edge2 with_pen pencircle scaled (3pt, 3pt) with_color blue on_picture qv[0];
    draw edge3 with_pen pencircle scaled (3pt, 3pt) with_color red on_picture qv[0];
  fi;
  
  %edge1  %% top right 
  %edge0  %% top left
  %edge3  %% bottom right
  %edge2  %% bottom left

  for i = 0 upto (length Q - 1):
    P[i] := get_point (i) Q;
  endfor;

  if do_labels:
    dotlabel.rt("$P_{0}$", P0) on_picture qv[0];
    dotlabel.rt("$P_{1}$", P1) on_picture qv[0];
    dotlabel.rt("$P_{2}$", P2) on_picture qv[0];
    dotlabel.rt("$P_{3}$", P3) on_picture qv[0];
    dotlabel.rt("$P_{4}$", P4) on_picture qv[0];
    dotlabel.rt("$P_{5}$", P5) on_picture qv[0];
    dotlabel.rt("$P_{6}$", P6) on_picture qv[0];
    dotlabel.rt("$P_{7}$", P7) on_picture qv[0];
    dotlabel.lft("$P_{8}$", P8) on_picture qv[0];
    dotlabel.lrt("$P_{9}$", P9) on_picture qv[0];
    dotlabel.lft("$P_{10}$", P10) on_picture qv[0];
    dotlabel.lft("$P_{11}$", P11) on_picture qv[0];
    dotlabel.lft("$P_{12}$", P12) on_picture qv[0];
    dotlabel.lft("$P_{13}$", P13) on_picture qv[0];
    dotlabel.lft("$P_{14}$", P14) on_picture qv[0];
    dotlabel.lft("$P_{15}$", P15) on_picture qv[0];
    dotlabel.lft("$P_{16}$", P16) on_picture qv[0];
    dotlabel.lft("$P_{17}$", P17) on_picture qv[0];
    dotlabel.rt("$P_{18}$", P18) on_picture qv[0];
    dotlabel.lft("$P_{19}$", P19) on_picture qv[0];
    dotlabel.lft("$P_{20}$", P20) on_picture qv[0];
    %dotlabel.lft("$P_{21}$", P21) on_picture qv[0];
    dotlabel.lft("$P_{22}$", P22) on_picture qv[0];
    dotlabel.lft("$P_{23}$", P23) on_picture qv[0];
    dotlabel.lft("$P_{24}$", P24) on_picture qv[0];
    dotlabel.lft("$P_{25}$", P25) on_picture qv[0];
    dotlabel.rt("$P_{26}$", P26) on_picture qv[0];
    dotlabel.lft("$P_{27}$", P27) on_picture qv[0];
    dotlabel.rt("$P_{28}$", P28) on_picture qv[0];
    dotlabel.rt("$P_{29}$", P29) on_picture qv[0];
    dotlabel.rt("$P_{30}$", P30) on_picture qv[0];
    dotlabel.rt("$P_{31}$", P31) on_picture qv[0];
    dotlabel.rt("$P_{32}$", P32) on_picture qv[0];
    dotlabel.rt("$P_{33}$", P33) on_picture qv[0];
    dotlabel.rt("$P_{34}$", P34) on_picture qv[0];
    dotlabel.lrt("$P_{35}$", P35) on_picture qv[0];
  fi;

  for j = 0 upto 7:
    for i = 0 upto 6:
      P36 := get_point 0 tab[i];
      P37 := get_point 1 tab[i]; 
      P38 := get_point 2 tab[i];
      P39 := get_point 3 tab[i];

      P40 := mediate(P38, P39);
      P41 := mediate(P36, P37);

      P42 := P40 rotated_around (P0, P17) 180;
      P43 := P41 rotated_around (P0, P17) 180;
      
      drawdot mediate(P40, P41, .25) with_pen pencircle scaled (2.5pt, 2.5pt, 2.5pt) on_picture qv[j];
      drawdot mediate(P40, P41, .5) with_pen pencircle scaled (2.5pt, 2.5pt, 2.5pt) on_picture qv[j];
      drawdot mediate(P40, P41, .75) with_pen pencircle scaled (2.5pt, 2.5pt, 2.5pt) on_picture qv[j];

      drawdot mediate(P42, P43, .25) with_pen pencircle scaled (2.5pt, 2.5pt, 2.5pt) on_picture qv[j];
      drawdot mediate(P42, P43, .5) with_pen pencircle scaled (2.5pt, 2.5pt, 2.5pt) on_picture qv[j];
      drawdot mediate(P42, P43, .75) with_pen pencircle scaled (2.5pt, 2.5pt, 2.5pt) on_picture qv[j];
    endfor;
  endfor;

% if do_labels:
  %   dotlabel.llft("$P_{36}$", P36) on_picture qv[0];
  %   dotlabel.lft("$P_{37}$", P37) on_picture qv[0];
  %   dotlabel.lft("$P_{38}$", P38) on_picture qv[0];
  %   dotlabel.urt("$P_{39}$", P39) on_picture qv[0];
  % fi;

    
  message "Exiting draw_stitches.";
  
enddef;

%% ** (2) End of 3DLDF code.

%% * (1) Emacs-Lisp code for use in indirect buffers when using the          
%%       GNU Emacs editor.  The local variable list is not evaluated when an 
%%       indirect buffer is visited, so it's necessary to evaluate the       
%%       following s-expression in order to use the facilities normally      
%%       accessed via the local variables list.                              
%%       \initials{LDF 2004.02.12}.                                          

%% (progn (metafont-mode) (outline-minor-mode t) (setq fill-column 80))    

%% * (1) Local variables for Emacs.

%% Local Variables:
%% mode:Metapost
%% eval:(outline-minor-mode t)
%% eval:(read-abbrev-file abbrev-file-name)
%% abbrev-mode:t
%% outline-regexp:"%% [*\f]+"
%% End:
