%%%% sample3.ldf
%%%% Created by Laurence D. Finston (LDF) Tue 29 Jun 2021 11:31:54 PM CEST

%% * (1) Copyright and License.

%%%% This file is part of GNU 3DLDF, a package for three-dimensional drawing.  
%%%% Copyright (C) 2021 The Free Software Foundation  

%%%% GNU 3DLDF is free software; you can redistribute it and/or modify 
%%%% it under the terms of the GNU General Public License as published by 
%%%% the Free Software Foundation; either version 3 of the License, or 
%%%% (at your option) any later version.  

%%%% GNU 3DLDF is distributed in the hope that it will be useful, 
%%%% but WITHOUT ANY WARRANTY; without even the implied warranty of 
%%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
%%%% GNU General Public License for more details.  

%%%% You should have received a copy of the GNU General Public License 
%%%% along with GNU 3DLDF; if not, write to the Free Software 
%%%% Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA 

%%%% GNU 3DLDF is a GNU package.  
%%%% It is part of the GNU Project of the  
%%%% Free Software Foundation 
%%%% and is published under the GNU General Public License. 
%%%% See the website http://www.gnu.org 
%%%% for more information.   
%%%% GNU 3DLDF is available for downloading from 
%%%% http://www.gnu.org/software/3dldf/LDF.html.
  

%%%% Please send bug reports to Laurence.Finston@gmx.de
%%%% The mailing list help-3dldf@gnu.org is available for people to 
%%%% ask other users for help.  
%%%% The mailing list info-3dldf@gnu.org is for sending 
%%%% announcements to users. To subscribe to these mailing lists, send an 
%%%% email with ``subscribe <email-address>'' as the subject.  

%%%% The author can be contacted at: 

%%%% Laurence D. Finston 
%%%% c/o Free Software Foundation, Inc. 
%%%% 51 Franklin St, Fifth Floor 
%%%% Boston, MA  02110-1301  
%%%% USA

%%%% Laurence.Finston@gmx.de

% * (1) Beginning of 3DLDF code.

%% * (1) Plotting stars on sphere development (spherical biangles)

point p[];    %% Global
picture v[];  
numeric bi_ang[];  
picture bi_ang_pict[];
numeric biangle_width[];
numeric RA_arc_length;
numeric Declination_arc_length;
numeric middle_angle;   
numeric min_edge_angle; 
numeric max_edge_angle;
point ra_decl_zero_pt;

input "sample3.lmc";

get_spherical_biangles {3.5, false};  %% Second arg. is 'do_black'.  LDF 2021.7.4.

%% ** (2)

get_sphere_for_plotting_stars {3.5};

picture_vector pv;

numeric i;
i := 0;

pv += 4;
plot_star_on_sphere (pv) {3.5, arcturus, i};
i += 4;

%pv += 4;
%plot_star_on_sphere (pv) {3.5, hadar, i};
%i += 4;

%% *** (3)

%% These are the parameters I need for plotting stars on the spherical biangles.
%% LDF 2021.7.4.

% bi_ang0:
% >> 5
% bi_ang1:
% >> -1
% middle_angle:
% >> 225
% min_edge_angle:
% >> 202.5
% max_edge_angle:
% >> 247.5
% Declination_arc_length
% RA_arc_length

macro plot_star_on_spherical_biangle;

def plot_star_on_spherical_biangle (pv) {numeric radius, star S} =
  
  numeric decl;
  numeric ra;

  point R[];
  
  message "Entering macro `plot_star_on_spherical_biangle'.";
  
  decl := declination_decimal_degrees S;
  ra   :=  right_ascension_decimal_degrees S;

  message "decl:";
  show decl;

  message "ra:";
  show ra;

  message "bi_ang0:";
  show bi_ang0;

  message "bi_ang1:";
  show bi_ang1;

  message "middle_angle:";
  show middle_angle;

  message "min_edge_angle:";
  show min_edge_angle;

  message "max_edge_angle:";
  show max_edge_angle;

  message "Declination_arc_length:";
  show Declination_arc_length;

  message "RA_arc_length:";
  show RA_arc_length;

  message "ra_decl_zero_pt:";
  show ra_decl_zero_pt;

  if (bi_ang0 == 5) and (bi_ang1 == -1):
    message "bi_ang0 == 5 and bi_ang1 == -1.";
    if decl >= 0:
      R0 := (0, Declination_arc_length);
    else:
      R0 := (0, -Declination_arc_length);
    fi;

    %dotlabel.rt("$R_0$", R0) bi_ang_pict[bi_ang0];

    message "ra";
    show ra;
    message "middle_angle";
    show middle_angle;
    %pause;
    
    if ra > middle_angle:
      R1 := (RA_arc_length, ypart R0);
    else:
      R1 := (-RA_arc_length, ypart R0);
    fi;

    verbatim_metapost "verbatimtex \\newbox\\starlistbox\\newbox\RAbox\\newbox\Declbox\setbox\RAbox=\hbox{RA\space}"
        & "\setbox\starlistbox=\vtop{}"
        & "\setbox\Declbox=\hbox{Decl.~}"
        & "\def\A#1#2#3#4{\setbox0=\hbox{#1:\space}"
        & "\setbox\starlistbox=\vtop{\\unvcopy\starlistbox\hbox{\copy0#2}"
        & "\hbox{\hskip\wd0\hbox to \wd\Declbox{RA\hfil}#3}"
        & "\hbox{\hskip\wd0\copy\Declbox #4}"
        & "}"
        & "} etex";
    
    dotlabel.lft("$R_1$", R1) bi_ang_pict[bi_ang0];

    label("\A{$R_1$}{" & common_name S & "}{$" & decimal ra & "^\circ$}{$" & decimal decl & "^\circ$}",
          p22 shifted (-1.5cm, -2cm)) bi_ang_pict[bi_ang0];

  fi;
 
  message "Exiting macro `plot_star_on_spherical_biangle'.";

enddef;
  

%% *** (3)

picture_vector qv;

plot_star_on_spherical_biangle (qv) {3.5, arcturus};

verbatim_metapost "verbatimtex YYY etex";

label("XXX\box\starlistbox", p22 shifted (-.5cm, -1.5cm)) bi_ang_pict[bi_ang0];
    

%% *** (3) Figure and output commands.

input "sample3.aux";

%% *** (3)


%% ** (2)

verbatim_metapost "end";
  
end;  

%% ** (2) End of 3DLDF code.

%% * (1) Emacs-Lisp code for use in indirect buffers when using the          
%%       GNU Emacs editor.  The local variable list is not evaluated when an 
%%       indirect buffer is visited, so it's necessary to evaluate the       
%%       following s-expression in order to use the facilities normally      
%%       accessed via the local variables list.                              
%%       \initials{LDF 2004.02.12}.                                          

%% (progn (metafont-mode) (outline-minor-mode t) (setq fill-column 80))    

%% * (1) Local variables for Emacs.

%% Local Variables:
%% mode:Metapost
%% eval:(outline-minor-mode t)
%% eval:(read-abbrev-file abbrev-file-name)
%% abbrev-mode:t
%% outline-regexp:"%% [*\f]+"
%% End:


