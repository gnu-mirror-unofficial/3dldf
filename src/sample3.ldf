%%%% sample3.ldf
%%%% Created by Laurence D. Finston (LDF) Tue 29 Jun 2021 11:31:54 PM CEST

%% * (1) Copyright and License.

%%%% This file is part of GNU 3DLDF, a package for three-dimensional drawing.  
%%%% Copyright (C) 2021 The Free Software Foundation  

%%%% GNU 3DLDF is free software; you can redistribute it and/or modify 
%%%% it under the terms of the GNU General Public License as published by 
%%%% the Free Software Foundation; either version 3 of the License, or 
%%%% (at your option) any later version.  

%%%% GNU 3DLDF is distributed in the hope that it will be useful, 
%%%% but WITHOUT ANY WARRANTY; without even the implied warranty of 
%%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
%%%% GNU General Public License for more details.  

%%%% You should have received a copy of the GNU General Public License 
%%%% along with GNU 3DLDF; if not, write to the Free Software 
%%%% Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA 

%%%% GNU 3DLDF is a GNU package.  
%%%% It is part of the GNU Project of the  
%%%% Free Software Foundation 
%%%% and is published under the GNU General Public License. 
%%%% See the website http://www.gnu.org 
%%%% for more information.   
%%%% GNU 3DLDF is available for downloading from 
%%%% http://www.gnu.org/software/3dldf/LDF.html.
  

%%%% Please send bug reports to Laurence.Finston@gmx.de
%%%% The mailing list help-3dldf@gnu.org is available for people to 
%%%% ask other users for help.  
%%%% The mailing list info-3dldf@gnu.org is for sending 
%%%% announcements to users. To subscribe to these mailing lists, send an 
%%%% email with ``subscribe <email-address>'' as the subject.  

%%%% The author can be contacted at: 

%%%% Laurence D. Finston 
%%%% c/o Free Software Foundation, Inc. 
%%%% 51 Franklin St, Fifth Floor 
%%%% Boston, MA  02110-1301  
%%%% USA

%%%% Laurence.Finston@gmx.de

% * (1) Beginning of 3DLDF code.

%% * (1) New sample code.

numeric a[], b[];
point p[];
path  q[];
circle c[];
sphere s;
picture v[];
focus f;
transform t[];
string u;

set f with_position (0, 20, -50) 
       with_direction (0, 20, 10) with_distance 70; 

%s := unit_sphere scaled (6, 6, 6);

set s with_divisions_vertical 8 with_divisions_horizontal 2 with_radius 6;
rotate s (0, 22.5);

draw s;

%show sirius;

a0 := ra_decimal_degrees vega;
message "RA decimal deg. Vega (a0):";
show a0;

a1 := declination_decimal_degrees vega;
message "Declination decimal deg. Vega (a1):";
show a1;

c0 := unit_circle scaled (6, 0, 6);
draw c0 with_color red;

% p1 := plot sirius     with_radius 6;
% p2 := plot canopus    with_radius 6;
% p4 := plot arcturus   with_radius 6;
% %% Get 6!

show vega;

p5 := plot vega       with_radius 6;

% p6 := plot capella    with_radius 6;
% p7 := plot rigel      with_radius 6;
% p8 := plot procyon    with_radius 6;
% p9 := plot achernar   with_radius 6;
% p10 := plot betelgeuse with_radius 6;
% p11 := plot hadar      with_radius 6;

p12 := (xpart p5, 0, zpart p5);  % Vega

dotlabel.lft("$p_{12}$", p12);

bool_point_vector bpv;

bpv := c0 intersection_points (origin -- p12);

message "bpv:";
show bpv;

%p13 := bpv[0];

%dotlabel.top("$p_{13}$", p13);

p14 := bpv[1];
dotlabel.lrt("$p_{14}$", p14);

q0 := origin -- p5 -- p14 -- cycle;

draw q0 with_color blue;

p34 := get_normal q0;

message "p34:";
show p34;

%set c2 with_center origin with_diameter 6 with_normal p34;

%draw c2 with_color orange;

i := 1;
q3 += p14;
q3 += ..;
forever:
p35 := p14;
message "p35 before rotating"; 
show p35;
rotate_around p35 (origin, p34) (i * 5);
show p35;
message "p35 after rotating"; 
show p35;
i := i + 1;
exit_if (ypart p35) >= (ypart p5);
%drawdot p35 with_color green with_pen pencircle scaled (3pt, 3pt, 3pt);
q3 += p35;
endfor; 

draw q3 with_color orange;

% dotlabel.lft("Sirius",      p1);      
% drawdot p2 with_pen pencircle scaled (3pt, 3pt, 3pt);
% label.lft("Canopus",     p2 shifted (-10pt, 0));     
% %% Get 3!
% dotlabel.bot("Arcturus",    p4);    

dotlabel.urt("Vega", p5);        

% dotlabel.ulft("Capella",     p6);
% drawdot p7 with_pen pencircle scaled (3pt, 3pt, 3pt);
% label.ulft("Rigel",       p7 shifted (-5pt, 0));       
% drawdot p8 with_pen pencircle scaled (3pt, 3pt, 3pt);
% label.llft("Procyon",     p8 shifted (-5pt, 0));     
% dotlabel.top("Achernar",    p9);    
% dotlabel.lft("Betelgeuse", p10);  
% dotlabel.lrt("Hadar",      p11);       

%% ** (2)

a2 := circumference c0; 
a3 := arc_length (a1) c0;

message "a2 (circumference of red circle):";
show a2;

message "a3 (arc length of arc from p14 to p5 (Declination of Vega):";
show a3;

message "a0 (RA):";
show a0;

%% !! START HERE: LDF 2021.6.29.  Add code for finding arc lengths for the RA.
%% Add points on c0 for 22.5°, 67.5°, etc.

%% 22.5
%% 45
%% 67.5
%% 90
%% 112.5
%% 135
%% 157.5
%% 180
%% 202.5
%% 225
%% 247.5
%% 270
%% 292.5
%% 315
%% 337.5
%% 360 

numeric bi_ang[];

if (a0 == 337.5):
   message "a0 (RA) == 337.5";
   bi_ang0 := 0;
   bi_ang1 := 7;
elseif (a0 > 337.5) or (a0 < 22.5):
   message "a0 (RA) > 337.5 or < 22.5";
   bi_ang0 := 0;
   bi_ang1 := -1;
elseif (a0 == 22.5):
   message "a0 (RA) == 22.5";
   bi_ang0 := 0;
   bi_ang1 := 1;
elseif (a0 > 22.5) and (a0 < 67.5):
   message "a0 (RA) > 22.5 or a0 < 67.5";
   bi_ang0 := 1;
   bi_ang1 := -1;
elseif (a0 == 67.5):
   message "a0 (RA) == 67.5";
   bi_ang0 := 1;
   bi_ang1 := 2;
elseif (a0 > 67.5) and (a0 < 112.5):
   message "a0 (RA) > 67.5 and a0 < 112.5";
   bi_ang0 := 2;
   bi_ang1 := -1;
elseif (a0 == 112.5):
   message "a0 (RA) == 112.5";
   bi_ang0 := 2;
   bi_ang1 := 3;
elseif (a0 > 112.5) and (a0 < 157.5):
   bi_ang0 := 3;
   bi_ang1 := -1;
elseif a0 == 157.5:
   message "a0 (RA) == 157.5";
   bi_ang0 := 3;
   bi_ang1 := 4;
elseif (a0 > 157.5) and (a0 < 202.5):
   message "a0 (RA) > 157.5 and a0 < 202.5";
   bi_ang0 := 4;
   bi_ang1 := -1;
elseif a0 == 202.5:
   message "a0 (RA) == 202.5";
   bi_ang0 := 4;
   bi_ang1 := 5;
elseif (a0 > 202.5) and (a0 < 247.5):
   message "a0 (RA) > 202.5 and a0 < 247.5";
   bi_ang0 := 5;
   bi_ang1 := -1;
elseif a0 == 247.5:
   message "a0 (RA) == 247.5";
   bi_ang0 := 5;
   bi_ang1 := 6;
elseif (a0 > 247.5) and (a0 < 292.5):
   message "a0 (RA) > 247.5 and a0 < 292.5";
   bi_ang0 := 6;
   bi_ang1 := -1;
elseif a0 == 292.5:
   message "a0 (RA) == 292.5";
   bi_ang0 := 6;
   bi_ang1 := 7;
elseif (a0 > 292.5) and (a0 < 337.5):
  message "a0 (RA) > 292.5 and a0 < 337.5";
   bi_ang0 := 7;
   bi_ang1 := -1;
else
  errmessage "a0 (RA) has invalid value.";
fi;

message "bi_ang0:"; 
show bi_ang0;

message "bi_ang1:"; 
show bi_ang1;

% a3 (arc length of arc from p14 to p5 (Declination of Vega):
% >> 2.03156
% a7 (arc length from p5 to p32):
%pause;

q2 := origin -- (6, 0) -- p14 -- cycle;

draw q2 dashed evenly with_color green;

p15 := (6, 0);
dotlabel.urt("$0^\\circ$", p15);
dotlabel.lrt("$360^\\circ$", p15);

p16 := (6, 0) rotated (0, 22.5);
dotlabel.urt("$22.5^\\circ$", p16);

p17 := (6, 0) rotated (0, 45);
dotlabel.urt("$45^\\circ$", p17);

p18 := (6, 0) rotated (0, 67.5);
dotlabel.urt("$67.5^\\circ$", p18);

p19 := (6, 0) rotated (0, 90);
dotlabel.urt("$90^\\circ$", p19);

p20 := (6, 0) rotated (0, 112.5);
dotlabel.top("$112.5^\\circ$", p20);

p21 := (6, 0) rotated (0, 135.0);
dotlabel.ulft("$135^\\circ$", p21);

p22 := (6, 0) rotated (0, 157.5);
dotlabel.lft("$157.5^\\circ$", p22);

p23 := (6, 0) rotated (0, 180);
dotlabel.lft("$180^\\circ$", p23);

p24 := (6, 0) rotated (0, 202.5);
dotlabel.lft("$202.5^\\circ$", p24);

p25 := (6, 0) rotated (0, 225);
dotlabel.lft("$225^\\circ$", p25);

p26 := (6, 0) rotated (0, 247.5);
dotlabel.llft("$247.5^\\circ$", p26);

draw origin -- p26;

p27 := (6, 0) rotated (0, 270);
dotlabel.bot("$270^\\circ$", p27);

draw origin -- p27;

p28 := (6, 0) rotated (0, 292.5);
dotlabel.lrt("$292.5^\\circ$", p28);

draw origin -- p28;

p29 := (6, 0) rotated (0, 315);
dotlabel.lrt("$315^\\circ$", p29);

p30 := (6, 0) rotated (0, 337.5);
dotlabel.rt("$337.5^\\circ$", p30);

p31 := (0, ypart p5, 0);
dotlabel.lft("$p_{31}$", p31); 

draw p31 -- p5 with_color red;
draw origin -- p31;

a4 := 2 * magnitude (p31 - p5);

set c1 with_center p31 with_diameter a4;

draw c1 with_color red;

message "a4 (diameter of c1):";
show a4;
%pause;

p32 := (.5a4, ypart p31) rotated (0, 270);
dotlabel.llft("$p_{32}$", p32);

p33 := (.5a4, ypart p31) rotated (0, 292.5);
dotlabel.bot("$p_{33}$", p33);

a5 := a0 - 270;

message "a5 (RA dec. deg. Vega - 270):";
show a5;

a6 := 292.5 - a0; 
message "a6 (292.5 - RA dec. deg. Vega):";
show a6;

a7 := arc_length (a5) c1;
message "a7 (arc length from p5 to p32):";
show a7;

a8 := arc_length (a6) c1;
message "a8 (arc length from p5 to p33):";
show a8;

%pause;

;% Declination

% p23 := (6, 0) rotated (0, 0, 22.5);
% dotlabel.rt("$22.5^\\circ$", p23) with_text_color blue;
% dotlabel.rt("$22.5^\\circ$", p23 rotated (180, 0)) with_text_color blue;
% dotlabel.lft("$22.5^\\circ$", p23 rotated (0, 180)) with_text_color blue;
% dotlabel.lft("$22.5^\\circ$", p23 rotated (0, 0, 180)) with_text_color blue;


% p24 := (6, 0) rotated (0, 0, 45);
% dotlabel.rt("$45^\\circ$", p24) with_text_color blue;
% dotlabel.rt("$45^\\circ$", p24 rotated (180, 0)) with_text_color blue;
% dotlabel.ulft("$45^\\circ$", p24 rotated (0, 180)) with_text_color blue;
% dotlabel.ulft("$45^\\circ$", p24 rotated (0, 0, 180)) with_text_color blue;

% p25 := (6, 0) rotated (0, 0, 67.5);
% dotlabel.rt("$67.5^\\circ$", p25) with_text_color blue;
% dotlabel.rt("$67.5^\\circ$", p25 rotated (180, 0)) with_text_color blue;
% dotlabel.ulft("$67.5^\\circ$", p25 rotated (0, 180)) with_text_color blue;
% dotlabel.ulft("$67.5^\\circ$", p25 rotated (0, 0, 180)) with_text_color blue;

% p23 := (0, 6, 0);
% dotlabel.top("$90^\\circ$", p23) with_text_color blue;
% dotlabel.bot("$90^\\circ$", p23 rotated (180, 0)) with_text_color blue;

v0 := currentpicture;

%% ** (2)

currentpicture := nullpicture;

drawdot origin;

v1 := currentpicture;

% +--------------------------------+-------------+
% | approx_rank_apparent_magnitude | common_name |
% +--------------------------------+-------------+
% |                              1 | Sirius      |
% |                              2 | Canopus     |
% |                              4 | Arcturus    |
% |                              5 | Vega        |
% |                              6 | Capella     |
% |                              7 | Rigel       |
% |                              8 | Procyon     |
% |                              9 | Achernar    |
% |                             10 | Betelgeuse  |
% |                             11 | Hadar       |
% |                             12 | Altair      |
% |                             14 | Aldebaran   |
% |                             15 | Antares     |
% |                             16 | Spica       |
% |                             17 | Pollux      |
% |                             18 | Fomalhaut   |
% |                             19 | Deneb       |
% |                             20 | Mimosa      |
% |                             21 | Regulus     |
% |                             22 | Adhara      |
% |                             24 | Shaula      |
% |                             25 | Gacrux      |
% |                             26 | Bellatrix   |
% |                             27 | Elnath      |
% |                             28 | Miaplacidus |
% |                             29 | Alnilam     |
% |                             30 | Alnair      |
% |                             31 | Alnitak     |
% |                             32 | Alioth      |
% |                             33 | Mirfak      |
% +--------------------------------+-------------+

%% !! START HERE:  LDF 2021.6.28.  Get star with rank 3!

beginfig(1);
  currentpicture := v0;
  label("{\\bf Perspective Projection}", (0, -4));
endfig with_focus f;

beginfig(2);
  currentpicture := v0;
  label("{\\bf Parallel X-Y} (Viewed from the front)", (0, -4));
endfig with_projection parallel_x_y; 

beginfig(3);
  currentpicture := v0;
  label("{\\bf Parallel X-Z} (Viewed from above)", (0, 0, -4));
endfig with_projection parallel_x_z; 

beginfig(4);
  currentpicture := v0;
  label("{\\bf Parallel Z-Y} (Viewed from the right side)", (0, -4));
endfig with_projection parallel_z_y; 

beginfig(5);
  c3 := unit_circle scaled (6, 0, 6) rotated (90, 0);
  draw c3;
  draw (-6, 0) -- (6, 0);
  draw (0, -6) -- (0, 6);

  j := 0;

  for i = 11.25 step 11.25 until 78.75:
     p36 := (6, 0);
     rotate p36 (0, 0, i);
     p37 := (0, ypart p36);
     draw p37 -- p36;
     b[j] := magnitude (p36 - p37);
     show b[j];
     message "b[" & decimal j & "], (magnitude (p36 - p37)):";
     show b[j];
     u := "$" & decimal i & "^\circ$";
     dotlabel.rt(u, p36);
     draw origin -- p36;
     u := decimal b[j];
     dotlabel.bot(u, mediate(p36, p37, .5));
     j := j + 1;
  endfor;

pause;

  % p36 := (3, 0);
  % rotate p36 (0, 0, 22.5);
  % dotlabel.rt("$22.5^\circ$", p36);
  % p37 := (0, ypart p36);
  % draw p37 -- p36;
  % a9 := magnitude (p36 - p37);
  % message "a9, (magnitude (p36 - p37)):";
  % show a9;
  % u := decimal a9;
  % message "u:"; 
  % show u;
  % draw origin -- p36;
  % dotlabel.bot(u, mediate(p36, p37, .5));



endfig with_projection parallel_x_y; 

beginfig(6);
  numeric n[];
  n0 := a2 / 8;
  draw (0, -.25a2) -- (0, .25a2);  %% Half of circumference
  draw (-.5n0, 0) -- (.5n0, 0);  
endfig with_projection parallel_x_y; 

verbatim_metapost "end";

%% ** (2) *******************************************

end;

%% ** (2) End of 3DLDF code.

%% * (1) Emacs-Lisp code for use in indirect buffers when using the          
%%   	 GNU Emacs editor.  The local variable list is not evaluated when an 
%%   	 indirect buffer is visited, so it's necessary to evaluate the       
%%   	 following s-expression in order to use the facilities normally      
%%   	 accessed via the local variables list.                              
%%   	 \initials{LDF 2004.02.12}.                                          

%% (progn (metafont-mode) (outline-minor-mode t) (setq fill-column 80))    

%% * (1) Local variables for Emacs.

%% Local Variables:
%% mode:Metafont
%% eval:(outline-minor-mode t)
%% eval:(read-abbrev-file abbrev-file-name)
%% outline-regexp:"%% [*\f]+"
%% eval:(setq font-lock-mode nil)
%% End:
