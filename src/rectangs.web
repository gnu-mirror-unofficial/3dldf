@q rectangs.web @>
 
@q * (0) Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing. @>
@q Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, @>
@q 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021 The Free Software Foundation @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version. @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details. @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html. @>

@q (``@@'' stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de @>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston                 @> 
@q c/o Free Software Foundation, Inc.  @>
@q 51 Franklin St, Fifth Floor         @> 
@q Boston, MA  02110-1301              @>
@q USA                                 @>

@q Laurence.Finston@@gmx.de (@@ stands for a single ``at'' sign.)@>


@q * (0) Rectangle.@>       
@** Rectangle\quad ({\tt rectangles\PERIOD web}).\hfil
\initials{LDF Undated.}

\LOG
\initials{LDF 2003.07.18.}  
Removed the ``Transformations'' section, including
|operator*=(const Transform&)|.  
Also moved the |Reg_Polygon| versions to |Polygon| in
\filename{polygons.web}.   
These are now inherited by |Rectangle|.

\initials{LDF 2003.11.12.}  
Removed the version control identifiers from the CWEB
files for the distribution of 3DLDF 1.1.  They're still used in my
development versions.

\initials{LDF 2003.12.10.}  
Put the version control identifiers back
into my release versions for 3DLDF 1.1.4.  I've already put some of
them back in, now I'm doing the rest of them.  However, the release
versions are now in their own RCS repository.
\ENDLOG 

@f Rectangle Reg_Polygon

@q * (0) Include files.@>
@ Include files.

\LOG
\initials{LDF 2004.05.21.}  
Now including \filename{pens.web}.
\ENDLOG 

@<Include files@>=

#include "loader.h++"
#include "pspglb.h++"
#include "io.h++"
#include "creatnew.h++"
#include "pntrvctr.h++"
#include "primes.h++"
#include "complex.h++"
#include "matrices.h++"
#include "colors.h++"
#include "transfor.h++"
#include "pens.h++"
#include "dashptrn.h++"
#include "shapes.h++"  
#include "pictures.h++"  
#include "points.h++"
#include "lines.h++"
#include "planes.h++"
#include "nurbs.h++"
#include "paths.h++"
#include "curves.h++"
#include "polygons.h++"
#include "triangle.h++"

@q * (0) Rectangle class definition.@>
@* {\bf Rectangle} class definition.
\initials{LDF 2003.07.18.}  

\TODO
@q { @>
@:TO DO}{{\bf TO DO}@>
@q } @> 
@q !! TO DO:  @>
\initials{LDF Undated.}
|axis_h| and |axis_v| are not
recalculated when a |Rectangle| is transformed.  
I should do something about this.
\ENDTODO 

@q * (1) Definition.@> 

@<Define |class Rectangle|@>=
class Rectangle : public Polygon
{
  real axis_h;
  real axis_v;
 public:
  @<Declare |Rectangle| functions@>@;
};

@q * (1) Constructors and setting functions. @>
@* Constructors and setting functions.
\initials{LDF Undated.}

@q ** (2) Default constructor. No arguments.@>
@*1 Default constructor. No arguments.
@^\cfunc{Rectangle}{Rectangle}@>
\initials{LDF Undated.}

\LOG
\initials{LDF 2005.01.24.}
Now setting |shape_type = RECTANGLE_TYPE|.

\initials{LDF 2005.03.31.}
Now setting |surface_hiding_ctr = 0|.

\initials{LDF 2005.04.18.}
Now setting |decomposition_level = 0|.
\ENDLOG 

@<Declare |Rectangle| functions@>=

Rectangle(void);

@
@<Define |Rectangle| functions@>= 
 Rectangle::Rectangle(void)
{
  line_switch = false;
  cycle_switch = true;

  shape_type = RECTANGLE_TYPE;
  surface_hiding_ctr = 0;
  decomposition_level = 0;
}

@q ** (2) Center, lengths, and angles of rotation.@>
@*1 Center, lengths, and angles.
\initials{LDF Undated.}

The following constructor and setting function create
the |Rectangle| in the x-z plane and then rotate according to the
arguments |angle_x|, |angle_y|, and |angle_z|, if at least one of them
is non-zero.
\initials{LDF 2002.11.06.}  

@q *** (3) Constructor.@>
@*2 Constructor.
@^\cfunc{Rectangle}{Rectangle}@>

\LOG
\initials{LDF 2002.11.06.}  
Made |real| arguments |const|.

\initials{LDF 2003.07.18.}  
@:BUG FIX@> BUG FIX:  Now, |axis_h| and |axis_v|
are no longer divided by 2, when I initialize |axis_h_half| and
|axis_v_half|.  I mistakenly used |/=| instead of |/|. 

\initials{LDF 2005.01.24.}
Now setting |shape_type = RECTANGLE_TYPE|.

\initials{LDF 2005.03.31.}
Now setting |surface_hiding_ctr = 0|.

\initials{LDF 2005.04.18.}
Now setting |decomposition_level = 0|.
\ENDLOG 

@<Declare |Rectangle| functions@>=

Rectangle(const Point& ccenter, const real aaxis_h, const real aaxis_v,
          const real angle_x = 0, const real angle_y = 0, const real angle_z = 0);

@
@<Define |Rectangle| functions@>= 

Rectangle::Rectangle(const Point& ccenter, const real aaxis_h, const real aaxis_v,
                     const real angle_x, const real angle_y,
                     const real angle_z) : axis_h(aaxis_h),
                                           axis_v(aaxis_v)  
     
{
  shape_type = RECTANGLE_TYPE;
  surface_hiding_ctr = 0;
  decomposition_level = 0;

  line_switch = false;
  cycle_switch = true;
  center = ccenter; 
  center.apply_transform();
  
  real axis_h_half = axis_h / 2;
  real axis_v_half = axis_v / 2;

  Point bot_lft(-axis_h_half, 0, -axis_v_half);
  Point bot_rt(axis_h_half, 0, -axis_v_half);

  Point top_lft(-axis_h_half, 0, axis_v_half);
  Point top_rt(axis_h_half, 0, axis_v_half);

    
    if (angle_x != ZERO_REAL || angle_y != ZERO_REAL
        || angle_z != ZERO_REAL)   /* Rotation around the x-axis, 
                                      y-axis, and z-axis. */
      {
        bot_lft.rotate(angle_x, angle_y, angle_z);
        bot_rt.rotate(angle_x, angle_y, angle_z);
        top_lft.rotate(angle_x, angle_y, angle_z);
        top_rt.rotate(angle_x, angle_y, angle_z);
      }

  /* Put around |center|. */
  bot_lft.shift(center); 
  bot_rt.shift(center); 
  top_lft.shift(center); 
  top_rt.shift(center); 

  for(int i = 0; i < 4; i++)
    points.push_back(create_new<Point>(0)); 
  
  *points[0] = bot_lft;
  *points[1] = bot_rt;
  *points[2] = top_rt;
  *points[3] = top_lft;
}

@q *** Setting function.@>
@ Setting function.     
@^\cfunc{Rectangle}{set}@>
\LOG
\initials{LDF 2002.11.06.}  Made |real| arguments |const|.
\ENDLOG 
@<Declare |Rectangle| functions@>=
void
set(const Point& ccenter, const real aaxis_h, const real aaxis_v,
          const real angle_x = 0, const real angle_y = 0, const real angle_z = 0);

@
@<Define |Rectangle| functions@>= 
void
Rectangle::set(const Point& ccenter, const real aaxis_h, const real aaxis_v,
               const real angle_x, const real angle_y, const real angle_z)
{
    Rectangle r(ccenter, aaxis_h, aaxis_v,
                angle_x, angle_y, angle_z);
    *this = r;
}

@q ** (2) Four Points.@>
@*1 Four {\bf Points}.
\initials{LDF Undated.}

The |Point| arguments must be so ordered, that they are contiguous in
the resulting |Rectangle|.  
\initials{LDF Undated.}

@q *** (3) Constructor.@>
@*2 Constructor.
@^\cfunc{Rectangle}{Rectangle}@>
\initials{LDF Undated.}


\LOG
\initials{LDF 2005.01.24.}
Now setting |shape_type = RECTANGLE_TYPE|.

\initials{LDF 2005.03.31.}
Now setting |surface_hiding_ctr = 0|.

\initials{LDF 2005.04.18.}
Now setting |decomposition_level = 0|.
\ENDLOG 

@<Declare |Rectangle| functions@>=

Rectangle(const Point& pt0, const Point& pt1,
          const Point& pt2, const Point& pt3);

@
@<Define |Rectangle| functions@>= 

Rectangle::Rectangle(const Point& pt0, const Point& pt1,
                     const Point& pt2, const Point& pt3)
{

   shape_type = RECTANGLE_TYPE;
   surface_hiding_ctr = 0; 

   decomposition_level = 0;

   Point pt4 = pt1 - pt0;  /* Check that the |Point| arguments are coplanar.  */
   Point pt5 = pt2 - pt0;
   Point pt6 = pt3 - pt0;

   Point pt7 = pt4.cross_product(pt5);
   pt7.unit_vector(true);

   Point pt8 = pt4.cross_product(pt6);
   pt8.unit_vector(true);

   if(pt7 == pt8 || pt7 == -pt8)  /* If they are, create a |Rectangle|.  */
      {

          line_switch = false;
          cycle_switch = true;

          center = pt0.mediate(pt2);
          axis_h = (pt1 - pt0).magnitude();
          axis_v = (pt2 - pt1).magnitude();

          points.push_back(create_new<Point>(pt0));
          points.push_back(create_new<Point>(pt1));
          points.push_back(create_new<Point>(pt2));
          points.push_back(create_new<Point>(pt3));

          connectors.push_back("--");
      }
    else
      {
          cerr << "ERROR! In Rectangle() with four Point arguments.\n"
               << "Points are not coplanar.  Returning.";
      }

    return;

}  /* End of |Rectangle| constructor with four |Point| arguments.  */

@q *** (3) Setting function.@>
@*2 Setting function.
@^\cfunc{Rectangle}{set}@>

@<Declare |Rectangle| functions@>=

void
set(const Point& pt0, const Point& pt1,
    const Point& pt2, const Point& pt3);

@
@<Define |Rectangle| functions@>= 
void
Rectangle::set(const Point& pt0, const Point& pt1,
               const Point& pt2, const Point& pt3)
{
  Rectangle r(pt0, pt1, pt2, pt3);
  *this = r;
}

@q * (1) Pseudo-constructor for dynamic allocation.@>
@* Pseudo-constructor for dynamic allocation.


@q ** (2) Pointer argument.@>
@*1 Pointer argument.

\LOG
\initials{LDF 2003.12.30.}  
Replaced |Rectangle::create_new_rectangle()|
with a specialization of |template <class C> C* create_new()| for
|Rectangle|. 

\initials{LDF 2004.10.11.}
Added |Scanner_Node scanner_node| argument.
\ENDLOG 

@<Declare non-member template functions for |Rectangle|@>=

Rectangle* 
create_new(const Rectangle* c, Scanner_Node scanner_node);


@q ** (2) Reference argument.@>
@*1 Reference argument.

\LOG
\initials{LDF 2003.12.30.}  
Replaced |Rectangle::create_new_rectangle()|
with a specialization of |template <class C> C* create_new()| for
|Rectangle|. 

\initials{LDF 2004.10.11.}
Added |Scanner_Node scanner_node| argument.
\ENDLOG 

@<Declare non-member template functions for |Rectangle|@>=
Rectangle* 
create_new(const Rectangle& c, Scanner_Node scanner_node);

@q * (1) Destructor.@>
@* Destructor. 
@^\cfunc{Rectangle}{\~{}Rectangle}@>
\initials{LDF 2002.10.09.}  Removed the destructor.  |Path::~Path()| or
|Path::clear()|\newline
should be used instead, unless I add dynamically
allocated data members to |Rectangle| (rather than |Reg_Polygon| 
or |Path|).
    
@q * Assignment. @>
@* Assignment.
@^\cofunc{Rectangle}{=}@>
\LOG
\initials{LDF 2002.11.06.}  Changed return value from |void| to 
|const Rectangle&|. 
\ENDLOG 
@<Declare |Rectangle| functions@>=
const 
Rectangle&
operator=(const Rectangle& c);

@ @:!!@> !! Remember to put anything specific to |Rectangles| in here! 
@<Define |Rectangle| functions@>= 
const 
Rectangle&
Rectangle::operator=(const Rectangle& c)
{
  clear();
  Path::operator=(c);
  center = c.center;
  axis_h = c.axis_h;
  axis_v = c.axis_v;
  return *this;
}





@q * (1) Get copy.@>
@* Get copy.
@^\cfunc{Rectangle}{get\_copy}@>
\initials{LDF 2005.03.18.}

\LOG
\initials{LDF 2005.03.18.}
Added this function.
\ENDLOG

@<Declare |Rectangle| functions@>=
virtual
Shape*
get_copy() const;

@
@<Define |Rectangle| functions@>=
Shape*
Rectangle::get_copy() const
{
  Rectangle* p = create_new<Rectangle>(0);
  *p = *this;
  return static_cast<Shape*>(p);
}


@q * (1) Is |Rectangle|.@> 
@* Is {\bf Rectangle}.
\initials{LDF 2005.03.31.}

\LOG
\initials{LDF 2005.03.31.}
Added this function.

\initials{LDF 2005.04.04.}
Made this function |const|
\ENDLOG

@<Declare |Rectangle| functions@>=
virtual
inline
bool
is_rectangle(void) const 
{
   return true;
}

@q * (1) Reflection in a |Plane|.@> 
@* Reflection in a |Plane|.
\initials{LDF 2004.10.05.}
@^\cfunc{Rectangle}{reflect\_in}@>

Please note that this function tries to allocate memory on the free 
store for the |Rectangle| pointed to by the pointer to |Shape| which is 
its return value.  Therefore, programmers who use this function must 
ensure that this memory is freed.
\initials{LDF 2004.10.05.}

If allocation fails, this function throws a |bad_alloc| exception.  
If the reflection of |*this| cannot be found in the |Plane|, 
this function returns 0.
\initials{LDF 2004.10.05.}

\LOG
\initials{LDF 2004.10.05.}
Added this function.

\initials{LDF 2004.10.12.}
Rewrote this function.
Following a system update, 
having |Shape*| as the return value no longer worked.
\ENDLOG


@q ** (2) Declaration.@> 

@<Declare |Rectangle| functions@>=
virtual
int
reflect_in(const Plane& p, 
           void* v,
           const Scanner_Node scanner_node = 0) const;


@q ** (2) Definition.@>

@
@<Define |Rectangle| functions@>=
int
Rectangle::reflect_in(const Plane& p, 
                    void* v,
                    const Scanner_Node scanner_node) const


{

@q *** (3) Preliminaries.@> 

  bool DEBUG = false; /* |true|  */

  using namespace Scan_Parse;

  stringstream cerr_strm;

  bool error_stop_value   = true;
  bool warning_stop_value = true;
  string thread_name      = "";

  if (scanner_node)
     scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                   &error_stop_value,
                                                   &warning_stop_value);


@q *** (3).@> 

  Rectangle* rectangle_reflection = static_cast<Rectangle*>(v);  

@q *** (3) If |rectangle_reflection == 0|, try to allocate memory @>
@q *** (3) on the free store for it.                           @> 

@ If |rectangle_reflection == 0|, try to allocate memory 
on the free store for it.                            
\initials{LDF 2004.10.12.}

@<Define |Rectangle| functions@>=

 if (rectangle_reflection == static_cast<Rectangle*>(0))
 {
  try
     {
       rectangle_reflection = create_new<Rectangle>(0, scanner_node);
     }

@q **** (4) Error handling:  |new Rectangle| failed.  Rethrow |bad_alloc|.@> 

@ Error handling:  |new Rectangle| failed.  Rethrow |bad_alloc|.
\initials{LDF 2004.10.05.}

@<Define |Rectangle| functions@>=


  catch (bad_alloc)
     {

       cerr_strm << thread_name << "ERROR! In `Point::reflect_in()':" 
                 << endl
                 << "`create_new<Rectangle>()' failed. "
                 << "Rethrowing `bad_alloc'.";

       log_message(cerr_strm);
       cerr_message(cerr_strm, error_stop_value);
       cerr_strm.str("");

       throw;

       
     } /* |catch (bad_alloc)|  */

  
@q *** (3).@> 

  } /* |if (rectangle_reflection == 0)|  */

@q *** (3) Call |Polygon::reflect_in()|.@> 

@ Call |Polygon::reflect_in()|.
\initials{LDF 2004.10.05.}

@<Define |Rectangle| functions@>=

  Polygon polygon_reflection;

  int status;


  try
     {
       status = Polygon::reflect_in(p,
                            static_cast<void*>(&polygon_reflection),
                            scanner_node);  
     }

@q **** (4) Error handling:  |Polygon::reflect_in()| threw |bad_alloc|.@> 

@ Error handling:  |Polygon::reflect_in()| threw |bad_alloc|.
\initials{LDF 2004.10.05.}

@<Define |Rectangle| functions@>=

  catch (bad_alloc)
     {
       cerr_strm << thread_name << "ERROR! In `Rectangle::reflect_in():'"
                 << endl 
                 << "`Polygon::reflect_in()' threw `bad_alloc'."
                 << endl << "Deleting `rectangle_reflection' and "
                 << "rethrowing `bad_alloc'.";

       log_message(cerr_strm);
       cerr_message(cerr_strm, error_stop_value);
       cerr_strm.str("");

       delete rectangle_reflection;

       throw;

     } /* |catch (bad_alloc)|  */

@q **** (4) Error handling:  |Polygon::reflect_in()| returned 1.@> 

@ Error handling:  |Polygon::reflect_in()| returned 1.
\initials{LDF 2004.10.12.}

@<Define |Rectangle| functions@>=

  if (status == 1)
    {

      cerr_strm << thread_name << "ERROR! In `Rectangle::reflect_in():'"
                << endl 
                << "`Polygon::reflect_in()' failed and returned 1."
                << endl << "Deleting `rectangle_reflection' "
                << "and exiting function with return value 1.";

      log_message(cerr_strm);
      cerr_message(cerr_strm, error_stop_value);
      cerr_strm.str("");
  
      delete rectangle_reflection;

      return 1;

      
    }  /* |if (status == 1)|  */

@q **** (4) |Polygon::reflect_in()| succeeded.@> 

@ |Polygon::reflect_in()| succeeded.
\initials{LDF 2004.10.05.}

@<Define |Rectangle| functions@>=

#if DEBUG_COMPILE
   if (DEBUG)
     {
        cerr_strm << thread_name << "In `Rectangle::reflect_in()':"
                  << endl << "`Polygon::reflect_in()' succeeded.";

        log_message(cerr_strm);
        cerr_message(cerr_strm);
        cerr_strm.str("");

     }
#endif /* |DEBUG_COMPILE|  */ 

   rectangle_reflection->Polygon::operator=(
                            polygon_reflection);

@q *** (3) Set other data members of |*rectangle_reflection|.@> 

@ Set other data members of |*rectangle_reflection|.
\initials{LDF 2004.10.05.}

@<Define |Rectangle| functions@>=

  rectangle_reflection->axis_h = axis_h;
  rectangle_reflection->axis_v = axis_v;

@q *** (3) Exit function successfully with   @> 
@q *** (3) return value 0.@> 

@ Exit function successfully with return value 0.
\initials{LDF 2004.10.05.}

@<Define |Rectangle| functions@>= 

#if DEBUG_COMPILE
   if (DEBUG)
     {
        cerr_strm << thread_name << "In `Rectangle::reflect_in()':"
                  << endl << "Exiting function successfully with "
                  << "return value 0.";

        log_message(cerr_strm);
        cerr_message(cerr_strm);
        cerr_strm.str("");

     }
#endif /* |DEBUG_COMPILE|  */ 

  return 0;

} /* End of |Rectangle::reflect_in()| definition.  */


@q * (1) Returning Elements and information.@>
@* Returning Elements and information.
\initials{LDF 2003.04.15.}  

\LOG
\initials{LDF 2003.04.15.}  
Added this section.  It's become necessary, since I'm
deriving |Rectangle| from |Path| now, and not from |Reg_Polygon|.
\ENDLOG 


@q ** (2) Get |Shape| type.@> 
@*1 Get {\bf Shape} type.
\initials{LDF 2005.03.18.}

\LOG
\initials{LDF 2005.03.18.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Rectangle| functions@>=
virtual 
inline
unsigned short 
get_shape_type(void) const
{
   return RECTANGLE_TYPE;
}




@q ** (2) Returning |Points|.@>
@*1 Returning {\bf Points}.
\initials{LDF Undated.}

\LOG
\initials{LDF 2002.11.06.}  
Got rid of |get_center()|.  It's not needed, since
|Reg_Polygon::get_center()| does the trick.

\initials{LDF 2003.04.15.}  
Added |get_center()| again, since I'm no longer
deriving |Rectangle| from |Reg_Polygon|, but from |Path|.

\initials{LDF 2003.07.18.}  
Got rid of |get_center()| again, because |Rectangle|
is now derived from |Polygon|, and I've moved the |Reg_Polygon|
versions to |Polygon|.
\ENDLOG 
  
@q *** (3) Corner.@>
@*2 Corner.
@^\cfunc{Rectangle}{corner}@>
\initials{LDF Undated.}

The argument |c| should be in the range $0 <= c <= 3$. 
\initials{LDF Undated.}

@<Declare |Rectangle| functions@>=
Point
corner(unsigned short c);

@
@<Define |Rectangle| functions@>=

Point
Rectangle::corner(unsigned short c)
{
  if (c > 3)
    {
      cerr << "ERROR: Rectangles have 4 corners, "
        << "numbered 0 through 3.\nReturning INVALID_POINT.\n";
      return INVALID_POINT;
        
    }
  
  return *points[c];
}

@q *** (3) Get Mid-point.@>
@*2 Get Mid-point.
@^\cfunc{Rectangle}{mid\_point}@>
\initials{LDF Undated.}

The argument |c| should be in the range $0 <= c <= 3$. 

\LOG
\initials{LDF 2002.11.06.}  
Changed this function so that it uses |mediate()|.

\initials{LDF 2003.05.09.}  
Renamed this function |get_mid_point()|.  Formerly,
it was called |mid_point()|.  

\initials{LDF 2003.07.18.}  
Made this function |const|.
\ENDLOG 

@<Declare |Rectangle| functions@>=

Point
get_mid_point(unsigned short c) const;

@ 
@<Define |Rectangle| functions@>=
Point
Rectangle::get_mid_point(unsigned short c)  const
{
    if (c > 3)
      {
          cerr << "ERROR: Rectangles have 4 mid_points, "
            << "numbered 0 through 3.\nReturning INVALID_POINT.\n";

          return INVALID_POINT;
      }
    Point p0;
    Point p1;
    Point p2;

    p0 = *points[c];
    p1 = (c < 3) ? *points[c + 1] : *points[0];
    return p0.mediate(p1);
}


@q ** (2) Getting axes.@>
@*1 Getting axes.
\initials{LDF 2003.07.18.}  

\TODO
@q { @>
@:TO DO}{{\bf TO DO}@>
@q } @> 
@q !! TO DO:  @>
\initials{LDF 2003.07.18.}  
|axis_h| and |axis_v| are not
recalculated when a\newline
|Rectangle| is transformed.  I should do something
about this.
\ENDTODO 

\LOG
\initials{LDF 2003.07.18.}  
Added this section.
\ENDLOG 

@q *** (3) Get |axis_h|.@>
@*2 Get {\bf axis\_h}.

@<Declare |Rectangle| functions@>=
real 
get_axis_h() const;

@ 
@<Define |Rectangle| functions@>=
real 
Rectangle::get_axis_h() const
{
  return axis_h;
}

@q *** (3) Get |axis_v|.@>
@*2 Get {\bf axis\_v}.

@<Declare |Rectangle| functions@>=
real 
get_axis_v() const;

@ 
@<Define |Rectangle| functions@>=
real 
Rectangle::get_axis_v() const
{
  return axis_v;
}


@q * (1) |Ellipses|.@>
@* {\bf Ellipses}.
\initials{LDF 2003.07.18.}  

\LOG
\initials{LDF 2003.07.18.}  
Added this section.  These functions must be defined
in \filename{ellipses.web}, because |Ellipse| is an incomplete type in
this file.
\ENDLOG 

@q ** (2) Surrounding |Ellipse|.@>
@*1 Surrounding {\bf Ellipse}.
\initials{LDF 2003.07.18.}  

\LOG
\initials{LDF 2003.07.18.}  
Added this function.
\ENDLOG 

@<Declare |Rectangle| functions@>=
Ellipse
out_ellipse() const;

@q ** (2) Enclosed |Ellipse|.@>
@*1 Enclosed {\bf Ellipse}.

\LOG
\initials{LDF 2003.07.18.}  
Added this function.

\initials{LDF 2005.11.02.}
Added optional |Scanner_Node scanner_node| argument with default 0.

\initials{LDF 2005.11.02.}
Added optional |unsigned int point_count| argument with default 64.
\ENDLOG 

@<Declare |Rectangle| functions@>=
Ellipse
in_ellipse(unsigned int point_count = 64, 
           Scanner_Node scanner_node = 0) const;

@q ** (2) Draw surrounding |Ellipse|.@>
@*1 Draw surrounding {\bf Ellipse}.
\initials{LDF 2003.07.18.}  

\LOG
\initials{LDF 2003.07.18.}  
Added this function.

\initials{LDF 2004.06.02.}  
Changed |const Color& ddraw_color| to 
|const Color* ddraw_color| and |const string ppen| to |const Pen* ppen|.

\initials{LDF 2004.06.03.}  
Changed default for |ddraw_color| from
|Colors::default_color| to 0, since I've gotten rid of the former.

\initials{LDF 2004.06.07.}  
Changed |string ddashed = ""| to 
|const Dash_Pattern* ddash_pattern = 0|.

\initials{LDF 2005.03.15.}
Replaced the optional argument |const Color* ddraw_color|, 
with default 0, with the optional argument 
|Pointer_Vector<Color>* ddraw_color_vector|, also with default 0.

\initials{LDF 2005.03.18.}
Replaced the optional argument |const Pen* ppen = 0| 
with the optional argument |Pointer_Vector<Pen>* ppen_vector = 0|.

\initials{LDF 2005.03.18.}
Replaced the optional argument |const Dash_Pattern* ddash_pattern = 0| 
with the optional argument 
|Pointer_Vector<Dash_Pattern>* ddash_pattern_vector = 0|.
\ENDLOG 

@<Declare |Rectangle| functions@>=
Ellipse
draw_out_ellipse(Pointer_Vector<Color>* ddraw_color_vector = 0,
                 Pointer_Vector<Dash_Pattern>* ddash_pattern_vector = 0,
                 Pointer_Vector<Pen>* ppen_vector = 0,
                 Picture& picture = *current_picture) const;

@q ** (2) Draw enclosed |Ellipse|.@>
@*1 Draw enclosed {\bf Ellipse}.
\initials{LDF 2003.07.18.}  

\LOG
\initials{LDF 2003.07.18.}  
Added this function.

\initials{LDF 2004.06.02.}  
Changed |const Color& ddraw_color| to 
|const Color* ddraw_color| and |const string ppen| to |const Pen* ppen|.

\initials{LDF 2004.06.03.}  
Changed default for |ddraw_color| from
|Colors::default_color| to 0, since I've gotten rid of the former.

\initials{LDF 2004.06.07.}  
Changed |string ddashed = ""| to 
|const Dash_Pattern* ddash_pattern = 0|.

\initials{LDF 2005.03.18.}
Replaced the optional argument |const Pen* ppen = 0| 
with the optional argument |Pointer_Vector<Pen>* ppen_vector = 0|.

\initials{LDF 2005.03.18.}
Replaced the optional argument |const Dash_Pattern* ddash_pattern = 0| 
with the optional argument 
|Pointer_Vector<Dash_Pattern>* ddash_pattern_vector = 0|.
\ENDLOG 

@q *** (3) Declaration.@> 

@<Declare |Rectangle| functions@>=
Ellipse
draw_in_ellipse(Pointer_Vector<Color>* ddraw_color_vector = 0,
                Pointer_Vector<Dash_Pattern>* ddash_pattern_vector = 0,
                Pointer_Vector<Pen>* ppen_vector = 0,
                Picture& picture = *current_picture) const;


@q * (1) |Polygon| functions.@> 
@* {\bf Polygon} functions.
\initials{LDF 2005.04.14.}

\LOG
\initials{LDF 2005.04.14.}
Added this section.
\ENDLOG

@q ** (2) Decomposition.@> 
@*1 Decomposition.
\initials{LDF 2005.04.14.}

\LOG
\initials{LDF 2005.04.14.}
Added this section.
\ENDLOG

@q *** (3) Sub-decompose.@> 
@*2 Sub-decompose.

\LOG
\initials{LDF 2005.04.13.}
Added this function.

\initials{LDF 2005.04.13.}
After much difficulty, I've managed to get a single level of 
decomposition to work.

\initials{LDF 2005.04.13.}
Renamed this function |sub_decompose()|.  It was formerly called 
|decompose()|.  Also removed the |const unsigned short| argument.
This function only performs a single level of decomposition.

\initials{LDF 2005.04.14.}
Moved the definition of this function from \filename{polygons.web}
to this file (\filename{rectangs.web}).  
This was necessary, because I want to 
refer to |class Rectangle| and |class Triangle| in it.
\ENDLOG

@q **** (4) Definition.@>   

@
@<Define |Polygon| functions@>=
Pointer_Vector<Polygon>*
Polygon::sub_decompose(const bool use_rectangles,
                       Scanner_Node scanner_node)
{

@q ***** (5) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ***** (5)@>  

   if (center == INVALID_POINT)
      {
         center = points[0]->mediate(
            *(points[static_cast<vector<Point*>::size_type>(
               floor((points.size() / 2.0) + .5))]));
        
      }  /* |if (center == INVALID_POINT)|  */

@q ***** (5)@>  

   Pointer_Vector<Polygon>* pv = new Pointer_Vector<Polygon>;

   vector<Point*>::size_type points_size = points.size();

@q ***** (5)@>  
@
\LOG
\initials{LDF 2005.04.14.}
Now allocating memory for new |Triangle|, calling |Triangle::set()|
on it, and casting it to a |Polygon*| and pushing it onto 
the |Pointer_Vector<Polygon>| |*pv|.  Previously, I used a 
|Polygon*| and pushed the pointers to |Points| onto 
|Path::points| directly.
\ENDLOG 

@<Define |Polygon| functions@>=

   if (points_size == 3)
      {

           Point* p;
           Point* q;
           Point* r;
           Point* s;
  
           Triangle* curr_triangle;

           Point mid_0_1 = points[0]->mediate(*(points[1]));
           Point mid_0_2 = points[0]->mediate(*(points[2]));
           Point mid_1_2 = points[1]->mediate(*(points[2]));

@q ****** (6)@> 

           p = new Point;
           q = new Point;
           r = new Point;

           *p = *(points[0]);
           *q = mid_0_1;
           *r = mid_0_2;

           curr_triangle = new Triangle;
 
           curr_triangle->set(p, q, r);

           ++(pv->ctr);
           pv->v.push_back(static_cast<Polygon*>(curr_triangle));

@q ****** (6)@> 


           p = new Point;
           q = new Point;
           r = new Point;

           *p = mid_0_1;
           *q = *(points[1]);
           *r = mid_1_2;

           curr_triangle = new Triangle;
 
           curr_triangle->set(p, q, r);

           ++(pv->ctr);
           pv->v.push_back(static_cast<Polygon*>(curr_triangle));


@q ****** (6)@> 


           p = new Point;
           q = new Point;
           r = new Point;

           *p = mid_0_2;
           *q = mid_1_2;
           *r = *(points[2]);

           curr_triangle = new Triangle;
 
           curr_triangle->set(p, q, r);

           ++(pv->ctr);
           pv->v.push_back(static_cast<Polygon*>(curr_triangle));


@q ****** (6)@> 



           p = new Point;
           q = new Point;
           r = new Point;

           *p = mid_1_2;
           *q = mid_0_2;
           *r = mid_0_1;

           curr_triangle = new Triangle;
 
           curr_triangle->set(p, q, r);

           ++(pv->ctr);
           pv->v.push_back(static_cast<Polygon*>(curr_triangle));


@q ****** (6)@> 

      }  /* /* |points_size == 3|  */

@q ***** (5)@>  
@
\LOG
\initials{LDF 2005.04.14.}
Added this section.

\initials{LDF 2005.04.14.}
No longer allocating memory for |Points|, since I'm calling
|Rectangle::set()| with plain |Point| arguments.
\ENDLOG

@<Define |Polygon| functions@>=

   else if (points_size == 4 && use_rectangles == true)
      {


           Rectangle* curr_rectangle;

           Point mid_0_1 = points[0]->mediate(*(points[1]));
           Point mid_1_2 = points[1]->mediate(*(points[2]));
           Point mid_2_3 = points[2]->mediate(*(points[3]));
           Point mid_3_0 = points[3]->mediate(*(points[0]));


@q ****** (6)@> 

           Point P;
           Point Q;
           Point R;
           Point S;



           P = *(points[0]);
           Q = mid_0_1;
           R = center;
           S = mid_3_0;

           curr_rectangle = new Rectangle;
 
           curr_rectangle->set(P, Q, R, S);

           ++(pv->ctr);
           pv->v.push_back(static_cast<Polygon*>(curr_rectangle));


@q ****** (6)@> 



           P = mid_0_1;
           Q = *(points[1]);
           R = mid_1_2;
           S = center;

           curr_rectangle = new Rectangle;
 
           curr_rectangle->set(P, Q, R, S);

           ++(pv->ctr);
           pv->v.push_back(static_cast<Polygon*>(curr_rectangle));


@q ****** (6)@> 


           P = center;
           Q = mid_1_2;
           R = *(points[2]);
           S = mid_2_3;

           curr_rectangle = new Rectangle;
 
           curr_rectangle->set(P, Q, R, S);

           ++(pv->ctr);
           pv->v.push_back(static_cast<Polygon*>(curr_rectangle));

@q ****** (6)@> 


           P = mid_3_0;
           Q = center;
           R = mid_2_3;
           S = *(points[3]);

           curr_rectangle = new Rectangle;
 
           curr_rectangle->set(P, Q, R, S);

           ++(pv->ctr);
           pv->v.push_back(static_cast<Polygon*>(curr_rectangle));


@q ****** (6)@> 

      }  /* /* |points_size == 4 && use_rectangles == true|  */



@q ***** (5)@>  

   else  /* |points_size != 3|  */
      {

          Point* p;
          Point* q;
          Point* r;
          Point* s;
 
          Polygon* curr_polygon;


          for (vector<Point*>::size_type i = 0;
               i < points_size;
               ++i)

              {
                  p = new Point;
                  q = new Point;
                  r = new Point;

                  *p = center;
          
                  *q = *(points[i]);
                  *r = *(points[(i + 1) % points_size]);

                  curr_polygon = new Polygon;
          
                  curr_polygon->points.push_back(p);
                  curr_polygon->points.push_back(q);
                  curr_polygon->points.push_back(r);

                  curr_polygon->set_cycle(true);

                  ++(pv->ctr);
                  pv->v.push_back(curr_polygon);

              }  /* |for|  */

      }    /* |else| (|points_size != 3|)  */

@q ***** (5)@>  

   return pv;

}  /* End of |Pointer_Vector<Polygon>*
              Polygon::sub_decompose(const bool use_rectangles,
                                     Scanner_Node scanner_node)| 
      definition.  */



@q * (1) |Plane| functions.@> 
@* {\bf Plane} functions.
\initials{LDF 2005.11.01.}

\LOG
\initials{LDF 2005.11.01.}
Added this section.
\ENDLOG


@q ** (2) Get |Rectangle|.@> 
@*1 Get {\bf Rectangle}.
\initials{LDF 2005.11.01.}

\LOG
\initials{LDF 2005.11.01.}
Added this function definition.
\ENDLOG

@q *** (3)@> 

@<Define |Plane| functions@>=
Rectangle*
Plane::get_rectangle(Scanner_Node scanner_node) const
{

@q **** (4) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q **** (4)@>

   if (*this == INVALID_PLANE)
      {
          cerr_strm << thread_name << "ERROR!  In `Plane::get_rectangle()':"
                    << endl << "`Plane' is invalid.  Can't create `Rectangle'."
                    << endl 
                    << "Exiting function unsuccessfully with return value "
                    << "(Rectangle*) 0.";

          log_message(cerr_strm);
          cerr_message(cerr_strm, error_stop_value);
          cerr_strm.str("");
 
          return 0;
      }

@q **** (4)@> 

   Point p0(point);
   Point p1(normal);

   p1.shift(point);

   Transform t;
   t.align_with_axis(p0, p1, 'y');
   
   p0 *= p1 *= t;

   Point origin(0, 0, 0);

@q **** (4) Error handling.@> 
@ Error handling.
@<Define |Plane| functions@>=

   if (!(p0 == origin || p1 == origin))
      {
          cerr_strm << thread_name << "ERROR!  In `Plane::get_rectangle()':"
                    << endl 
                    << "Neither `p0' nor `p1' is equal to `(0, 0, 0)'."
                    << endl 
                    << "Can't make `rectangle'.  Exiting function unsuccessfully "
                    << "with return value `(Rectangle*) 0'.";

          log_message(cerr_strm);
          cerr_message(cerr_strm, error_stop_value);
          cerr_strm.str("");

          return 0;

      }  /* |if (!(p0 == origin || p1 == origin))|  */

@q **** (4)@> 
@
@<Define |Plane| functions@>=

   else if (p1 != origin && p1.get_y() < 0)
      t *= p1.rotate(0, 0, 180);
   else if (p0 != origin && p0.get_y() < 0)
      t *= p0.rotate(0, 0, 180);

   Point q0(1, 0, 0);
   Point q1(1, 0, 1);
   Point q2(0, 0, 1);

   Rectangle* r = create_new<Rectangle>(0);

   r->set(origin, q0, q1, q2);

   *r *= t.inverse();

   return r;

}  /* |Plane::get_rectangle(void)| */

@q * (1) Putting Rectangle together.@>
@ Putting {\bf Rectangle} together.
This is what's compiled.
\initials{LDF Undated.}

\LOG
\initials{LDF 2005.04.14.}
Now including |@<Define |Polygon| functions@>|.

\initials{LDF 2005.11.01.}
Now including |@<Define |Plane| functions@>|.
\ENDLOG

@c
@<Include files@>@;
@<Define |class Rectangle|@>@;
@<Define |Rectangle| functions@>@;
@<Declare non-member template functions for |Rectangle|@>@;
@<Define |Polygon| functions@>@;
@<Define |Plane| functions@>@;

@ This is what's written to \filename{rectangs.h}.
@(rectangs.h@>=
@<Define |class Rectangle|@>@;
@<Declare non-member template functions for |Rectangle|@>@;


@q * Emacs-Lisp code for use in indirect buffers when using the          @>
@q   GNU Emacs editor.  The local variable list is not evaluated when an @>
@q   indirect buffer is visited, so it's necessary to evaluate the       @>
@q   following s-expression in order to use the facilities normally      @>
@q   accessed via the local variables list.                              @>
@q   \initials{LDF 2004.02.12}.                                          @>
@q   (progn (cweb-mode) (outline-minor-mode t) (setq fill-column 80))    @>


@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q run-gxx-on-file:"main.c" @>
@q run-cweb-on-file:"main.web" @>
@q run-cweave-on-file:"3DLDF.web" @>
@q makefile:"makefile" @>
@q executable-name:"pp" @>
@q use-g++:t @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q End: @>
