%% disdyakis.lmc
%% Created by Laurence D. Finston (LDF) Mon 27 Sep 2021 11:48:29 PM CEST

%% * (1) Copyright and License.

%%%% This file is part of GNU 3DLDF, a package for three-dimensional drawing.  
%%%% Copyright (C) 2021, 2022 The Free Software Foundation  

%%%% GNU 3DLDF is free software; you can redistribute it and/or modify 
%%%% it under the terms of the GNU General Public License as published by 
%%%% the Free Software Foundation; either version 3 of the License, or 
%%%% (at your option) any later version.  

%%%% GNU 3DLDF is distributed in the hope that it will be useful, 
%%%% but WITHOUT ANY WARRANTY; without even the implied warranty of 
%%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
%%%% GNU General Public License for more details.  

%%%% You should have received a copy of the GNU General Public License 
%%%% along with GNU 3DLDF; if not, write to the Free Software 
%%%% Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA 

%%%% GNU 3DLDF is a GNU package.  
%%%% It is part of the GNU Project of the  
%%%% Free Software Foundation 
%%%% and is published under the GNU General Public License. 
%%%% See the website http://www.gnu.org 
%%%% for more information.   
%%%% GNU 3DLDF is available for downloading from 
%%%% http://www.gnu.org/software/3dldf/LDF.html.

%%%% Please send bug reports to Laurence.Finston@gmx.de
%%%% The mailing list help-3dldf@gnu.org is available for people to 
%%%% ask other users for help.  
%%%% The mailing list info-3dldf@gnu.org is for sending 
%%%% announcements to users. To subscribe to these mailing lists, send an 
%%%% email with ``subscribe <email-address>'' as the subject.  

%%%% The author can be contacted at: 

%%%% Laurence D. Finston 
%%%% c/o Free Software Foundation, Inc. 
%%%% 51 Franklin St, Fifth Floor 
%%%% Boston, MA  02110-1301  
%%%% USA

%%%% Laurence.Finston@gmx.de


verbatim_metapost "verbatimtex \font\Tiny=cmr4\font\SMALL=cmr6\font\Small=cmr7"
  & "\font\small=cmr8\font\medium=cmr9\font\large=cmr12\font\largebx=cmbx12"
  & "\font\Largebx=cmbx12 scaled \magstephalf"
  & "\font\smallgreek=cmmi8\font\Smallgreek=cmmi7\font\SMALLgreek=cmmi6 "
  & "etex;";

%% * (1) Global variables

path tab_path[];

numeric tab_ctr;
tab_ctr := 0; 

numeric tab_width_factor;
numeric tab_width_one_factor;
numeric tab_offset_factor;
numeric tab_offset_one_factor;

tab_width_factor      := 1;
tab_width_one_factor  := 1;
tab_offset_factor     := 1;
tab_offset_one_factor := 1;

picture tab_picture[];
picture tab_dot_picture[];

%% ** (2) Macro tab

macro tab;

def tab {numeric pp, numeric qq, numeric offset, numeric offset_one,
         numeric angle_zero, numeric angle_one,
         boolean ddo_labels, numeric width, numeric width_one, boolean rotate_tab,
         numeric tab_picture_ctr} =

  %message "Entering tab.";

  point PP[];

  if offset == 0:
    PP0 := p[pp];
  else:
    PP0 := mediate(p[pp], p[qq], offset * tab_offset_factor);
  fi;

  if offset_one == 0:
    PP1 := p[qq];
  else:
    PP1 := mediate(p[qq], p[pp], offset_one * tab_offset_one_factor);
  fi;

  % if ddo_labels:
  %   dotlabel.top("$PP_0$", PP0) with_text_color red on_picture draft_label_picture[tab_picture_ctr];
  %   dotlabel.top("$PP_1$", PP1) with_text_color red on_picture draft_label_picture[tab_picture_ctr];
  % fi;

  PP2 := PP0 shifted (0, 1);

  if (offset  == 0) or (width == 0):
    PP3 := PP0;
  else:
    PP3 := ((width  * tab_width_factor) * unit_vector(p[pp] - PP0)) shifted by PP0;
    rotate_around PP3 (PP0, PP2) -angle_zero;
  fi;

  PP5 := PP1 shifted (0, 1);

  if (offset_one == 0) or (width_one == 0):
    PP4 := PP1;
  else:
    PP4 := ((width_one * tab_width_one_factor) * unit_vector(p[qq] - PP1)) shifted by PP1;
    rotate_around PP4 (PP1, PP5) angle_one;
  fi;

  % if ddo_labels:
  %   dotlabel.top("$PP_3$", PP3) with_text_color red on_picture draft_label_picture[tab_picture_ctr];
  %   dotlabel.top("$PP_4$", PP4) with_text_color red on_picture draft_label_picture[tab_picture_ctr];
  % fi;
  
  tab_path[tab_ctr] := PP0 -- PP3 -- PP4 -- PP1;

  if rotate_tab:
    rotate_around tab_path[tab_ctr] (PP0, PP1) 180;
    rotate_around PP3 (PP0, PP1) 180;
    rotate_around PP4 (PP0, PP1) 180;
  fi;

    
  draw tab_path[tab_ctr] on_picture tab_picture[tab_picture_ctr];

  PP6 := mediate(mediate(PP0, PP1, .5), mediate(PP3, PP4, .5), .5);

  if ddo_labels:
    label(decimal tab_ctr, PP6) with_text_color red on_picture draft_label_picture[tab_picture_ctr];
  fi;

  tab_ctr += 1;

  %message "Exiting tab.";

%% (/ 3.0 5)
 
  PP7  := mediate(PP0, PP1, .5);
  PP8  := mediate(PP0, PP1, .2);
  PP9  := mediate(PP0, PP1, .4);
  PP10 := mediate(PP0, PP1, .6);
  PP11 := mediate(PP0, PP1, .8);
  
  % if ddo_labels:
  %   dotlabel.ulft("$\scriptstyle PP_7$", PP7) with_text_color blue
  %     on_picture draft_label_picture[tab_picture_ctr];
  %   dotlabel.ulft("$\scriptstyle PP_8$", PP8) with_text_color blue
  %     on_picture draft_label_picture[tab_picture_ctr];
  %   dotlabel.ulft("$\scriptstyle PP_9$", PP9) with_text_color blue
  %     on_picture draft_label_picture[tab_picture_ctr];
  %   dotlabel.ulft("$\scriptstyle PP_{10}$", PP10) with_text_color blue
  %     on_picture draft_label_picture[tab_picture_ctr];
  %   dotlabel.ulft("$\scriptstyle PP_{11}$", PP11) with_text_color blue
  %     on_picture draft_label_picture[tab_picture_ctr];
  % fi;

  PP12 := PP6 shifted by (PP9 - PP7);
  drawdot PP12 with_pen pencircle scaled (2.5pt, 2.5pt, 2.5pt) on_picture tab_dot_picture[tab_picture_ctr];
  PP13 := PP6 shifted by (PP8 - PP7);
  drawdot PP13 with_pen pencircle scaled (2.5pt, 2.5pt, 2.5pt) on_picture tab_dot_picture[tab_picture_ctr];

  PP14 := PP6 shifted by (PP10 - PP7);
  drawdot PP14 with_pen pencircle scaled (2.5pt, 2.5pt, 2.5pt) on_picture tab_dot_picture[tab_picture_ctr];
  PP15 := PP6 shifted by (PP11 - PP7);
  drawdot PP15 with_pen pencircle scaled (2.5pt, 2.5pt, 2.5pt) on_picture tab_dot_picture[tab_picture_ctr];
    
enddef;

%% ** (2)

macro tab_short;

def tab_short {numeric ppp, numeric qqq, boolean dddo_labels, boolean rrotate_tab,
               numeric ttab_picture_ctr} =

  %message "Entering tab_short.";

  
  tab {ppp, qqq, .15, .15, 112.5, 112.5, dddo_labels, .333, .333, rrotate_tab, ttab_picture_ctr};
  
  %message "Exiting tab_short.";
  
enddef;

%% ** (2)

macro tab_thin;

def tab_thin {numeric ppp, numeric qqq, boolean dddo_labels, boolean rrotate_tab,
              numeric ttab_picture_ctr} =

  %message "Entering tab_thin.";

  tab {ppp, qqq, .1, .1, 112.5, 112.5, dddo_labels, 0, .333, rrotate_tab, ttab_picture_ctr};
  
  %message "Exiting tab_thin.";
  
enddef;

%% ** (2)

macro tab_long;

def tab_long {numeric ppp, numeric qqq, boolean dddo_labels, boolean rrotate_tab,
              numeric ttab_picture_ctr} =

  %message "Entering tab_long.";

  tab {ppp, qqq, .125, .25, 112.5, 112.5, dddo_labels, .4, .4, rrotate_tab, ttab_picture_ctr};

  %message "Exiting tab_long.";
  
enddef;


%% * (1)

macro take_measurements;

def take_measurements {numeric offset_zero, numeric offset_one, numeric offset_two, numeric offset_three,
                       boolean ddo_labels, numeric measurement_picture_ctr,
                       numeric point_offset, numeric path_offset} =

%% ** (2)
    
  message "Entering `take_measurements'.";

  point m[];
  path a[];
  numeric n[];

  %draw P[path_offset+0] on_picture measurement_picture[measurement_picture_ctr];
  m4 := P[point_offset+0] shifted (1, 0);
  n0 := P[point_offset+1] angle m4;
  show n0;
  a0 := Q[path_offset+0] rotated (0, -n0);
  m0 := P[point_offset+0];
  m1 := P[point_offset+1] rotated (0, -n0);
  m2 := P[point_offset+6] rotated (0, -n0);
  
  draw a0 on_picture measurement_picture[measurement_picture_ctr];

  if ddo_labels:
    dotlabel.lrt("$m_0$", m0) on_picture measurement_picture[measurement_picture_ctr];
    dotlabel.llft("$m_1$", m1) on_picture measurement_picture[measurement_picture_ctr];
    dotlabel.ulft("$m_2$", m2) on_picture measurement_picture[measurement_picture_ctr];
  fi;

  m5 := m0 shifted (-offset_zero, 0);
  m6 := m0 shifted (-offset_one, 0);

  m7 := m2 shifted (-offset_zero, 0);
  m8 := m2 shifted (-offset_one, 0);

  draw m5 -- m6 on_picture measurement_picture[measurement_picture_ctr];
  draw m7 -- m8 on_picture measurement_picture[measurement_picture_ctr];

  m9 := mediate(m6, m8);
  n1 := magnitude(m2);

  if ddo_labels:
  % dotlabel.rt("$m_9$", m9) on_picture measurement_picture[measurement_picture_ctr];
  % dotlabel.lft("$m_6$", m6) on_picture measurement_picture[measurement_picture_ctr];
  % dotlabel.lft("$m_8$", m8) on_picture measurement_picture[measurement_picture_ctr];
  fi;
  
  label(decimal n1 & "\\thinspace cm", m9 shifted (-offset_zero, 0))
    on_picture measurement_picture[measurement_picture_ctr];

  m10 := mediate(m6, m9, offset_two);
  m11 := mediate(m8, m9, offset_two);

  if ddo_labels:
     % dotlabel.lft("$m_{10}$", m10) on_picture measurement_picture[measurement_picture_ctr];
     % dotlabel.lft("$m_{11}$", m11) on_picture measurement_picture[measurement_picture_ctr];
  fi;
  
  draw m6 -- m10 on_picture measurement_picture[measurement_picture_ctr];
  draw m8 -- m11 on_picture measurement_picture[measurement_picture_ctr];
  %show n1;

  n2 := magnitude(m1);
  show n2;
  %pause;

  m12 := m2 shifted (0, 1);
  m13 := (.25 * unit_vector(m1 - m2)) shifted by m2;

  rotate_around m13 (m2, m12) 90;

  if ddo_labels:
    dotlabel.top("$m_{13}$", m13) on_picture measurement_picture[measurement_picture_ctr];
  fi;
  
  m14 := (.5 * unit_vector(m13 - m2)) shifted by m13;

  if ddo_labels:
    dotlabel.top("$m_{14}$", m14) on_picture measurement_picture[measurement_picture_ctr];
  fi;

  m15 := m13 shifted by (m1 - m2);
  m16 := m14 shifted by (m1 - m2);

  if ddo_labels:
    dotlabel.bot("$m_{15}$", m15) on_picture measurement_picture[measurement_picture_ctr];
    dotlabel.bot("$m_{16}$", m16) on_picture measurement_picture[measurement_picture_ctr];
  fi;

  m17 := mediate(m14, m16);

  n3 := magnitude(m15 - m2);
  
  label(decimal n3 & "\\thinspace cm", m17 shifted (.5cm)) on_picture measurement_picture[measurement_picture_ctr];

  m18 := mediate(m14, m17, offset_two);
  m19 := mediate(m16, m17, offset_two);

  draw m13 -- m14 -- m18 on_picture measurement_picture[measurement_picture_ctr];
  draw m15 -- m16 -- m19 on_picture measurement_picture[measurement_picture_ctr];

  m20 := m0 shifted (0, 0, -offset_zero);

  if ddo_labels:
    dotlabel.lft("$m_{20}$", m20) on_picture measurement_picture[measurement_picture_ctr];
  fi;

  m21 := m0 shifted (0, 0, -offset_one);

  if ddo_labels:
    dotlabel.lft("$m_{21}$", m21) on_picture measurement_picture[measurement_picture_ctr];
  fi;

  m22 := m20 shifted by (m1 - m0);
  m23 := m21 shifted by (m1 - m0);

  if ddo_labels:
    dotlabel.rt("$m_{22}$", m22) on_picture measurement_picture[measurement_picture_ctr];
    dotlabel.rt("$m_{23}$", m23) on_picture measurement_picture[measurement_picture_ctr];
  fi;

  n4 := magnitude(m1 - m0);

  m24 := mediate(m21, m23);
  
  label(decimal n4 & "\\thinspace cm", m24 shifted (0cm)) on_picture measurement_picture[measurement_picture_ctr];

  m25 := mediate(m21, m24, offset_three);
  m26 := mediate(m23, m24, offset_three);

  draw m20 -- m21 -- m25 on_picture measurement_picture[measurement_picture_ctr];
  draw m22 -- m23 -- m26 on_picture measurement_picture[measurement_picture_ctr];

  label.urt("$\alpha$", m0) on_picture measurement_picture[measurement_picture_ctr];
  label.ulft("$\beta$", m1 shifted (-offset_zero, 0)) on_picture measurement_picture[measurement_picture_ctr];
  label.bot("$\gamma$", m2 shifted (3pt, 0, -.333cm)) on_picture measurement_picture[measurement_picture_ctr];

  m27 := m21 shifted (0, 0, -.5cm);

  show ang0;
  show ang1;
  show ang2;
  %pause;
  
  label.rt("$\alpha\approx " & decimal ang0 & "^\circ$", m27 shifted (-5pt))
    on_picture measurement_picture[measurement_picture_ctr];
  label.rt("$\beta\approx " & decimal ang1 & "^\circ$", m27 shifted (-5pt, 0, -12pt))
    on_picture measurement_picture[measurement_picture_ctr];
  label.rt("$\gamma\approx " & decimal ang2 & "^\circ$", m27 shifted (-5pt, 0, -24pt))
    on_picture measurement_picture[measurement_picture_ctr];

%% ** (2)
  
  message "Exiting `take_measurements'.";
  
enddef;

%% * (1)

%% ** (2)

endinput;

%% ** (2) End of 3DLDF code.

%% * (1) Emacs-Lisp code for use in indirect buffers when using the          
%%       GNU Emacs editor.  The local variable list is not evaluated when an 
%%       indirect buffer is visited, so it's necessary to evaluate the       
%%       following s-expression in order to use the facilities normally      
%%       accessed via the local variables list.                              
%%       \initials{LDF 2004.02.12}.                                          

%% (progn (metapost-mode) (outline-minor-mode t) (setq fill-column 80) (setq outline-regexp "%% [*\f]+"))

%% * (1) Local variables for Emacs.

%% Local Variables:
%% mode:Metapost
%% eval:(outline-minor-mode t)
%% eval:(read-abbrev-file abbrev-file-name)
%% abbrev-mode:t
%% outline-regexp:"%% [*\f]+"
%% End:
