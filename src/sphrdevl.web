@q sphrdevl.web @>

@q * (0) Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing. @>
@q Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, @>
@q 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021 The Free Software Foundation, Inc.  @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version. @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details. @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA @>

@q GNU 3DLDF is a GNU package.  @> 
@q It is part of the GNU Project of the @>
@q Free Software Foundation @> 
@q and is published under the GNU General Public License. @> 
@q See the website http://www.gnu.org @> 
@q for more information.  @> 
@q GNU 3DLDF is available for downloading from @> 
@q http://www.gnu.org/software/3dldf/LDF.html. @> 

@q (``@@'' stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de @> 
@q The mailing list help-3dldf@@gnu.org is available for people to @> 
@q ask other users for help. @> 
@q The mailing list info-3dldf@@gnu.org is for sending @> 
@q announcements to users. To subscribe to these mailing lists, send an @> 
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston @> 
@q c/o Free Software Foundation, Inc.  @> 
@q 51
Franklin St, Fifth Floor @> 
@q Boston, MA 02110-1301 @> 
@q USA @>

@q Laurence.Finston@@gmx.de (@@ stands for a single ``at'' sign.)@>

@q * (0) Sphere_Developments.@> 
@** Sphere\_Developments\quad ({\tt sphrdevl\PERIOD web}).\hfil

\LOG 
\initials{LDF 2009.11.17.}
Created this file.  It contains code for |Sphere_Developments|.
code.  
\ENDLOG

\immediate\write\functexifile{File: sphrdevl.web^^J}

@q * (1) Include files.@> 
@ Include files.

@<Include files@>=

#include "loader.h++" 
#include "pspglb.h++" 
#include "io.h++" 
#include "creatnew.h++"
#include "pntrvctr.h++" 
#include "primes.h++" 
#include "complex.h++" 
#include "matrices.h++" 
#include "colors.h++" 
#include "transfor.h++" 
#include "pens.h++" 
#include "dashptrn.h++" 
#include "shapes.h++" 
#include "pictures.h++" 
#include "points.h++"
#include "lines.h++" 
#include "planes.h++" 
#include "nurbs.h++" 
#include "paths.h++"
#include "curves.h++" 
#include "polygons.h++" 
#include "triangle.h++" 
#include "rectangs.h++" 
#include "conicsct.h++" 
#include "ellipses.h++" 
#include "circles.h++"
#include "ellpsslc.h++" 
#include "crclslc.h++" 
#include "parabola.h++" 
#include "hyprbola.h++" 
#include "cncsctlt.h++" 
#include "arc.h++" 
#include "helices.h++" 
#include "origami.h++" 
#include "solids.h++" 
#include "solfaced.h++" 
#include "polyhed.h++"
#include "ddchdrn.h++" 
#include "rhtchdrn.h++" 
#include "plyhdslc.h++" 
#include "cones.h++" 
#include "cylinder.h++" 
#include "ellpsoid.h++"
#include "spheres.h++"

@q ** (2) class Sphere_Development.  @>
@*1 {\bf class Sphere\_Development}.

\LOG
\initials{LDF 2009.11.04.}
Added this section.

\initials{LDF 2009.11.09.}
No longer deriving |Sphere_Development| from |Shape|.

\initials{LDF 2009.11.16.}
Added data members.

\initials{LDF 2009.11.17.}
Replaced |divisions| with |divisions_lat| and |divisions_long|.
\ENDLOG

@<Declare |class Sphere_Development|@>=

class Sphere_Development
{
   protected:

      real radius;
      unsigned int segments;   
      unsigned int divisions_long;  /* Lines of longitude (curves)  */
      unsigned int divisions_lat;  /* Lines of latitude  */

      unsigned int path_point_count;

      Transform transform;
      
      map<pair<real, real>, Path> long_paths; 
      map<pair<real, real>, Path> lat_paths; 

      map <pair<real, real>, Point> points;

   public:
      static const unsigned int DEFAULT_SEGMENTS;
      static const unsigned int DEFAULT_DIVISIONS_LAT;
      static const unsigned int DEFAULT_DIVISIONS_LONG;
      static const unsigned int DEFAULT_PATH_POINT_COUNT;

      @<Declare |Sphere_Development| functions@>@;

};

@q ** (2) Static member variable initializations.@>
@*1 Static member variable initializations.
\initials{LDF 2009.11.16.}

\LOG
\initials{LDF 2009.11.16.}
Added this section with initializations of |Sphere_Development::DEFAULT_SEGMENTS|
and |Sphere_Development::DEFAULT_DIVISIONS|.

\initials{LDF 2009.11.17.}
Changed |Sphere_Development::DEFAULT_DIVISIONS| to
|Sphere_Development::DEFAULT_DIVISIONS_LAT| and added 
|Sphere_Development::DEFAULT_DIVISIONS_LONG|.
\ENDLOG

@<Initialize |static| |class Sphere_Development| data members@>=

   const unsigned int Sphere_Development::DEFAULT_SEGMENTS         =  8;
   const unsigned int Sphere_Development::DEFAULT_DIVISIONS_LAT    = 24;  
   const unsigned int Sphere_Development::DEFAULT_DIVISIONS_LONG   = 15;  
   const unsigned int Sphere_Development::DEFAULT_PATH_POINT_COUNT = 64;

@q *** (3) |Sphere_Development| functions.  @>
@*2 {\bf Sphere\_Development} functions.
\initials{LDF 2009.11.04.}

\LOG
\initials{LDF 2009.11.04.}
Added this section.
\ENDLOG

@q **** (4) Constructors and Setting Functions.  @>
@*3 Constructors and Setting Functions.

@q ***** (5) Default constructor.  @>
@*4 Default constructor.
\initials{LDF 2009.11.04.}

\LOG
\initials{LDF 2009.11.04.}
Added this function.
\ENDLOG

@<Declare |Sphere_Development| functions@>=

Sphere_Development(void);

@
@<Define |Sphere_Development| functions@>=
Sphere_Development::Sphere_Development(void)
{
   radius = 0;

   segments  = 0;
   divisions_lat = 0;
   divisions_long = 0;

   path_point_count = 0;

   return;

}  /* |Sphere_Development::Sphere_Development(void)|  */

@q *** (3) Setting function.@>
@*2 Setting function.
@^\cfunc{Sphere\_Development}{set}@>
\cfunctexi{Sphere\_Development}{set}
\initials{LDF 2009.11.17.}

\LOG
\initials{LDF 2009.11.17.}
Added this function.
\ENDLOG

@q **** (4) Declaration.  @>

@<Declare |Sphere_Development| functions@>=
int
set(Sphere_Development_Set_Option_Struct* options, Scanner_Node scanner_node);

@q **** (4) Definition.  @>

@
@<Define |Sphere_Development| functions@>= 
int
Sphere_Development::set(Sphere_Development_Set_Option_Struct* options, 
                        Scanner_Node scanner_node)
{
  
@q ***** (5) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ****** (6).@>

#if DEBUG_COMPILE
   if (DEBUG)
      {
          cerr_strm << thread_name << "Entering `Sphere_Development::set'.";

          log_message(cerr_strm);
          cerr_message(cerr_strm);
          cerr_strm.str("");

      }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@; 

@q ****** (6).@> 

    long_paths.clear();
    lat_paths.clear();

@q ****** (6).@> 

    if (options == static_cast<Sphere_Development_Set_Option_Struct*>(0))
    {

#if DEBUG_COMPILE
       if (DEBUG)
       {

          cerr_strm << thread_name << "In `Sphere_Development::set':"
                    << endl << "`options' == 0";
          
          log_message(cerr_strm);
          cerr_message(cerr_strm);
          cerr_strm.str("");

       }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@; 

       radius = 1;
       segments = DEFAULT_SEGMENTS;
       path_point_count = DEFAULT_PATH_POINT_COUNT;
       divisions_lat = DEFAULT_DIVISIONS_LAT;
       divisions_long = DEFAULT_DIVISIONS_LONG;

    }  /* |if (options == 0)|  */

@q ****** (6) @>

    else /* (|options != 0|)  */
    {
#if DEBUG_COMPILE    
        if (DEBUG)
        {
            cerr_mutex.lock(); 

            cerr << thread_name << "In `Sphere_Development::set':"
                 << endl << "`options' != 0" << endl;
                   
#if 0
            options->show("options:");
#endif 
          
            cerr_mutex.unlock(); 

        }  /* |if (DEBUG)|  */ 
#endif /* |DEBUG_COMPILE|  */@; 

       radius           = options->radius;
       segments         = options->segments;
       path_point_count = options->path_point_count;
       divisions_lat    = options->divisions_lat;
       divisions_long   = options->divisions_long;
       transform        = options->transform;

    }  /* |else| (|options != 0|)  */

@q ****** (6)@>

/* !! START HERE:  Generate paths.  
   Debug.  LDF 2009.11.23.

    LDF 2009.11.17. */

   real circumference = 2 * PI * radius;

   Point p0(0, 0, 0);
   Point p1(0, 0, -circumference / 4.0);
   Point p2(0, 0, circumference / 4.0);
  
   Path q(p1, p2);

   long_paths[make_pair(0, 0)] = q; 

   real angle = -180.0 / path_point_count;

   real a;

   Point p3(0, -radius, 0);

   Point p4;
   Point p5;

   real b;
   real c;
   real d = PI * radius;

   for (int i = 1; i < path_point_count; ++i)
   {
        p3.rotate(angle, 0, 0);

        cerr << "i == " << i << endl
             << "i * angle == " << i * angle << endl;

        p3.show("p3:");
        cerr << endl;

        a = radius * sin(fabs((i * angle) * (PI / 180.0)));

        cerr << "a == " << a << endl;

        b = (2 * PI * a) / segments;
  
        cerr << "b == " << b << endl;

        c = PI * a * (i * angle) / 180;
 
        cerr << "c == " << c << endl;

        p4.set(-b/2, 0, c - d/2);
        p5.set(b/2, 0, c - d/2);
        
        q.set(p4, p5);

        q.show("q:");

        lat_paths[make_pair(0, angle)] = q; 

   }  /* |for|  */

#if 0 
   cerr << "Type <RETURN> to continue." << endl;
   getchar(); 
#endif 

#if DEBUG_COMPILE
   if (DEBUG)
      {
          cerr_strm << thread_name 
                    << "In `Sphere_Development::set':"
                    << endl 
                    << "circumference == " << circumference
                    << endl;

          log_message(cerr_strm);
          cerr_message(cerr_strm);
          cerr_strm.str("");

#if 0 
          cerr_mutex.lock();
          long_paths[make_pair(0, 0)].show("long_paths[0, 0]:");
          lat_paths[make_pair(0, 0)].show("lat_paths[0, 0]:");
          cerr_mutex.unlock();
#endif 

      }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@;

@q ****** (6)@>

#if DEBUG_COMPILE
   if (DEBUG)
      {
          cerr_strm << thread_name 
                    << "Exiting `Sphere_Development::set' successfully with "
                    << "return value 0."; 

          log_message(cerr_strm);
          cerr_message(cerr_strm);
          cerr_strm.str("");

      }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@; 
  
   return 0;

@q ****** (6).@> 

} /* End of |Sphere_Development::set| definition.  */

@q *** (3) Setting data members.  @>
@*2 Setting data members.
\initials{LDF 2009.11.10.}

\LOG
\initials{LDF 2009.11.10.}
Added this section.
\ENDLOG

@<Declare |Sphere_Development| functions@>=
int
set_radius(real rad = 1.0);

@
@<Define |Sphere_Development| functions@>=
int
Sphere_Development::set_radius(real rad)
{
   radius = rad;

/* !! START HERE:  LDF 2009.11.16.  Paths must be regenerated.  */

   return 0;
}

@q *** (3) Operators.  @>
@*2 Operators.
\initials{LDF 2009.11.16.}

\LOG
\initials{LDF 2009.11.16.}
Added this section.
\ENDLOG

@q **** (4) Assignment.  @>
@*3 Assignment.
\initials{LDF 2009.11.16.}

\LOG
\initials{LDF 2009.11.16.}
Added this function.
\ENDLOG

@<Declare |Sphere_Development| functions@>=
void
operator=(const Sphere_Development& sd);

@
@<Define |Sphere_Development| functions@>=
void
Sphere_Development::operator=(const Sphere_Development& sd)
{
   radius = sd.radius;

   segments = sd.segments;
   divisions_lat = sd.divisions_lat;
   divisions_long = sd.divisions_long;

   long_paths = sd.long_paths; 
   lat_paths  = sd.lat_paths; 

   points = sd.points;

   path_point_count = sd.path_point_count;

   transform = sd.transform;

   return;

}  /* End of |Sphere_Development::operator=(const Sphere_Development&)| definition  */

@q *** (3) @>

@q **** (4) Map.  @>
@*3 Map.
\initials{LDF 2009.11.03.}

\LOG
\initials{LDF 2009.11.03.}
Added this function.

\initials{LDF 2009.11.16.}
Changed this function from a member of |Sphere| to a member of
|Sphere_Development| and removed unneeded arguments.
\ENDLOG

@q ***** (5) Declaration  @>

@<Declare |Sphere_Development| functions@>=
static
void*
map_point(real latitude = 0.0, 
          real longitude = 0.0, 
          Scanner_Node scanner_node = 0);

@q ***** (5) Definition  @>
@
@<Define |Sphere_Development| functions@>=
void*
Sphere_Development::map_point(real latitude, 
                              real longitude, 
                              Scanner_Node scanner_node)
{

@q ***** (5) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ***** (5) @>

#if DEBUG_COMPILE
   if (DEBUG)
   {
       cerr_strm << thread_name << "Entering `Sphere_Development::map_point'.";

       log_message(cerr_strm);
       cerr_message(cerr_strm);
       cerr_strm.str("");

   }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@; 

@q ***** (5) @>

   Point* p = 0;

   try 
   {
       p      = create_new<Point>(0);

   }

   catch (bad_alloc)
   {
   
       cerr_strm << thread_name << "ERROR! In `Sphere_Development::map_point':" 
                 << endl 
                 << "`create_new<Point>' failed. "
                 << "Rethrowing `bad_alloc'.";

       log_message(cerr_strm);
       cerr_message(cerr_strm, error_stop_value);
       cerr_strm.str("");

       throw;

   } /* |catch (bad_alloc)|  */

@q ***** (5) @>
@
@<Define |Sphere_Development| functions@>=

@q ***** (5) @>

#if DEBUG_COMPILE
   if (DEBUG)
      {
          cerr_strm << thread_name 
                    << "Exiting `Sphere_Development::map_point' successfully with return value "
                    << "`(void*) Point*'.";

          log_message(cerr_strm);
          cerr_message(cerr_strm);
          cerr_strm.str("");

      }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@; 

@q ***** (5) @>

   return static_cast<void*>(p);

}  /* End of |Sphere_Development::map_point| definition  */

@q **** (4) @>

@q *** (3) Drawing and Filling.  @>
@*2 Drawing and Filling.
\initials{LDF 2009.11.16.}

\LOG
\initials{LDF 2009.11.16.}
Added this section.
\ENDLOG

@q **** (4) Draw.  @>
@*3 (4) Draw.
\initials{LDF 2009.11.16.}

\LOG
\initials{LDF 2009.11.16.}
Added this function.
\ENDLOG

@q ***** (5) Declaration  @>
@
@<Declare |Sphere_Development| functions@>=

int
draw(Picture& picture,
     Pointer_Vector<Color>* ddraw_color_vector = 0, 
     Pointer_Vector<Dash_Pattern>* ddash_pattern_vector = 0,
     Pointer_Vector<Pen>* ppen_vector = 0, 
     Scanner_Node scanner_node = 0) const;

@q ***** (5) Definition.@>

@
@<Define |Sphere_Development| functions@>=
int
Sphere_Development::draw(Picture& picture,
                         Pointer_Vector<Color>* ddraw_color_vector,
                         Pointer_Vector<Dash_Pattern>* ddash_pattern_vector,
                         Pointer_Vector<Pen>* ppen_vector, 
                         Scanner_Node scanner_node) const
{
@q ***** (5) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);
   using namespace Scan_Parse;

@q ***** (5) @>
  
#if DEBUG_COMPILE
   if (DEBUG)
   {
       cerr_strm << thread_name << "Entering `Sphere_Development::draw'.";

       log_message(cerr_strm);
       cerr_message(cerr_strm);
       cerr_strm.str("");

   }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@; 

@q ***** (5) @>

@q ****** (6) Longitude lines (curves). @>

@ Longitude lines (curves).
\initials{LDF 2009.11.16.}

@<Define |Sphere_Development| functions@>=

   for (map<pair<real, real>, Path>::const_iterator iter = long_paths.begin();
        iter != long_paths.end();
        ++iter)
   {

        iter->second.draw(picture,
                          ddraw_color_vector,
                          ddash_pattern_vector,
                          ppen_vector, 
                          Path::NO_ARROW,
                          scanner_node);

   }  /* |long_paths|  */

@q ****** (6) Latitude lines.  @>
@ Latitude lines.
\initials{LDF 2009.11.16.}

@<Define |Sphere_Development| functions@>=

   for (map<pair<real, real>, Path>::const_iterator iter = lat_paths.begin();
        iter != lat_paths.end();
        ++iter)
   {
        iter->second.draw(picture,
                          ddraw_color_vector,
                          ddash_pattern_vector,
                          ppen_vector, 
                          Path::NO_ARROW,
                          scanner_node);

   }  /* |lat_paths|  */
     
@q ****** (6) Points.  @>

@ Points.  
\initials{LDF 2009.11.16.}

!! START HERE:   LDF 2009.11.16.
I need to find a way to specify a different pen for drawing the points.
\initials{LDF 2009.11.16.}

@<Define |Sphere_Development| functions@>=

   Color* c = 0;
   Pen* p = 0;

   if (ddraw_color_vector && ddraw_color_vector->v.size() > 0)
       c = ddraw_color_vector->v[0];

   if (ppen_vector && ppen_vector->v.size() > 0)
       p = ppen_vector->v[0];
          
   for (map<pair<real, real>, Point>::const_iterator iter =  points.begin();
        iter != points.end();
        ++iter)
   {

        iter->second.drawdot(picture,
                             c,
                             p);

   }  /* |points|  */

@q ***** (5) @>
  
#if DEBUG_COMPILE
   if (DEBUG)
   {
       cerr_strm << thread_name << "Exiting `Sphere_Development::draw' successfully "
                 << "with return value 0.";

       log_message(cerr_strm);
       cerr_message(cerr_strm);
       cerr_strm.str("");

   }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@; 

   return 0;

@q ***** (5) @>

}  /* End of |Sphere_Development::draw| definition  */

@q *** (3) Transformations.@>
@*2 Transformations. 
\initials{LDF 2009.11.10.}

\LOG
\initials{LDF 2009.11.10.}
Added this section.
\ENDLOG

@q ***** (5) Multiplication by a |Transform| with assignment.@>
@*4 Multiplication by a |Transform| with assignment.
@^\cofunc{Sphere\_Development}{*=}@>
\cofunctexi{Sphere\_Development}{*=}
\initials{LDF 2009.11.10.}

\LOG
\initials{LDF 2009.11.10.}
Added this function.
\ENDLOG 

@<Declare |Sphere_Development| functions@>=
virtual
Transform
operator*=(const Transform& t);

@
@<Define |Sphere_Development| functions@>=
Transform
Sphere_Development::operator*=(const Transform& t)
{

   return t;
}

@q **** (4) Rotatation around the main axes.@>
@*3 Rotation  around the main axes. 
@^\cfunc{Sphere_Development}{rotate}@>
\cfunctexi{Sphere_Development}{rotate}
\initials{LDF 2009.11.10.}

\LOG
\initials{LDF 2009.11.10.}
Added this function.
\ENDLOG

@<Declare |Sphere_Development| functions@>=
virtual
Transform 
rotate(const real x, const real y = 0, const real z = 0);

@
@<Define |Sphere_Development| functions@>=
Transform 
Sphere_Development::rotate(const real x, const real y, const real z)
{
  Transform t;
  t.rotate(x, y, z);
  return operator*=(t);

}

@q **** (4) Scale. @>
@*3 Scale. 
@^\cfunc{Sphere_Development}{scale}@>
\cfunctexi{Sphere_Development}{scale}
\initials{LDF 2009.11.10.}

\LOG
\initials{LDF 2009.11.10.}
Added this function.
\ENDLOG

@<Declare |Sphere_Development| functions@>=
virtual
Transform 
scale(real x, real y = 1, real z = 1);

@
@<Define |Sphere_Development| functions@>=
Transform 
Sphere_Development::scale(real x, real y, real z)
{
   Transform t;
   t.scale(x, y, z);
   return operator*=(t);
}

@q **** (4) Shear.@>
@*3 Shear. 
@^\cfunc{Sphere_Development}{shear}@>
\cfunctexi{Sphere_Development}{shear}
\initials{LDF 2009.11.10.}

\LOG
\initials{LDF 2009.11.10.}
Added this function.
\ENDLOG

@<Declare |Sphere_Development| functions@>=

virtual
Transform 
shear(real xy, real xz = 0, real yx = 0, real yz = 0, 
      real zx = 0, real zy = 0);

@
@<Define |Sphere_Development| functions@>=
Transform 
Sphere_Development::shear(real xy, real xz, real yx, real yz, 
      real zx, real zy)
{
  Transform t;
  t.shear(xy, xz, yx, yz, zx, zy);
  return operator*=(t);

}

@q **** (4) Shift.@>
@*3 Shift. 
\initials{LDF 2009.11.10.}

\LOG
\initials{LDF 2009.11.10.}
Added this section.
\ENDLOG

@q ***** (5) |real| arguments.@>
@*3 {\bf real} arguments. 
@^\cfunc{Sphere_Development}{shift}@>
\cfunctexi{Sphere_Development}{shift}
\initials{LDF 2009.11.10.}

\LOG
\initials{LDF 2009.11.10.}
Added this function.
\ENDLOG

@<Declare |Sphere_Development| functions@>=
virtual
Transform 
shift(real xx, real yy = 0, real zz = 0);

@
@<Define |Sphere_Development| functions@>=
Transform
Sphere_Development::shift(real xx, real yy, real zz)
{
  Transform t;
  t.shift(xx, yy, zz);
  return operator*=(t);
}

@q ***** (5) Point argument.@>

@*4 {\bf Point} argument. 
@^\cfunc{Sphere_Development}{shift}@>
\cfunctexi{Sphere_Development}{shift}
\initials{LDF 2009.11.10.}

\LOG
\initials{LDF 2009.11.10.}
Added this function.
\ENDLOG

@<Declare |Sphere_Development| functions@>=
virtual
Transform 
shift(const Point& p);

@
@<Define |Sphere_Development| functions@>=
Transform 
Sphere_Development::shift(const Point& p)
{
  return shift(p.get_x(), p.get_y(), p.get_z());
}

@q **** (4) Rotatation around an arbitrary axis.@>
@*3 Rotatation around an arbitrary axis. 
\initials{LDF 2009.11.10.}

\LOG
\initials{LDF 2009.11.10.}
Added this section.
\ENDLOG

@q ***** (5) Point arguments.@>

@*3 {\bf Point} arguments.
@^\cfunc{Sphere_Development}{rotate}@>
\cfunctexi{Sphere_Development}{rotate}
\initials{LDF 2009.11.10.}

\LOG
\initials{LDF 2009.11.10.}
Added this function.
\ENDLOG

@<Declare |Sphere_Development| functions@>=

virtual
Transform 
rotate(const Point& p0, const Point& p1, const real angle = 180);

@
@<Define |Sphere_Development| functions@>=
Transform 
Sphere_Development::rotate(const Point& p0, const Point& p1, const real angle)
{
  Transform t;
  t.rotate(p0, p1, angle);
  return operator*=(t);
}

@q ***** (5) Path argument.@>

@*3 {\bf Path} arguments.
@^\cfunc{Sphere_Development}{rotate}@>
\cfunctexi{Sphere_Development}{rotate}
\initials{LDF 2009.11.10.}

\LOG
\initials{LDF 2009.11.10.}
Added this function.
\ENDLOG

@<Declare |Sphere_Development| functions@>=

virtual
Transform 
rotate(const Path& p, const real angle = 180);

@
@<Define |Sphere_Development| functions@>=

Transform 
Sphere_Development::rotate(const Path& p, const real angle)
{
   if (!p.is_linear())
     {
        return INVALID_TRANSFORM;
     }

   return rotate(p.get_point(0),
                 p.get_last_point(), angle);  
}   

@q **** (4) Show.  @>
@*3 Show.
\initials{LDF 2009.11.09.}

\LOG
\initials{LDF 2009.11.09.}
Added this function.
\ENDLOG

@<Declare |Sphere_Development| functions@>=
void 
show(string text = "",
     char coords = 'w',
     const bool do_persp = false, 
     const bool do_apply = true,
     Focus* f = 0, 
     const unsigned short proj = Projections::persp,
     const real factor = 1) const;

@q *** (3) Definition.@>
@ 
@<Define |Sphere_Development| functions@>=
void 
Sphere_Development::show(string text, 
                         char coords, 
                         const bool do_persp,
                         const bool do_apply, 
                         Focus* f, 
                         const unsigned short proj,
                         const real factor) const

{

    if (text == "")
       text = "sphere_development:";

    cerr << text 
         << endl
         << "radius == " << radius
         << endl 
         << "`segments' == " << segments
         << endl 
         << "`points.size()' == " << points.size()
         << endl 
         << "`path_point_count' == " << path_point_count
         << endl 
         << "`divisions_lat' == " << divisions_lat
         << endl 
         << "`divisions_long' == " << divisions_long
         << endl 
         << "`long_paths.size()' == " << long_paths.size()
         << endl 
         << "`lat_paths.size()' == " << lat_paths.size()
         << endl;

    transform.show("transform:");  

    return;

}  /* End of |Sphere_Development::show| definition  */

@q * (1) Sphere_Development_Set_Option_Struct.@> 
@* {\bf Sphere\_Development\_Set\_Option\_Struct}.
\initials{LDF 2009.11.17.}

\LOG
\initials{LDF 2009.11.17.}
Added this section.
\ENDLOG

@q ** (2) Struct definition.@> 
@*1 Struct definition.
\initials{LDF 2009.11.17.}

\LOG
\initials{LDF 2009.11.17.}
Added this |struct| definition.
\ENDLOG

@<Declare |struct Sphere_Development_Set_Option_Struct|@>=
  
struct
Sphere_Development_Set_Option_Struct
{
   real radius;

   unsigned int segments;

   unsigned int divisions_lat;
   unsigned int divisions_long;

   unsigned int path_point_count;
   Transform transform;

   @<Declare |Sphere_Development_Set_Option_Struct| functions@>@;

};

@q ** (2) |Sphere_Development_Set_Option_Struct| functions.@> 
@*1 {\bf Sphere\_Development\_Set\_Option\_Struct} functions.
\initials{LDF 2009.11.17.}

\LOG
\initials{LDF 2009.11.17.}
Added this section.
\ENDLOG

@q *** (3) Constructors.  @>
@*2 Constructors.
\initials{LDF 2009.11.17.}

\LOG
\initials{LDF 2009.11.17.}
Added this section.
\ENDLOG

@q **** (4) Default constructor.@>   
@*3 Default constructor.
\initials{LDF 2009.11.17.}

\LOG
\initials{LDF 2009.11.17.}
Added this function.
\ENDLOG

@q ***** (5) Declaration.@>  

@<Declare |Sphere_Development_Set_Option_Struct| functions@>=

Sphere_Development_Set_Option_Struct(void);

@q ***** (5) Definition.@>  

@
@<Define |Sphere_Development_Set_Option_Struct| functions@>=

Sphere_Development_Set_Option_Struct::Sphere_Development_Set_Option_Struct(void) 
{

    radius           = 1;
    segments         = Sphere_Development::DEFAULT_SEGMENTS;
    divisions_lat    = Sphere_Development::DEFAULT_DIVISIONS_LAT;
    divisions_long   = Sphere_Development::DEFAULT_DIVISIONS_LONG;
    path_point_count = Sphere_Development::DEFAULT_PATH_POINT_COUNT;
}

@q *** (3) Destructor.@> 
@*2 Destructor.
\initials{LDF 2009.11.17.}

\LOG
\initials{LDF 2009.11.17.}
Added this function.
\ENDLOG

@q **** (4) Declaration.@>  

@<Declare |Sphere_Development_Set_Option_Struct| functions@>=

~Sphere_Development_Set_Option_Struct(void); 

@q **** (4) Definition.@>  

@
@<Define |Sphere_Development_Set_Option_Struct| functions@>=

Sphere_Development_Set_Option_Struct::~Sphere_Development_Set_Option_Struct(void) 
{
    return;
}

@q *** (3) Clear.@> 
@*2 Clear.
\initials{LDF 2009.11.17.}

\LOG
\initials{LDF 2009.11.17.}
Added this function.
\ENDLOG

@q **** (4) Declaration.@>  

@<Declare |Sphere_Development_Set_Option_Struct| functions@>=

int 
clear(void); 

@q **** (4) Definition.@>  

@
@<Define |Sphere_Development_Set_Option_Struct| functions@>=

int
Sphere_Development_Set_Option_Struct::clear(void) 
{

    return 0;

}  /* End of |Sphere_Development_Set_Option_Struct::clear()| definition.  */

@q *** (3) Show.@> 
@*2 Show.
\initials{LDF 2009.11.17.}

\LOG
\initials{LDF 2009.11.17.}
Added this function.
\ENDLOG

@q **** (4) Declaration.@>  

@<Declare |Sphere_Development_Set_Option_Struct| functions@>=

int 
show(string text = ""); 

@q **** (4) Definition.@>  

@
@<Define |Sphere_Development_Set_Option_Struct| functions@>=

int
Sphere_Development_Set_Option_Struct::show(string text) 
{
    
   if (text == "")
      text = "Sphere_Development_Set_Option_Struct";

   cerr << text << endl;

@q ***** (5) |sphere_development_type|.@> 

@q ***** (5).@> 

   cerr << "radius == " << radius 
        << endl
        << "segments == " << segments
        << endl
        << "path_point_count == " << path_point_count
        << endl 
        << "divisions_lat == " << divisions_lat
        << endl 
        << "divisions_long == " << divisions_long 
        << endl;

   transform.show("transform:");  

   return 0;

}  /* End of |Sphere_Development_Set_Option_Struct::show()| definition.  */

@q * (1) Putting |Sphere_Developments| together. @>
@* Putting {\bf Sphere\_Developments} together.

\immediate\write\functexifile{^^JEnd of file:  sphrdevl.web^^J}

This is what's compiled.
@c
@<Include files@>@;
@<Declare |class Sphere_Development|@>@;@/
@<Initialize |static| |class Sphere_Development| data members@>@;@/
@<Declare |struct Sphere_Development_Set_Option_Struct|@>@;@/
@<Define |Sphere_Development| functions@>@;@/
@<Define |Sphere_Development_Set_Option_Struct| functions@>@;@/

@ This is what's written to \filename{sphrdevl.h}.
@(sphrdevl.h@>=
@<Declare |class Sphere_Development|@>@;@/
@<Declare |struct Sphere_Development_Set_Option_Struct|@>@;@/

@q * Emacs-Lisp code for use in indirect buffers when using the          @>
@q   GNU Emacs editor.  The local variable list is not evaluated when an @>
@q   indirect buffer is visited, so it's necessary to evaluate the       @>
@q   following s-expression in order to use the facilities normally      @>
@q   accessed via the local variables list.                              @>
@q   \initials{LDF 2004.02.12}.                                          @>
@q   (progn (cweb-mode) (outline-minor-mode t) (setq fill-column 80))    @>

@q * Local variables for Emacs.@>
@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q End: @>
