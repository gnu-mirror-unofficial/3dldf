@q ** (2) |drawing_command_glyph|.@>
@*1 {\bf drawing\_command\_sphere\_development}.
\initials{LDF 2022.01.18.}

\LOG
\initials{LDF 2022.01.18.}
Added this function.
\ENDLOG 

@q *** (3) Declaration.@>

@<Declare |Scan_Parse| functions@>=
int
drawing_command_glyph(Scanner_Node scanner_node,
                                   int basic_drawing_command,
                                   Glyph*  sd);

@q *** (3) Definition.@>
@
@<Define |Scan_Parse| functions@>=

int
Scan_Parse::drawing_command_glyph(Scanner_Node scanner_node,
                                               int basic_drawing_command,
                                               Glyph* sd)

{

@q **** (4) Preliminaries.@>   

#if DEBUG_COMPILE
  bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

  stringstream cerr_strm;

  bool error_stop_value   = true;
  bool warning_stop_value = true;
  string thread_name      = "";

  if (scanner_node)
     scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                   &error_stop_value,
                                                   &warning_stop_value);

@q **** (4).@>

#if DEBUG_COMPILE
  if (DEBUG)
    {
      cerr_strm << thread_name 
                << "Entering `Scan_Parse::drawing_command_glyph'.";
 
      log_message(cerr_strm); 
      cerr_message(cerr_strm); 
      cerr_strm.str(""); 
    }
#endif /* |DEBUG_COMPILE|  */@; 

@q ******* (7) Error handling for the case that |sd == 0|.@>
@ Error handling for the case that |sd == 0|.
\initials{LDF 2009.11.16.}

@<Define |Scan_Parse| functions@>=

    if (sd == static_cast<Glyph*>(0))
      {

        cerr_strm << thread_name 
                  << "ERROR! `Scan_Parse::drawing_command_glyph':"
                  << endl << "`sd' == 0.  "
                  << "Not executing drawing command."
                  << endl 
                  << "Resetting the pointers on `scanner_node', and exiting function "
                  << "with return value 1.";

        log_message(cerr_strm); 
        cerr_message(cerr_strm, error_stop_value); 
        cerr_strm.str(""); 

        @<Reset pointers on |scanner_node|@>@;
        
        return 1;

      } /* |if (sd == 0)|  */@;

@q **** (4) @>   
@

@<Define |Scan_Parse| functions@>=
  
  int status;
 
  Id_Map_Entry_Node entry = 0;

  Picture* ppicture                         = 0;
  Pen* ppen                                 = 0;
  Pointer_Vector<Pen>* ppen_vector          = 0;

  Dash_Pattern* ddash_pattern                        = 0;
  Pointer_Vector<Dash_Pattern>* ddash_pattern_vector = 0;

  Color* ccolor                             = 0;
  Color* ddraw_color                        = 0;
  Color* ffill_color                        = 0;   

  Pointer_Vector<Color>* ccolor_vector      = 0;
  Pointer_Vector<Color>* ddraw_color_vector = 0;
  Pointer_Vector<Color>* ffill_color_vector = 0;

@q **** (4) Check the pointers on |scanner_node|.@>

@ Check the pointers on |scanner_node|.  One or more may have been set in the
rules for the \Â§with clause list>.
\initials{LDF 2009.11.16.}

@q ***** (5) Check |scanner_node->picture_entry_ptr|.   @>

Check |scanner_node->picture_entry_ptr|.
\initials{LDF 2009.11.16.}

@q ****** (6) |scanner_node->picture_entry_ptr == 0|.   @>

|scanner_node->picture_entry_ptr == 0|.
\initials{LDF 2009.11.16.}

@<Define |Scan_Parse| functions@>=
if (scanner_node->picture_entry_ptr == static_cast<void*>(0))
  {

#if DEBUG_COMPILE
    if (DEBUG)
      {
        cerr_strm << thread_name 
                  << "In `Scan_Parse::drawing_command_glyph':"
                  << endl
                  << "`scanner_node->picture_entry_ptr' == 0";

        log_message(cerr_strm); 
        cerr_message(cerr_strm); 
        cerr_strm.str(""); 
      }
#endif /* |DEBUG_COMPILE|  */@;  

    entry = scanner_node->lookup("current_picture");

@q ******* (7) Error handling for the case that     @>
@q ******* (7) |entry == 0 || entry->object == 0|.  @>
@ Error handling for the case that 
|entry == 0 || entry->object == 0|.
\initials{LDF 2009.11.16.}

@<Define |Scan_Parse| functions@>=

    if (entry == static_cast<Id_Map_Entry_Node>(0) || entry->object == static_cast<void*>(0))
      {

        cerr_strm << thread_name 
                  << "ERROR! `Scan_Parse::drawing_command_glyph':"
                  << endl << "`current_picture' doesn't seem to exist."
                  << endl << "Not executing drawing command. "
                  << endl << "Will delete `sd' and reset "
                  << "the pointers on `scanner_node', and exit function "
                  << "with return value 1.";

        log_message(cerr_strm); 
        cerr_message(cerr_strm, error_stop_value); 
        cerr_strm.str(""); 

        delete sd;
        sd = 0;

        @<Reset pointers on |scanner_node|@>@;

return 1;

      } /* |if (entry == 0)|  */@;

@q ******* (7) Success!  |current_picture| exists.  @>
@ Success!  |current_picture| exists.
\initials{LDF 2009.11.16.}
@<Define |Scan_Parse| functions@>=

  else
    {
      ppicture = static_cast<Picture*>(entry->object); 
    }

  } /* |if (scanner_node->picture_entry_ptr == 0)|  */@;

@q ****** (6) |scanner_node->picture_entry_ptr != 0|.   @>
@ |scanner_node->picture_entry_ptr != 0|.
\initials{LDF 2009.11.16.}

@<Define |Scan_Parse| functions@>=

else /* |scanner_node->picture_entry_ptr != 0|  */
  {

#if DEBUG_COMPILE
    if (DEBUG)
      {
        cerr_strm << thread_name 
                  << "In `Scan_Parse::drawing_command_glyph':"
                  << endl 
                  << "`scanner_node->picture_entry_ptr' != 0.";

        log_message(cerr_strm); 
        cerr_message(cerr_strm); 
        cerr_strm.str(""); 
      }
#endif /* |DEBUG_COMPILE|  */@;  

    ppicture = static_cast<Picture*>(scanner_node->picture_entry_ptr); 

  } /* |else| (|scanner_node->picture_entry_ptr != 0|)  */

  entry = 0;

@q ***** (5) Set |ddraw_color_vector| and |ffill_color|.@> 
@ Set |ddraw_color_vector| and |ffill_color|.

@<Define |Scan_Parse| functions@>=

   ccolor        = static_cast<Color*>(scanner_node->color_ptr); 
   ccolor_vector = static_cast<Pointer_Vector<Color>*>(
                      scanner_node->color_vector_ptr); 

   ddraw_color        = static_cast<Color*>(scanner_node->draw_color_ptr); 
   ddraw_color_vector = static_cast<Pointer_Vector<Color>*>(
                           scanner_node->draw_color_vector_ptr); 

   ffill_color        = static_cast<Color*>(scanner_node->fill_color_ptr); 
   ffill_color_vector = static_cast<Pointer_Vector<Color>*>(
                           scanner_node->fill_color_vector_ptr); 

@q ****** (6) Set |ddraw_color_vector|.@> 

@ Set |ddraw_color_vector|.
\initials{LDF 2009.11.16.}

@<Define |Scan_Parse| functions@>=

   if (ddraw_color_vector != static_cast<Pointer_Vector<Color>*>(0))
      scanner_node->draw_color_vector_ptr = static_cast<void*>(0);

   else  /* |ddraw_color_vector == 0|  */ 
      {
          ddraw_color_vector = new Pointer_Vector<Color>;

         if (ddraw_color != static_cast<Color*>(0))
            {

               ddraw_color_vector->append_copy(ddraw_color); 
            }      

         else if (ccolor != static_cast<Color*>(0))
            {
                ddraw_color_vector->append_copy(ccolor);
            }  

         else if (   ccolor_vector != static_cast<Pointer_Vector<Color>*>(0) 
                  && ccolor_vector->ctr > 0)
            {
                ddraw_color_vector->append_copy(*ccolor_vector);
            }  

          else 
             {

                 entry = scanner_node->lookup("default_color");

                 if (   entry != static_cast<Id_Map_Entry_Node>(0) 
                     && entry->object != static_cast<void*>(0))
                    ddraw_color_vector->append_copy(
                       static_cast<Color*>(entry->object));

                 else  
                    ddraw_color_vector->append_copy(&Colors::black);
             }

      }  /* |else| (|ddraw_color_vector == 0|)  */ 

@q ****** (6) Set |ffill_color|.@> 

@ Set |ffill_color|.

@<Define |Scan_Parse| functions@>=
 
     if (ffill_color != static_cast<Color*>(0))
        scanner_node->fill_color_ptr = 0;

      else /* |ffill_color == 0|  */
         {

            ffill_color = create_new<Color>(0);

@q ******* (7) @> 

            if (   ffill_color_vector != static_cast<Pointer_Vector<Color>*>(0) 
                && ffill_color_vector->ctr > 0)
               {

                   *ffill_color = *(ffill_color_vector->v[0]);
                   
               }

@q ******* (7) @> 

            else if (ccolor != static_cast<Color*>(0))
               {
                  *ffill_color = *ccolor;
               }

@q ******* (7) @> 

            else if (   ccolor_vector != static_cast<Pointer_Vector<Color>*>(0) 
                     && ccolor_vector->ctr > 0)
               {

                   *ffill_color = *(ccolor_vector->v[0]);

               }

@q ******* (7) @> 

            else if (basic_drawing_command == FILL) 
               {
                 
                   entry = scanner_node->lookup("default_color");

                   if (   entry != static_cast<Id_Map_Entry_Node>(0) 
                       && entry->object != static_cast<void*>(0))
                      *ffill_color = *(static_cast<Color*>(entry->object));
                   else                     
                      *ffill_color = Colors::black;

               }

@q ******* (7) @> 

      else if (basic_drawing_command == FILLDRAW) 
         {
                 
              entry = scanner_node->lookup("background_color");

              if (   entry != static_cast<Id_Map_Entry_Node>(0) 
                  && entry->object != static_cast<void*>(0))
                 *ffill_color = *(static_cast<Color*>(entry->object));
              else                     
                 *ffill_color = Colors::white;

         }

@q ******* (7) @> 

      }  /* |else| (|ffill_color == 0|)  */

@q ***** (5) Check |scanner_node->pen_vector_ptr|.  @>
@ Check |scanner_node->pen_vector_ptr|.
\initials{LDF 2009.11.16.}

@<Define |Scan_Parse| functions@>=

@q ****** (6).@> 

  if (scanner_node->pen_vector_ptr != static_cast<void*>(0))
     ppen_vector = static_cast<Pointer_Vector<Pen>*>(scanner_node->pen_vector_ptr); 

@q ****** (6).@> 

  else /* |scanner_node->pen_vector_ptr == 0|  */
     {

@q ******* (7) Check |scanner_node->pen_ptr|.  @>
@ Check |scanner_node->pen_ptr|.
\initials{LDF 2009.11.16.}

@<Define |Scan_Parse| functions@>=

         if (scanner_node->pen_ptr == static_cast<void*>(0))
            {

@q ******** (8) @> 

                if (*(scanner_node->current_pen) != static_cast<Pen*>(0))
                   {
                       ppen = *(scanner_node->current_pen);

                   }  /* |if (*(scanner_node->current_pen) != 0)|  */

@q ******** (8) @> 

            } /* |if (scanner_node->pen_ptr == 0)|  */

@q ******* (7) @> 

         else /* (|scanner_node->pen_ptr != 0|)  */
            {

                 ppen = static_cast<Pen*>(scanner_node->pen_ptr); 

            }  /* |else| (|scanner_node->pen_ptr != 0|)  */

@q ******* (7) @> 

         if (ppen != static_cast<Pen*>(0))
            {
                ppen_vector = new Pointer_Vector<Pen>;
                *ppen_vector += ppen;
            }

@q ******* (7) @> 

     }     /* |else| (|scanner_node->pen_vector_ptr == 0|)  */

@q ***** (5) Check |scanner_node->dash_pattern_vector_ptr|.  @>
@ Check |scanner_node->dash_pattern_vector_ptr|.
\initials{LDF 2009.11.16.}

@<Define |Scan_Parse| functions@>=

@q ****** (6).@> 

   if (scanner_node->dash_pattern_vector_ptr != static_cast<void*>(0))
      ddash_pattern_vector 
         = static_cast<Pointer_Vector<Dash_Pattern>*>(
              scanner_node->dash_pattern_vector_ptr);       

@q ****** (6).@> 

  else /* |scanner_node->dash_pattern_vector_ptr == 0|  */
     {

@q ******* (7) @> 

         if (scanner_node->dash_pattern_ptr == static_cast<void*>(0))
            {

@q ******** (8) @> 

                if (*(scanner_node->current_dash_pattern) != static_cast<Dash_Pattern*>(0))
                   {
                       ddash_pattern = *(scanner_node->current_dash_pattern);

                   }  /* |if (*(scanner_node->current_dash_pattern) != 0)|  */

@q ******** (8) @> 

             } /* |if (scanner_node->dash_pattern_ptr == 0)|  */

@q ******* (7) @> 

   else /* (|scanner_node->dash_pattern_ptr != 0|)  */
      {

        ddash_pattern = static_cast<Dash_Pattern*>(scanner_node->dash_pattern_ptr); 

      } /* |else| (|scanner_node->dash_pattern_ptr != 0|)  */

@q ******* (7) @> 

        if (ddash_pattern != static_cast<Dash_Pattern*>(0))
           {
              ddash_pattern_vector = new Pointer_Vector<Dash_Pattern>;
              *ddash_pattern_vector += ddash_pattern; 
           }
@q ******* (7) @> 

     }  /* |else| (|scanner_node->dash_pattern_vector_ptr == 0|)  */

@q **** (4) Check which drawing command to use.@>
@ Check which drawing command to use
\initials{LDF 2009.11.16.}

@q ***** (5) DRAW.@>
\.{DRAW}.
\initials{LDF 2009.11.16.}

@<Define |Scan_Parse| functions@>= 

  if (   basic_drawing_command == DRAW)
    {

#if DEBUG_COMPILE
   if (DEBUG) 
     {
       cerr_strm << thread_name << "In `Scan_Parse::drawing_command_glyph':"
                 << endl
                 << "It's " << name_map[basic_drawing_command] << ".";

       log_message(cerr_strm); 
       cerr_message(cerr_strm);
       cerr_strm.str("");
     }
#endif /* |DEBUG_COMPILE|  */@; 

       sd->draw(*ppicture, ddraw_color_vector, ddash_pattern_vector, ppen_vector);

       delete ffill_color;
       ffill_color = 0;

       ddraw_color_vector = 0;

    } /* |if (basic_drawing_command == DRAW)|  */

@q ***** (5) FILL@>
@ \.{FILL}.
\initials{LDF 2009.11.16.}

@<Define |Scan_Parse| functions@>= 

  else if (basic_drawing_command == FILL)
    {
#if DEBUG_COMPILE
      if (DEBUG) 
        {
          cerr_strm << thread_name << "In `Scan_Parse::drawing_command_glyph':"
                    << endl
                    << "It's FILL.";

          log_message(cerr_strm); 
          cerr_message(cerr_strm);
          cerr_strm.str("");
        }
#endif /* |DEBUG_COMPILE|  */@; 

#if 0 

/* !! START HERE: LDF 2009.11.16.  */
      
         sd->fill(*ppicture, ffill_color);
#endif 

         delete ddraw_color_vector;
         ddraw_color_vector = 0;

         ffill_color = 0;

    } /* |else if (basic_drawing_command == FILL)|  */

@q ***** (5) FILLDRAW.@>
@ \.{FILLDRAW}.
\initials{LDF 2009.11.16.}

@<Define |Scan_Parse| functions@>= 

  else if (basic_drawing_command == FILLDRAW)
    {
#if DEBUG_COMPILE
   if (DEBUG) 
     {
       cerr_strm << thread_name << "In `Scan_Parse::drawing_command_glyph':"
                 << endl
                 << "It's FILLDRAW.";

       log_message(cerr_strm); 
       cerr_message(cerr_strm);
       cerr_strm.str("");
     }
#endif /* |DEBUG_COMPILE|  */@; 

#if 0

/* !! START HERE: LDF 2009.11.16.  */

   sd->filldraw(*ppicture, ddraw_color_vector, ffill_color,
                   ddash_pattern_vector, ppen_vector);
#endif 

   ddraw_color_vector = 0;
   ffill_color        = 0;

 } /* |else if (basic_drawing_command == FILLDRAW)|  */

@q ***** (5) UNDRAW.@>
@ \.{UNDRAW}.
\initials{LDF 2009.11.16.}

@<Define |Scan_Parse| functions@>= 

 else if (basic_drawing_command == UNDRAW)
   {
#if DEBUG_COMPILE
     if (DEBUG) 
       {
         cerr_strm << thread_name << "In `Scan_Parse::drawing_command_glyph':"
                   << endl
                   << "It's UNDRAW.";

         log_message(cerr_strm); 
         cerr_message(cerr_strm);
         cerr_strm.str("");
       }
#endif /* |DEBUG_COMPILE|  */@; 

#if 0 

/* !! START HERE: LDF 2009.11.16.  */

     sd->undraw(*ppicture, ddash_pattern_vector, ppen_vector);

#endif 

     delete ddraw_color_vector;
     ddraw_color_vector = 0;

     delete ffill_color; 
     ffill_color = 0;

} /* |else if (basic_drawing_command == UNDRAW)|  */
  
@q ***** (5) UNFILL.@>
@ |UNFILL|.
\initials{LDF 2009.11.16.}

@<Define |Scan_Parse| functions@>= 

   else if (basic_drawing_command == UNFILL)
     {
#if DEBUG_COMPILE
       if (DEBUG) 
         {
           cerr_strm << thread_name << "In `Scan_Parse::drawing_command_glyph':"
                     << endl
                     << "It's UNFILL.";

           log_message(cerr_strm); 
           cerr_message(cerr_strm);
           cerr_strm.str("");
         }
#endif /* |DEBUG_COMPILE|  */@; 

#if 0 
/* !! START HERE: LDF 2009.11.16.  */

       sd->unfill(*ppicture);

#endif 

       delete ddraw_color_vector;
       ddraw_color_vector = 0;

       delete ffill_color; 
       ffill_color = 0;

     } /* |else if (basic_drawing_command == UNFILL)|  */

@q ***** (5) UNFILLDRAW.@>
@ |UNFILLDRAW|.
\initials{LDF 2009.11.16.}

@<Define |Scan_Parse| functions@>= 

     else if (basic_drawing_command == UNFILLDRAW)
       {
#if DEBUG_COMPILE
         if (DEBUG) 
           {
             cerr_strm << thread_name 
                       << "In `Scan_Parse::drawing_command_glyph':"
                       << endl
                       << "It's UNFILLDRAW.";

             log_message(cerr_strm); 
             cerr_message(cerr_strm);
             cerr_strm.str("");
           }
#endif /* |DEBUG_COMPILE|  */@; 

#if 0 

/* !! START HERE: LDF 2009.11.16.  */

         sd->unfilldraw(*ppicture, ddraw_color_vector, ddash_pattern_vector, ppen_vector);

#endif

delete ffill_color; 
         ffill_color = 0;

       } /* |else if (basic_drawing_command == UNFILLDRAW)|  */

@q ***** (5) Error handling for invalid |basic_drawing_command|.@>
@ Error handling for invalid \Â§basic drawing command>.
\initials{LDF 2009.11.16.}

@<Define |Scan_Parse| functions@>= 

  else /* Invalid |basic_drawing_command|.  */
    {

      cerr_strm << thread_name << "ERROR! In `Scan_Parse::drawing_command_glyph':"
                << endl << "Invalid `basic_drawing_command': " 
                << basic_drawing_command
                << endl << "Will delete `sd' and reset "
                << "the pointers on `scanner_node', and exit function "
                << "with return value 1.";

      log_message(cerr_strm); 
      cerr_message(cerr_strm, error_stop_value);
      cerr_strm.str("");

      delete sd;
      sd = 0;

      delete ddraw_color_vector;
      ddraw_color_vector = 0;

      delete ffill_color; 
      ffill_color = 0;

      @<Reset pointers on |scanner_node|@>@;

      return 1;
      
    }  /* |else| (invalid |basic_drawing_command|).  */

@q **** (4) Exit function successfully with return value 0.@> 
@ Exit function successfully with return value 0.
\initials{LDF 2009.11.16.}

@<Define |Scan_Parse| functions@>= 
  
#if 0 

/* !! START HERE: LDF 2009.11.16.  */

  delete sd;
  sd = 0;

#endif 

  @<Reset pointers on |scanner_node|@>@;

#if DEBUG_COMPILE
  if (DEBUG)
    {
      cerr_strm << thread_name 
                << "Exiting `Scan_Parse::drawing_command_glyph' "
                << "successfully with return value 0.";
 
      log_message(cerr_strm); 
      cerr_message(cerr_strm); 
      cerr_strm.str(""); 
    }
#endif /* |DEBUG_COMPILE|  */@; 

  return 0;

} /* End of |Scan_Parse::drawing_command_glyph| definition.  */

