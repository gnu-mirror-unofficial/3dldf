
@q **** (4) @>
@
@<Define |Pointer_Vector| specializations@>=



@q **** (4) @>
@
@<Define |Pointer_Vector| specializations@>=


   Path q;
   q += *points[0];
   q += normal;
  

   t.align_with_axis(*points[0], normal);

   *this *= t;

#if DEBUG_COMPILE
   if (DEBUG)
   { 
      show("*this after alignment:");

   }  
#endif /* |DEBUG_COMPILE|  */@;

@q **** (4) @>
@
@<Define |Pointer_Vector| specializations@>=


   vector<Point*>::const_iterator iter = points.begin();
   vector<Connector_Type*>::const_iterator ct_iter = connector_type_vector.begin();

   stringstream connector_strm;

   temp_strm << "mpost -interaction=nonstopmode -numbersystem \"double\" null.mp "
             << "'tracingonline :=1; input writemcs.mp; path q;"  << "q = ";

@q **** (4) @>

   for (;pt_iter != points.end(); ++pt_iter)
   {
@q ***** (5) @>

      temp_strm << "(" << (*pt_iter)->get_x() << "cm, " << (*pt_iter)->get_y() << "cm)";

      if (ct_iter != connector_type_vector.end())
      {
         if ((*ct_iter)->type0 == Connector_Type::CONTROLS_TYPE)
         {
            connector_strm << " .. controls";

            if ((*ct_iter)->pt0 != 0)
               connector_strm << " (" << (*ct_iter)->pt0->get_x() 
                              << "cm, " << (*ct_iter)->pt0->get_y() << "cm)";

            if ((*ct_iter)->pt1 != 0)
               connector_strm << " and (" << (*ct_iter)->pt1->get_x() << "cm, " 
                              << (*ct_iter)->pt1->get_y() << "cm)";

            connector_strm << " ..";
         }

      }

@q ***** (5) @>

      if (connector_strm.str().empty())
         connector_strm << " .. ";

      if (next(pt_iter) == points.end())
      {

          if (cycle_switch == true)
             temp_strm << connector_strm.str() << " cycle";

          temp_strm << ";";
          break;
      } 
      else
         temp_strm << connector_strm.str()  << " ";
   
@q ***** (5) @>

      if (next(ct_iter) != connector_type_vector.end())
        ++ct_iter;

      connector_strm.str("");

@q ***** (5) @>

   }  /* |for| */

@q **** (4) @>

    char temp_filename[] = "mp_output.XXXXXX";
    
    errno = 0;
    int fd = mkstemp(temp_filename);

    if (fd == -1)
    {
            cerr << "ERROR!  In `Pointer_Vector<Path, Path>::resolve':"
                 << endl 
                 << "`mkstemp' failed, returning -1:"
                 << endl
                 << strerror(errno)
                 << endl 
                 << "Failed to create temporary file."
                 << endl 
                 << "Exiting function unsuccessfully with return value 1."
                 << endl;

            return 1;

    }  /* |if (fd == -1)|  */

#if DEBUG_COMPILE
    else if (DEBUG)
    {
        cerr << "In `Pointer_Vector<Path, Path>::resolve':"
             << endl 
             << "`mkstemp' succeeded:  `temp_filename' == " << temp_filename 
             << endl;

    }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


@q **** (4) @>
@
@<Define |Pointer_Vector| specializations@>=

   close(fd);

   temp_strm << "path r;n = (length q) / " << res_val << ";"
             << "r = point 0 of q;pair m;for i = n step n until length q: m := point i of q;"
             << "r := r .. m;endfor;r := r .. cycle;"
             << "write_path(r, \"" << temp_filename << "\", false);end;'";

#if DEBUG_COMPILE
   if (DEBUG)
   {
      cerr << "temp_strm.str() == " << temp_strm.str() << endl;

   }  
#endif /* |DEBUG_COMPILE|  */@;

   errno = 0;
   status = system(temp_strm.str().c_str());

   FILE *fp = fopen(temp_filename, "r");
   
   yyscan_t scanner;
   zzlex_init_extra(static_cast<void*>(scanner_node),  &scanner);
   zzset_in(fp, scanner);
   zzlex(scanner);
   zzlex_destroy(scanner);
   
   fclose(fp);
   fp = 0;
   unlink(temp_filename);

#if DEBUG_COMPILE
   if (DEBUG)
   { 
      cerr << "After calling zzlex." << endl;

      cerr << "scanner_node->metapost_output_struct->path_vector.size() == " 
           << scanner_node->metapost_output_struct->path_vector.size() << endl;
   }  
#endif /* |DEBUG_COMPILE|  */@; 

   *this = *(scanner_node->metapost_output_struct->path_vector.back());

   *this *= t.inverse();

#if DEBUG_COMPILE
   if (DEBUG)
   { 
      this->show("*this:");
   }  
#endif /* |DEBUG_COMPILE|  */@; 


@q **** (4) @>
@
@<Define |Pointer_Vector| specializations@>=    

