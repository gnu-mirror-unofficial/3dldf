
@q **** (4) Preliminaries.@>   

#if DEBUG_COMPILE
  bool DEBUG = true; /* |false| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

  stringstream cerr_strm;

  bool error_stop_value   = true;
  bool warning_stop_value = true;
  string thread_name      = "";

  if (scanner_node)
     scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                   &error_stop_value,
                                                   &warning_stop_value);

@q **** (4).@>

#if DEBUG_COMPILE
  if (DEBUG)
    {
      cerr_strm << thread_name 
                << "Entering `Scan_Parse::drawing_command_glyph'.";
 
      log_message(cerr_strm); 
      cerr_message(cerr_strm); 
      cerr_strm.str(""); 
    }
#endif /* |DEBUG_COMPILE|  */@; 

@q **** (4) @>   
@
@<Define |Scan_Parse| functions@>=
  
  int status;
 
  Id_Map_Entry_Node entry = 0;

  Picture* ppicture                         = 0;
  Pen* ppen                                 = 0;
  Pointer_Vector<Pen>* ppen_vector          = 0;

  Dash_Pattern* ddash_pattern                        = 0;
  Pointer_Vector<Dash_Pattern>* ddash_pattern_vector = 0;

  Color* ccolor                             = 0;

  Pointer_Vector<Color>* ccolor_vector      = 0;
  Pointer_Vector<Color>* ddraw_color_vector = 0;
  Pointer_Vector<Color>* ffill_color_vector = 0;

@q **** (4) Check the pointers on |scanner_node|.@>

@ Check the pointers on |scanner_node|.  One or more may have been set in the
rules for the \Â§with clause list>.
\initials{LDF 2022.01.27.}

@q ***** (5) Check |scanner_node->picture_entry_ptr|.   @>
@ Check |scanner_node->picture_entry_ptr|.
\initials{LDF 2022.01.27.}

@q ****** (6) |scanner_node->picture_entry_ptr == 0|.   @>
@ |scanner_node->picture_entry_ptr == 0|.
\initials{LDF 2022.01.27.}

@<Define |Scan_Parse| functions@>=

   if (scanner_node->picture_entry_ptr == static_cast<void*>(0))
     {

#if DEBUG_COMPILE
    if (DEBUG)
      {
        cerr_strm << thread_name 
                  << "In `Scan_Parse::drawing_command_glyph':"
                  << endl
                  << "`scanner_node->picture_entry_ptr' == 0";

        log_message(cerr_strm); 
        cerr_message(cerr_strm); 
        cerr_strm.str(""); 
      }
#endif /* |DEBUG_COMPILE|  */@;  

    entry = scanner_node->lookup("current_picture");

@q ******* (7) Error handling for the case that     @>
@q ******* (7) |entry == 0 || entry->object == 0|.  @>
@ Error handling for the case that 
|entry == 0 || entry->object == 0|.
\initials{LDF 2022.01.27.}

@<Define |Scan_Parse| functions@>=

    if (entry == static_cast<Id_Map_Entry_Node>(0) || entry->object == static_cast<void*>(0))
      {

        cerr_strm << thread_name 
                  << "ERROR! `Scan_Parse::drawing_command_glyph':"
                  << endl << "`current_picture' doesn't seem to exist."
                  << endl << "Not executing drawing command. "
                  << endl << "Will clear and delete `pv' and reset "
                  << "the pointers on `scanner_node', and exit function "
                  << "with return value 1.";

        log_message(cerr_strm); 
        cerr_message(cerr_strm, error_stop_value); 
        cerr_strm.str(""); 

        pv->clear();
        delete pv;
        pv = 0;

        @<Reset pointers on |scanner_node|@>@;

        return 1;

      } /* |if (entry == 0)|  */@;

@q ******* (7) Success!  |current_picture| exists.  @>
@ Success!  |current_picture| exists.
\initials{LDF 2022.01.27.}
@<Define |Scan_Parse| functions@>=

  else
    {
      ppicture = static_cast<Picture*>(entry->object); 
    }

  } /* |if (scanner_node->picture_entry_ptr == 0)|  */@;

@q ****** (6) |scanner_node->picture_entry_ptr != 0|.   @>
@ |scanner_node->picture_entry_ptr != 0|.
\initials{LDF 2022.01.27.}

@<Define |Scan_Parse| functions@>=

else /* |scanner_node->picture_entry_ptr != 0|  */
  {

#if DEBUG_COMPILE
    if (DEBUG)
      {
        cerr_strm << thread_name 
                  << "In `Scan_Parse::drawing_command_glyph':"
                  << endl 
                  << "`scanner_node->picture_entry_ptr' != 0.";

        log_message(cerr_strm); 
        cerr_message(cerr_strm); 
        cerr_strm.str(""); 
      }
#endif /* |DEBUG_COMPILE|  */@;  

    ppicture = static_cast<Picture*>(scanner_node->picture_entry_ptr); 

  } /* |else| (|scanner_node->picture_entry_ptr != 0|)  */

  entry = 0;

@q ***** (5) Check |scanner_node->color_vector_ptr|.  @>
@ Check |scanner_node->color_vector_ptr|.
\initials{LDF 2022.01.27.}

@q ****** (6) |scanner_node->color_vector_ptr != 0|.  @>
@ |scanner_node->color_vector_ptr != 0|.
\initials{LDF 2022.01.27.}

@<Define |Scan_Parse| functions@>=

   if (scanner_node->color_vector_ptr != static_cast<void*>(0))
      {
          ccolor_vector 
             = static_cast<Pointer_Vector<Color>*>(scanner_node->color_vector_ptr);  

      }  /* |if (scanner_node->color_vector_ptr != 0)|  */

@q ****** (6) |scanner_node->color_vector_ptr == 0|.  @>
@ |scanner_node->color_vector_ptr == 0|.
\initials{LDF 2022.01.27.}

@<Define |Scan_Parse| functions@>=

   else /* |scanner_node->color_vector_ptr == 0|  */
      {

@q ******* (7) @> 

         if (   scanner_node->color_ptr != static_cast<void*>(0) 
             || *(scanner_node->current_color) != static_cast<Color*>(0))
            {

@q ******** (8) @> 

                try 
                   {
                       ccolor_vector = new Pointer_Vector<Color>;
                   }

@q ******** (8) @> 

                 catch (bad_alloc)
                    {
                        cerr_strm << thread_name 
                                  << "ERROR!  In `Scan_Parse::drawing_command_glyph':"
                                  << endl << "`new Pointer_Vector<Color>' failed, "
                                  << "throwing `bad_alloc'."
                                  << endl 
                                  << endl << "Clearing and deleting `pv', resetting "
                                  << "the pointers on `scanner_node', and rethrowing "
                                  << "`bad_alloc'.";

                          log_message(cerr_strm); 
                          cerr_message(cerr_strm, error_stop_value); 
                          cerr_strm.str(""); 

                          pv->clear();
                          delete pv;
                          pv = 0;
 
                          @<Reset pointers on |scanner_node|@>@;
        
                          throw;
      
                      }  /* |catch (bad_alloc)| */

@q ******** (8) @> 

            }  /* |if (   scanner_node->color_ptr != 0 
                       || *(scanner_node->current_color) != 0)|  */

@q ******* (7) @> 

          if (scanner_node->color_ptr != static_cast<void*>(0))
             {

                 ccolor_vector->append_copy(static_cast<Color*>(scanner_node->color_ptr));  
                   
             }  /* |if (scanner_node->color_ptr != 0)|  */

@q ******* (7) @> 
            
          else if (*(scanner_node->current_color) != static_cast<Color*>(0))
             {
                 ccolor_vector->append_copy(*scanner_node->current_color);  

             } /* |else if (*(scanner_node->current_color) != 0)|  */

@q ******* (7) @> 

      }   /* |else| (|scanner_node->color_vector_ptr == 0|)  */

@q ***** (5) Check |scanner_node->draw_color_vector_ptr|.  @>
@ Check |scanner_node->draw_color_vector_ptr|.
\initials{LDF 2022.01.27.}

@q ****** (6) |scanner_node->draw_color_vector_ptr != 0|.  @>
@ |scanner_node->draw_color_vector_ptr != 0|.
\initials{LDF 2022.01.27.}

@<Define |Scan_Parse| functions@>=

   if (scanner_node->draw_color_vector_ptr != static_cast<void*>(0))
      {
          ddraw_color_vector 
             = static_cast<Pointer_Vector<Color>*>(scanner_node->draw_color_vector_ptr);  

      }  /* |if (scanner_node->draw_color_vector_ptr != 0)|  */

@q ****** (6) |scanner_node->draw_color_vector_ptr == 0|.  @>
@ |scanner_node->draw_color_vector_ptr == 0|.
\initials{LDF 2022.01.27.}

@<Define |Scan_Parse| functions@>=

   else /* |scanner_node->draw_color_vector_ptr == 0|  */
      {

@q ******* (7) @> 

            try 
               {
                   ddraw_color_vector = new Pointer_Vector<Color>;
               }

@q ******* (7) @> 

             catch (bad_alloc)
                {
                    cerr_strm << thread_name 
                              << "ERROR!  In `Scan_Parse::drawing_command_glyph':"
                              << endl << "`new Pointer_Vector<Color>' failed, "
                              << "throwing `bad_alloc'."
                              << endl 
                              << endl << "Clearing and deleting `pv', resetting "
                              << "the pointers on `scanner_node', and rethrowing "
                              << "`bad_alloc'.";

                      log_message(cerr_strm); 
                      cerr_message(cerr_strm, error_stop_value); 
                      cerr_strm.str(""); 

                      pv->clear();
                      delete pv;
                      pv = 0;

                      @<Reset pointers on |scanner_node|@>@;
    
                      throw;
  
                  }  /* |catch (bad_alloc)|  */

@q ******* (7) @> 

          if (scanner_node->draw_color_ptr != static_cast<void*>(0))
             {

                 ddraw_color_vector->append_copy(
                    static_cast<Color*>(scanner_node->draw_color_ptr));  
                   
             }  /* |if (scanner_node->draw_color_ptr != 0)|  */

@q ******* (7) @> 
            
          else if (*(scanner_node->current_draw_color) != 0)
             {
                 ddraw_color_vector->append_copy(*scanner_node->current_draw_color);  

             } /* |else if (*(scanner_node->current_draw_color) != 0)|  */

@q ******* (7) @> 

      }   /* |else| (|scanner_node->draw_color_vector_ptr == 0|)  */

@q ***** (5) Check |scanner_node->fill_color_vector_ptr|.  @>
@ Check |scanner_node->fill_color_vector_ptr|.
\initials{LDF 2022.01.27.}

@q ****** (6) |scanner_node->fill_color_vector_ptr != 0|.  @>
@ |scanner_node->fill_color_vector_ptr != 0|.
\initials{LDF 2022.01.27.}

@<Define |Scan_Parse| functions@>=

   if (scanner_node->fill_color_vector_ptr != static_cast<void*>(0))
      {
          ffill_color_vector 
             = static_cast<Pointer_Vector<Color>*>(scanner_node->fill_color_vector_ptr);  

      }  /* |if (scanner_node->fill_color_vector_ptr != 0)|  */

@q ****** (6) |scanner_node->fill_color_vector_ptr == 0|.  @>
@ |scanner_node->fill_color_vector_ptr == 0|.
\initials{LDF 2022.01.27.}

@<Define |Scan_Parse| functions@>=

   else /* |scanner_node->fill_color_vector_ptr == 0|  */
      {

@q ******* (7) @> 

            try 
               {
                   ffill_color_vector = new Pointer_Vector<Color>;
               }

@q ******* (7) @> 

             catch (bad_alloc)
                {
                    cerr_strm << thread_name 
                              << "ERROR!  In `Scan_Parse::drawing_command_glyph':"
                              << endl << "`new Pointer_Vector<Color>' failed, "
                              << "throwing `bad_alloc'."
                              << endl 
                              << endl << "Clearing and deleting `pv', resetting "
                              << "the pointers on `scanner_node', and rethrowing "
                              << "`bad_alloc'.";

                      log_message(cerr_strm); 
                      cerr_message(cerr_strm, error_stop_value); 
                      cerr_strm.str(""); 

                      pv->clear();
                      delete pv;
                      pv = 0;

                      @<Reset pointers on |scanner_node|@>@;
    
                      throw;
  
                  }  /* |catch (bad_alloc)|  */

@q ******* (7) @> 

          if (scanner_node->fill_color_ptr != static_cast<void*>(0))
             {

                 ffill_color_vector->append_copy(
                    static_cast<Color*>(scanner_node->fill_color_ptr));  
                   
             }  /* |if (scanner_node->fill_color_ptr != 0)|  */

@q ******* (7) @> 
            
          else if (*(scanner_node->current_fill_color) != 0)
             {
                 ffill_color_vector->append_copy(*scanner_node->current_fill_color);  

             } /* |else if (*(scanner_node->current_fill_color) != 0)|  */

@q ******* (7) @> 

      }   /* |else| (|scanner_node->fill_color_vector_ptr == 0|)  */

@q ***** (5).@>
@
@<Define |Scan_Parse| functions@>=

   if (scanner_node->color_ptr != static_cast<void*>(0))
      ccolor = static_cast<Color*>(scanner_node->color_ptr); 

@q ****** (6).@> 

   if (ddraw_color_vector->ctr == 0)
      {
          if (   ccolor_vector != static_cast<Pointer_Vector<Color>*>(0) 
              && ccolor_vector->ctr > 0)
             {
                 delete ddraw_color_vector;
                 ddraw_color_vector = ccolor_vector;
             }
          else if (ccolor != static_cast<Color*>(0))
             {
                 ddraw_color_vector->append_copy(ccolor);
             }   

          else
             {
                 entry = scanner_node->lookup("default_color");

                 if (   entry != static_cast<Id_Map_Entry_Node>(0) 
                     && entry->object != static_cast<void*>(0))
                    ddraw_color_vector->append_copy(static_cast<Color*>(entry->object));

                 else
                    ddraw_color_vector->append_copy(&Colors::black);

             }

      }  /* |if (ddraw_color_vector->ctr == 0)|  */

@q ****** (6).@> 

   if (ffill_color_vector->ctr == 0)
      {
          if (   ccolor_vector != static_cast<Pointer_Vector<Color>*>(0) 
              && ccolor_vector->ctr > 0)
             {
                 *ffill_color_vector = *ccolor_vector;
             }
          else if (ccolor != static_cast<Color*>(0))
             {
                 ffill_color_vector->append_copy(ccolor);
             }   

          else if (basic_drawing_command == FILLDRAW)
             {
                 entry = scanner_node->lookup("background_color");

                 if (   entry != static_cast<Id_Map_Entry_Node>(0) 
                     && entry->object != static_cast<void*>(0))
                    ffill_color_vector->append_copy(static_cast<Color*>(entry->object));

                 else
                    ffill_color_vector->append_copy(&Colors::white);

             }

          else 
             {
                 entry = scanner_node->lookup("default_color");

                 if (   entry != static_cast<Id_Map_Entry_Node>(0) 
                     && entry->object != static_cast<void*>(0))
                    ffill_color_vector->append_copy(static_cast<Color*>(entry->object));

                 else
                    ffill_color_vector->append_copy(&Colors::black);

             }

      }  /* |if (ffill_color_vector->ctr == 0)|  */

@q ***** (5) Check |scanner_node->pen_vector_ptr|.  @>
@ Check |scanner_node->pen_vector_ptr|.
\initials{LDF 2022.01.27.}

\LOG
\initials{LDF 2022.01.27.}
Added this section.
\ENDLOG

@<Define |Scan_Parse| functions@>=

@q ****** (6).@> 

  if (scanner_node->pen_vector_ptr != static_cast<void*>(0))
     ppen_vector = static_cast<Pointer_Vector<Pen>*>(scanner_node->pen_vector_ptr); 

@q ****** (6).@> 

  else /* |scanner_node->pen_vector_ptr == 0|  */
     {

@q ******* (7) Check |scanner_node->pen_ptr|.  @>
@ Check |scanner_node->pen_ptr|.
\initials{LDF 2022.01.27.}

\LOG
\initials{LDF 2022.01.27.}
Now setting |ppen = *(scanner_node->current_pen)|, if 
|scanner_node->pen_ptr == 0 && *(scanner_node->current_pen) != 0|. 
\ENDLOG 

@<Define |Scan_Parse| functions@>=

         if (scanner_node->pen_ptr == static_cast<void*>(0))
            {

@q ******** (8) @> 

                if (*(scanner_node->current_pen) != static_cast<Pen*>(0))
                   {
                       ppen = *(scanner_node->current_pen);

                   }  /* |if (*(scanner_node->current_pen) != 0)|  */

@q ******** (8) @> 

            } /* |if (scanner_node->pen_ptr == 0)|  */

@q ******* (7) @> 

         else /* (|scanner_node->pen_ptr != 0|)  */
            {

                 ppen = static_cast<Pen*>(scanner_node->pen_ptr); 

            }  /* |else| (|scanner_node->pen_ptr != 0|)  */

@q ******* (7) @> 

         if (ppen != static_cast<Pen*>(0))
            {
                ppen_vector = new Pointer_Vector<Pen>;
                *ppen_vector += ppen;
            }

@q ******* (7) @> 

     }     /* |else| (|scanner_node->pen_vector_ptr == 0|)  */

@q ***** (5) Check |scanner_node->dash_pattern_ptr|.  @>
@ Check |scanner_node->dash_pattern_ptr|.
\initials{LDF 2022.01.27.}

\LOG
\initials{LDF 2022.01.27.}
Added this section.
\ENDLOG

@<Define |Scan_Parse| functions@>=

@q ****** (6).@> 

   if (scanner_node->dash_pattern_vector_ptr != static_cast<void*>(0))
      ddash_pattern_vector 
         = static_cast<Pointer_Vector<Dash_Pattern>*>(
              scanner_node->dash_pattern_vector_ptr);       

@q ****** (6).@> 

  else /* |scanner_node->dash_pattern_vector_ptr == 0|  */
     {

@q ******* (7) @> 

         if (scanner_node->dash_pattern_ptr == static_cast<void*>(0))
            {

@q ******** (8) @> 

                if (*(scanner_node->current_dash_pattern) != static_cast<Dash_Pattern*>(0))
                   {
                       ddash_pattern = *(scanner_node->current_dash_pattern);

                   }  /* |if (*(scanner_node->current_dash_pattern) != 0)|  */

@q ******** (8) @> 

             } /* |if (scanner_node->dash_pattern_ptr == 0)|  */

@q ******* (7) @> 

   else /* (|scanner_node->dash_pattern_ptr != 0|)  */
      {

        ddash_pattern = static_cast<Dash_Pattern*>(scanner_node->dash_pattern_ptr); 

      } /* |else| (|scanner_node->dash_pattern_ptr != 0|)  */

@q ******* (7) @> 

        if (ddash_pattern != static_cast<Dash_Pattern*>(0))
           {
              ddash_pattern_vector = new Pointer_Vector<Dash_Pattern>;
              *ddash_pattern_vector += ddash_pattern; 
           }
@q ******* (7) @> 

     }  /* |else| (|scanner_node->dash_pattern_vector_ptr == 0|)  */

@q **** (4) @>   
@
@<Define |Scan_Parse| functions@>= 

        vector<Color*>::const_iterator draw_color_iter;
        vector<Color*>::const_iterator fill_color_iter;

        Pointer_Vector<Color>* temp_draw_color_vector; 

        Color* temp_fill_color;

        vector<Path*>::const_iterator path_iter;

@q **** (4) Check which drawing command to use.@>
@ Check which drawing command to use
\initials{LDF 2022.01.27.}

@q ***** (5) DRAW.@>
\.{DRAW}.
\initials{LDF 2022.01.27.}

@<Define |Scan_Parse| functions@>= 

  if (   basic_drawing_command == DRAW
      || basic_drawing_command == DRAWARROW
      || basic_drawing_command == DRAWDBLARROW)
    {

       unsigned short arrow;
  
       if (basic_drawing_command == DRAW)
         arrow = Path::NO_ARROW;

       else if (basic_drawing_command == DRAWARROW)
         arrow = Path::SINGLE_ARROW;

       else if (basic_drawing_command == DRAWDBLARROW)
         arrow = Path::DOUBLE_ARROW;

        draw_color_iter = ddraw_color_vector->v.begin();

        path_iter       = pv->v.begin();

        for(; path_iter != pv->v.end(); ++path_iter)
           {

               temp_draw_color_vector = new Pointer_Vector<Color> ;

               temp_draw_color_vector->append_copy(*draw_color_iter);

               (**path_iter).draw(*ppicture, temp_draw_color_vector, 
                                  ddash_pattern_vector, ppen_vector, arrow);

               temp_draw_color_vector = 0;

               ++draw_color_iter;

               if (draw_color_iter == ddraw_color_vector->v.end())
                  draw_color_iter = ddraw_color_vector->v.begin();

           }  /* |for|  */

         delete ffill_color_vector;
         ffill_color_vector = 0;

    } /* |if (basic_drawing_command == DRAW)|  */

@q ***** (5) FILL@>
@ \.{FILL}.
\initials{LDF 2022.01.27.}

@<Define |Scan_Parse| functions@>= 

  else if (basic_drawing_command == FILL)
    {

        fill_color_iter = ffill_color_vector->v.begin();

        path_iter       = pv->v.begin();

        for(; path_iter != pv->v.end(); ++path_iter)
           {

               temp_fill_color = new Color;
            
               *temp_fill_color = **fill_color_iter;
  
               (**path_iter).fill(*ppicture, temp_fill_color);

               temp_fill_color = 0;

               ++fill_color_iter;

               if (fill_color_iter == ffill_color_vector->v.end())
                  fill_color_iter = ffill_color_vector->v.begin();
 
           }  /* |for|  */

         delete ddraw_color_vector;
         ddraw_color_vector = 0;

    } /* |else if (basic_drawing_command == FILL)|  */

@q ***** (5) FILLDRAW.@>
@ \.{FILLDRAW}.
\initials{LDF 2022.01.27.}

@<Define |Scan_Parse| functions@>= 

  else if (basic_drawing_command == FILLDRAW)
    {

        draw_color_iter = ddraw_color_vector->v.begin();
        fill_color_iter = ffill_color_vector->v.begin();

        path_iter       = pv->v.begin();

        for(; path_iter != pv->v.end(); ++path_iter)
           {

               temp_fill_color = new Color;
            
               *temp_fill_color = **fill_color_iter;

               temp_draw_color_vector = new Pointer_Vector<Color> ;

               temp_draw_color_vector->append_copy(*draw_color_iter);

               (**path_iter).filldraw(*ppicture, temp_draw_color_vector, 
                                      temp_fill_color,
                                      ddash_pattern_vector, ppen_vector);

               temp_draw_color_vector = 0;

               ++draw_color_iter;

               if (draw_color_iter == ddraw_color_vector->v.end())
                  draw_color_iter = ddraw_color_vector->v.begin();

               temp_fill_color = 0;

               ++fill_color_iter;

               if (fill_color_iter == ffill_color_vector->v.end())
                  fill_color_iter = ffill_color_vector->v.begin();

           }  /* |for|  */

    } /* |else if (basic_drawing_command == FILLDRAW)|  */

@q ***** (5) UNDRAW.@>
@ \.{UNDRAW}.
\initials{LDF 2022.01.27.}

@<Define |Scan_Parse| functions@>= 

 else if (basic_drawing_command == UNDRAW)
   {

        path_iter       = pv->v.begin();

        for(; path_iter != pv->v.end(); ++path_iter)
           {

               (**path_iter).undraw(*ppicture, ddash_pattern_vector, ppen_vector);

           }  /* |for|  */

         delete ddraw_color_vector;
         ddraw_color_vector = 0;

         delete ffill_color_vector;
         ffill_color_vector = 0;

   } /* |else if (basic_drawing_command == UNDRAW)|  */
  
@q ***** (5) UNFILL.@>
@ |UNFILL|.
\initials{LDF 2022.01.27.}

@<Define |Scan_Parse| functions@>= 

   else if (basic_drawing_command == UNFILL)
     {

        path_iter       = pv->v.begin();

        for(; path_iter != pv->v.end(); ++path_iter)
           {

               (**path_iter).unfilldraw(*ppicture);

           }  /* |for|  */

         delete ddraw_color_vector;
         ddraw_color_vector = 0;

         delete ffill_color_vector;
         ffill_color_vector = 0;

     } /* |else if (basic_drawing_command == UNFILL)|  */

@q ***** (5) UNFILLDRAW.@>
@ |UNFILLDRAW|.
\initials{LDF 2022.01.27.}

@<Define |Scan_Parse| functions@>= 

     else if (basic_drawing_command == UNFILLDRAW)
       {

        draw_color_iter = ddraw_color_vector->v.begin();

        path_iter       = pv->v.begin();

        for(; path_iter != pv->v.end(); ++path_iter)
           {

               temp_draw_color_vector = new Pointer_Vector<Color> ;

               temp_draw_color_vector->append_copy(*draw_color_iter);

               (**path_iter).unfilldraw(*ppicture, temp_draw_color_vector, 
                                        ddash_pattern_vector, ppen_vector);

               temp_draw_color_vector = 0;

               ++draw_color_iter;

               if (draw_color_iter == ddraw_color_vector->v.end())
                  draw_color_iter = ddraw_color_vector->v.begin();

           }  /* |for|  */

         delete ffill_color_vector;
         ffill_color_vector = 0;

       } /* |else if (basic_drawing_command == UNFILLDRAW)|  */

@q ***** (5) Error handling for invalid |basic_drawing_command|.@>
@ Error handling for invalid \Â§basic drawing command>.
\initials{LDF 2022.01.27.}

@<Define |Scan_Parse| functions@>= 

  else /* Invalid |basic_drawing_command|.  */
    {

      cerr_strm << thread_name << "ERROR! In `Scan_Parse::drawing_command_glyph':"
                << endl << "Invalid `basic_drawing_command': " 
                << basic_drawing_command
                << endl << "Will clear and delete `pv' and reset "
                << "the pointers on `scanner_node', and exit function "
                << "with return value 1.";

      log_message(cerr_strm); 
      cerr_message(cerr_strm, error_stop_value);
      cerr_strm.str("");

      pv->clear();
      delete pv;
      pv = 0;

      @<Reset pointers on |scanner_node|@>@;

      return 1;
      
    }  /* |else| (invalid |basic_drawing_command|).  */

@q **** (4) Exit function successfully with return value 0.@> 
@ Exit function successfully with return value 0.
\initials{LDF 2022.01.27.}

@<Define |Scan_Parse| functions@>= 
  
  pv->clear();
  delete pv;
  pv = 0;

  @<Reset pointers on |scanner_node|@>@;

  return 0;
