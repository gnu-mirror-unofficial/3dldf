@q colors.web @>
  
@q * (0) Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing. @>
@q Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, @>
@q 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021 The Free Software Foundation, Inc. @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version. @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details. @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html. @>

@q (``@@'' stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to @>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston                 @> 
@q c/o Free Software Foundation, Inc.  @>
@q 51 Franklin St, Fifth Floor         @> 
@q Boston, MA  02110-1301              @>
@q USA                                 @>

@q Laurence.Finston@@gmx.de (@@ stands for a single ``at'' sign.)@>

@q * (0) Color.@>
@** Color\quad ({\tt colors\PERIOD web}).\hfil

\LOG
\initials{LDF 2003.11.12.}  
Removed the version control identifiers from the CWEB
files for the distribution of 3DLDF 1.1.  They're still used in my
development versions.

\initials{LDF 2003.12.10.}  
Put the version control identifiers back
into my release versions for 3DLDF 1.1.4.  I've already put some of
them back in, now I'm doing the rest of them.  However, the release
versions are now in their own RCS repository.
\ENDLOG

\immediate\write\functexifile{File:  colors.web^^J}

@q * (1) Include files.@>
@ Include files.

@<Include files@>=

#include "loader.h++"
#include "pspglb.h++"
#include "io.h++"
#include "creatnew.h++"
#include "pntrvctr.h++"
#include "primes.h++"
#include "complex.h++"
#include "matrices.h++"

@q * (1) Color class definition.@>
@* {\bf Color} class definition.
\initials{LDF 2002.09.25.}
@:!!@> !! Remember to change the constructors, setting functions, and
assignment operator if I add or change anything here!!  

\LOG
\initials{LDF 2002.10.06.}  
Added. |on_free_store|.

\initials{LDF 2004.09.03.}
Removed |bool use_name|.

\initials{LDF 2005.03.10.}
Removed |string name|.

\initials{LDF 2005.04.11.}
Added the private data member |Unsigned_Byte type| and the 
|public| |static const Unsigned_Bytes| |NULL_COLOR|, |RGB_COLOR|, |CMY_COLOR|, 
and |CMYK_COLOR| for setting it.
\ENDLOG 

@<Define |class Color|@>=
class Color
{
  real red_part;
  real green_part;
  real blue_part;

  Unsigned_Byte type;

 public:

    static const Unsigned_Byte NULL_COLOR;
    static const Unsigned_Byte RGB_COLOR; 
    static const Unsigned_Byte CMY_COLOR; 
    static const Unsigned_Byte CMYK_COLOR;

@<Declare |Color| functions@>@;
};

@q * (1) Define |static Color| data members.  @>
@* Define {\bf static Color} data members.
\initials{LDF Undated.}

\LOG
\initials{LDF 2005.04.09.}
Added this section.

\initials{LDF 2005.04.11.}
@:BUG FIX@> BUG FIX:  Prepended |Color::| to the names of the constants
|NULL_COLOR|, |CMY_COLOR|, |CMYK_COLOR|, and |RGB_COLOR|.
\ENDLOG

@<Define |static Color| data members@>=

    const Unsigned_Byte Color::NULL_COLOR = 0;
    const Unsigned_Byte Color::CMY_COLOR  = 1;
    const Unsigned_Byte Color::CMYK_COLOR = 2;
    const Unsigned_Byte Color::RGB_COLOR  = 3;

@q * (1) Constructors and setting functions.@>
@* Constructors and setting functions.

@q ** (2) Default constructor.@>
@*1 Default constructor.
@^\cfunc{Color}{Color}@>
\cfunctexi{Color}{Color}
\initials{LDF Undated.} 

\LOG
\initials{LDF 2002.10.06.}  
Added code to definition.  Previously, it was empty.

\initials{LDF 2005.04.09.}
Now setting |type == CMY_COLOR|.

\initials{LDF 2005.04.11.}
Now setting |type == RGB_COLOR|.
\ENDLOG 

@<Declare |Color| functions@>=
Color();

@
@<Define |Color| functions@>=
Color::Color()
{
  red_part = green_part = blue_part = 0;
  type = RGB_COLOR;
}

@q ** (2) Copy constructor.@>
@*1 Copy constructor.
@^\cfunc{Color}{Color}@>
\cfunctexi{Color}{Color}
\initials{LDF 2002.09.25.}  

@:!!@> !! Remember to add or change code here if I add or change
anything in the |class| definition!!
\initials{LDF Undated.} 

\LOG
\initials{LDF 2002.09.25.}  
Added this function.

\initials{LDF 2005.03.10.}
Removed the arguments |const string n| and |const bool u|.
They were used for setting |string name| and |bool use_name|, which
I've removed.

\initials{LDF 2005.04.09.}
Now setting |type == c.type|.
\ENDLOG 

@q *** (3) Declaration.@> 

@<Declare |Color| functions@>=
Color(const Color& c);

@q *** (3) Definition.@> 

@
@<Define |Color| functions@>=
Color::Color(const Color& c)
{
  
  red_part   = c.get_red_part();
  green_part = c.get_green_part();
  blue_part  = c.get_blue_part();

  type == c.type;

  return;
}

@q ** (2) Three real arguments.@>
@*1 Three {\bf real} arguments.
\initials{LDF 2002.10.09.}  

\LOG
\initials{LDF 2002.10.09.}  
Added the following constructor and setting function.
They are for unnamed |Colors|.  The DEC compiler can't distinguish
between |real| and |unsigned short| arguments, so the overloaded
functions must differ in another way.  In this case, these versions
have no |name| argument.  I believe that users are most likely to
declare |Colors| using |real| arguments when they plan to modify them,
in which case the |output()| function should write the red, green and
blue values to |out_stream| rather than |name|.  If it turns out to be
necessary, more constructors can be added or the existing ones can be
changed. 
\ENDLOG 

@q *** (3) Constructor.@>
@*2 Constructor.
@^\cfunc{Color}{Color}@>
\cfunctexi{Color}{Color}
\initials{LDF 2002.10.09.}  

\LOG
\initials{LDF 2002.10.09.}  
Added this function.

\initials{LDF 2005.04.09.}
Now setting |type == CMY_COLOR|.

\initials{LDF 2005.04.11.}
Now setting |type == RGB_COLOR|.
\ENDLOG

@<Declare |Color| functions@>=
Color(const real r, const real g, const real b);

@
@<Define |Color| functions@>=
Color::Color(const real r, const real g, const real b)
{

  if (r < 0)
    {
      cerr << "WARNING! In Color::Color() (three real arguments):\n"
           << "Red part argument < 0.  Setting red_part to 0.\n\n";
      red_part = 0;
    }
  else if (r > 1)
    {
      cerr << "WARNING! In Color::Color() (three real arguments):\n"
        << "Red part argument > 1.  Setting red_part to 1.\n\n";
      red_part = 1;
    }
  else
    red_part = r;

  if (g < 0)
    {
      cerr << "WARNING! In Color::Color() (three real arguments):\n"
           << "Green part argument < 0.  Setting green_part to 0.\n\n";
      green_part = 0;
    }
  else if (g > 1)
    {
      cerr << "WARNING! In Color::Color() (three real arguments):\n"
        << "Green part argument > 1.  Setting green_part to 1.\n\n";
      green_part = 1;
    }    
  else 
    green_part = g;

if (b < 0)
    {
      cerr << "WARNING! In Color::Color() (three real arguments):\n"
           << "Blue part argument < 0.  Setting blue_part to 0.\n\n";
      blue_part = 0;
    }
  else if (b > 1)
    {
      cerr << "WARNING! In Color::Color() (three real arguments):\n"
        << "Blue part argument > 1.  Setting blue_part to 1.\n\n";
      blue_part = 1;
    }    
  else
    blue_part = b;

  type = RGB_COLOR;

  return;
}

@q *** (3) Setting function.@>
@*2 Setting function.
@^\cfunc{Color}{set}@>
\cfunctexi{Color}{set}
\initials{LDF 2002.10.09.}  

\LOG
\initials{LDF 2002.10.09.}  
Added this function.
\ENDLOG

@<Declare |Color| functions@>=
void
set(const real r, const real g, const real b);

@
@<Define |Color| functions@>=
void
Color::set(const real r, const real g, const real b)
{

  if (r < 0)
    {
      cerr << "WARNING! In Color::Color() (three real arguments):\n"
        << "Red part argument < 0.  Setting red_part to 0.\n\n";
      red_part = 0;
    }
  else if (r > 1)
    {
      cerr << "WARNING! In Color::Color() (three real arguments):\n"
        << "Red part argument > 1.  Setting red_part to 1.\n\n";
      red_part = 1;
    }
  else
    red_part = r;

  if (g < 0)
    {
      cerr << "WARNING! In Color::Color() (three real arguments):\n"
        << "Green part argument < 0.  Setting green_part to 0.\n\n";
      green_part = 0;
    }
  else if (g > 1)
    {
      cerr << "WARNING! In Color::Color() (three real arguments):\n"
        << "Green part argument > 1.  Setting green_part to 1.\n\n";
      green_part = 1;
    }    
  else 
    green_part = g;

  if (b < 0)
    {
      cerr << "WARNING! In Color::Color() (three real arguments):\n"
        << "Blue part argument < 0.  Setting blue_part to 0.\n\n";
      blue_part = 0;
    }
  else if (b > 1)
    {
      cerr << "WARNING! In Color::Color() (three real arguments):\n"
        << "Blue part argument > 1.  Setting blue_part to 1.\n\n";
      blue_part = 1;
    }    
  else
    blue_part = b;

   return;

} /* End of |Color::set(const real r, const real g, const real b)|
     definition.  */

@q * (1) Pseudo-constructor for dynamic allocation. @>
@* Pseudo-constructor for dynamic allocation. 
\initials{LDF Undated.} 

\LOG
\initials{LDF 2003.12.30.}  
Replaced |Color::create_new_color()| with
specializations of |template <class C> C* create_new()|.  

\initials{LDF 2004.10.11.}
Added |Scanner_Node scanner_node| argument.
\ENDLOG 

@q ** (2) Pointer argument. @>

@*1 Pointer argument. 
\initials{LDF Undated.} 

@<Declare non-member template functions for |Color|@>=

Color* 
create_new(const Color* c, Scanner_Node scanner_node);

@q ** (2) Reference argument.@>
@*1 Reference argument. 
\initials{LDF 2004.1.2.}  

\LOG
\initials{LDF 2004.1.2.}  
Added this declaration.

\initials{LDF 2004.10.11.}
Added |Scanner_Node scanner_node| argument.
\ENDLOG 

@<Declare non-member template functions for |Color|@>=

Color* 
create_new(const Color& c, Scanner_Node scanner_node);

@q * (1) Operators.@> 
@* Operators.
\initials{LDF 2004.12.17.}

\LOG
\initials{LDF 2004.12.17.}
Added this section.
\ENDLOG

@q ** (2) Assignment.@>
@*1 Assignment.
@^\cofunc{Color}{=}@>
\cofunctexi{Color}{=}
\initials{LDF 2002.09.24.}  

\LOG
\initials{LDF 2002.09.24.}  
Added this function.

\initials{LDF 2005.04.09.}
Now setting |type == c.type|.
\ENDLOG 

@<Declare |Color| functions@>=

void
operator=(const Color& c);

@
@<Define |Color| functions@>=
void
Color::operator=(const Color& c)
{
  red_part   = c.red_part;
  green_part = c.green_part;
  blue_part  = c.blue_part;

  type = c.type;

}

@q ** (2) Equality.@>
@*1 Equality.
@^\cofunc{Color}{==}@>
\cofunctexi{Color}{==}
\initials{LDF Undated.} 

\LOG
\initials{LDF 2002.09.25.}  
Changed so that only |red_part|, |green_part| and 
|blue_part| are compared.  This way, |Colors| that differ only in
|name| and/or |use_name| are considered to be equal.
\initials{LDF 2002.09.24.}  Added this operator function.

\initials{LDF 2005.04.09.}
Now checking |type == c.type|.
\ENDLOG 

@<Declare |Color| functions@>=
bool
operator==(const Color& c) const;

@
@<Define |Color| functions@>=
bool
Color::operator==(const Color& c) const
{
    
    return ((red_part == c.red_part)
            && (green_part == c.green_part)
            && (blue_part == c.blue_part)
            && (type == c.type));
}

@q ** (2) Inequality.@>
@*1 Inequality.
@^\cofunc{Color}{!=}@>
\cofunctexi{Color}{!=}
\initials{LDF 2002.09.24.}  

\LOG
\initials{LDF 2002.09.24.}  
Added this function.
\ENDLOG 

@<Declare |Color| functions@>=
bool
operator!=(const Color& c) const;

@
@<Define |Color| functions@>=
bool
Color::operator!=(const Color& c) const
{
    return !(*this == c);
}

@q ** (2) Addition with assignment.@>
@*1 Addition with assignment.
@^\cofunc{Color}{+=}@>
\cofunctexi{Color}{+=}
\initials{LDF 2004.12.17.}

\LOG
\initials{LDF 2004.12.17.}
Added this function.

\initials{LDF 2005.04.11.}
Rewrote this function.  It now handles the addition of |Colors| where the 
|type| of both |Colors| is |CMY_COLOR| and where the 
|type| of both |Colors| is |RGB_COLOR|.  It signals an error for all other cases 
and leaves |*this| unchanged.

\initials{LDF 2005.04.11.}
Made error output thread-safe.

\initials{LDF 2005.04.11.}
Commented-out code for adding |Colors|, both of whose |type == CMY_COLOR|.
Now, all colors have |type == RGB_COLOR| per default.  CMY |Colors| will 
need more work.
\ENDLOG 

@q *** (3) Declaration.@> 

@<Declare |Color| functions@>=
const Color&
operator+=(const Color& c);

@q *** (3) Definition.@> 

@
@<Define |Color| functions@>=
const Color&
Color::operator+=(const Color& c)
{

@q **** (4) Preliminaries.@>   

#if DEBUG_COMPILE
  bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

  stringstream cerr_strm;

  bool error_stop_value   = true;
  bool warning_stop_value = true;
  string thread_name      = "";

  Scanner_Node scanner_node = 0;

#ifdef HAVE_PTHREAD_H 

  Thread_Info_Type* thread_info = Thread_Info_Type::get_thread_info();
  thread_name = Thread_Info_Type::get_thread_name(thread_info);
  scanner_node = Thread_Info_Type::get_scanner_node(thread_info);

#endif /* |HAVE_PTHREAD_H|  */@; 

  if (scanner_node)
     scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                   &error_stop_value,
                                                   &warning_stop_value);

  using namespace Scan_Parse;

@q **** (4) @>   
@
\LOG
\initials{LDF 2005.04.11.}
@:BUG FIX@> BUG FIX:  Changed |max| to |min|.
\ENDLOG

@<Define |Color| functions@>=

       red_part   = min(static_cast<real>(1.0), red_part + c.red_part);
       green_part = min(static_cast<real>(1.0), green_part + c.green_part);
       blue_part  = min(static_cast<real>(1.0), blue_part + c.blue_part);

@q **** (4).@>
#if 0 
   if (type == RGB_COLOR && c.type == RGB_COLOR)
      {
          red_part   = min(static_cast<real>(1.0), red_part + c.red_part);
          green_part = min(static_cast<real>(1.0), green_part + c.green_part);
          blue_part  = min(static_cast<real>(1.0), blue_part + c.blue_part);
      }
#endif 
@q **** (4).@>

#if 0 
   else if (type == CMY_COLOR && c.type == CMY_COLOR)
      {
          real cyan_part    = 1 - red_part;
          real magenta_part = 1 - green_part;
          real yellow_part  = 1 - blue_part;

          real c_cyan_part    = 1 - c.red_part;
          real c_magenta_part = 1 - c.green_part;
          real c_yellow_part  = 1 - c.blue_part;

          red_part = (1 - (cyan_part + c_cyan_part)) / 2;
          green_part = (1 - (magenta_part + c_magenta_part)) / 2;
          blue_part = (1 - (yellow_part + c_yellow_part)) / 2;

      }      
#endif 
@q **** (4) @> 
#if 0 
   else 
      {
          cerr_strm << thread_name << "ERROR!  "
                    << "In `Color::operator+=(const Color&)':"
                    << endl 
                    << "`type' == " << type << ", `c.type' == " 
                    << c.type << ".  Can't add `Colors'.  Exiting function "
                    << "with return value `c'.";

          log_message(cerr_strm);
          cerr_message(cerr_strm, error_stop_value);
          cerr_strm.str();

      }  /* |else|  */     
   
#endif 

@q **** (4) @> 

   return c;

}  /* End of |Color::operator+=(const Color& c)| definition.  */

@q ** (2) Subtraction with assignment.@>
@*1 Subtraction with assignment.
@^\cofunc{Color}{-=}@>
\cofunctexi{Color}{-=}
\initials{LDF 2004.12.17.}

\LOG
\initials{LDF 2004.12.17.}
Added this function.

\initials{LDF 2005.04.11.}
Rewrote this function.  It now declares a local |Color|, sets it to |c|, 
multiplies it by $-1$, and passes it to |operator+=()|.
\ENDLOG 

@<Declare |Color| functions@>=
const Color&
operator-=(const Color& c);

@
@<Define |Color| functions@>=
const Color&
Color::operator-=(const Color& c)
{
   Color d = c;

   d *= -1;

   operator+=(d);

   return c;
}

@q ** (2) Multiplication with assignment.@>
@*1 Multiplication with assignment.
@^\cofunc{Color}{*=}@>
\cofunctexi{Color}{*=}
\initials{LDF 2004.12.17.}

\LOG
\initials{LDF 2004.12.17.}
Added this function.
\ENDLOG 

@<Declare |Color| functions@>=
real
operator*=(const real& r);

@
@<Define |Color| functions@>=
real
Color::operator*=(const real& r)
{
   red_part *= r;
   green_part *= r;
   blue_part *= r;
   return r;
}

@q ** (2) Division with assignment.@>
@*1 Division with assignment.
@^\cofunc{Color}{/=}@>
\cofunctexi{Color}{/=}
\initials{LDF 2004.12.18.}

\LOG
\initials{LDF 2004.12.18.}
Added this function.
\ENDLOG 

\TODO
@q { @>
@:TO DO}{{\bf TO DO}@>
@q } @> 
@q !! TO DO:  @>
\initials{LDF 2004.12.18.}
Add error handling.
\ENDTODO 

@<Declare |Color| functions@>=
real
operator/=(const real& r);

@
@<Define |Color| functions@>=
real
Color::operator/=(const real& r)
{
   if (r == 0)
      return INVALID_REAL;

   red_part   /= r;
   green_part /= r;
   blue_part  /= r;
   return r;
}

@q * (1) Modifying.@>
@* Modifying.

@q ** (2) Modify.@>
@*1 Modify.
@^\cfunc{Color}{modify}@>
\cfunctexi{Color}{modify}
@<Declare |Color| functions@>=
void
modify(const real r, const real g = 0, const real b = 0);

@
@<Define |Color| functions@>=
void
Color::modify(const real r, const real g, const real b)
{
  red_part   += r;
  green_part += g;
  blue_part  += b;

  if (red_part > 1)
    {
      cerr << "WARNING! In Color::modify():\n"
           << "red_part is greater than 1: " << red_part << endl
           << "Setting red_part to 1.\n\n";
      red_part = 1;
    }

  else if (red_part < 0)
    {
      cerr << "WARNING! In Color::modify():\n"
           << "red_part is less than 0: " << red_part << endl
           << "Setting red_part to 0.\n\n";
      red_part = 0;
    }

  if (green_part > 1)
    {
      cerr << "WARNING! In Color::modify():\n"
           << "green_part is greater than 1: " << green_part << endl
           << "Setting green_part to 1.\n\n";
      green_part = 1;
    }

  else if (green_part < 0)
    {
      cerr << "WARNING! In Color::modify():\n"
           << "green_part is less than 0: " << green_part << endl
           << "Setting green_part to 0.\n\n";
      green_part = 0;
    }

  if (blue_part > 1)
    {
      cerr << "WARNING! In Color::modify():\n"
           << "blue_part is greater than 1: " << blue_part << endl
           << "Setting blue_part to 1.\n\n";
      blue_part = 1;
    }

  else if (blue_part < 0)
    {
      cerr << "WARNING! In Color::modify():\n"
           << "blue_part is less than 0: " << blue_part << endl
           << "Setting blue_part to 0.\n\n";
      blue_part = 0;
    }

  return;
}

@q ** (2) Set red part.@>
@*1 Set red part.
@^\cfunc{Color}{set\_red\_part}@>
\cfunctexi{Color}{set\_red\_part}
\initials{LDF Undated.} 

\LOG
\initials{LDF 2004.12.19.}
Added |Scanner_Node scanner_node| argument with default 0.
Made warning output thread-safe.
\ENDLOG 

@q *** (3) Declaration.@> 

@<Declare |Color| functions@>=
void
set_red_part(const real r, Scanner_Node scanner_node = 0);

@q *** (3) Definition.@> 

@
@<Define |Color| functions@>=
void
Color::set_red_part(const real r, Scanner_Node scanner_node)
{

@q **** (4) Preliminaries.@>

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q **** (4) @> 

   if (r > 1)
      {
         cerr_strm << thread_name 
                   << "WARNING!  In `Color::set_red_part()':"
                   << endl 
                   << "`r' is greater than 1: " << r << endl
                   << "Setting `red_part' to 1.";
         
         log_message(cerr_strm);
         cerr_message(cerr_strm, warning_stop_value);
         cerr_strm.str();
         
         red_part = 1;

      } /* |if (r > 1)|  */

@q **** (4) @> 

  else if (r < 0)
    {
      cerr_strm << thread_name 
                << "WARNING!  In `Color::set_red_part()':"
                << endl 
                << "`r' is less than 0: " << r << endl
                << "Setting `red_part' to 0.";

         log_message(cerr_strm);
         cerr_message(cerr_strm, warning_stop_value);
         cerr_strm.str();

         red_part = 0;

     } /* |else if (r < 0)|  */

@q **** (4) @> 

  else
    red_part = r;

  return;

}  /* End of |Color::set_red_part()|  definition.  */

@q ** (2) Set green part.@>
@*1 Set green part.
@^\cfunc{Color}{set\_green\_part}@>
\cfunctexi{Color}{set\_green\_part}
\initials{LDF Undated.} 

\LOG
\initials{LDF 2004.12.19.}
Added |Scanner_Node scanner_node| argument with default 0.
Made warning output thread-safe.
\ENDLOG 

@q *** (3) Declaration.@> 

@<Declare |Color| functions@>=
void
set_green_part(const real g, Scanner_Node scanner_node = 0);

@q *** (3) Definition.@> 

@
@<Define |Color| functions@>=
void
Color::set_green_part(const real g, Scanner_Node scanner_node)
{

@q **** (4) Preliminaries.@>

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q **** (4) @> 

   if (g > 1)
      {
         cerr_strm << thread_name 
                   << "WARNING!  In `Color::set_green_part()':"
                   << endl 
                   << "`g' is greater than 1: " << g << endl
                   << "Setting `green_part' to 1.";
         
         log_message(cerr_strm);
         cerr_message(cerr_strm, warning_stop_value);
         cerr_strm.str();
         
         green_part = 1;

      } /* |if (g > 1)|  */

@q **** (4) @> 

  else if (g < 0)
    {
      cerr_strm << thread_name 
                << "WARNING!  In `Color::set_green_part()':"
                << endl 
                << "`g' is less than 0: " << g << endl
                << "Setting `green_part' to 0.";

         log_message(cerr_strm);
         cerr_message(cerr_strm, warning_stop_value);
         cerr_strm.str();

         green_part = 0;

     } /* |else if (g < 0)|  */

@q **** (4) @> 

  else
    green_part = g;

  return;

}  /* End of |Color::set_green_part()|  definition.  */

@q ** (2) Set blue part.@>
@*1 Set blue part.
@^\cfunc{Color}{set\_blue\_part}@>
\cfunctexi{Color}{set\_blue\_part}
\initials{LDF Undated.} 

\LOG
\initials{LDF 2004.12.19.}
Added |Scanner_Node scanner_node| argument with default 0.
Made warning output thread-safe.
\ENDLOG 

@q *** (3) Declaration.@> 

@<Declare |Color| functions@>=
void
set_blue_part(const real b, Scanner_Node scanner_node = 0);

@q *** (3) Definition.@> 

@
@<Define |Color| functions@>=
void
Color::set_blue_part(const real b, Scanner_Node scanner_node)
{

@q **** (4) Preliminaries.@>

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q **** (4) @> 

   if (b > 1)
      {
         cerr_strm << thread_name 
                   << "WARNING!  In `Color::set_blue_part()':"
                   << endl 
                   << "`b' is greater than 1: " << b << endl
                   << "Setting `blue_part' to 1.";
         
         log_message(cerr_strm);
         cerr_message(cerr_strm, warning_stop_value);
         cerr_strm.str();
         
         blue_part = 1;

      } /* |if (b > 1)|  */

@q **** (4) @> 

  else if (b < 0)
    {
      cerr_strm << thread_name 
                << "WARNING!  In `Color::set_blue_part()':"
                << endl 
                << "`b' is less than 0: " << b << endl
                << "Setting `blue_part' to 0.";

         log_message(cerr_strm);
         cerr_message(cerr_strm, warning_stop_value);
         cerr_strm.str();

         blue_part = 0;

     } /* |else if (b < 0)|  */

@q **** (4) @> 

  else
    blue_part = b;

  return;

}  /* End of |Color::set_blue_part()|  definition.  */

@q * (1) Show.@>
@* Show.
@^\cfunc{Color}{show}@>
\cfunctexi{Color}{show}
\initials{LDF Undated.}

@<Declare |Color| functions@>=
void
show(string text = "") const;

@
@<Define |Color| functions@>=
void
Color::show(string text) const
{
  if (text == "")
    text = "Color:";
  
  cerr << text << endl;
  
  cerr << "red_part == " << get_red_part() << endl;
  cerr << "green_part == " << get_green_part() << endl;
  cerr << "blue_part == " << get_blue_part() << endl << endl;
  return;
}

@q * (1) Returning elements and information.@>
@* Returning elements and information.
\initials{LDF Undated.}

@q ** (2) Get Color parts.@>
@*1 Get {\bf Color} parts.
\initials{LDF Undated.} 

These functions always return a |real|; the argument
|decimal| can't make them return an |unsigned short|.  
\initials{LDF 2002.09.24.}  

@q *** (3) Get red part.@>
@*2 Get red part.
@^\cfunc{Color}{get\_red\_part}@>
\cfunctexi{Color}{get\_red\_part}
\initials{LDF Undated.}

@<Declare |Color| functions@>=
inline
real
get_red_part(bool decimal = false) const
{
  if (decimal)
    return trunc((red_part * 255) + .5);
  else
    return red_part;
}

@q *** (3) Get green part.@>
@*2 Get green part.
@^\cfunc{Color}{get\_green\_part}@>
\cfunctexi{Color}{get\_green\_part}
\initials{LDF Undated.}

@<Declare |Color| functions@>=
inline
real
get_green_part(bool decimal = false) const
{
  if (decimal)
    return trunc((green_part * 255)  + .5);
  else
    return green_part;
}

@q *** (3) Get blue part.@>
@*2 Get blue part.
@^\cfunc{Color}{get\_blue\_part}@>
\cfunctexi{Color}{get\_blue\_part}
\initials{LDF Undated.}

@<Declare |Color| functions@>=
inline
real
get_blue_part(bool decimal = false) const
{
  if (decimal)
    return trunc((blue_part * 255) + .5);
  else
    return blue_part;
}
    
@q * (1) Output operator@>
@* Output operator. 
@^\ofunc{$\ll$}@>
\ofunctexi{<<}
\initials{LDF Undated.}

@<Declare non-member non-template functions for |Color|@>=
ostream& operator<<(ostream& o, const Color& c);

@ 
@<Define non-member non-template functions for |Color|@>=
ostream& operator<<(ostream& o, const Color& c)
{
  o <<  "(" << c.get_red_part() << ", "
    << c.get_green_part() << ", " 
    << c.get_blue_part() << ")";

  return o;   
}

@q * (1) Namespace Colors@>
@* Namespace {\bf Colors}.
%
Here I can put either |@<Major |Colors|@>| or |@<All |Colors|@>| into
|@<Declare |namespace Colors|@>|, and comment out the other,  
depending on what I want.  This
prevents too much unneeded code from being processed.
|@<All |Colors|@>| is very long, so I neither want to compile
it, write the |extern| declarations from it to
\filename{colors.h}, nor print out the code when I run \cweave/,
unless I really want to use it.  
\initials{LDF 2002.09.25.}

@<Declare |namespace Colors|@>=

@<Major |Colors|@>@;
/*|@<All |Colors|@>| */

@
\initials{LDF 2002.09.25.}
Here I can put either |@<|extern| Major |Colors|@>| or 
|@<|extern| All |Colors|@>| into 
|@<|extern| |namespace Colors| declaration@>|
@<|extern| |namespace Colors| declaration@>=
@<|extern| Major |Colors|@>@;

@q * (1) Major Colors.@>
@* Major {\bf Colors}.
The colors ``red'', ``green'', ``blue'', ``black'', and ``white'' are already
defined in \MP/, however, we need them here in order to access the
|Color| functions for them.

@:!!@> !! 
\initials{LDF 2002.09.24.}
If this definition isn't explicitly written to the header
file, as it is below, this causes real problems!!  It took me awhile
to find out that this was the cause.

@q ** (2) Internal (with initialization).@>
@*1 Internal (with initialization).
\initials{LDF 2002.09.25.}

@:!!@> !!  If I add |Colors| here, remember to add them in the
``External'' section below, and in the definition of
|Color::initialize_colors()| below. 
\initials{LDF Undated.} 

\LOG 
\initials{LDF 2002.10.26.}  
Added |help_color|.

\initials{LDF 2004.06.03.}  
Got rid of |default_color|.  About to get rid of 
|default_background|, |background_color|, |help_color|, 
|default_color_vector|, |help_color_vector|, and |background_color_vector|.  
They will be replaced by variables on |id_maps|.  

\initials{LDF 2004.06.07.}  
Got rid of |default_background|, |background_color|,
and |help_color|.

\initials{LDF 2005.03.10.}
Changed the calls to the |Color| constructor in this section.
I've removed |string name| and |bool use_name| and removed the one
that takes |const unsigned short| arguments, which I called here.
Now using 1 and 0, and dividing all of the other arguments by 255.

\initials{LDF 2005.03.14.}
@:BUG FIX@> BUG FIX:  Added a decimal point followed by 0 
to the numerators and denominators in the division operations used in
the arguments to the |Color| constructor.

\initials{LDF 2005.11.21.}
Added declaration of |Color dark_gray|.

\initials{2009.01.09.}
Added declaration of |Color dark_green|.
\ENDLOG 

@q *** (3) Code.@> 

@<Major |Colors|@>=

namespace Colors
{

/* Primaries, additive.  */
    extern const Color red(1, 0, 0);
    extern const Color green(0, 1, 0);
    extern const Color blue(0, 0, 1);

/* Primaries, subtractive.  */
    extern const Color cyan(0, 1, 1);
    extern const Color yellow(1, 1, 0);
    extern const Color magenta(1, 0, 1);

    /* \initials{LDF 2002.09.27.}  The convention that I use is that 
       colors like
      ``|orange_red|'' are reds and colors like ``|red_orange|'' are
      oranges.  */
    
    /* Red.  */

    extern const Color orange_red(1, 69.0/255.0, 0);
    extern const Color violet_red(208.0/255.0, 32.0/255.0, 144.0/255.0);

    /* Pink.  */
    extern const Color pink(1, 192.0/255.0, 203.0/255.0);

    /* Blue.  */

    /* Yellow.  */

    extern const Color green_yellow(173.0/255.0, 1, 47.0/255.0);

    /* Orange.  */

    extern const Color orange(1, 165.0/255.0, 0);

    /* Violet.  */

    extern const Color violet(238.0/255.0, 130.0/255.0, 238.0/255.0);
    extern const Color purple(160.0/255.0, 32.0/255.0, 240.0/255.0);
    extern const Color blue_violet(138.0/255.0, 43.0/255.0, 226.0/255.0);

    /* Green.  */

    extern const Color yellow_green(154.0/255.0, 205.0/255.0, 50.0/255.0);

    extern const Color dark_green(0, 100/255.0, 0);

    /* ``Unbunt'' Colors (blacks, whites, and grays).    */
    
    extern const Color black(0, 0, 0);
    extern const Color white(1, 1, 1);

    extern const Color gray(192.0/255.0, 192.0/255.0, 192.0/255.0);
    extern const Color light_gray(211.0/255.0, 211.0/255.0, 211.0/255.0);
    extern const Color dark_gray(153.0 / 255.0, 153.0 / 255.0, 153.0 / 255.0);

} /* |namespace Colors|  */

@q ** (2) External.@>
@*1 External.

\LOG
\initials{LDF 2004.06.07.}  
Got rid of |default_background|, |background_color|,
and |help_color|.
\ENDLOG 

@q *** (3) Code.@> 

@<|extern| Major |Colors|@>=

namespace Colors
{

/* \initials{LDF 2002.09.27.}  The ordering should be as above for the internal
   declarations.  */

/* Primaries, additive.  */

  extern const Color red; 
  extern const Color green;
  extern const Color blue; 

/* Primaries, subtractive.  */
  extern const Color cyan;
  extern const Color yellow;
  extern const Color magenta;

    /* Red.  */
  extern const Color orange_red;
  extern const Color violet_red;

  /* Pink.  */
  extern const Color pink;

  /* Blue.  */
  
  /* Yellow.  */
  extern const Color green_yellow;

  /* Orange.  */

  extern const Color orange;
  
    /* Violet.  */  
  extern const Color violet;
  extern const Color purple;
  extern const Color blue_violet;

/* Green.  */

    extern const Color yellow_green;
    extern const Color dark_green;
    
  /* ``Unbunt'' Colors  (black, white, and grays).  */

  extern const Color black;
  extern const Color white;

  extern const Color gray;
  extern const Color light_gray;
  extern const Color dark_gray;

  }  /* End of |namespace Colors| declaration.  */

@q * (1) All Colors.@>
@* All {\bf Colors}.
\initials{LDF Undated.} 

@:!!@> !! 
IF \filename{colall.web} IS CHANGED, I WILL HAVE TO MAKE SURE    
THAT THIS FILE is recompiled!! \.{cmpl} does not check the
state of \filename{colall.web}.  @:??@> ?? Should I do something
about this, or is it not worth it?  If I work on
\filename{colall.web}, I could just put the code back in here.
\initials{LDF Undated.}                               

If I want all of the colors declared in \filename{colall.web}, I
can uncomment the following line and use |@<All |Colors|@>| instead of
|@<Major |Colors|@>| in 
|@<|extern| |namespace Colors| declaration@>| above.
\initials{LDF 2002.09.26.} 

{\. @@i} \filename{colall.web} (Commented out).

@q * (1) Putting Color together.@>
@* Putting {\bf Color} together.
\initials{LDF Undated.} 

\immediate\write\functexifile{^^JEnd of file:  colors.web^^J}

@ This is compiled.
\initials{LDF Undated.} 

\LOG
\initials{LDF 2005.04.11.}
Now including |@<Define |static Color| data members@>|.
\ENDLOG 

@c
@<Include files@>@;
@<Define |class Color|@>@;
@<Declare |namespace Colors|@>@;
@<Define |static Color| data members@>@;
@<Define |Color| functions@>@;
@<Declare non-member template functions for |Color|@>@;
@<Define non-member non-template functions for |Color|@>@;

@ This is written to \filename{colors.h}.
\initials{LDF Undated.} 

@(colors.h@>=
@<Define |class Color|@>@;
@<|extern| |namespace Colors| declaration@>@;
@<Declare non-member template functions for |Color|@>@;
@<Declare non-member non-template functions for |Color|@>@;

@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q run-cweave-on-file:"3DLDF.web" @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q End: @>
