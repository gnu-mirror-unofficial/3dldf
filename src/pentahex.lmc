%% pentahex.lmc
%% Created by Laurence D. Finston (LDF) Fri 24 Sep 2021 01:22:20 PM CEST

%% * (1) Copyright and License.

%%%% This file is part of GNU 3DLDF, a package for three-dimensional drawing.  
%%%% Copyright (C) 2021 The Free Software Foundation  

%%%% GNU 3DLDF is free software; you can redistribute it and/or modify 
%%%% it under the terms of the GNU General Public License as published by 
%%%% the Free Software Foundation; either version 3 of the License, or 
%%%% (at your option) any later version.  

%%%% GNU 3DLDF is distributed in the hope that it will be useful, 
%%%% but WITHOUT ANY WARRANTY; without even the implied warranty of 
%%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
%%%% GNU General Public License for more details.  

%%%% You should have received a copy of the GNU General Public License 
%%%% along with GNU 3DLDF; if not, write to the Free Software 
%%%% Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA 

%%%% GNU 3DLDF is a GNU package.  
%%%% It is part of the GNU Project of the  
%%%% Free Software Foundation 
%%%% and is published under the GNU General Public License. 
%%%% See the website http://www.gnu.org 
%%%% for more information.   
%%%% GNU 3DLDF is available for downloading from 
%%%% http://www.gnu.org/software/3dldf/LDF.html.

%%%% Please send bug reports to Laurence.Finston@gmx.de
%%%% The mailing list help-3dldf@gnu.org is available for people to 
%%%% ask other users for help.  
%%%% The mailing list info-3dldf@gnu.org is for sending 
%%%% announcements to users. To subscribe to these mailing lists, send an 
%%%% email with ``subscribe <email-address>'' as the subject.  

%%%% The author can be contacted at: 

%%%% Laurence D. Finston 
%%%% c/o Free Software Foundation, Inc. 
%%%% 51 Franklin St, Fifth Floor 
%%%% Boston, MA  02110-1301  
%%%% USA

%%%% Laurence.Finston@gmx.de


verbatim_metapost "verbatimtex \font\Tiny=cmr4\font\SMALL=cmr6\font\Small=cmr7"
  & "\font\small=cmr8\font\medium=cmr9\font\large=cmr12\font\largebx=cmbx12"
  & "\font\Largebx=cmbx12 scaled \magstephalf\font\huge=cminch"
  & "\font\smallgreek=cmmi8\font\Smallgreek=cmmi7\font\SMALLgreek=cmmi6 "
  & "etex;";

%% * (1) Global variables

path tab_path[];
picture v[];
numeric tab_ctr;
tab_ctr := 0; 

numeric tab_width_factor;
numeric tab_width_one_factor;
numeric tab_offset_factor;
numeric tab_offset_one_factor;

tab_width_factor      := 1;
tab_width_one_factor  := 1;
tab_offset_factor     := 1;
tab_offset_one_factor := 1;

%% ** (2) Macro tab

macro tab;

def tab {numeric pp, numeric qq, numeric offset, numeric offset_one, numeric angle_zero, numeric angle_one,
         boolean ddo_labels, numeric width, numeric width_one, boolean rotate_tab} =

  %message "Entering tab.";
 
  point P[];

  if offset == 0:
    P0 := p[pp];
  else:
    P0 := mediate(p[pp], p[qq], offset * tab_offset_factor);
  fi;

  if offset_one == 0:
    P1 := p[qq];
  else:
    P1 := mediate(p[qq], p[pp], offset_one * tab_offset_one_factor);
  fi;

  if ddo_labels:
    %dotlabel.top("$P_0$", P0) with_text_color red;
    %dotlabel.top("$P_1$", P1) with_text_color red;
  fi;

  P2 := P0 shifted (0, 1);

  if (offset  == 0) or (width == 0):
    P3 := P0;
  else:
    P3 := ((width  * tab_width_factor) * unit_vector(p[pp] - P0)) shifted by P0;
    rotate_around P3 (P0, P2) -angle_zero;
  fi;

  P5 := P1 shifted (0, 1);

  if (offset_one == 0) or (width_one == 0):
    P4 := P1;
  else:
    P4 := ((width_one * tab_width_one_factor) * unit_vector(p[qq] - P1)) shifted by P1;
    rotate_around P4 (P1, P5) angle_one;
  fi;

  if ddo_labels:
    %dotlabel.top("$P_3$", P3) with_text_color red;
    %dotlabel.top("$P_4$", P4) with_text_color red;
  fi;
  
  tab_path[tab_ctr] := P0 -- P3 -- P4 -- P1;

  % message "tab_ctr == ";
  % show tab_ctr;

  % message "tab_path[tab_ctr] == ";
  % show tab_path[tab_ctr];

  
  if rotate_tab:
    rotate_around tab_path[tab_ctr] (P0, P1) 180;
    rotate_around P3 (P0, P1) 180;
    rotate_around P4 (P0, P1) 180;
  fi;

    
  draw tab_path[tab_ctr];

  P6 := mediate(mediate(P0, P1, .5), mediate(P3, P4, .5), .5);

  if ddo_labels:
    label(decimal tab_ctr, P6) with_text_color red;
  fi;

  tab_ctr += 1;

  %message "Exiting tab.";
  
enddef;

%% ** (2)

macro tab_short;

def tab_short {numeric ppp, numeric qqq, boolean dddo_labels, boolean rrotate_tab} =

  %message "Entering tab_short.";

  tab {ppp, qqq, .15, .15, 112.5, 112.5, dddo_labels, .333, .333, rrotate_tab};
  
  %message "Exiting tab_short.";
  
enddef;

%% ** (2)

macro tab_thin;

def tab_thin {numeric ppp, numeric qqq, boolean dddo_labels, boolean rrotate_tab} =

  %message "Entering tab_thin.";

  tab {ppp, qqq, .1, .1, 112.5, 112.5, dddo_labels, 0, .333, rrotate_tab};
  
  %message "Exiting tab_thin.";
  
enddef;

%% ** (2)

macro tab_long;

def tab_long {numeric ppp, numeric qqq, boolean dddo_labels, boolean rrotate_tab} =

  %message "Entering tab_long.";

  tab {ppp, qqq, .225, .1, 112.5, 112.5, dddo_labels, .25, .4, rrotate_tab};

  %message "Exiting tab_long.";
  
enddef;


%% ** (2)

endinput;

%% ** (2) End of 3DLDF code.

%% * (1) Emacs-Lisp code for use in indirect buffers when using the          
%%       GNU Emacs editor.  The local variable list is not evaluated when an 
%%       indirect buffer is visited, so it's necessary to evaluate the       
%%       following s-expression in order to use the facilities normally      
%%       accessed via the local variables list.                              
%%       \initials{LDF 2004.02.12}.                                          

%% (progn (metapost-mode) (outline-minor-mode t) (setq fill-column 80) (setq outline-regexp "%% [*\f]+"))

%% * (1) Local variables for Emacs.

%% Local Variables:
%% mode:Metapost
%% eval:(outline-minor-mode t)
%% eval:(read-abbrev-file abbrev-file-name)
%% abbrev-mode:t
%% outline-regexp:"%% [*\f]+"
%% End:
