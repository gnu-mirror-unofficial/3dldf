@q ***** (5) @>
@
@<Define rules@>=

       /*  Process the contents of |curr_row|  */

       scanner_node->curr_row = 0;
   
       int i = 0;   
  
@q ***** (5) @>
 
       do
       {
@q ****** (6) @>


            curr_row = mysql_fetch_row(result);

            if (curr_row == 0)
            {

              if (*mysql_error(mysql))
              {
                cerr_strm << "ERROR! In `Scanner_Type::show_database: `mysql_fetch_row' failed "
                          << "returning NULL." << endl
                          << "Error:  " << mysql_error(mysql) << endl
                          << "Exiting function  unsuccessfully with exit status 1."
                          << endl;
                log_message(cerr_strm);
                cerr_message(cerr_strm);
                cerr_strm.str("");

                if (result)
                {
                  mysql_free_result(result);
                  result = 0;
                }       

                return 1;

              }
              else if (DEBUG)
              {
                
                cerr_strm << "In `Scanner_Type::show_database:" << endl 
                          << "No more rows." << endl;

                log_message(cerr_strm);
                cerr_message(cerr_strm);
                cerr_strm.str("");
              }

              break;

           }  /* |if (curr_row == 0)|  */

           cerr_strm << "Iteration " << (i + 1) << ":" << endl 
                     << "`curr_row[0]' == `prefix' == " << curr_row[0] << endl
                     << "`curr_row[1]' == `name'   == " << curr_row[1] << endl;
           log_message(cerr_strm);
           cerr_message(cerr_strm);
           cerr_strm.str("");

           curr_point.clear();

           point_prefix_vector.push_back(curr_row[0]);
           point_name_vector.push_back(curr_row[1]);

           curr_point.world_coordinates[0] = static_cast<real>(atof(curr_row[2]));
           curr_point.world_coordinates[1] = static_cast<real>(atof(curr_row[3]));
           curr_point.world_coordinates[2] = static_cast<real>(atof(curr_row[4]));
           curr_point.world_coordinates[3] = static_cast<real>(atof(curr_row[5]));

           curr_point.user_coordinates[0] = static_cast<real>(atof(curr_row[6]));
           curr_point.user_coordinates[1] = static_cast<real>(atof(curr_row[7]));
           curr_point.user_coordinates[2] = static_cast<real>(atof(curr_row[8]));
           curr_point.user_coordinates[3] = static_cast<real>(atof(curr_row[9]));

           curr_point.view_coordinates[0] = static_cast<real>(atof(curr_row[10]));
           curr_point.view_coordinates[1] = static_cast<real>(atof(curr_row[11]));
           curr_point.view_coordinates[2] = static_cast<real>(atof(curr_row[12]));
           curr_point.view_coordinates[3] = static_cast<real>(atof(curr_row[13]));

           curr_point.pre_projective_coordinates[0] = static_cast<real>(atof(curr_row[14]));
           curr_point.pre_projective_coordinates[1] = static_cast<real>(atof(curr_row[15]));
           curr_point.pre_projective_coordinates[2] = static_cast<real>(atof(curr_row[16]));
           curr_point.pre_projective_coordinates[3] = static_cast<real>(atof(curr_row[17]));
 
           curr_point.projective_coordinates[0] = static_cast<real>(atof(curr_row[18]));
           curr_point.projective_coordinates[1] = static_cast<real>(atof(curr_row[19]));
           curr_point.projective_coordinates[2] = static_cast<real>(atof(curr_row[20]));
           curr_point.projective_coordinates[3] = static_cast<real>(atof(curr_row[21]));
 
           curr_point.drawdot_value = static_cast<signed short>(atoi(curr_row[22]));
           curr_point.do_output = static_cast<bool>(atoi(curr_row[23]));
           curr_point.measurement_units = static_cast<string>(curr_row[24]);

           cerr_strm << "`curr_point.world_coordinates[0]' == " << curr_point.world_coordinates[0] 
                     << endl
                     << "`curr_point.world_coordinates[1]' == " << curr_point.world_coordinates[1] 
                     << endl
                     << "`curr_point.world_coordinates[2]' == " << curr_point.world_coordinates[2] 
                     << endl
                     << "`curr_point.world_coordinates[3]' == " << curr_point.world_coordinates[3] 
                     << endl
                     << "`currenldrawdot_value'        == " << curr_point.drawdot_value << endl 
                     << "`curr_point.do_output'            == " << curr_point.do_output << endl         
                     << "`curr_point.measurement_units'    == " << curr_point.measurement_units 
                     << endl;

           log_message(cerr_strm);
           cerr_message(cerr_strm);
           cerr_strm.str("");

           point_vector.push_back(curr_point);
           ++i;

@q ****** (6) @>

      } while (curr_row != 0);

@q ***** (5) @>

     /* Free |result|  */
     
     if (result)
       {
	 mysql_free_result(result);
	 result = 0;
       }

