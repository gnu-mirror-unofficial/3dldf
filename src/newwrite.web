@q newwrite.web @>

@q * (1) Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing.  @>
@q Copyright (C) 2021 The Free Software Foundation, Inc.   @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version.  @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details.  @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA@>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html.@>

@q ("@@" stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de@>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston                 @> 
@q c/o Free Software Foundation, Inc.  @>
@q 51 Franklin St, Fifth Floor         @> 
@q Boston, MA  02110-1301              @>
@q USA                                 @>

@q Laurence.Finston@@gmx.de (@@ stands for a single "at" sign.)@>

@q * (0) Newwrites.@>
@** Newwrites\quad ({\tt newwrites\PERIOD web}).\hfil

\LOG
\initials{LDF 2021.7.5.}
Created this file.
\ENDLOG 

\immediate\write\functexifile{File:  newwrites.web^^J}

@q * (1) Include files.@>
@ Include files.

@<Include files@>=

#include "loader.h++"
#include "pspglb.h++"
#include "io.h++"
#include "creatnew.h++"
#include "pntrvctr.h++"
#include "primes.h++"
#include "complex.h++"
#include "matrices.h++"
#include "colors.h++"
#include "transfor.h++"
#include "pens.h++"
#include "dashptrn.h++"
#include "shapes.h++"  
#include "pictures.h++"  
#include "points.h++"
#include "lines.h++"
#include "planes.h++"
#include "nurbs.h++"
#include "paths.h++"
#include "curves.h++"
#include "polygons.h++"
#include "triangle.h++"
#include "rectangs.h++"
#include "conicsct.h++"
#include "ellipses.h++"
#include "circles.h++"
#include "ellpsslc.h++"
#include "crclslc.h++"
#include "parabola.h++"
#include "hyprbola.h++"
#include "cncsctlt.h++"
#include "arc.h++"
#include "helices.h++"
#include "origami.h++"
#include "solids.h++"
#include "solfaced.h++"
#include "polyhed.h++"
#include "ddchdrn.h++"
#include "rhtchdrn.h++"
#include "plyhdslc.h++"
#include "cones.h++"
#include "cylinder.h++" 
#include "ellpsoid.h++" 
#include "spheres.h++"  
#include "sphrdevl.h++"
#include "parabold.h++"
#include "paraellp.h++"
#include "parahypr.h++"

@q * (1) Newwrite class definition.@>
@* {\bf Newwrite} class definition.
\initials{LDF 2021.7.5.}

\LOG
\initials{LDF 2021.7.5.}
Added this |class| definition.
\ENDLOG

@<Define |class Newwrite|@>=

class Newwrite
{

   protected:

   public:

  @<Declare |Newwrite| functions@>@;
};

@q * (1) Constructors and setting functions.@>
@* Constructors and setting functions.@>
\initials{LDF 2021.7.5.}

@q ** (2) Default constructor.  No arguments.@>
@*1 Default constructor. No arguments.
@^\cfunc{Newwrite}{Newwrite}@>
\cfunctexi{Newwrite}{Newwrite}
\initials{LDF 2021.7.5.}

\LOG
\initials{LDF 2021.7.5.}
Added this function.
\ENDLOG

@q *** (3) Declaration.  @>

@<Declare |Newwrite| functions@>=
Newwrite(void);

@q *** (3) Definition.  @>

@
@<Define |Newwrite| functions@>= 
Newwrite::Newwrite(void)
{
   return;
}

@q * (1) Destructor.@> 
@* Destructor.
\initials{LDF 2021.7.5.}

\LOG
\initials{LDF 2021.7.5.}
Added this function.
\ENDLOG

@<Declare |Newwrite| functions@>=
virtual
~Newwrite(void);

@q *** (3) Definition.  @>

@
@<Define |Newwrite| functions@>= 
Newwrite::~Newwrite(void)
{
   return;
}

@q * (1) Pseudo-constructor for dynamic allocation.@>
@* Pseudo-constructor for dynamic allocation.

@q ** (2) Pointer argument.@>
@*1 Pointer argument.
@^\cfunc{Newwrite}{create\_new\_newwrite}@>
\cfunctexi{Newwrite}{create\_new\_newwrite}
\initials{LDF 2021.7.5.}

\LOG
\initials{LDF 2021.7.5.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare non-member template functions for |Newwrite|@>=
Newwrite* 
create_new(const Newwrite* c, Scanner_Node scanner_node);

@q ** (2) Reference argument.@>
@*1 Reference argument.
\initials{LDF 2021.7.5.}

\LOG
\initials{LDF 2021.7.5.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare non-member template functions for |Newwrite|@>=
Newwrite* 
create_new(const Newwrite& c, Scanner_Node scanner_node);

@q * (1) Assignment.@> 
@* Assignment.
\initials{LDF 2021.7.5.}

\LOG
\initials{LDF 2021.7.5.}
Added this section.
\ENDLOG

@q ** (2) Assignment from a |Newwrite|.@> 
@*1 Assignment from a |Newwrite|.
\initials{LDF 2021.7.5.}

\LOG
\initials{LDF 2021.7.5.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Newwrite| functions@>=
virtual
Newwrite&
operator=(const Newwrite& c);

@q *** (3) Definition.@> 

@
@<Define |Newwrite| functions@>=

Newwrite&
Newwrite::operator=(const Newwrite& c)
{
    if (this == &c) /* Make sure it's not self-assignment. */
       return *this;

    return *this;

}  /* End of |Newwrite::operator=(const Newwrite& h)| definition.  */

@q * (1) Returning elements and information.@>
@* Returning elements and information.

@q * (1) Show.@> 
@* Show.
\initials{LDF 2021.7.5.}

\LOG
\initials{LDF 2021.7.5.}
Added this function.
\ENDLOG

@q ** (2) Declaration.@> 

@<Declare |Newwrite| functions@>=
void 
show(string text = "") const;

@q ** (2) Definition.@> 

@
@<Define |Newwrite| functions@>=
void 
Newwrite::show(string text) const

{
    if (text == "")
       text = "Newwrite:";

    cerr << text << endl;

    return;

} /* End of |Newwrite::show()| definition.  */

@q * (1) Putting Newwrite together. @>
@* Putting {\bf Newwrite} together.

\immediate\write\functexifile{^^JEnd of file:  newwrites.web^^J}

This is what's compiled.
@c
@<Include files@>@;
@<Define |class Newwrite|@>@;
@<Define |Newwrite| functions@>@;
@<Declare non-member template functions for |Newwrite|@>@;

@ This is what's written to \filename{newwrites.h}.
@(newwrites.h@>=
@<Define |class Newwrite|@>@;
@<Declare non-member template functions for |Newwrite|@>@;

@q * Local variables for Emacs.@>
@q Local Variables: @>
@q mode:CWEB @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q End: @>
