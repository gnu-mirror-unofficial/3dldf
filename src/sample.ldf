%%%% sample.ldf
%%%%% Created by Laurence Finston Di Jul 27 23:13:05 CEST 2004

%% * (1) Copyright and License.

%%%% This file is part of GNU 3DLDF, a package for three-dimensional drawing.  
%%%% Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 
%%%% 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022 The Free Software Foundation  

%%%% GNU 3DLDF is free software; you can redistribute it and/or modify 
%%%% it under the terms of the GNU General Public License as published by 
%%%% the Free Software Foundation; either version 3 of the License, or 
%%%% (at your option) any later version.  

%%%% GNU 3DLDF is distributed in the hope that it will be useful, 
%%%% but WITHOUT ANY WARRANTY; without even the implied warranty of 
%%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
%%%% GNU General Public License for more details.  

%%%% You should have received a copy of the GNU General Public License 
%%%% along with GNU 3DLDF; if not, write to the Free Software 
%%%% Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA 

%%%% GNU 3DLDF is a GNU package.  
%%%% It is part of the GNU Project of the  
%%%% Free Software Foundation 
%%%% and is published under the GNU General Public License. 
%%%% See the website http://www.gnu.org 
%%%% for more information.   
%%%% GNU 3DLDF is available for downloading from 
%%%% http://www.gnu.org/software/3dldf/LDF.html.
  

%%%% Please send bug reports to Laurence.Finston@gmx.de
%%%% The mailing list help-3dldf@gnu.org is available for people to 
%%%% ask other users for help.  
%%%% The mailing list info-3dldf@gnu.org is for sending 
%%%% announcements to users. To subscribe to these mailing lists, send an 
%%%% email with ``subscribe <email-address>'' as the subject.  

%%%% The author can be contacted at: 

%%%% Laurence D. Finston 
%%%% c/o Free Software Foundation, Inc. 
%%%% 51 Franklin St, Fifth Floor 
%%%% Boston, MA  02110-1301  
%%%% USA

%%%% Laurence.Finston@gmx.de


%%%% sample.ldf

% Everything following a `%' is a comment.

% You can use as many `%' characters as you like.

% A minimal figure.  Blank lines are ignored by 3DLDF, but can make
% input files easier to read.

beginfig(1); %% Comments can start at the middle of a line.

point p;       % Declaration.

p := (1, 2, 3); % Assignment.

drawdot p;     % Drawing command.  Puts a dot on `current_picture'.

endfig;      %  Outputs `current_picture'.


% Types:

%% boolean, string, pen, dash_pattern, focus, color, numeric, transform,
%% picture, point, path, circle, triangle, reg_polygon, rectangle,
%% square, ellipse, cuboid, tetrahedron, octahedron, dodecahedron,
%% icosahedron, trunc_octahedron. 
%% color_vector.

% Declarations.


boolean a;        % Single variable.

string b, c, d;   % Multiple declarations at one time.

pen e[];           % Array declaration.  Now `e' + numeric subscript
                   % can be used, e.g., `e0', `e1', `e[1/2]', `e[5.321]'.

dash_pattern f[]g[];  % Array declaration with two subscripts.
                      % Now `f1g2' and  `f0g[.5]' can be used, for
                      % example. 

focus h, i[], jk[]lm[]n, opq;  % Multiple declarations with both ordinary
                               % variables and arrays. 

%% Other types are declared analogously.

% * Expressions.


% Generally speaking, `variables' of a given type appear on the
% left-hand side of assignments and `expressions' of the same type
% on the right-hand side.  `expressions' are ordered in a precedence
% hierarchy;  for each type there are `primaries', `secondaries'
% `tertiaries' and `expressions' proper.  For example, there are
% `boolean primaries', `boolean secondaries', `boolean tertiaries',
% and `boolean expressions'.  3DLDF has inherited the
% unfortunate ambiguity of the term `expression' from Metafont.


% ** boolean expressions.

% `true' and `false' are primitives of 3DLDF.  Since I haven't
% implemented equations or inequalities yet, `true' `false', and
% boolean variables are the only boolean expressions currently
% available. 

boolean a, b;

%%%% a = true; % Initialization, `=' can be used.  (Not yet implemented.)

b := false; % Ordinary assignment.

%%%% a = true; % Equation, not assignment, and redundant to boot.
               % Not yet implemented.

%%%% a = false; % ERROR! Inconsistent equation (not assignment). 
               % Not yet implemented. 

a := false;  % Assignment, okay.


%%% Assignments can be chained.

boolean c, d, e;

c := d := e := true; % !! Make sure this works.

%%%% Now `c', `d', and `e' are all `true'.

%% string expressions.

string s, t, u, v;

s := "abcdef"; % Simple assignment from a literal string.

%% t := u := v := "ghijkl"; % Chained assignment.  !! Not yet implemented!

t := "ghijkl";

u := s & t; % --> "abcdefghijkl".  Concatenation.

%% Okay to here.



%% pen expressions.

pen p, q, r, s;

%%% Basic types of pens.

p := pencircle;

q := penrazor;

r := penspeck;

s := pensquare;

%% Okay to here.

%%% pens can be transformed.  Transformations will be explained later.

p := pencircle scaled 2; % Scaled by 2 in all three dimensions.  
                         % `pens' are two-dimensional and lie in the 
                         % plane of projection, so the z-dimension is
                         % normally 
                         % ignored.  However, it is used when
                         % performing parallel projection onto the x-z
                         % or z-y planes.
                         % !! Make sure this is true.



q := penrazor scaled (2, 3, 4); % Scaled by 2 in the x-dimension,
                                % 3 in the y-dimension, and
                                % 4 in the z-dimension.



r := penspeck scaled 3 shifted (1, 2, 3);  % Shifting is valid but
                                           % meaningless.
                                           % !! Make sure this is
                                           % true.


s := pensquare scaled (2, 3) rotated (0, 0, 45); % This makes a
                                                 % diamond-shaped pen.
                                                 % !! Make sure this 
                                                 % works.


%% Okay to here.


%%%% p := q := r := s;  % Chained assignment.  !! Not yet implemented!




% ** dash_pattern expressions.

dash_pattern d, e, f, g;

%% `with_dots' and `evenly' are predefined variables, not primitives
%% of the 3DLDF language.

d := with_dots;

e := evenly;

%% Like `pens', `dash_patterns' can be transformed.  However, they too
%% are two-dimensional and lie in the plane of projection, so the z-dimension is
% normally ignored.  However, it is used when performing parallel
% projection onto the x-z or z-y planes. 
% !! Make sure this is true.

f := with_dots scaled (1, 2, 3) shifted (1.5, 3.6, 4.7);

g := f;  % Assignment from a `dash_pattern' variable
         % to a `dash_pattern' variable.

%% dash_pattern assignments can be chained.

%% Okay to here.

%%%% d := e := f := evenly scaled (2, 0, 0); % !! Not yet implemented!

%% color expressions.

color c, d, e;

c := red; % Assignment from a predefined color variable.
          % The predefined color variables are:
          % red, green, blue, pink, yellow, cyan, magenta,
          % orange, violet, purple, yellow_green, green_yellow,
          % blue_violet, gray, light_gray, violet_red,
          % black, white % !! Add these.  They're missing.
          % default_color (black by default),
          % background_color (white by default),
          % and help_color (green by default).

%%% colors can also be set using `set'.
%%% See `setting colors' below. % !! Add `setting colors'.

d := e := green; % color assignments can be chained.

%%% color_vectors.

%%%% These pairs of commands cause warnings to be issued.  
%%%% The `point' entries are destroyed.

% point a;
% color_vector a[];  

% point b[];
% color_vector b;

% point c;
% color_vector c;

% point d[];
% color_vector d[];

%%%% Assignment to color_vectors.

% color_vector c;
% c += blue;
% c += green;
% show c;

% show c0;
% show c1;

%% Okay to here.

%%%% This demonstrates what happens when a `color_vector'
%%%% variable is "overwritten" by a subsequent array declaration:
%%%% The `color_vector' is "expired".

% color_vector a;
% a += green;

% show a;

% show a0;

% circle a[];

% show a;
% a0 := unit_circle;

% show a0;

% ** numeric expressions.

% `numeric' variables need not be declared.  If a variable is used
% without being declared, it is considered to be a `numeric'.  Please
% note, however, that numerals in such variables are not subscripts!
% For example:
% numeric p[];
% p1 := 3;
% p2 := 4.5;

%% START HERE. 

numeric a, b, c, d, e, f, g;

a :=  1; % Assignment from an integer.

b := +5; % Assignment from an integer with a prefixed sign.

c := -2.34; % Assignment from a negative floating point number.

b := .5; % Both of these are valid.
c := 0.5;

d := 3/2; % d == 1.5.

e := .25[0, 24]; % e == 6, i.e., 1/4 of the way from 0 to 24
                 % (mediation).  !! Make sure this works.

f := length 6;   % f == 6.  % !! Check this.  What's the sense of it?

point p;

p := (3, 4, 5);

g := length p; % g == ??, i.e., the magnitude of p.


%% Okay to here.

%% h := magnitude p; % h == ??.  The same as `length p', but clearer.
%%                   %% Not yet implemented!           

i := x_part p; % i == 3

j := y_part p; % j == 4

k := z_part p; % k == 5

l := w_part p; % l == 1.  `w_part <point primary>' will always be 1,
               %           except in exceptional cases.
               %           !! Add reference to where this is
               %           explained.
               
%%% numeric operators.

m := sqrt 81; % m == 9.  The square root.

n := sind 30; % .5.  The sine of 30 degrees.
                              % !! Get the actual precision.

o := cosd 30; % 0.866.  The cosine of 30 degrees.
                               % !! Get the actual precision.

%%%% mlog and mexp are included for compatibility with Metafont.
%%%% See _The METAFONTbook_, p. 67.
%%%% mlog x == 256 ln x and mexp x = e^(x/256).


p := mlog 2; % --> 177.44568.  !! Check what value is produced.

%% Okay to here.

%q := mexp 256; % --> 2.71828 (The constant e).
%               % !! Check what value is produced.
%               % Not yet implemented!



%r := floor 2.5412; % --> 2

%s := floor -3.14; % --> -4.  !! Make sure this is true.

%t := uniformdeviate % !! There's a rule for this, but it's not yet
                     % functional.
                     % Not yet implemented!


%% internal_quantity expressions.

%% transform expressions.

%% picture expressions.


%% point expressions.

%% focus expressions.

%% path expressions.

%% circle expressions.

%% ellipse expressions.

%% rectangle expressions.

%% reg_polygon expressions.

end;

%% Local Variables:
%% mode:Metafont
%% abbrev-mode:t
%% eval:(auto-fill-mode t)
%% eval:(outline-minor-mode t)
%% outline-regexp:"%+"
%% indent-tabs-mode:nil
%% End:
