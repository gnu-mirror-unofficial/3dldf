@q  scanner2.web                                             @>
@q  Created by Laurence Finston Wed Nov  4 14:40:54 CET 2009 @>

@q * Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing. @>
@q Copyright (C) 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, @>
@q 2019, 2020, 2021, 2022 The Free Software Foundation, Inc. @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version. @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details. @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html. @>

@q (``@@'' stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de @>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston                 @> 
@q c/o Free Software Foundation, Inc.  @>
@q 51 Franklin St, Fifth Floor         @> 
@q Boston, MA  02110-1301              @>
@q USA                                 @>

@q Laurence.Finston@@gmx.de (@@ stands for a single ``at'' sign.)@>

@q  * (1) Scanner 2.  @>
@*2 scanner 2.

@
@<Include files@>=

#include <stdlib.h>
#include <stdio.h>
#include <fstream>
#include <getopt.h> 
#include <iomanip>
#include <ios>
#include <iostream>
#include <map>
#include <string>
#include <time.h>
#include <math.h>
#include <sstream>   

#include <stack>
#include <vector>

#include <pthread.h>

#include <config.h>

#include "loader.h++"
#include "pspglb.h++"
#include "io.h++"  
#include "parser2.h++"

@q ** (2) Define |YY_INPUT|.  @>
@ Define {\tt YY\_INPUT}.  
\initials{LDF 2008.09.08.}

\LOG
\initials{LDF 2008.09.08.}
Added this macro definition.  It's needed if the function |open_or_terminate| 
is used.  |open_or_terminate| is defined in \filename{procfncs.web}.
\ENDLOG

@<Define |YY_INPUT|@>=

#define YY_INPUT(buf,result,max_size) \
    { \
    signed char c = (signed char) fgetc(yyin); \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1); \
    }

@q  ** (2) Start conditions.  @>
@*3 Start conditions.

@<Start conditions@>=

@q  ** (2) Options.  @>
@*3 Options.

@<Options@>=
@=%option header-file="scanner2.hxx"@>
@=%option bison-bridge@>
@=%option reentrant@>
@=%option prefix="zz"@>

@q ** (2) Name definitions.  @>
@*3 Name definitions.  
@<Name definitions@>=

@q  * (1) Local variables for |zzlex|.  @>
@*3 Local variables for {\bf zzlex}.

@<Local variables for |zzlex|@>=

bool DEBUG_SCANNER = true; /* |false| */

@q ** (2) Code to be executed each time |zzlex| is entered.  @>

@*1 Code to be executed each time {\bf zzlex} is entered.
This code must be indented or it causes an error when FLEX 
is run.  LDF 2008.07.04.

@q *** (3) Set start condition on entry to |zzlex|.@> 
@*2 Set start condition on entry to {\bf zzlex}. 
\initials{LDF 2008.07.04.}

@<Execute on entry to |zzlex|@>=

Scanner_Type* scanner_node = static_cast<Scanner_Type*>(yyextra);

@q  ** (2) Rules.  @>
@*3 Rules.

@q *** (3) Punctuation.  @>

@*4 Punctuation.

@q *** (3) Whitespace.  @>
@*4 Whitespace.

@<Rules@>=
@=[[:space:]]+ {@>

#if 0 
   if (DEBUG_SCANNER)
   {
      
      cerr << endl << "In `zzlex':  Whitespace." << endl;
      
   }
#endif 

@=}@>

@q *** (3) Semi-Colon.  @>
@*4 Semi-Colon

\LOG
\initials{LDF 2022.04.03.}
Added this rule.
\ENDLOG

@<Rules@>=
@=; {@>

#if 0 
   if (DEBUG_SCANNER)
   {
      
      cerr << endl << "In `zzlex':  Semi-colon." << endl;
      
   }
#endif 

@=}@>


@q *** (3) Comments.  @>
@*4 Comments.  

\LOG
\initials{LDF 2008.07.14.}
Added this rule.
\ENDLOG

@<Rules@>=
@=#.*$ {@>

   if (DEBUG_SCANNER)
   {
      
      cerr << "In `zzlex':  Comment." << endl;
      
   }

@=}@>

@q *** (3) START_ENTRY.  @>
@*4 START\_ENTRY.

@<Rules@>=
@=START_ENTRY {@>

   if (DEBUG_SCANNER)
   {
      
      cerr << "In `zzlex':  START_ENTRY." << endl;
      
   }

   return END_2;

@=}@>

@q *** (3) END_ENTRY.  @>
@*4 END\_ENTRY.

@<Rules@>=
@=END_ENTRY {@>

   if (DEBUG_SCANNER)
   {
      
      cerr << "In `zzlex':  END_ENTRY." << endl;
      
   }

   return END_2;

@=}@>

@q *** (3) END.  @>
@*4 END.

@<Rules@>=
@=END {@>

   if (DEBUG_SCANNER)
   {
      
      cerr << "In `zzlex':  END." << endl;
      
   }

   return END_2;

@=}@>

@q *** (3) End-of-file (EOF).  @>
@*4 End-of-file (EOF).

@<Rules@>=
@=<<EOF>> {@>

   if (DEBUG_SCANNER)
   {
      
      cerr << "In `zzlex':  EOF.  Returning `END_2'." << endl;
      
   }

   return END_2;

@=}@>

@q ** (2) Additional functions.  @>

@*3 Additional functions.

@<|zzwrap| definition@>=

int
zzwrap(yyscan_t parameter)
{
    return 1;
}

@
@<|zzerror| definition@>=

int
zzerror(void* v, char const* s)
{
    return 0;
}

@*3 Putting scanner together.
@c
@=%{@>
@<Include files@>@;@/
@<Define |YY_INPUT|@>@;@/
using namespace std;
@=%}@>
@<Start conditions@>@;@/
@<Options@>@;@/
@<Name definitions@>@;@/
@=%%@>
@=%{@>
@<Local variables for |zzlex|@>@;@/
@=%}@>
@<Execute on entry to |zzlex|@>@;@/
@q Rules @>
@<Rules@>@;@/
@=%%@>
@q User code@>
@<|zzwrap| definition@>@;@/
@<|zzerror| definition@>@;@/

@q * (1) Emacs-Lisp code for use in indirect buffers  @>

@q (progn (cweb-mode) (outline-minor-mode))           @>

@q * (1) Local variables for Emacs @>

@q * Local variables for Emacs.@>
@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q abbrev-mode:t @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q fill-column:80 @>
@q End: @>
