%%%% sample5.ldf
%%%% Created by Laurence D. Finston (LDF) Wed 14 Jul 2021 03:18:52 PM CEST

%% * (1) Copyright and License.

%%%% This file is part of GNU 3DLDF, a package for three-dimensional drawing.  
%%%% Copyright (C) 2021 The Free Software Foundation  

%%%% GNU 3DLDF is free software; you can redistribute it and/or modify 
%%%% it under the terms of the GNU General Public License as published by 
%%%% the Free Software Foundation; either version 3 of the License, or 
%%%% (at your option) any later version.  

%%%% GNU 3DLDF is distributed in the hope that it will be useful, 
%%%% but WITHOUT ANY WARRANTY; without even the implied warranty of 
%%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
%%%% GNU General Public License for more details.  

%%%% You should have received a copy of the GNU General Public License 
%%%% along with GNU 3DLDF; if not, write to the Free Software 
%%%% Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA 

%%%% GNU 3DLDF is a GNU package.  
%%%% It is part of the GNU Project of the  
%%%% Free Software Foundation 
%%%% and is published under the GNU General Public License. 
%%%% See the website http://www.gnu.org 
%%%% for more information.   
%%%% GNU 3DLDF is available for downloading from 
%%%% http://www.gnu.org/software/3dldf/LDF.html.
  

%%%% Please send bug reports to Laurence.Finston@gmx.de
%%%% The mailing list help-3dldf@gnu.org is available for people to 
%%%% ask other users for help.  
%%%% The mailing list info-3dldf@gnu.org is for sending 
%%%% announcements to users. To subscribe to these mailing lists, send an 
%%%% email with ``subscribe <email-address>'' as the subject.  

%%%% The author can be contacted at: 

%%%% Laurence D. Finston 
%%%% c/o Free Software Foundation, Inc. 
%%%% 51 Franklin St, Fifth Floor 
%%%% Boston, MA  02110-1301  
%%%% USA

%%%% Laurence.Finston@gmx.de

% * (1) Beginning of 3DLDF code.

%% * (1) Plotting stars on sphere development (spherical biangles)

%% ** (2) Variable declarations

%% *** (3)  Global, used in macros.

point p[];    
picture v[];  
numeric bi_ang[];  
picture bi_ang_pict[];
numeric biangle_width[];
numeric RA_arc_length;
numeric Declination_arc_length;
numeric middle_angle;   
numeric min_edge_angle; 
numeric max_edge_angle;
point ra_decl_zero_pt;
point R[];
picture_vector pv;
picture qv[];
picture label_picture;
numeric label_picture_ctr;
newwrite nw[];
pen medium_pen;
pen large_pen;
pen Large_pen;
path Q;
color ccolor;
boolean do_black;
boolean do_extra_labels;
numeric i; 
numeric label_pos_zero;
numeric label_pos_top;
numeric label_pos_bot;
numeric label_pos_rt;
numeric label_pos_urt;
numeric label_pos_ulft;
numeric label_pos_lrt;
numeric label_pos_llft;
newwrite label_out;
picture tab_picture;
newwrite star_info_combined;

label_pos_zero := 0;
label_pos_top  := 1;
label_pos_bot  := 2;
label_pos_lft  := 3;
label_pos_rt   := 4;
label_pos_urt  := 5;
label_pos_ulft := 6;
label_pos_lrt  := 7;
label_pos_llft := 8;

medium_pen := pencircle scaled (2pt, 2pt, 2pt);
large_pen  := pencircle scaled (3pt, 3pt, 3pt);
Large_pen  := pencircle scaled (4pt, 4pt, 4pt);

label_picture_ctr := 0;

do_extra_labels := false;

label_out := "sample_5_labels.tex";

star_info_combined := "sample_5_star_info_combined.tex";

%% *** (3) Global, used in the following code (not in macros).

numeric radius;
string s;

%% ** (2) Set variables

radius := 6cm;
do_black := true; %% false 

%% !! TODO:  LDF 2021.7.6.  Find out why using a newwrite_vector didn't work.

for i = 0 upto 7:
  s := "sample_5_" & decimal i & ".tex";
  nw[i] := s;
  s := "%%" & s & "\n%%";
  message "s == " & s;
  write s to nw[i];
endfor;

input "sample5.lmc";

%% ** (2) Call macros for the spherical biangles and the sphere.

get_spherical_biangles {radius}; 

get_sphere_for_plotting_stars {radius};

%% *** (3)

%% ** (2) Plot the stars.

i := 0;

%% *** (3)

point K[];
path T[];
rectangle D[];
point M[];
picture quadrant_picture;
point star_point;
star_point := origin;
boolean b[];
path quadrant[][];
numeric RA;
numeric Decl;
numeric RA_ctr;
numeric Decl_ctr;
bool_point_vector bpv;
numeric i;
numeric j;
string str;

plot_star_on_sphere (star_point) {radius, hamal};


plot_star_on_spherical_biangle {hamal, 101, label_pos_top, 0, 0};

j := 0;

for i := 0 step 22.5 until 337.5:
  K0 := (origin shifted (radius, 0)) rotated (0, 0, 0);
  K1 := K0 rotated (0, 0, 11.25);
  rotate K0 (0, i);
  rotate K1 (0, i);
  K2 := K0 rotated (0, 22.5);
  K3 := K1 rotated (0, 22.5);
  D[j] := (K0, K1, K3, K2);
  draw D[j] with_color green on_picture quadrant_picture;
  label(decimal j, mediate(K0, K3)) on_picture quadrant_picture;
  j += 1;
endfor;
  
%% !! START HERE: LDF 2021.07.14.



T0 := origin -- star_point;

% bpv := T0 intersection_points D0;

% message "bpv:"; 
% show bpv;

% b0 := bpv0;
% b1 := bpv1;

% if b0:
%   message "bpv0 is true";
%   M0 := bpv0;
% elseif b1:
%   message "bpv1 is true";
%   M0 := bpv1;
% else:
%   message "bpv0 and bpv1 are both false";
%   message "This can't happen.";
% fi;

% message "M0:"; 
% show M0;

% RA   := right_ascension_decimal_degrees hamal;
% Decl := declination_decimal_degrees hamal; 

% message "RA of Hamal:";
% show RA;

% message "Decl of Hamal:";
% show Decl;

% RA_ctr := floor (RA / 22.5);

% Decl_ctr := floor (Decl / 11.25);

% message "RA_ctr for Hamal:";
% show RA_ctr;

% message "Decl_ctr for Hamal:";
% show Decl_ctr;

% drawdot M0 with_color red with_pen Large_pen on_picture quadrant_picture;

% pause;

%% *** (3)

plot_star_on_sphere (star_point) {radius, delta_piscium};

plot_star_on_spherical_biangle {delta_piscium, 102, label_pos_top, 0, 0};

% K4 := origin shifted (radius, 0);
% K5 := K0 rotated (0, 22.5);
% K6 := (origin shifted (radius, 0)) rotated (0, 0, 11.25);
% K7 := K2 rotated (0, 22.5);

% D1 := (K4, K6, K7, K5);

% T1 := origin -- star_point;

% bpv := T1 intersection_points D1;

% message "bpv:"; 
% show bpv;

% b0 := bpv0;
% b1 := bpv1;

% if b0:
%   message "bpv0 is true";
%   M1 := bpv0;
% elseif b1:
%   message "bpv1 is true";
%   M1 := bpv1;
% else:
%   message "bpv0 and bpv1 are both false";
%   message "This can't happen.";
% fi;

% message "M1:"; 
% show M1;

RA   := right_ascension_decimal_degrees delta_piscium;
Decl := declination_decimal_degrees delta_piscium; 

message "RA of delta_piscium:";
show RA;

message "Decl of delta_piscium:";
show Decl;

pause;

%draw D0 with_color blue on_picture quadrant_picture;

% drawdot M1 with_color red with_pen Large_pen on_picture quadrant_picture;

% dotlabel.lft("$K_0$", K0) with_text_color blue with_dot_color blue on_picture quadrant_picture;
% dotlabel.urt("$K_1$", K1) with_text_color blue with_dot_color blue on_picture quadrant_picture;
% dotlabel.urt("$K_2$", K2) with_text_color blue with_dot_color blue on_picture quadrant_picture;
% dotlabel.urt("$K_3$", K3) with_text_color blue with_dot_color blue on_picture quadrant_picture;

%T0 := K0 -- K1 -- K3 -- K2 -- cycle;

%draw T0 with_color blue on_picture quadrant_picture;

%% ** (2) Figure and output commands.

input "sample5.aux";

%% ** (2)

verbatim_metapost "end";
  
end;  

%% ** (2) End of 3DLDF code.

%% * (1) Emacs-Lisp code for use in indirect buffers when using the          
%%       GNU Emacs editor.  The local variable list is not evaluated when an 
%%       indirect buffer is visited, so it's necessary to evaluate the       
%%       following s-expression in order to use the facilities normally      
%%       accessed via the local variables list.                              
%%       \initials{LDF 2004.02.12}.                                          

%% (progn (metafont-mode) (outline-minor-mode t) (setq fill-column 80))    

%% * (1) Local variables for Emacs.

%% Local Variables:
%% mode:Metapost
%% eval:(outline-minor-mode t)
%% eval:(read-abbrev-file abbrev-file-name)
%% abbrev-mode:t
%% outline-regexp:"%% [*\f]+"
%% End:


