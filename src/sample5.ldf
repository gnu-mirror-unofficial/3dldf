%%%% sample5.ldf
%%%% Created by Laurence D. Finston (LDF) Wed 14 Jul 2021 03:18:52 PM CEST

%% * (1) Copyright and License.

%%%% This file is part of GNU 3DLDF, a package for three-dimensional drawing.  
%%%% Copyright (C) 2021 The Free Software Foundation  

%%%% GNU 3DLDF is free software; you can redistribute it and/or modify 
%%%% it under the terms of the GNU General Public License as published by 
%%%% the Free Software Foundation; either version 3 of the License, or 
%%%% (at your option) any later version.  

%%%% GNU 3DLDF is distributed in the hope that it will be useful, 
%%%% but WITHOUT ANY WARRANTY; without even the implied warranty of 
%%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
%%%% GNU General Public License for more details.  

%%%% You should have received a copy of the GNU General Public License 
%%%% along with GNU 3DLDF; if not, write to the Free Software 
%%%% Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA 

%%%% GNU 3DLDF is a GNU package.  
%%%% It is part of the GNU Project of the  
%%%% Free Software Foundation 
%%%% and is published under the GNU General Public License. 
%%%% See the website http://www.gnu.org 
%%%% for more information.   
%%%% GNU 3DLDF is available for downloading from 
%%%% http://www.gnu.org/software/3dldf/LDF.html.
  

%%%% Please send bug reports to Laurence.Finston@gmx.de
%%%% The mailing list help-3dldf@gnu.org is available for people to 
%%%% ask other users for help.  
%%%% The mailing list info-3dldf@gnu.org is for sending 
%%%% announcements to users. To subscribe to these mailing lists, send an 
%%%% email with ``subscribe <email-address>'' as the subject.  

%%%% The author can be contacted at: 

%%%% Laurence D. Finston 
%%%% c/o Free Software Foundation, Inc. 
%%%% 51 Franklin St, Fifth Floor 
%%%% Boston, MA  02110-1301  
%%%% USA

%%%% Laurence.Finston@gmx.de

% * (1) Beginning of 3DLDF code.

%% * (1) Plotting stars on sphere development (spherical biangles)

%% ** (2) Variable declarations

%% *** (3)  Global, used in macros.

point p[];    
picture v[];  
numeric bi_ang[];  
picture bi_ang_pict[];
numeric biangle_width[];
numeric RA_arc_length;
numeric Declination_arc_length;
numeric middle_angle;   
numeric min_edge_angle; 
numeric max_edge_angle;
point ra_decl_zero_pt;
point R[];
picture_vector pv;
picture qv[];
picture label_picture;
picture flat_quadrant_picture[];
numeric label_picture_ctr;
newwrite nw[];
pen medium_pen;
pen large_pen;
pen Large_pen;
path Q;
color ccolor;
boolean do_black;
boolean do_extra_labels;
numeric i; 
numeric label_pos_zero;
numeric label_pos_top;
numeric label_pos_bot;
numeric label_pos_rt;
numeric label_pos_urt;
numeric label_pos_ulft;
numeric label_pos_lrt;
numeric label_pos_llft;
newwrite label_out;
picture tab_picture;
newwrite star_info_combined;

rectangle D[][];
triangle T[][];
picture quadrant_picture;
point star_point;
star_point := origin;
path quadrant[][];
path flat_quadrant[][];

point temp_star_panel_point;
temp_star_panel_point := origin;

numeric RRA_ctr;
numeric DDecl_ctr;

RRA_ctr := 0;
DDecl_ctr := 0;

label_pos_zero := 0;
label_pos_top  := 1;
label_pos_bot  := 2;
label_pos_lft  := 3;
label_pos_rt   := 4;
label_pos_urt  := 5;
label_pos_ulft := 6;
label_pos_lrt  := 7;
label_pos_llft := 8;

medium_pen := pencircle scaled (2pt, 2pt, 2pt);
large_pen  := pencircle scaled (3pt, 3pt, 3pt);
Large_pen  := pencircle scaled (4pt, 4pt, 4pt);

label_picture_ctr := 0;

do_extra_labels := false;

label_out := "sample_5_labels.tex";

star_info_combined := "sample_5_star_info_combined.tex";

%% *** (3) Global, used in the following code (not in macros).

numeric radius;
string s;
point star_panel_point[];

%% ** (2) Set variables

radius := 6cm;
do_black := true; %% false 

%% !! TODO:  LDF 2021.7.6.  Find out why using a newwrite_vector didn't work.

for i = 0 upto 7:
  s := "sample_5_" & decimal i & ".tex";
  nw[i] := s;
  s := "%%" & s & "\n%%";
  message "s == " & s;
  write s to nw[i];
endfor;

input "sample5.lmc";

%% ** (2) Call macros for the spherical biangles and the sphere.

get_spherical_biangles {radius}; 

get_sphere_for_plotting_stars {radius};

%% *** (3)

%% ** (2) Plot the stars.

get_panels {radius};

macro get_flat_panels;

def get_flat_panels =

  point p[];
  path q[];
  transform t[];
  numeric k;
  numeric m;
  numeric n[];
  numeric v;

  v := 0;
  
  k := 0;
  m := 0;
  for i = 0 upto 15:   % 15:
    t1 := identity shifted ((i * 3cm), 0);
    if i == 8:
      v := 1;
    fi;
    for j = 1 upto 7: % 7:
      t0 := identity; 
      q[m] := D[i][j];    
      %draw q[m] on_picture flat_quadrant_picture[v];
      message "Error after here 1."; 
      p[k] := get_point (3) q[m];
      %dotlabel.top("$p_{" & decimal k & "}$", p[k]) on_picture flat_quadrant_picture[v];
      p[k+1] := get_point (0) q[m];
      %dotlabel.top("$p_{" & decimal (k+1) & "}$", p[k+1]) on_picture flat_quadrant_picture[v];
      p[k+2] := get_point (1) q[m];
      %dotlabel.top("$p_{" & decimal (k+2) & "}$", p[k+2]) on_picture flat_quadrant_picture[v];
      p[k+3] := get_point (2) q[m];
      %dotlabel.top("$p_{" & decimal (k+3) & "}$", p[k+3]) on_picture flat_quadrant_picture[v];
      n0 := (p[k+2] - p[k]) angle (p[k+1] - p[k]);
      n1 := (p[k+3] - p[k]) angle (p[k+1] - p[k]);
      message "n0:";
      show n0;
      message "n1:";
      show n1;
      n2 := magnitude(p[k+1] - p[k]);
      n3 := magnitude(p[k+2] - p[k]);
      n4 := magnitude(p[k+3] - p[k]);
      message "n2:";
      show n2;
      message "n3:";
      show n3;
      message "n4:";
      show n4;

      p[k+4] := origin;
      p[k+5] := p[k+4] shifted (n2, 0);
      p[k+6] := (p[k+4] shifted (n3, 0)) rotated (0, 0, n0);
      p[k+7] := (p[k+4] shifted (n4, 0)) rotated (0, 0, n1); 

      q[m+1] := p[k+4] -- p[k+5] -- p[k+6] -- p[k+7] -- cycle;
      message "q[" & decimal (m+1) & "]:";
      show q[m+1];

      p[k+8] := mediate(p[k+4], p[k+5]);
      p[k+9] := mediate(p[k+6], p[k+7]);

      if j == 1:
	q[m+1] *= t1;
	draw q[m+1] on_picture flat_quadrant_picture[v];
	draw q[m+1] rotated (180, 0) on_picture flat_quadrant_picture[v];
	if j == 7:
	  dotlabel.llft("$p_{" & decimal (k+4) & "}$", p[k+4]) on_picture flat_quadrant_picture[v];
	  dotlabel.lrt("$p_{" & decimal (k+5) & "}$", p[k+5]) on_picture flat_quadrant_picture[v];
	  dotlabel.urt("$p_{" & decimal (k+6) & "}$", p[k+6]) on_picture flat_quadrant_picture[v];
	  dotlabel.ulft("$p_{" & decimal (k+7) & "}$", p[k+7]) on_picture flat_quadrant_picture[v];
	  dotlabel.bot("$p_{" & decimal (k+8) & "}$", p[k+8]) on_picture flat_quadrant_picture[v];
	  dotlabel.top("$p_{" & decimal (k+9) & "}$", p[k+9]) on_picture flat_quadrant_picture[v];
	fi;
      fi;
            
      if j > 1:
	p[k+10] := get_point (0) q[m-1];
	p[k+11] := get_point (1) q[m-1];
	p[k+12] := get_point (2) q[m-1];
	p[k+13] := get_point (3) q[m-1];
	p[k+14] := mediate(p[k+10], p[k+11], .5);
	p[k+15] := mediate(p[k+12], p[k+13], .5);
	n5 := magnitude(p[k+15] - p[k+14]);

	%t0 := identity shifted by (p[k-7] - p[k+14]);
	%t0 := identity shifted (0, ((j-1) * 2cm));
	t0 := identity shifted by (p[k+15]- p[k+8]);

	p[k+4] *= t0;
	p[k+5] *= t0;
	p[k+6] *= t0;
	p[k+7] *= t0;
	p[k+8] *= t0;
	p[k+9] *= t0;
	
	if j == 7:
	  dotlabel.lft("$p_{" & decimal (k+4) & "}$", p[k+4]) on_picture flat_quadrant_picture[v];
	  dotlabel.rt("$p_{" & decimal (k+5) & "}$", p[k+5]) on_picture flat_quadrant_picture[v];
	  dotlabel.rt("$p_{" & decimal (k+6) & "}$", p[k+6]) on_picture flat_quadrant_picture[v];
	  dotlabel.lft("$p_{" & decimal (k+7) & "}$", p[k+7]) on_picture flat_quadrant_picture[v];
	  dotlabel.bot("$p_{" & decimal (k+8) & "}$", p[k+8]) on_picture flat_quadrant_picture[v];
	  dotlabel.top("$p_{" & decimal (k+9) & "}$", p[k+9]) on_picture flat_quadrant_picture[v];
	fi;

	q[m+1] *= t0;
	
	draw q[m+1] on_picture flat_quadrant_picture[v];
	draw q[m+1] rotated (180, 0) on_picture flat_quadrant_picture[v];

	if j == 7:
	  dotlabel.lft("$p_{" & decimal (k+10) & "}$", p[k+10]) on_picture flat_quadrant_picture[v];
	  dotlabel.rt("$p_{"  & decimal (k+11) & "}$", p[k+11]) on_picture flat_quadrant_picture[v];
	  dotlabel.rt("$p_{"  & decimal (k+12) & "}$", p[k+12]) on_picture flat_quadrant_picture[v];
	  dotlabel.lft("$p_{" & decimal (k+13) & "}$", p[k+13]) on_picture flat_quadrant_picture[v];
	  dotlabel.top("$p_{"  & decimal (k+14) & "}$", p[k+14]) on_picture flat_quadrant_picture[v];
	  dotlabel.bot("$p_{"  & decimal (k+15) & "}$", p[k+15]) on_picture flat_quadrant_picture[v];
	fi;
	
      fi;
      
      flat_quadrant[i][j] := q[m+1];
      flat_quadrant[i][-j] := q[m+1] rotated (180, 0);
   
      k += 16;
      m += 2;
    endfor;
  endfor;

  v := 0;
  
  for i := 0 upto 15:
    if i == 8:
      v := 1;
    fi;
    q[m] := T[1][i];
    p[k] := get_point (0) q[m];
    p[k+1] := get_point (1) q[m];
    p[k+2] := get_point (2) q[m];

    n0 := magnitude (p[k+1] - p[k]);
    n1 := magnitude (p[k+2] - p[k]);
    n2 := (p[k+2] - p[k]) angle (p[k+1] - p[k]);

    p[k+3] := (n1, 0) rotated (0, 0, n2); 
    p[k+4] := (.5n0, 0);
    
    q[m+1] := origin -- (n0, 0) -- p[k+3] -- cycle; 

    t2 := identity shifted by (p[105 + (i * 112)] - p[k+4]);

    q[m+1] *= t2;

    q[m+2] := q[m+1] rotated (180, 0);

    draw q[m+1] on_picture flat_quadrant_picture[v];
    draw q[m+2] on_picture flat_quadrant_picture[v];

    flat_quadrant[i][8]  := q[m+1];
    flat_quadrant[1][-8] := q4;
    k += 5;
    m += 3;
  endfor;
  
enddef;

get_flat_panels;

%% *** (3)

plot_star_on_sphere (star_point) {radius, hamal};

plot_star_on_spherical_biangle {hamal, 101, label_pos_top, 0, 0};

plot_star_on_panel (temp_star_panel_point) {hamal, star_point};

plot_star_on_flat_panel {hamal, temp_star_panel_point, RRA_ctr, DDecl_ctr};

%% *** (3)

plot_star_on_sphere (star_point) {radius, delta_piscium};

plot_star_on_spherical_biangle {delta_piscium, 102, label_pos_top, 0, 0};

plot_star_on_panel (temp_star_panel_point) {delta_piscium, star_point};

star_panel_point0 := temp_star_panel_point;

%% *** (3)

plot_star_on_sphere (star_point) {radius, sirius};

plot_star_on_spherical_biangle {sirius, 103, label_pos_top, 0, 0};

plot_star_on_panel (temp_star_panel_point) {sirius, star_point};

%% *** (3)

plot_star_on_sphere (star_point) {radius, delta_ursae_minoris};

plot_star_on_spherical_biangle {delta_ursae_minoris, 103, label_pos_top, 0, 0};

plot_star_on_panel (temp_star_panel_point) {delta_ursae_minoris, star_point};

%% *** (3)

plot_star_on_sphere (star_point) {radius, gamma_apodis};

plot_star_on_spherical_biangle {gamma_apodis, 104, label_pos_top, 0, 0};

plot_star_on_panel (temp_star_panel_point) {gamma_apodis, star_point};

%% ** (2) Figure and output commands.

input "sample5.aux";




%% ** (2)

verbatim_metapost "end";
  
end;  

%% ** (2) End of 3DLDF code.

%% * (1) Emacs-Lisp code for use in indirect buffers when using the          
%%       GNU Emacs editor.  The local variable list is not evaluated when an 
%%       indirect buffer is visited, so it's necessary to evaluate the       
%%       following s-expression in order to use the facilities normally      
%%       accessed via the local variables list.                              
%%       \initials{LDF 2004.02.12}.                                          

%% (progn (metafont-mode) (outline-minor-mode t) (setq fill-column 80))    

%% * (1) Local variables for Emacs.

%% Local Variables:
%% mode:Metapost
%% eval:(outline-minor-mode t)
%% eval:(read-abbrev-file abbrev-file-name)
%% abbrev-mode:t
%% outline-regexp:"%% [*\f]+"
%% End:


