@q pictures.web @>
    
@q * (1) Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing. @>
@q Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, @>
@q 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022 The Free Software Foundation, Inc.  @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version.  @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details.  @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA@>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html.@>

@q ("@@" stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de@>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston                 @> 
@q c/o Free Software Foundation, Inc.  @>
@q 51 Franklin St, Fifth Floor         @> 
@q Boston, MA  02110-1301              @>
@q USA                                 @>

@q Laurence.Finston@@gmx.de (@@ stands for a single "at" sign.)@>

@q * (0) Picture and Label.@>
@** Picture and Label\quad ({\tt pictures\PERIOD web}).\hfil

\LOG
\initials{LDF 2003.11.12.}  
Removed the version control identifiers from the CWEB
files for the distribution of 3DLDF 1.1.  They're still used in my
development versions.

\initials{LDF 2003.12.10.}  
Put the version control identifiers back
into my release versions for 3DLDF 1.1.4.  I've already put some of
them back in, now I'm doing the rest of them.  However, the release
versions are now in their own RCS repository.
\ENDLOG 

@q * (1) Include files.@>
@ Include files.

\LOG
\initials{LDF 2004.05.09.}  Now including \filename{creatnew.h}.

\initials{LDF 2004.05.21.}  Now including \filename{pens.web}.
\ENDLOG 

@<Include files@>=
#include "loader.h++"
#include "pspglb.h++"
#include "io.h++"
#include "creatnew.h++"
#include "pntrvctr.h++"
#include "primes.h++"
#include "complex.h++"
#include "matrices.h++"
#include "colors.h++"
#include "transfor.h++"
#include "pens.h++"
#include "dashptrn.h++"
#include "shapes.h++"

@q * (0) Label.@>
@** Label.
\initials{LDF 2002.10.20.} 
|Labels| are the only objects, other than |Shapes|, that can be put
onto |Pictures|.  They are
created by the functions |label| and |dotlabel|, which are
currently defined for |Points| and |Paths|.

@q * (1) {\bf Label} class definition.@>
@* {\bf Label} class definition.
\initials{LDF Undated.}

A |Label| contains a pointer to a |Point|, which is
its location, a |bool| to indicate whether the label should have a dot
or not, a |string| for the text of the label and a |string| for
positioning the text with respect to the label.  
|pt| must be a pointer, because |Point| is an incomplete type here.
|position| can be any of the strings used in \MF/, i.e., |"top"|, 
|"bot"|, |"lft"|, |"rt"|, |"llft"|, |"ulft"|, |"lrt"|, or |"urt"|.  
\initials{LDF Undated.}

|Labels| are currently only ever created 
on the free store.
\initials{LDF 2002.10.09.}  

\LOG
\initials{LDF 2005.01.31.}
Added the data members |Color* text_color| and |Color* dot_color|.

\initials{LDF 2005.08.14.}
Added the data member |Transform* transform|.

\initials{LDF 2005.12.09.}
Added the data member |Pen* pen|.
\ENDLOG 

@f Label int

@q ** (2) Definition.  @> 

@<Define classes@>=

class Label
{
    friend class Point;
    friend class Picture;
    Point* pt;
    bool dot;
    string text;
    string position;

    Transform* transform;
 
    Color* text_color;
    Color* dot_color;
    
    Pen* pen;

  public:
    static bool DO_LABELS;
    @<Declare |Label| functions@>@;

};

@q * (1) Static data members. @>
@* Static data members.
\initials{LDF Undated.}

|DO_LABELS| is used for globally enabling or suppressing putting
|Labels| onto |Pictures|:  If
|DO_LABELS| is |false|, then |label| and |dotlabel| have no
effect, i.e., no |Label| is put onto the |Picture|.  Note that
|Picture| has a |private| data member |do_labels|, which is for
enabling or suppressing output of |Labels| for a single |Picture| (see below).
\initials{LDF Undated.}

\LOG 
\initials{LDF 2002.10.20.}  
Added this section.  |DO_LABELS| was formerly a
global variable defined in \filename{pspglb.web}.
\ENDLOG 

@<Initialize |static| |Label| data members@>=

bool Label::DO_LABELS = true;

@q * (1) |Label| functions.@> 
@* {\bf Label} functions.
\initials{LDF 2005.01.31.}

\LOG
\initials{LDF 2005.01.31.}
Added this section.
\ENDLOG

@q ** (2) Default Constructor.@> 
@*1 Default Constructor.
\initials{LDF 2005.01.31.}

\LOG
\initials{LDF 2005.01.31.}
Added this function.

\initials{LDF 2005.08.14.}
Now setting |Transform* transform| to 0.

\initials{LDF 2005.12.09.}
Now setting |Pen* pen = 0|.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Label| functions@>=
Label(void);

@
@<Define |Label| functions@>=
Label::Label(void)
{
   pt         = 0;
   dot        = false;
   text       = "";
   position   = "";

   transform  = 0;
   pen  = 0;

   text_color = 0;
   dot_color  = 0;

   return;

}  /* End of |Label::Label(void)| definition.  */

@q ** (2) Destructor.@> 
@*1 Destructor.
\initials{LDF 2005.01.31.}

\LOG
\initials{LDF 2005.01.31.}
Added this function declaration.  This function must be 
defined in \filename{points.web}, because it calls |delete| on 
the data member |Point* pt|, while |Point| is an incompletely defined
type in this file (\filename{pictures.web}). 
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Label| functions@>=
~Label(void);

@q ** (2) Declarations for {\bf Label} functions.@>
@*1 Declarations for {\bf Label} functions.
\initials{LDF Undated.}

These must be defined in \filename{points.web},
because they require operations on |pt|, and |Point| is an incomplete
type in this file.
\initials{LDF Undated.}

\LOG 
\initials{LDF 2002.10.23.}  
Added arguments |proj| and |factor|.

\initials{LDF 2004.05.25.}  
Added |Scanner_Node| argument.  
\ENDLOG 

@<Declare |Label| functions@>=

void output(Scanner_Node s, const Focus& f, const unsigned short proj,
            real factor, const Transform& t);

Label* get_copy() const;

@q * (0) Picture. @>
@** Picture.
@f Picture int

@q * (1) Picture class definition.@>
@* {\bf Picture} class definition.
\initials{LDF 2002.08.06.}  Note that |Label| has a |public static| data member
named |DO_LABELS|, which is used for globally enabling or suppressing
putting |Labels| onto |Pictures| (see above).

|Picture::do_labels|, on the other hand, is for enabling or
suppressing the output of |Labels| for a single |Picture|.  
If a |Picture| is output when |do_labels| is |false| for that
|Picture|, the |Labels| are not output.  However, the |Labels| are
still on the |Picture|.  If |do_labels| is reset to |true| and the
|Picture| is output again, the |Labels| {\it will\/} be output this time.
 
\LOG
\initials{LDF 2002.04.25.}  Added |do_labels|.  It's set
to |true| in the constructors and can be set to
|false| using |suppress_labels|. 

\initials{LDF 2004.06.19.}
Added |pthread_mutex_t mutex| and |pthread_cond_t cond_var|.

\initials{LDF 2004.06.28.}
Added the |public static| data members 
|default_projection|, |default_factor|, |default_sort_value|, 
|default_do_warnings|, |default_min_x_proj|, |default_max_x_proj|, 
|default_min_y_proj|, |default_max_y_proj|, |default_min_z_proj|, 
and |default_max_z_proj|.  They are used in the parser rules for 
``{\bf output}'' and ``{\bf endfig}''
for the default arguments to |Picture::output|.

\initials{LDF 2004.06.29.}
Removed |pthread_mutex_t mutex| and 
|pthread_cond_t cond_var|.  Now deriving |Picture| from 
|Mutex_Type| using |public| derivation, if the preprocessor macro  
|HAVE_PTHREAD_H| is defined.  Currently not using condition variables.
\ENDLOG 

@q ** Definition.@>
                
@<Define classes@>=

class Picture

#ifdef HAVE_PTHREAD_H  
: public Mutex_Type
#endif /* |HAVE_PTHREAD_H|  */@; 

{

   friend int yyparse(yyscan_t);

@q *** Private data members.@>

@ Private data members.
\initials{LDF 2004.06.28.}
@<Define classes@>=

    Transform transform;
    vector<Shape*> shapes;
    vector<Label*> labels;
    bool do_labels;

@q *** Public data and function members.@>
@ Public data and function members.
\initials{LDF 2004.06.28.}

@<Define classes@>=

  public:

    static unsigned short default_projection;
    static real default_factor;
    static unsigned short default_sort_value;
    static bool default_do_warnings;
    static real default_min_x_proj;
    static real default_max_x_proj;
    static real default_min_y_proj;
    static real default_max_y_proj;
    static real default_min_z_proj;
    static real default_max_z_proj;

    @<Declare |Picture| functions@>@;
};

@q * Static data members. @>
@ Static data members.

\LOG
\initials{LDF 2004.06.28.} 
Added this section.
It currently initializes the 
|public static| data members 
|default_projection|, |default_factor|, |default_sort_value|, 
|default_do_warnings|, |default_min_x_proj|, |default_max_x_proj|, 
|default_min_y_proj|, |default_max_y_proj|, |default_min_z_proj|, 
and |default_max_z_proj|, which I've added today.  
They are used in the parser rules for ``{\bf output}'' 
and ``{\bf endfig}'' for the default arguments to |Picture::output|.

\initials{LDF 2005.08.25.}
Changed the values of 
|default_min_x_proj|, |default_max_x_proj|, |default_min_y_proj|,
|default_max_y_proj|, |default_min_z_proj|, and |default_max_z_proj|
to $\pm 200$, as appropriate.
\ENDLOG 

@<Initialize |static| |Picture| data members@>=

    unsigned short Picture::default_projection = Projections::persp;
    real Picture::default_factor               = 1;
    unsigned short Picture::default_sort_value = Sorting::MAX_Z;
    bool Picture::default_do_warnings          = true;
    real Picture::default_min_x_proj           = -200;
    real Picture::default_max_x_proj           =  200;
    real Picture::default_min_y_proj           = -200; 
    real Picture::default_max_y_proj           =  200;
    real Picture::default_min_z_proj           = -200;
    real Picture::default_max_z_proj           =  200;

@q * Constructors.@>
@* Constructors.

@q ** Default constructor.  (No arguments).@>
@*1 Default constructor.  (No arguments).
@^\cfunc{Picture}{Picture}@>

\LOG
\initials{LDF 2004.06.19.}
Now calling |pthread_cond_init| for |cond_var| and 
|pthread_cond_mutex| for |mutex|.

\initials{LDF 2004.06.29.}
Removed code for handling |pthread_mutex_t mutex| and 
|pthread_cond_t cond_var|.  Now deriving |Picture| from 
|Mutex_Type| using |public| derivation if the preprocessor macro  
|HAVE_PTHREAD_H| is defined.  Currently not using condition variables.
\ENDLOG 

@<Declare |Picture| functions@>=
Picture(void);

@
@<Define |Picture| functions@>= 
Picture::Picture(void)  
{

  do_labels = true;

  return;
  
}

@q ** (2) Copy constructor. @>
@ Copy constructor.
@^\cfunc{Picture}{Picture}@>
!! PORTING.  
\initials{LDF 2002.12.05.}  
Moved to \filename{points.web} because I've moved
|Picture::operator=| to \filename{points.web}, so the latter is
undefined in this file.  I've had to do these things because of
differences between the DEC compiler and the GNU compiler.

@<Declare |Picture| functions@>=
Picture(const Picture& p);

@q * (1) Destructor.@>
@* Destructor.

\LOG
\initials{LDF 2004.06.19.}
Added this function.

\initials{LDF 2004.06.29.}
Removed code for handling |pthread_mutex_t mutex| and 
|pthread_cond_t cond_var|.  Now deriving |Picture| from 
|Mutex_Type| using |public| derivation if the preprocessor macro  
|HAVE_PTHREAD_H| is defined.  Currently not using condition variables.
\ENDLOG 

@<Declare |Picture| functions@>=
~Picture(void);

@
@<Define |Picture| functions@>=
Picture::~Picture(void)
{
#if DEBUG_COMPILE
  bool DEBUG = false; /* |true| */ @; 
  if (DEBUG) 
    cerr << "Entering `Picture::~Picture()'."
         << endl;
#endif /* |DEBUG_COMPILE|  */@; 

  clear();

  return;

}

@q * (1) Assignment@>
@* Assignment.
@:!! TO DO@> TO DO:  Add {\TeX} macro for ``PORTING''.
!! PORTING.  
\initials{LDF 2002.12.05.}  
Moved to \filename{points.web} because |Picture::clear| and |Label::get_copy| are 
undefined in this file.  This didn't cause a problem with the DEC compiler, but it does
with the GNU Compiler.

@^\cofunc{Picture}{=}@>
@<Declare |Picture| functions@>=
void
operator=(const Picture& p);

@q * (1) Adding elements.@>
@* Adding elements.

@q ** (2) Add Picture.@>
@*1 Add {\bf Picture}.
@^\cofunc{Picture}{+=}@>
This function must be defined in \filename{points.web}, because it
uses |Point|, which is an incompletely defined |class| here.

\initials{LDF 2002.04.17.}
It seems to be most useful to have the argument |Picture p| be
non-|const|, in order to be able to shift it and add it to |*this|
multiple times.  For this to work, it must be possible to set
|p.transform| to the identity matrix afterwards.  It is possible to do
this explicitly by calling |reset_transform| on the |Picture|
following the call to |operator+=|, but it's more convenient to have
it done automatically.  If it turns out to be useful, I can add a
|const| version of this function.

\LOG 
\initials{LDF 2002.04.17.}  
Added this declaration.
\ENDLOG 
@<Declare |Picture| functions@>=
void   
operator+=(const Picture& p);

@q ** (2) Add {\bf Shape}.@>
@*1 Add {\bf Shape}.
@^\cofunc{Picture}{+=}@>
@<Declare |Picture| functions@>=
void 
operator+=(Shape* s);

@
@<Define |Picture| functions@>= 
void 
Picture::operator+=(Shape* s)
{
    shapes.push_back(s);
}  

@q ** (2) Add Label.@>
@*1 Add {\bf Label}.
@^\cofunc{Picture}{+=}@>
@<Declare |Picture| functions@>=
void
operator+=(Label* label);

@
@<Define |Picture| functions@>= 
void 
Picture::operator+=(Label* label)
{
    labels.push_back(label);
}  

@q * (1) Suppress Labels.@>
@* Suppress {\bf Labels}.
@^\cfunc{Picture}{suppress\_labels}@>
\initials{LDF 2002.04.25.}  Added this function.
Sometimes it's irritating
to have the labels when a |Picture| is copied and transformed, and
both the original and the transformed versions are output.
@<Declare |Picture| functions@>=
inline
void
suppress_labels()
{
  do_labels = false;
}

@q * Unsuppress Labels.@>
@ Unsuppress {\bf Labels}.
@^\cfunc{Picture}{unsuppress\_labels}@>
\LOG
\initials{LDF 2002.12.20.}  Added this function.
\ENDLOG 
@<Declare |Picture| functions@>=
inline
void
unsuppress_labels()
{
  do_labels = true;
}

@q * Kill Labels.@>
@ Kill {\bf Labels}.
@^\cfunc{Picture}{kill\_labels}@>
\LOG
\initials{LDF 2003.05.07.}  Added this function.
\ENDLOG 
@<Declare |Picture| functions@>=
void
kill_labels();

@
@<Define |Picture| functions@>=
void
Picture::kill_labels()
{
  labels.clear();
}

@q * Transformations.@>
@* Transformations.
Transformations for |Pictures| are saved up, and then performed when
the |Picture| is output.

@q ** Affine transformations.@>
@ Affine transformations.

@q *** Scale. @>
@ Scale.
@^\cfunc{Picture}{scale}@>
@<Declare |Picture| functions@>=  
Transform
scale(real x, real y = 1, real z = 1);

@
@<Define |Picture| functions@>=
Transform
Picture::scale(real x, real y, real z)
{
  return transform.scale(x, y, z);
}

@q *** Shift. (Translation.) @>
@ Shift. (Translation.)

@q **** (4) real version. @>
@ {\bf real} version. 
@^\cfunc{Picture}{shift}@>
@<Declare |Picture| functions@>=
Transform 
shift(real x, real y = 0, real z = 0);
    
@ |shift| returns a |Transform| representing the shift, {\it not\/}
|*this|. This makes it possible to apply the transformation to other
objects. 

@<Define |Picture| functions@>=
Transform 
Picture::shift(real x, real y, real z)
{
 return transform.shift(x, y, z);
}

@q **** (4) Point version. @>
@ {\bf Point} version.  
@^\cfunc{Point}{shift}@>
This function must defined in
\filename{points.web}, because |Point| is an incompletely defined type 
here. 

@<Declare |Picture| functions@>=
Transform 
shift(const Point& p);

@q *** (3) Rotation around the main axes.@>
@*2 Rotation around the main axes.
@^\cfunc{Picture}{rotate}@>
|rotate| will perform rotation about the x, y and z-axes in that
order if called with multiple, non-zero arguments. Rotation only about
the y and/or z-axis requires one or two dummy 0 arguments so that |rotate|
``knows'' about which axis (or axes) to rotate.
@<Declare |Picture| functions@>=
Transform 
rotate(const real x, const real y = 0, const real z = 0);


@q *** (3) Rotation around an arbitrary axis.@>
@*2 Rotation around an arbitrary axis.
@^\cfunc{Picture}{rotate}@>
\initials{LDF 2002.05.03.}  

This function is defined in
\filename{points.web}, because it has |Point| arguments, and |Point|
is an incomplete type in this file.
\initials{LDF 2002.05.03.}  

\LOG
\initials{LDF 2002.05.03.}  
Added this declaration.  

\initials{LDF 2003.05.02.}  
Changed name of this function from |rotate_around|
to |rotate|.  This function now overloads |rotate| with three
|real| arguments.
\ENDLOG 

@<Declare |Picture| functions@>=
Transform 
rotate(const Point& p0, const Point& p1,
              const real angle = 180);

/* Remember to add shear! */

@q *** (3) Shear. Remember to add!!@>

@q ** (2) Set transform.@>
@*1 Set {\bf transform}.
@^\cfunc{Picture}{set\_transform}@>

\LOG
\initials{LDF 2003.01.17.}  
Made non-inline and changed |t| from plain
|Transform| to |const Transform&|.
\ENDLOG 

@<Declare |Picture| functions@>=
Transform
set_transform(const Transform& t);

@
@<Define |Picture| functions@>=
Transform
Picture::set_transform(const Transform& t)
{  
  transform = t;
  return t;
}

@q ** Multiplying |transform|.@>
@ Multiplying {\bf transform}.
@^\cofunc{Picture}{*=}@>
\LOG
\initials{LDF 2003.01.17.}  Changed |t| from plain |Transform| to 
|const Transform&|. 
\ENDLOG 
@<Declare |Picture| functions@>=
Transform
operator*=(const Transform& t);


@q * Show.@>
@* Show.
@^\cfunc{Picture}{show}@>

\LOG
\initials{LDF 2004.06.23.}
Now locking and unlocking |mutex| before showing the |Picture|.

\initials{LDF 2004.06.23.}
Changed return value from |void| to |int|.  This function currently 
returns 0 upon success, and 1 if |pthread_mutex_lock| 
or |pthread_mutex_unlock| fails.

\initials{LDF 2004.07.16.}
Removed code for locking and unlocking |mutex|.  Code that calls this function
should ensure that this is done.
\ENDLOG 

@q ** Declaration.@>

@<Declare |Picture| functions@>=
int
show(string text = "", bool stop = false);

@q ** Definition.@>

@
@<Define |Picture| functions@>=
int
Picture::show(string text, bool stop)
{
  int status = 0;

#if DEBUG_COMPILE
  bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

    cerr << "Showing picture: " << text << "\n" ;
    transform.show("transform:");
    cerr << "shapes.size() == " << shapes.size() << endl ;
    cerr << "labels.size() == " << labels.size() << endl ;
    cerr << "do_labels == " << do_labels << endl ;
    cerr << "Showing shapes.\n";

    for (vector<Shape*>::iterator iter = shapes.begin();
         iter != shapes.end(); ++iter)
      (**iter).show();
    if (stop)
      {
          cerr << "In `Picture::show':  Type <RETURN> to continue.\n";
          getchar(); /* Don't delete this!  */ 
      }
    cerr << "Done showing picture.\n";

@q *** Exit function successfully.@>
@ Exit function successfully.
\initials{LDF 2004.06.23.}

@<Define |Picture| functions@>=

#if DEBUG_COMPILE
   if (DEBUG)
     cerr << "Exiting `Picture::show' with return value 0 "
          << "(success)." << endl ; 
#endif /* |DEBUG_COMPILE|  */@; 

  return 0;

} /* End of |Picture::show| definition  */

@q * Show transform.@>
@ Show {\bf transform}.
@^\cfunc{Picture}{show\_transform}@>
@<Declare |Picture| functions@>=
void
show_transform(string text = "Transform from Picture:");

@
@<Define |Picture| functions@>= 
void
 Picture::show_transform(string text)
{
  transform.show(text);
}

@q * (1) Output.@>
@* Output.
@^\cfunc{Picture}{output}@>

\LOG
\initials{LDF 2002.09.18.}  
Added the optional |real| arguments |min_x_proj|,
|max_x_proj|, etc.  The purpose of these is to suppress output of
|Shapes| whose |projective_extremes| fall outside of these limits,
whereby the ``z'' values are not currently checked.
They are not set for a particular |Focus| or |Picture|, but for a
particular invocation of |output|.  I believe the default values are
sufficiently generous, but they can always be changed if it turns out
that they're not.  Alternatively, I could store them in the |Picture|
or the |Focus|, if that turns out be more convenient.  They are
checked in |Picture::check_projection_limits|.  

\initials{LDF 2004.05.25.}  
Added |Scanner_Node| argument.

\initials{LDF 2004.06.07.}  
Got rid of the version of this function that didn't
take a |Focus| argument, because I've gotten rid of |default_focus|.  
I may replace |default_focus| with a predefined variable defined in 
|Scanner_Type::create|.  

\initials{LDF 2005.03.14.}
Added the optional argument 
|const unsigned short surface_hiding_value| with default 1.

\initials{LDF 2005.04.18.}
Changed the default of the argument 
|const unsigned short sort_value| from |Sorting::MAX_Z| to
|Sorting::MIN_Z|.  This doesn't really have any effect, because
the |sort_value| is set in |Scanner_Type::extract_picture_output_args|
in \filename{sctpfncs.web}.  Therefore, any change to the defaults for
optional arguments here should be reflected by changes in that function.

\initials{LDF 2005.08.25.}
Now using |default_min_x_proj|, |default_max_x_proj|
|default_min_y_proj|, |default_max_y_proj|, |default_min_z_proj|,
and |default_max_z_proj| as the default values for the corresponding
arguments instead of using explicit values.
\ENDLOG 

\TODO
@q { @>
@:TO DO}{{\bf TO DO}@>
@q } @> 
@q !! TO DO:  @>
\initials{LDF 2004.07.13.}
Change return value so I can test whether the function succeeds.
\ENDTODO 

@q **** (4) Declaration.  @>

@<Declare |Picture| functions@>=   
void  
output(Scanner_Node s,
       const Focus& f,
       const unsigned short projection = Projections::persp,
       real factor = 1,
       const unsigned short sort_value = Sorting::MIN_Z,
       const bool do_warnings = true,
       const real min_x_proj = default_min_x_proj,
       const real max_x_proj = default_max_x_proj,
       const real min_y_proj = default_min_y_proj,
       const real max_y_proj = default_max_y_proj,
       const real min_z_proj = default_min_z_proj,
       const real max_z_proj = default_max_z_proj,
       const unsigned short surface_hiding_value = 1,
       bool do_metafont = false);

@q * Clear.@>
@ Clear.  Defined in \filename{points.web}.
@^\cfunc{Picture}{clear}@>
@<Declare |Picture| functions@>=
void
clear();

@q * Reset transform.@>
@ Reset {\bf transform}.
@^\cfunc{Picture}{reset\_transform}@>
\initials{LDF 2002.04.17.}  Added this function.
@<Declare |Picture| functions@>=
inline
void
reset_transform()
{
  transform.reset();
}


@q ** (2) @>

@q * Rotate label positions.@>
@ Rotate label positions.  
@^\cfunc{Picture}{rotate_label_positions}@>

\LOG
\initials{LDF 2021.10.16.}
Added this function.
\ENDLOG

@q *** (3) Declaration @>

@<Declare |Picture| functions@>=
int
rotate_label_positions(vector<real> &v);

@q *** (3) Definition @>
@
@<Define |Picture| functions@>=
int
Picture::rotate_label_positions(vector<real> &v)
{
@q **** (4) @>

   bool DEBUG = false; /* true  */

   using namespace Scan_Parse;

   stringstream cerr_strm;

@q **** (4) @>

#if DEBUG_COMPILE
   if (DEBUG)
   { 
       cerr_strm << "Entering `Picture::rotate_label_positions'."
                 << endl;

       log_message(cerr_strm); 
       cerr_message(cerr_strm); 
       cerr_strm.str(""); 

   }  
#endif /* |DEBUG_COMPILE|  */@; 

@q **** (4) @>
@
@<Define |Picture| functions@>=

   real r;
   real r0 = 0;
   real r1 = 0;
   real r2 = 0;
   
#if 0 
   for (vector<real>::iterator iter = v.begin(); iter != v.end(); ++iter)
   {
       cerr << "*iter == " << *iter << endl;
   }
#endif 

   if (v.size() > 0)
   {
       r0 = v[0];
   }
   if (v.size() > 1)
   {
       r1 = v[1];
   }
   if (v.size() > 2)
   {
       r2 = v[2];
   }

   if (r0 == 0 && r1 == 0 && r2 == 0)
   {
       /* Do nothing */
   }
   else if ((r0 == 0 && r1 == 0) || (r0 == 0 && r2 == 0) || (r1 == 0 && r2 == 0))
   {
      r = r0;
      if (r == 0)
        r = r1;
      if (r == 0)
        r = r2;         
   }
   if (r == 0)  /* This shouldn't be possible */
   {
      /* Do nothing */
   }

@q **** (4) @>

   else
   {
@q ***** (5) @>

#if 0 
       cerr << "Only one value is non-zero:  r == " << r << endl;
#endif 

       if (r == floor(r))
       {
@q ****** (6) @>

#if 0 
          cerr << "r == floor(r)" << endl;
#endif 

          int i = static_cast<int>(floor(r));

          if (i == 0 || i == 360)
             return 0;

          if (i % 90 == 0)
          {
@q ******* (7) @>

#if 0 
              cerr << "i % 90 is 0." << endl;
#endif 

              vector<string> string_vector;
              string_vector.push_back("top");
              string_vector.push_back("ulft");
              string_vector.push_back("lft");
              string_vector.push_back("llft");
              string_vector.push_back("bot");
              string_vector.push_back("lrt");
              string_vector.push_back("rt");
              string_vector.push_back("urt");
              string_vector.push_back("top");
              string_vector.push_back("ulft");
              string_vector.push_back("lft");
              string_vector.push_back("llft");
              string_vector.push_back("bot");
              string_vector.push_back("lrt");
              string_vector.push_back("rt");
              string_vector.push_back("urt");
              string_vector.push_back("top");

              vector<string>::iterator s_iter;
              vector<string>::reverse_iterator s_r_iter;

              for (vector<Label*>::iterator iter = labels.begin();
                   iter != labels.end();
                   ++iter)
              {
#if 0
                 cerr << "*** Beginning of loop." << endl;
#endif
                 s_iter   = string_vector.begin();
                 s_r_iter = string_vector.rbegin();

#if 0 
                 cerr << "(*iter)->position == " << (*iter)->position << endl;
#endif 
                 
                 if ((*iter)->position == "")
                 {
#if 0 
                    cerr << "position is empty.  Continuing." << endl;
#endif 
                    continue;
                 }
                 else if ((*iter)->position == "top")
                 ;  /* Do nothing */
                 else if ((*iter)->position == "ulft") 
                 {
                    s_iter++;
                    s_r_iter += 7;
                 }
                 else if ((*iter)->position == "lft") 
                 {
                    s_iter += 2;
                    s_r_iter += 6;
                 }
                 else if ((*iter)->position == "llft") 
                 {
                    s_iter += 3;
                    s_r_iter += 5;
                 }
                 else if ((*iter)->position == "bot") 
                 {
                    s_iter += 4;
                    s_r_iter += 4;
                 }
                 else if ((*iter)->position == "lrt") 
                 {
                    s_iter += 5;
                    s_r_iter += 3;
                 }
                 else if ((*iter)->position == "rt") 
                 {
                    s_iter += 6;
                    s_r_iter += 2;
                 }
                 else if ((*iter)->position == "urt") 
                 {
                    s_iter += 7;
                    s_r_iter++;

                 }
                 if (r == 90)
                 {
                    s_iter += 2;
                    (*iter)->position = *s_iter;
                 }
                 else if (r == -90)
                 {
                    s_r_iter += 2;
                    (*iter)->position = *s_r_iter;
                 }
                 else if (r == 180)
                 {
                    s_iter += 3;
                    (*iter)->position = *s_iter;
                 }
                 else if (r == -180)
                 {
                    s_r_iter += 3;
                    (*iter)->position = *s_r_iter;
                 }
                 else if (r == 270)
                 {
                    s_iter += 5;
                    (*iter)->position = *s_iter;
                 }
                 else if (r == -270)
                 {
                    s_r_iter += 5;
                    (*iter)->position = *s_r_iter;
                 }
#if 0
                 cerr << "*s_iter == " << *s_iter << endl
                      << "*s_r_iter == " << *s_r_iter << endl
                      << "(*iter)->position == " << (*iter)->position << endl
                      << "*** End of loop." << endl;
#endif 

              }  /* |for| */
              
@q ******* (7) @>
          }
          
@q ****** (6) @>

#if 0          
          else
              cerr << "floor(r) % 90 is not 0." << endl;
#endif 

       }  /* |if (r == floor(r))| */

@q ***** (5) @>

#if 0 
       else 
       {
          cerr << "r != floor(r)" << endl;
       }
#endif 

@q ***** (5) @>

   } /* |else| */

@q **** (4) @>
@
@<Define |Picture| functions@>= 

#if DEBUG_COMPILE
   if (DEBUG)
   { 
       cerr_strm << "Exiting `Picture::rotate_label_positions' successfully with return value 0."
                 << endl;

       log_message(cerr_strm); 
       cerr_message(cerr_strm); 
       cerr_strm.str(""); 

   }  
#endif /* |DEBUG_COMPILE|  */@; 

   return 0;

} /* End of |Picture::rotate_label_positions| definition  */

@q * Global variables@>
@ Global variables.
@<Global variables@>= 
Picture* current_picture;

@
@<Declarations for the header file@>=
extern Picture* current_picture;

@q * (1) Putting Picture and Label together.@>
@* Putting {\bf Picture} and {\bf Label} together.
\initials{LDF Undated.}

@ This is what's compiled.
\initials{LDF Undated.}

\LOG
\initials{LDF 2005.01.31.}
Now including |@<Define |Label| functions@>|.
\ENDLOG 

@c
@<Include files@>@;
@<Define classes@>@;
@<Initialize |static| |Label| data members@>@;
@<Initialize |static| |Picture| data members@>@;
@<Global variables@>@;
@<Define |Picture| functions@>@;
@<Define |Label| functions@>@;

@ This is what's written to \filename{pictures.h}.
@(pictures.h@>=
@<Define classes@>@;
@<Declarations for the header file@>@;

@q * Emacs-Lisp code for use in indirect buffers when using the          @>
@q   GNU Emacs editor.  The local variable list is not evaluated when an @>
@q   indirect buffer is visited, so it's necessary to evaluate the       @>
@q   following s-expression in order to use the facilities normally      @>
@q   accessed via the local variables list.                              @>
@q   \initials{LDF 2004.02.12}.                                          @>
@q   (progn (cweb-mode) (outline-minor-mode t) (setq fill-column 80))    @>

@q * Local variables for Emacs.@>
@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q run-gxx-on-file:"main.c" @>
@q run-cweb-on-file:"main.web" @>
@q run-cweave-on-file:"3DLDF.web" @>
@q makefile:"makefile" @>
@q executable-name:"pp" @>
@q use-g++:t @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q End: @>
