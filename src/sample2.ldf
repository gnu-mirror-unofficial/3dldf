%%%% sample2.ldf
%%%% Created by Laurence D. Finston (LDF) Mon Sep 20 14:50:43 CEST 2004

%% * (1) Copyright and License.

%%%% This file is part of GNU 3DLDF, a package for three-dimensional drawing.  
%%%% Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 
%%%% 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022 The Free Software Foundation  

%%%% GNU 3DLDF is free software; you can redistribute it and/or modify 
%%%% it under the terms of the GNU General Public License as published by 
%%%% the Free Software Foundation; either version 3 of the License, or 
%%%% (at your option) any later version.  

%%%% GNU 3DLDF is distributed in the hope that it will be useful, 
%%%% but WITHOUT ANY WARRANTY; without even the implied warranty of 
%%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
%%%% GNU General Public License for more details.  

%%%% You should have received a copy of the GNU General Public License 
%%%% along with GNU 3DLDF; if not, write to the Free Software 
%%%% Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA 

%%%% GNU 3DLDF is a GNU package.  
%%%% It is part of the GNU Project of the  
%%%% Free Software Foundation 
%%%% and is published under the GNU General Public License. 
%%%% See the website http://www.gnu.org 
%%%% for more information.   
%%%% GNU 3DLDF is available for downloading from 
%%%% http://www.gnu.org/software/3dldf/LDF.html.

%%%% Please send bug reports to Laurence.Finston@gmx.de
%%%% The mailing list help-3dldf@gnu.org is available for people to 
%%%% ask other users for help.  
%%%% The mailing list info-3dldf@gnu.org is for sending 
%%%% announcements to users. To subscribe to these mailing lists, send an 
%%%% email with ``subscribe <email-address>'' as the subject.  

%%%% The author can be contacted at: 

%%%% Laurence D. Finston 
%%%% c/o Free Software Foundation, Inc. 
%%%% 51 Franklin St, Fifth Floor 
%%%% Boston, MA  02110-1301  
%%%% USA

%%%% Laurence.Finston@gmx.de



%% * (1) Beginning of 3DLDF code.

%verbatim_metapost "prologues := 3;";

%verbatim_metapost "verbatimtex \font\large=cmr12 scaled \magstep2 etex;";

%verbatim_metapost "verbatimtex \font\att=cmr17 scaled \magstep2 etex;";

%%verbatim_metapost "verbatimtex \font\tt=cmr17 scaled \magstep2 etex;";

pickup pencircle scaled (.5mm, .5mm, .5mm);

pen dot_pen;

dot_pen := pencircle scaled (1.25mm, 1.25mm, 1.25mm);


%% * (1) Spirograph 

%% ** (2)

path frame;

numeric frame_wd;
numeric frame_ht;

%% *** (3) Frame path

frame_wd := 19cm;
frame_ht := 26cm;

frame := origin -- (frame_wd, 0) -- (frame_wd, 0, frame_ht) -- (0, 0, frame_ht) -- cycle;

transform frame_transform;

frame_transform := identity shifted (-.5frame_wd, 0, -.5frame_ht);

frame *= frame_transform;

%% ** (2)

path A;
path AA;
path AAA;

circle c;

circle save_c;

ellipse e[];

pickup pencircle scaled (.5mm, .5mm, .5mm);

set e0 with_point_count 32;
scale e0 (8, 0, 5);

set c with_diameter 1.5 with_point_count 32;

point p[];
path q[];

for i = 0 upto 31:
   p[i] := get_point (i) e0;
   q0 += p[i];
   q0 += --;
endfor;

A += ..;
A += p0;

q0 += cycle;

p116 := p0;
shift p116 by (get_radius c, 0, 0);

p117 := p0;

point m;

m := p117;

shift c by p116;

save_c := c;


%% ** (2)

picture label_picture;

beginfig(0); 

label.rt(0, p0);
dotlabel.rt(1, p1);
dotlabel.urt(2, p2);
dotlabel.urt(3, p3);
dotlabel.top(4, p4);
dotlabel.top(5, p5);
dotlabel.ulft(6, p6);
dotlabel.ulft(7, p7);
dotlabel.lft(8, p8);
dotlabel.llft(9, p9);
dotlabel.llft(10, p10);
dotlabel.bot(11, p11);
dotlabel.bot(12, p12);
dotlabel.bot(13, p13);
dotlabel.lrt(14, p14);
dotlabel.lrt(15, p15);

label_picture := current_picture;


endfig with_projection parallel_x_z no_sort; 

%% ** (2) Figure 1

beginfig(1); 

draw frame;

draw q0;

draw c;

point U;
point S;

U := get_center c;
S := U shifted (0, 1);

dotlabel.top("U", U);
dotlabel.bot("S", S);

%% *** (3)

drawdot p0 with_color red with_pen dot_pen;

%draw e0;

current_picture += label_picture;

endfig with_projection parallel_x_z no_sort; 

%% ** (2)

macro roll;

point W;

W := p116;

def roll (C, R, WW, B, BB, BBB) 
         {path E, point P, point Q, numeric DIV, numeric FIG} =

   a := circumference C;

   message "a:";
   show a;

   b := magnitude (Q - P);

   message "b:";
   show b;

   g := b / a;

   message "g:";
   show g;

   d := 360 g / a;

   message "d:";
   show d;

   e := d / DIV;

   message "e:";
   show e;

   h := get_radius C;

   transform T;

   point V[];

   for i = 1 upto DIV:

      beginfig(FIG); 

         message "FIG:"; 
         show FIG;

         draw frame;
         draw E;

         T := identity rotated_around (U, S) d;
         R *= C *= T;

         V0 := ((i / DIV) * (Q - P)) shifted by P;

         V1 := V0 shifted (0, 1);

         V2 := unit_vector (Q - P);

         V2 *= h;

         T := identity shifted by V0;
 
         rotate_around T (V0, V1) -90;

         V2 *= T;

         message "V2:"; 
         show V2;

         dotlabel.lft("$V_0$", V0);
         dotlabel.top("$V_2$", V2);

         B += ..;

         B += R shifted by (V2 - WW);

         draw B;

         drawdot R shifted by (V2 - WW) with_color red with_pen dot_pen;

         draw C shifted by (V2 - WW);

         current_picture += label_picture;

      endfig with_projection parallel_x_z no_sort;

      FIG += 1;

    endfor;

    

enddef;

roll (c, m, W, A, AA, AAA) {q0, p0, p1, 20, 2};


roll (c, m, W, A, AA, AAA) {q0, p1, p2, 20, 22};
roll (c, m, W, A, AA, AAA) {q0, p2, p3, 20, 42};
roll (c, m, W, A, AA, AAA) {q0, p3, p4, 20, 62};
roll (c, m, W, A, AA, AAA) {q0, p4, p5, 20, 82};
roll (c, m, W, A, AA, AAA) {q0, p5, p6, 20, 102};
% roll (c, m, W, A, AA, AAA) {q0, p6, p7, 20, 32};
% roll (c, m, W, A, AA, AAA) {q0, p7, p8, 20, 37};

draw A;


%% *** (3)


%% ** (2) End

end;


%% * (1) End of 3DLDF code

%% * (1) Emacs-Lisp code for use in indirect buffers when using the          
%%       GNU Emacs editor.  The local variable list is not evaluated when an 
%%       indirect buffer is visited, so it's necessary to evaluate the       
%%       following s-expression in order to use the facilities normally      
%%       accessed via the local variables list.                              
%%       \initials{LDF 2004.02.12}.                                          

%% (progn (metafont-mode) (outline-minor-mode t) (setq fill-column 80) (ignore '(  
%% )) (setq outline-regexp "%% [*\f]+"))



%% * (1) Local variables for Emacs.

%% Local Variables:
%% mode:Metafont
%% eval:(outline-minor-mode t)
%% abbrev-mode:t
%% eval:(read-abbrev-file "~/.abbrev_defs")
%% outline-regexp:"%% [*\f]+"
%% End:
