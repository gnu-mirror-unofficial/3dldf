@q cnepspng.web @>

@q Created by Laurence Finston (LDF) Do Apr 21 13:53:10 CEST 2005 @>

@q * (0) Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing. @>
@q Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, @>
@q 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021 The Free Software Foundation @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 2 of the License, or @>
@q (at your option) any later version. @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details. @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA@>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html. @>
 
@q (``@@'' stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to bug-3dldf@@gnu.org @>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston @>
@q Kreuzbergring 41 @>
@q D-37075 Goettingen @>
@q Germany @>

@q Laurence.Finston@@gmx.de (@@ stands for a single ``at'' sign.)@>


\def\title{cnepspng}

\def\topofcontents{\centerline{\titlefont cnepspng}%
\medskip
\centerline{\titlefont Version 1.2.0}%
\medskip
\centerline{\titlefont by Laurence D. Finston}%
\medskip
\centerline{{\rm August 2005}}%
\vskip.7in
  \vfill} % this material will start the table of contents page

\input 3DLDFprg.mac

@q * (0) cnepspng.web.@>
@** \.{cnepspng}.  
Convert Encapsulated PostScript to structured PostScript 
and PNG\quad ({\tt cnepspng\PERIOD web}).\hfil

\LOG
\initials{LDF 2005.04.22.}
This program now works.  It could be refined, though.
\ENDLOG 

@q * (1) Copyright and License.@>
@* Copyright and License.\hfil\break
\begingroup
\parskip=10pt
Copyright \copyright{} 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011 
The Free Software Foundation

See the section |@<GNU Free Documentation License@>| for the copying
conditions that apply {\bf to this document}.

{\bf The program} GNU 3DLDF documented here
is free software; you can redistribute it and/or modify 
it under the terms of the GNU General Public License as published by 
the Free Software Foundation; either version 2 of the License, or 
(at your option) any later version. 
%%
See the section |@<GNU General Public License@>| in this document.

GNU 3DLDF is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
GNU General Public License for more details. 

You should have received a copy of the GNU General Public License 
along with 3DLDF; if not, write to the Free Software 
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

GNU 3DLDF is a GNU package. 
It is part of the GNU Project of the 
Free Software Foundation
and is published under the GNU General Public License.
See the website {\tt http://www.gnu.org}
for more information.  
GNU 3DLDF is available for downloading from
{\tt http://www.gnu.org/software/3dldf/LDF.html}.

Please send bug reports to:\hfil\break
{\tt Laurence.Finston@@gmx.de}

The mailing list {\tt help-3DLDF@@gnu.org} is available for people to
ask other users for help. 
The mailing list {\tt info-3DLDF@@gnu.org} is for sending
announcements to users. To subscribe to these mailing lists, send an
email with ``subscribe \<email-address>'' as the subject. 

The author can be contacted at: 

\begingroup
\obeylines
\parskip=0pt
Laurence D. Finston 
Kreuzbergring 41 
D-37075 Goettingen 
Germany 
\vskip5pt
Laurence.Finston@@gmx.de 
\vskip5pt
Web site: {\tt http:://wwwuser.gwdg.de/\char`\~lfinsto1}
\endgroup
\endgroup


@q * (1) Instructions for use.@>
@* Instructions for use.
\initials{LDF 2005.05.02.}

\LOG
\initials{LDF 2005.05.02.}
Copied the text in this section from 
\filename{\char`\~/EXAMPLES/CROPPING/00README} and edited it.
\ENDLOG

@q ** (2) Generating the executable 'cnepspng'.@> 
@*1 Generating the executable \.{cnepspng}.
\initials{LDF 2005.04.26.}

To generate the executable \.{cnepspng}, execute the following 
commands from  the shell:\hfil\break
\.{ctangle cnepspng.web}\hfil\break
\.{gcc -o cnepspng -g cnepspng.c}\hfil\break

@q ** (2) Invoking \.{cnepspng}.@> 
@*1 Invoking \filename{cnepspng}.
\initials{LDF 2005.05.02.}


Given the files
\filename{crop\_0.1}, \filename{crop\_0.2},
\filename{crop\_0.3}, and \filename{crop\_0.4},
\.{cnepspng} creates the following files:

\begingroup
\parindent=0pt
\obeylines
\filename{crop\_0\_1.ps}
\filename{crop\_0\_2.ps}
\filename{crop\_0\_3.ps}
\filename{crop\_0\_4.ps}
\endgroup

\.{cnepspng} takes 1 required argument, namely the filename of the EPS
files without the extension, e.g., \filename{crop\_0}:

\begingroup
\obeylines
\parindent=0pt

\.{cnepspng crop\_0}

\noindent
The other arguments are optional:


Argument 2:  The number of the first EPS file to be processed, default 1.

Argument 3:  The number of the last EPS file, default 100.

             \.{cnepspng} loops from |n| $\equiv$ argument 2 to |n| % 
             $\equiv$ argument 3. %
             It breaks off if \<filename>.|n| doesn't exist.

Argument 4:  The size of the border to the left and right of the image,
             default 0pt.

Argument 5:  The size of the border at the top and bottom of the image,
             default 0pt.


For example, to create structured PostScript from 
\filename{image.2}, \filename{image.3}, \filename{image.4}, 
and \filename{image.5} with 2.5cm of blank space at the left 
and right and 37.65pc at the top and bottom, call \.{cnepspng} 
like this:

\.{cnepspng image 2 5 2.5cm 37.65pc}
\endgroup

\LOG
\initials{LDF 2005.05.08.}
Changed the text above to reflect the fact that I've commented-out 
the code that converts the EPS files to PNG.
\ENDLOG 


@q * (1) Include files.@> 

@ Include files.
\initials{LDF 2005.04.21.}

@<Include files@>=

#include <ctype.h>
#include <getopt.h>
#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <strings.h>
#include <time.h>

@q * (1) Preprocessor macros.@> 
@* Preprocessor macros.
\initials{LDF 2005.08.18.}

\LOG
\initials{LDF 2005.08.18.}
Added this section.
\ENDLOG

@<Preprocessor macros@>=

#define DEBUG_COMPILE 1 

@q * (1) Type declarations.@> 
@* Type declarations.
\initials{LDF 2005.04.21.}

@<Type declarations@>=

typedef char Byte;
typedef Byte Signed_Byte;
typedef unsigned char Unsigned_Byte;

@q * (1) Global constants.@> 
@ Global constants.
\initials{LDF 2005.04.21.}

@<Global constants@>=

   const Unsigned_Byte  MAX_FILENAME      =   32;
   const unsigned short MAX_SYSTEM_STRING = 1024;
   const unsigned short MAX_DATESTAMP     =  128;
   const unsigned short MAX_BORDER_STRING =  128;
   const unsigned short MAX_COLOR_STRING  =  128;
   const unsigned short MAX_ZEROES_STRING =  16;

   const unsigned short DEFAULT_ZEROES =     2;

   const unsigned short MAX_COERCE_STRING    =  32;
   const unsigned short MAX_OUTPUT_EXTENSION =   8;

   const Unsigned_Byte SILENT             =   0;
   const Unsigned_Byte QUIET              =   1;
   const Unsigned_Byte VERBOSE            =   2;


#if 0 
   const char tex_file_header[] = "\\input epsf \n\
\\def\\epsfsize#1#2{#1}\n\
\n\
\\nopagenumbers\n\
\\parindent=0pt\n\
\n\
\\hsize=210mm\n\
\\vsize=297mm\n\
\n\
\\advance\\voffset by -1in\n\
\\advance\\hoffset by -1in\n\n";
#endif 

   const char tex_file_header[] = "\\input epsf \n\
\\def\\epsfsize#1#2{#1}\n\
\n\
\\nopagenumbers\n\
\\parindent=0pt\n\
\n\
\\hsize=297mm\n\
\\vsize=420mm\n\
\n\
\\advance\\voffset by -1in\n\
\\advance\\hoffset by -1in\n\n";


@q * (1) Global variables.@> 
@ Global variables.
\initials{LDF 2005.08.18.}

@<Global variables@>=

   Unsigned_Byte VERBOSITY;

@q * (1) Local variables for |main()|@> 
@* Local variables for {\bf main()}.
\initials{LDF 2005.08.18.}

\LOG
\initials{LDF 2005.08.18.}
Added this section.
\ENDLOG

@<Local variables for |main()|@>=

   bool DEBUG = false; /* |true|  */

   int status;

   char filename_stem[MAX_FILENAME];
   int start_value = -1;
   int end_value   = -1;

   char system_string[MAX_SYSTEM_STRING];

   char vertical_border[MAX_BORDER_STRING];
   char horizontal_border[MAX_BORDER_STRING];

   Unsigned_Byte eps_output  = 0;
   Unsigned_Byte jpeg_output = 0;
   Unsigned_Byte pnm_output  = 2;
   Unsigned_Byte png_output  = 0;
   Unsigned_Byte ps_output   = 0;

   char fill_string[MAX_COLOR_STRING];
   char opaque_string[MAX_COLOR_STRING];
   char transparent_string[MAX_COLOR_STRING];

   signed int zeroes = -1;
   char zeroes_string[MAX_ZEROES_STRING];

   unsigned int height_value = 0;
   unsigned int width_value  = 0;
   
   Unsigned_Byte coerce_value = 0;

   char coerce_string[MAX_COERCE_STRING];
   char output_extension[MAX_OUTPUT_EXTENSION];


@q * (1) Command line options.@> 
@* Command line options.
\initials{LDF 2005.08.18.}

\LOG
\initials{LDF 2005.08.18.}
Added this section.
\ENDLOG


@q * (1) Declarations for command line options.@> 
@* Declarations for command line options.
\initials{LDF 2005.08.18.}

\LOG
\initials{LDF 2005.08.18.}
Added this section.
\ENDLOG

@<Declarations for command line options@>=

  int option_ctr;
  int digit_optind = 0;

  const unsigned short COERCE_INDEX               =  0;
  const unsigned short END_INDEX                  =  1;
  const unsigned short FILL_INDEX                 =  2; 
  const unsigned short HEIGHT_INDEX               =  3;
  const unsigned short HELP_INDEX                 =  4;
  const unsigned short HORIZONTAL_BORDER_INDEX    =  5;
  const unsigned short NO_ZEROES_INDEX            =  6;
  const unsigned short OPAQUE_INDEX               =  7;
  const unsigned short OUTPUT_FORMAT_INDEX        =  8;
  const unsigned short QUIET_INDEX                =  9;
  const unsigned short SILENT_INDEX               = 10;
  const unsigned short START_INDEX                = 11;
  const unsigned short TRANSPARENT_INDEX          = 12;
  const unsigned short VERBOSE_INDEX              = 13;
  const unsigned short VERSION_INDEX              = 14;
  const unsigned short VERTICAL_BORDER_INDEX      = 15;
  const unsigned short WIDTH_INDEX                = 16;
  const unsigned short ZEROES_INDEX               = 17;

  static struct option long_options[] = {
    {"coerce", 2, 0, 0},
    {"end", 1, 0, 0},
    {"fill", 1, 0, 0},
    {"height", 1, 0, 0},
    {"help", 0, 0, 0},
    {"horizontal-border", 2, 0, 0},
    {"no-zeroes", 0, 0, 0},
    {"opaque", 1, 0, 0},
    {"output-format", 1, 0, 0},
    {"quiet", 0, 0, 0},
    {"silent", 0, 0, 0},
    {"start", 1, 0, 0},
    {"transparent", 1, 0, 0},
    {"verbose", 0, 0, 0},
    {"version", 0, 0, 0},
    {"vertical-border", 2, 0, 0},
    {"width", 1, 0, 0},
    {"zeroes", 1, 0, 0},
    {0, 0, 0, 0}
  };
  
  int option_index = 0;
  int this_option_optind = optind ? optind : 1;  


@q * (1) Process command line options.@> 
@* Process command line options.
\initials{LDF 2005.08.18.}

\LOG
\initials{LDF 2005.08.18.}
Added this section.
\ENDLOG


@<Process command line options@>=

   while (1) 
      {


    option_ctr = getopt_long_only (argc, argv, "cefhoqstvwz",
                          long_options, &option_index);

@q ** (2)@> 

    if (option_ctr == -1)
       {
          if (DEBUG)
             printf("No more option arguments.\n");
          break;
       }

@q ** (2)@> 

    if (option_ctr == 0)
      {
        if (DEBUG)
          {
            printf("option %s",  long_options[option_index].name);
            if (optarg)
               printf(" with arg %s\n",  optarg);
            else
               printf(" with no arguments\n");
            printf("`option_index' == %d\n", option_index);
          }

@q *** (3) coerce.@> 
@*2 coerce.
\initials{LDF 2005.08.18.}

\LOG
\initials{LDF 2005.08.18.}
Added this section.
\ENDLOG

@<Process command line options@>=

        if (option_index == COERCE_INDEX)
          {

#if DEBUG_COMPILE
              if (DEBUG)
                 {
                     printf("Coercing.");
                     if (optarg)
                        printf("'optarg' == %s\n", optarg);
                     else 
                        printf("'optarg' == 0\n");
                 }           
#endif /* |DEBUG_COMPILE|  */@; 

@q **** (4) @>   

               if (optarg && !strcasecmp(optarg, "s"))
                  {
#if DEBUG_COMPILE

                           printf("Coercing to 320x240 pixels\n");
                                      
#endif /* |DEBUG_COMPILE|  */@; 
 

                     coerce_value = 1;
                  }


@q **** (4) @>   

               else if (optarg && !strcasecmp(optarg, "l"))
                  {
#if DEBUG_COMPILE

                           printf("Coercing to 640x480 pixels\n");
                                      
#endif /* |DEBUG_COMPILE|  */@; 
 

                     coerce_value = 2;
                  }



@q **** (4) @>   

               else if (optarg)
                  {
                     printf("WARNING!  Invalid argument for the '--coerce'\
option:  %s\nWill coerce to 640x480 pixels.\n", optarg);

                     coerce_value = 2;
                  }

@q **** (4) @>   

               else 
                  {
#if DEBUG_COMPILE     
                         if (DEBUG)
                           {
                               printf("optarg == 0\n");
                               printf("Coercing to 640x480 pixels\n");
                           }                
#endif /* |DEBUG_COMPILE|  */@; 
 
                     coerce_value = 2;

                  }

@q **** (4) @>   

          } /* |if (option_index == COERCE_INDEX)|  */



@q *** (3) end.@> 
@ end.
\initials{LDF 2005.08.19.}

\LOG
\initials{LDF 2005.08.19.}
Added this section.
\ENDLOG

@<Process command line options@>=

        else if (option_index == END_INDEX)
          {

               sscanf(optarg, "%d", &end_value);

#if DEBUG_COMPILE
               if (DEBUG)
                 {
                     printf("Setting end_value to %d.\n", 
                            end_value);
                 }         
#endif /* |DEBUG_COMPILE|  */@; 
 
          } /* |if (option_index == END_INDEX)|  */



@q *** (3) fill.@> 
@ fill.
\initials{LDF 2005.08.22.}

\LOG
\initials{LDF 2005.08.22.}
Added this section.
\ENDLOG

@<Process command line options@>=

        else if (option_index == FILL_INDEX)
          {

               strcpy(fill_string, optarg);

#if DEBUG_COMPILE
               if (DEBUG)
                 {
                     printf("Setting `fill_string' to %s.\n", 
                            fill_string);
                 }         
#endif /* |DEBUG_COMPILE|  */@; 
 
          } /* |if (option_index == FILL_INDEX)|  */






@q *** (3) height.@> 
@ height.
\initials{LDF 2005.08.18.}

\LOG
\initials{LDF 2005.08.18.}
Added this section.
\ENDLOG

@<Process command line options@>=

        else if (option_index == HEIGHT_INDEX)
          {


               sscanf(optarg, "%d", &height_value);

#if DEBUG_COMPILE
               if (DEBUG)
                 {
                     printf("Setting height to %d pixels.\n", height_value);
                 }         
#endif /* |DEBUG_COMPILE|  */@; 
 
          } /* |if (option_index == HEIGHT_INDEX)|  */


@q *** (3) help.@>
@ help.


@<Process command line options@>=

       else if (option_index == HELP_INDEX)
          {
 printf("cnepspng.\nCopyright (C) 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021 The Free Software Foundation\n");

            exit(0);

          } /* |if (option_index == HELP_INDEX)|  */

@q *** (3) horizontal_border.@> 
@ Horizontal Border.
\initials{LDF 2005.08.19.}

\LOG
\initials{LDF 2005.08.19.}
Added this section.
\ENDLOG

@<Process command line options@>=

        else if (option_index == HORIZONTAL_BORDER_INDEX)
          {

               if (optarg)
                  strcpy(horizontal_border, optarg);

               else
                  strcpy(horizontal_border, "1cm");

#if DEBUG_COMPILE
               if (DEBUG)
                 {
                     printf("Setting horizontal border to %s.\n", 
                            horizontal_border);
                 }         
#endif /* |DEBUG_COMPILE|  */@; 
 
          } /* |if (option_index == HORIZONTAL_BORDER_INDEX)|  */


@q *** (3) no-zeroes.@> 
@ no-zeroes.
\initials{LDF 2005.08.22.}

\LOG
\initials{LDF 2005.08.22.}
Added this section.
\ENDLOG

@<Process command line options@>=

        else if (option_index == NO_ZEROES_INDEX)
          {

               zeroes = 0;

#if DEBUG_COMPILE
               if (DEBUG)
                 {
                     printf("Setting `zeroes' to %d.\n", 
                            zeroes);
                 }         
#endif /* |DEBUG_COMPILE|  */@; 
 
          } /* |if (option_index == NO_ZEROES_INDEX)|  */



@q *** (3) opaque.@> 
@ opaque.
\initials{LDF 2005.08.22.}

\LOG
\initials{LDF 2005.08.22.}
Added this section.
\ENDLOG

@<Process command line options@>=

        else if (option_index == OPAQUE_INDEX)
          {

               strcpy(opaque_string, optarg);

#if DEBUG_COMPILE
               if (DEBUG)
                 {
                     printf("Setting `opaque_string' to %s.\n", 
                            opaque_string);
                 }         
#endif /* |DEBUG_COMPILE|  */@; 
 
          } /* |if (option_index == OPAQUE_INDEX)|  */


@q *** (3) output.@> 
@ output.
\initials{LDF 2005.08.19.}

\LOG
\initials{LDF 2005.08.19.}
Added this section.
\ENDLOG

@<Process command line options@>=

        else if (option_index == OUTPUT_FORMAT_INDEX)
          {

@q **** (4) @>   

               if (!strcasecmp(optarg, "eps"))
                  {

                      eps_output = 1;                   
                      pnm_output %= 2; 
                  }

@q **** (4) @>   

               else if (   !strcasecmp(optarg, "jpeg") 
                        || !strcasecmp(optarg, "jpg"))

                  {

                      jpeg_output = 1;
                      pnm_output %= 2; 
                  }

@q **** (4) @>   

               else if (!strcasecmp(optarg, "png"))
                  {

                      png_output = 1;
                      pnm_output %= 2; 
                  }
                  
@q **** (4) @>   

               else if (!strcasecmp(optarg, "pnm"))
                  pnm_output = 1;

@q **** (4) @>   

               else if (!strcasecmp(optarg, "ps"))
                  {
                      ps_output = 1;
                      pnm_output %= 2; 
                  }

@q **** (4) @>   

               else
                  {
                      printf("WARNING!  Invalid `-output-format' argument:\
%s\nIgnoring.\n", optarg);

                  }

@q **** (4) @>   


          } /* |if (option_index == OUTPUT_FORMAT_INDEX)|  */



@q *** (3) quiet.@>
@*2 quiet.

@<Process command line options@>=

        else if (option_index == QUIET_INDEX)
          {

#if DEBUG_COMPILE
              if (DEBUG)
                 {
                     printf("Will run quietly.\n");
                 }
#endif /* |DEBUG_COMPILE|  */@; 
 
              VERBOSITY = QUIET;
 
          }

@q *** (3) silent.@>
@*2 silent.

@<Process command line options@>=

        else if (option_index == SILENT_INDEX)
          {
#if DEBUG_COMPILE
             if (DEBUG)
                {
                   if (DEBUG) 
                     printf("Will run silently.\n");
                }
#endif /* |DEBUG_COMPILE|  */@; 
 
              VERBOSITY = SILENT;

          }


@q *** (3) start.@> 
@ start.
\initials{LDF 2005.08.19.}

\LOG
\initials{LDF 2005.08.19.}
Added this section.
\ENDLOG

@<Process command line options@>=

        else if (option_index == START_INDEX)
          {

               sscanf(optarg, "%d", &start_value);

#if DEBUG_COMPILE
               if (DEBUG)
                 {
                     printf("Setting start_value to %d.\n", 
                            start_value);
                 }         
#endif /* |DEBUG_COMPILE|  */@; 
 
          } /* |else if (option_index == START_INDEX)|  */


@q *** (3) transparent.@> 
@ transparent.
\initials{LDF 2005.08.22.}

\LOG
\initials{LDF 2005.08.22.}
Added this section.
\ENDLOG

@<Process command line options@>=

        else if (option_index == TRANSPARENT_INDEX)
          {

               strcpy(transparent_string, optarg);

#if DEBUG_COMPILE
               if (DEBUG)
                 {
                     printf("Setting `transparent_string' to %s.\n", 
                            transparent_string);
                 }         
#endif /* |DEBUG_COMPILE|  */@; 
 
          } /* |else if (option_index == TRANSPARENT_INDEX)|  */


@q *** (3) verbose.@>
@*2 verbose.
@<Process command line options@>=

        else if (option_index == VERBOSE_INDEX)
          {
#if DEBUG_COMPILE
             if (DEBUG)
                {
                   if (DEBUG) 
                     printf("Will run verbosely.\n");
                }
#endif /* |DEBUG_COMPILE|  */@; 

              VERBOSITY = VERBOSE;

          }

@q *** (3) version.@>
@ version.

@<Process command line options@>=

        else if (option_index == VERSION_INDEX)
          {
            printf("cnepspng 1.2.0.0\n");

            exit(0);
          }


@q *** (3) vertical_border.@> 
@ Vertical Border.
\initials{LDF 2005.08.18.}

\LOG
\initials{LDF 2005.08.19.}
Added this section.
\ENDLOG

@<Process command line options@>=

        else if (option_index == VERTICAL_BORDER_INDEX)
          {

               if (optarg)
                  strcpy(vertical_border, optarg);

               else
                  strcpy(vertical_border, "1cm");

#if DEBUG_COMPILE
               if (DEBUG)
                 {
                     printf("Setting vertical border to %s.\n", 
                            vertical_border);
                 }         
#endif /* |DEBUG_COMPILE|  */@; 
 
          } /* |if (option_index == VERTICAL_BORDER_INDEX)|  */


@q *** (3) width.@> 
@ width.
\initials{LDF 2005.08.18.}

\LOG
\initials{LDF 2005.08.18.}
Added this section.
\ENDLOG

@<Process command line options@>=

        else if (option_index == WIDTH_INDEX)
          {


               sscanf(optarg, "%d", &width_value);

#if DEBUG_COMPILE
               if (DEBUG)
                 {
                     printf("Setting width to %d pixels.\n", width_value);
                 }         
#endif /* |DEBUG_COMPILE|  */@; 
 
          } /* |if (option_index == WIDTH_INDEX)|  */


@q *** (3) zeroes.@> 
@ zeroes.
\initials{LDF 2005.08.22.}

\LOG
\initials{LDF 2005.08.22.}
Added this section.
\ENDLOG

@<Process command line options@>=

        else if (option_index == ZEROES_INDEX)
          {

               sscanf(optarg, "%d", &zeroes);

#if DEBUG_COMPILE
               if (DEBUG)
                 {
                     printf("Setting `zeroes' to %d.\n", 
                            zeroes);
                 }         
#endif /* |DEBUG_COMPILE|  */@; 
 
          } /* |if (option_index == ZEROES_INDEX)|  */


@q **** (4) Invalid option_index value.@>
@ Invalid |option_index| value.

@<Process command line options@>=

        else 
          {
            printf("This can't happen!\noption_index has invalid value: %d\n\
Will try to continue.\n", option_index);
          }

      }

@q **** (4) Ambiguous option.@>
@*3 Ambiguous option.

@<Process command line options@>=

    else if (option_ctr == '?')
      {
        printf("getopt_long() returned ambiguous match. Breaking.\n");

      }

@q **** (4) Invalid option.@>
@*3 Invalid option.

@<Process command line options@>=

    else
      {
        printf("getopt_long() returned invalid option.\n");
      }

@q **** (4) End of while loop.@>
@ End of while loop.

@<Process command line options@>=


    } /* |while|  */
  

    if (DEBUG) 
      printf("*** End of command line processing. ***\n");


@q ** (2) Process filenames.@> 
@*1 Process filenames.
\initials{LDF 2005.08.18.}

\LOG
\initials{LDF 2005.08.18.}
Added this section.
\ENDLOG


@<Process filenames@>=

   Unsigned_Byte arg_ctr = optind;

   printf("arg_ctr == %d\nargc == %d\n", arg_ctr, argc);  

   if (argc - arg_ctr < 1)
     {
         printf("ERROR!  In `main()':  Not enough arguments.\n\
Exiting `cnepspng' with return value 1.\n");

         return 1;

     }  /* |if|  */


@q *** (3)@> 

   if (argc - arg_ctr >= 1)
      strcpy(filename_stem, argv[arg_ctr]);

   printf("filename_stem == %s\n", filename_stem);
     
@q *** (3)@> 

@q **** (4) @>   

   ++arg_ctr;

   printf("Before start value arg:  arg_ctr == %d\n", arg_ctr);
   printf("Before start value arg:  start_value == %d\n", start_value);

   if (argc - arg_ctr >= 1 && start_value != -1)
      {
         printf("WARNING:  `start_value' already set using an optional argument.\n\
`start_value' == %d.  Not resetting to %s\n", start_value, argv[arg_ctr]);

      }

@q **** (4) @>   

   else if (argc - arg_ctr >= 1 && start_value == -1)
      sscanf(argv[arg_ctr], "%d", &start_value);

@q **** (4) @>   

   else if (start_value == -1)
      start_value = 0;

   printf("After start value arg:  arg_ctr == %d\n", arg_ctr);
   printf("After start value arg:  start_value == %d\n", start_value);


@q **** (4) @>   

   ++arg_ctr;

@q *** (3)@> 

@q **** (4) @>   

   printf("Before end value arg:  arg_ctr == %d\n", arg_ctr);
   printf("Before end value arg:  end_value == %d\n", end_value);

   if (argc - arg_ctr >= 1 && end_value != -1)
      {
         printf("WARNING:  `end_value' already set using an optional argument.\n\
`end_value' == %d.  Not resetting to %s\n", end_value, argv[arg_ctr]);

      }

@q **** (4) @>   

   else if (argc - arg_ctr >= 1 && end_value == -1)
      sscanf(argv[arg_ctr], "%d", &end_value);

@q **** (4) @>   

   else if (end_value == -1)
      end_value = 100;


   printf("After end value arg:  arg_ctr == %d\n", arg_ctr);
   printf("After end value arg:  end_value == %d\n", end_value);


@q **** (4) @>   

   ++arg_ctr;


@q * (1) Main.@> 

@* Main.
\initials{LDF 2005.04.21.}

@q ** (2) Definition.@> 

@<Main@>=
int
main(int argc, char** argv)
{

   VERBOSITY = QUIET;

   @<Local variables for |main()|@>@;

   @<Declarations for command line options@>@;

@q *** (3)@> 

@ Do not delete this!  |horizontal_border| and |vertical_border| must be
set to something, because these value are used in a 
``{\tt $\backslash$setbox}'' command written to the {\TeX} files.
\initials{LDF 2005.08.22.}

@<Main@>=

   strcpy(horizontal_border, "0pt");
   strcpy(vertical_border, "0pt");

@q *** (3)@> 
@
@<Main@>=

   strcpy(fill_string, "");
   strcpy(opaque_string, "");
   strcpy(transparent_string, "");

   strcpy(zeroes_string, "");

   printf("`pnm_output' == %d before command line options.\n", pnm_output);

   @<Process command line options@>@;

   printf("`pnm_output' == %d after command line options.\n", pnm_output);

   if (!(eps_output || jpeg_output || png_output || pnm_output || ps_output))
      {
         printf("ERROR!  Command line arguments suppress all output.\n\
Exiting `cnepspng' with return value 1.\n");

         return 1;
      }

   @<Process filenames@>@;

@q *** (3)@> 
#if DEBUG_COMPILE

   if (DEBUG)
      {
         printf("`filename_stem': %s\n", filename_stem);

         printf("`start_value': %d\n", start_value);
         printf("`end_value': %d\n", end_value);

         if (strlen(horizontal_border))
            printf("`horizontal_border': %s\n", horizontal_border);
         else
            printf("`horizontal_border' is empty.\n");

         if (strlen(vertical_border))
            printf("`vertical_border': %s\n", vertical_border);
         else
            printf("`vertical_border' is empty.\n");


         if (eps_output)
            printf("Producing EPS output.\n");
         else 
            printf("Not producing EPS output.\n");

         if (jpeg_output)
            printf("Producing JPEG output.\n");
         else 
            printf("Not producing JPEG output.\n");

         if (png_output)
            printf("Producing PNG output.\n");
         else 
            printf("Not producing PNG output.\n");

         if (pnm_output)
            printf("Producing PNM output.\n");
         else 
            printf("Not producing PNM output.\n");

         if (ps_output)
            printf("Producing PS output.\n");
         else 
            printf("Not producing PS output.\n");

      }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@; 
 

@q *** (3) Write code for including EPS files to |tex_file|.@>

@ Write code for including EPS files to |tex_file|.
\initials{LDF 2005.04.22.}

\LOG
\initials{LDF 2005.04.22.}
@:BUG FIX@> BUG FIX:  Now checking to see if |temp_file| exists.  
If it doesn't, |break| is called.

\initials{LDF 2005.04.22.}
Now running {\TeX} and \.{dvips} on individual files.  
There were problems using the \.{-i} and \.{-S} options 
to \.{dvips}.
\ENDLOG 

@<Main@>=

 {  /* Beginning of group.  */

   int i;

   FILE* tex_file;
   FILE* eps_file;

   char temp_file_name[MAX_FILENAME];
   char tex_file_name[MAX_FILENAME];
   char dvi_file_name[MAX_FILENAME];
   char eps_file_name[MAX_FILENAME];
   char log_file_name[MAX_FILENAME];

   float width;
   float height;

@q ***** (5) Set |zeroes|.@>
@ Set |zeroes|.
\initials{LDF 2005.08.22.}o

\LOG
\initials{LDF 2005.08.22.}
Added this section.
\ENDLOG

\TODO
@q { @>
@:TO DO}{{\bf TO DO}@>
@q } @> 
@q !! TO DO:  @>
Find out how to use natural logarithms to find out how many places I need 
for zeroes.
\ENDTODO 

@<Main@>=

   printf("zeroes == %d\n", zeroes);
   getchar();

   if (zeroes == 0)
      strcpy(zeroes_string, "");

   else if (end_value > 10000)
      {
         printf("ERROR!  `end_value' == %d > 10,000.\
Can't handle this case yet.\nExiting `cnepspng' with return value 1.\n", 
                end_value);

         return 1;

      }  /* |if (end_value > 10000)|  */

   else if (end_value >= 1000 && zeroes <= 4)
      {
          zeroes = 4;    
      }

   else if (end_value >= 100 && zeroes <= 3)
      {
          zeroes = 3;    
      }

   else if (end_value >= 10 && zeroes <= 2)
      {
          zeroes = 2;    
      }

   else if (zeroes < 0)
      {
          zeroes = DEFAULT_ZEROES;    
      }

   printf("zeroes == %d\n", zeroes);
   getchar();

@q ***** (5)@>    
@
\LOG
\initials{LDF 2005.08.22.}
Now continuing if |i == 0| and |filename_stem.0|
doesn't exist.
\initials{LDF 2005.08.22.}
\ENDLOG 

@<Main@>=


#if DEBUG_COMPILE
   if (DEBUG)
     {
         printf("start_value == %d, end_value == %d\n", start_value, end_value);
     }
#endif /* |DEBUG_COMPILE|  */@; 


   for (i = start_value; i <= end_value; ++i)
      {

@q ****** (6)@> 

         sprintf(eps_file_name, "%s.%d", filename_stem, i);   

         if (DEBUG)
           printf("`eps_file_name' == %s\n", eps_file_name);


          eps_file = fopen(eps_file_name, "r");

          if (eps_file == 0 && i == 0)
             {

#if DEBUG_COMPILE
                if (DEBUG)
                  {
                      printf("%s.0 doesn't exist.  Continuing.\n",
                              filename_stem);
                  }          
#endif /* |DEBUG_COMPILE|  */@; 
 
                 continue;
             }

          else if (eps_file == 0)
             break;
          else
             fclose(eps_file);

@q ****** (6) Set |zeroes_string|.@> 
@ Set |zeroes_string|.

\LOG
\initials{LDF 2005.08.22.}
Added this section.
\ENDLOG

@<Main@>=

   int temp_ctr = zeroes;

   if (i < 10)
      temp_ctr -= 1;

   else if (i < 100)
      temp_ctr -= 2;

   else if (i < 1000)
      temp_ctr -= 3;

   else 
      temp_ctr = 0;

       
  
   {
       int j;
       for (j = 0; j < temp_ctr; j++)
         zeroes_string[j] = '0';

       zeroes_string[j] = '\0';

   }


#if DEBUG_COMPILE
   if (DEBUG)
     {
        printf("`zeroes_string' == %s\n", zeroes_string);
     }
#endif /* |DEBUG_COMPILE|  */@; 

@q ****** (6)@> 
@
@<Main@>=


         sprintf(tex_file_name, "%s_%s%d.tex", filename_stem, zeroes_string, i);   
         sprintf(dvi_file_name, "%s_%s%d.dvi", filename_stem, zeroes_string, i);   
         sprintf(log_file_name, "%s_%s%d.log", filename_stem, zeroes_string, i);   

         tex_file = fopen(tex_file_name, "w");

#if DEBUG_COMPILE
         if (DEBUG)
            {
               printf("`eps_file_name' == %s\n", eps_file_name);
               printf("`tex_file_name' == %s\n", tex_file_name);
               printf("`dvi_file_name' == %s\n", dvi_file_name);
               printf("`log_file_name' == %s\n", log_file_name);
            }
#endif /* |DEBUG_COMPILE|  */@; 

         fprintf(tex_file, "%s\n\n\
\\setbox0=\\vbox{\\vskip%s\\hbox{\\hskip%s\n\
\\epsffile{%s.%d}\\hskip%s}\\vskip%s}\n\
\\vbox to \\vsize{\\vskip.5\\vsize\\vskip-.5\\ht0\n\
\\line{\\hskip.5\\hsize\\hskip-.5\\wd0\\copy0\\hss}\\vss}\n\n\
\\bye\n",

               tex_file_header, 
               vertical_border, horizontal_border, 
               filename_stem, i,
               horizontal_border, vertical_border);

          fclose(tex_file);

          sprintf(system_string, "tex %s", tex_file_name);
          printf("%s\n", system_string);

          system(system_string);

@q ****** (6)@> 
@
\LOG
\initials{LDF 2005.04.25.}
Now calling |remove()| rather than using ``\.{rm}'' in a call to 
|system()|.
\ENDLOG 

@<Main@>=



          sprintf(system_string, "%s_%s%d.ps", filename_stem, 
                  zeroes_string, i);

          printf("Removing %s\n", system_string);


          remove(system_string);

          sprintf(system_string, "dvips -o %s_%s%d.ps %s", 
                  filename_stem, zeroes_string, i, dvi_file_name);

          printf("%s\n", system_string);

          system(system_string);

@q ****** (6)@> 

          if (status == 0 || status == EOF)
              break;


          /* This is what \.{display} shows for an image of 
             exactly the size of DIN A4:  
             671x947.  It doesn't seem to work, though.
             \initials{LDF 2005.04.30.}  */

          width = width * 595 / 597.50787;
          height = height * 842 / 845.04684;
  



          sprintf(system_string, 
                  "mogrify -crop 0x0 %s_%s%d.ps", 
                  filename_stem, zeroes_string, i);

          printf("Executing %s\n", system_string);
 
          system(system_string);

@q ****** (6)@> 
@
\LOG
\initials{LDF 2005.04.25.}
Now calling |remove()| rather than using ``\.{rm}'' in calls to 
|system()|.

\initials{LDF 2005.05.08.}
Commented-out the code that converts the EPS files to PNG.
\ENDLOG 

@<Main@>=



         if (coerce_value == 0)
            strcpy(coerce_string, "");  

         else if (coerce_value == 1)
            strcpy(coerce_string, "-geometry 320x240!");  

         else if (coerce_value == 2)
            strcpy(coerce_string, "-geometry 640x480!");  

         else 
            {
               printf("ERROR!  In `main()':  Invalid value for \
`coerce_value':  %d\nSetting `coerce_string' to \"\" and continuing.\n",
                      coerce_value);
               strcpy(coerce_string, "");  
            }


          if (eps_output)
             {
                 strcpy(output_extension, "eps");
                 @<Convert PS file@>@;
             }


          if (jpeg_output)
             {
                 strcpy(output_extension, "jpg");
                 @<Convert PS file@>@;
             }

          if (pnm_output)
             {
                 strcpy(output_extension, "pnm");
                 @<Convert PS file@>@;
             }


          if (png_output)
             {
                 strcpy(output_extension, "png");
                 @<Convert PS file@>@;
             }

          printf("Removing %s\n", tex_file_name);
          remove(tex_file_name);

          printf("Removing %s\n", dvi_file_name);
          remove(dvi_file_name);


@q ****** (6)@>  
@
@<Convert PS file@>=

    sprintf(system_string, "convert %s %s_%s%d.ps %s_%s%d.%s", 
            coerce_string, filename_stem, zeroes_string, i, 
            filename_stem, zeroes_string, i, output_extension);

    printf("Executing \"%s\"\n", system_string);
    system(system_string);


@q ******* (7) PostScript file.@> 
@ PostScript file.  Don't delete if |ps_output != 0|.
\initials{LDF 2005.08.19.}

@<Main@>=

          sprintf(system_string, "%s_%s%d.ps", filename_stem,
                  zeroes_string, i);

          if (!ps_output)  /* PostScript file.  */
            {
    
               printf("Removing %s\n", system_string);
               remove(system_string);
            }
#if DEBUG_COMPILE
          else if (DEBUG)
             {
                 printf("Not removing %s.\n", system_string);
             }       
#endif /* |DEBUG_COMPILE|  */@; 

@q ******* (7) @> 
@ 
@<Main@>=

          printf("Removing %s\n", log_file_name);
          remove(log_file_name);

@q ****** (6)@> 

      }  /* |for|  */ 

@q ***** (5)@>  

}  /* End of group.  */

@q *** (3) End of |main()|.@> 
@ End of |main()|.
Exit successfully
with return value 0.
\initials{LDF 2005.04.22.}

@<Main@>=




   printf("Exiting `cnepspng'.\n");

   return 0;

} /* End of |main()| definition.  */


@q * (1) GNU Free Documentation License.@>
@*  GNU Free Documentation License.
The GNU Free Documentation License, which follows, applies to this
document. 

\input fdl.tex

@<GNU Free Documentation License@>=

/* This section contains no \CPLUSPLUS/ code.  */

@q * (1) GNU General Public License.@>
@* GNU General Public License.
The GNU General Public License, which follows, applies
to the program 3DLDF described in this document.

\input gpl.tex 

@<GNU General Public License@>=

/* This section contains no \CPLUSPLUS/ code.  */


@q * (1) Putting cnepspng together.@> 
@* Putting cnepspng together.

@q ** (2) This is what's compiled.@> 
@ This is what's compiled.
@c
@<Include files@>@;
@<Preprocessor macros@>@;
@<Type declarations@>@;
@<Global constants@>@;
@<Global variables@>@;
@<Main@>@;
@<GNU Free Documentation License@>@;
@<GNU General Public License@>@;

@q * Emacs-Lisp code for use in indirect buffers when using the          @>
@q   GNU Emacs editor.  The local variable list is not evaluated when an @>
@q   indirect buffer is visited, so it's necessary to evaluate the       @>
@q   following s-expression in order to use the facilities normally      @>
@q   accessed via the local variables list.                              @>
@q   \initials{LDF 2004.02.12}.                                          @>
@q   (progn (cweb-mode) (outline-minor-mode t))                          @>

  
@q * Local variables for Emacs.@>
@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q eval:(read-abbrev-file abbrev-file-name) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q fill-column:80 @>
@q End: @>

