def get_spherical_biangle (pp) {numeric rad, boolean ddo_labels, numeric ra_divisions,
                                numeric decl_divisions, boolean draw_biangle,
                                numeric draw_portion,
			   	boolean draw_lines, boolean draw_vertical} = 

  circle c[];
  numeric a;
  numeric m[];
  numeric radius[];
  numeric circum[];
  numeric n[];
  numeric angle_divisions;
  point ra_decl_zero_pt;
  numeric tab_wd;
  numeric flag;
  numeric j;
  numeric k;
  
  point r[][];

  boolean testing;

  testing := false; % true; % 

  draw_portion := min(draw_portion, 1);

  message "draw_portion:";
  show draw_portion;

%% !! START HERE: LDF 2021.10.23.  This doesn't work.  The mod function works
%% differently from what I want.
  
  if (draw_portion mod .625) <> 0:
    m3 := draw_portion / .125;
    message "m3 == draw_portion / .125 == ";
    show m3;
    m4 := round m3;
    message "m4 == round m3 == ";
    show m4;
    m5 := m4 * .125;
    message "m5 == (m4 * .125):";
    show m5;
    draw_portion := m5;
    message "draw_portion after modification:";
    show draw_portion;
  else:
    message "draw_portion is okay.";
  fi;

  pause;
  
  tab_wd := .25cm;
  
  radius0 := rad;

  ra_decl_zero_pt := (rad, 0);

  c0 := unit_circle scaled (radius0, 0, radius0) rotated (90, 0);
  a := circumference c0;   %% a == Circumference of horizontal great circle.

  
  if testing:
    draw c0 with_color red on_picture bi_ang_pict[0];
  fi;

% (% 100 32)
% (/ 100 32)
% (/ 100 32.0)

% (* 3 32)

  
  message "decl_divisions:";
  show decl_divisions;

  message "draw_portion:";
  show draw_portion;

  m0 := -((draw_portion * 180) - 90);
  message "m0 == ";
  show m0;

  m1 := 180 / decl_divisions;
  m2 := .5a / decl_divisions;
  
  message "decl_divisions:";
  show decl_divisions;

  message "decl_increment:";
  show decl_increment;
  
  message "m1 == ";
  show m1;
  
  r[2][0] := (-radius0, 0);
  r[2][1] := (radius0, 0);

  message "magnitude (r[2][1] - r[2][0]) (diameter of c0):";
  show magnitude (r[2][1] - r[2][0]);

  if testing:
    draw r[2][0] -- r[2][1] on_picture bi_ang_pict[0];  %% Horizontal line through origin.
  fi;

  if ddo_labels and testing:
    dotlabel.lft("$r_2^0$", r[2][0]) on_picture bi_ang_pict[0];
    dotlabel.rt("$r_2^1$", r[2][1]) on_picture bi_ang_pict[0];
  fi;

  r[2][2] := (0, -radius0);
  r[2][3] := (0, radius0);

  if ddo_labels and testing:
    dotlabel.bot("$r_2^2$", r[2][2]) on_picture bi_ang_pict[0];
    dotlabel.top("$r_2^3$", r[2][3]) on_picture bi_ang_pict[0];
  fi;
  
  decl_increment := .25;

  message "decl_increment == ";
  show decl_increment;

% %% **** (4)

  edge0 := null_path; 
  edge1 := null_path; 
  edge2 := null_path;  
  edge3 := null_path;  

  edge0 += ..;
  edge1 += ..;
  edge2 += ..;
  edge3 += ..;

  n0 := a / ra_divisions;          %% 1/ra_divisions of circumference of c0 == width of
                                   %% spherical biangles at 0 deg. declination. 


  numeric b;
  b := 1 / decl_increment;
  b *= 360;
  
  n1 := a / b;                   %% Distance between the declination lines in increments
                                 %% of decl_increment degrees.

  pp[0][-0] := pp[0][0] := (-.5n0, 0);
  pp[1][-0] := pp[1][0] := (.5n0, 0);

%% !! START HERE: LDF 2021.10.23.  Find value for j.
  
  j := -.25a;
  for i = -90 step decl_increment until 90:
    
    message "i == ";
    show i;
    message "j == ";
    show j;

    r[0][i] := r[2][1] rotated (0, 0, i);
    r[1][i] := (0, ypart r[0][i]);
    if testing:
      draw r[1][i] -- r[0][i] on_picture bi_ang_pict[0];
    fi;
    if ddo_labels and testing:
      dotlabel.rt("$r_0^{" & decimal i & "}$", r[0][i]) on_picture bi_ang_pict[0];
    fi;
    radius[i] := magnitude(r[0][i] - r[1][i]);
    c[i] := unit_circle scaled (radius[i], 0, radius[i]);
    circum[i] := circumference c[i];
    biangle_width[i] := circum[i] / ra_divisions;

    message "circum[" & decimal i & "]:";
    show circum[i];

    message "biangle_width[" & decimal i & "]:";
    show biangle_width[i];

    pp[0][i] := (-.5biangle_width[i], j);
    pp[1][i] := (.5biangle_width[i], j);

    message "m0:";
    show m0;
    message "i == ";
    show i;
    
    if i >= m0:
      edge0 += pp[0][i];
      edge1 += pp[1][i];
    fi;
    j += n1;
  endfor;

  message "draw_lines:";
  show draw_lines;
  message "line_color:";
  show line_color;

  message "ddo_labels:";
  show ddo_labels;

  if (draw_portion >= .5) and do_labels_ra_decl:
    label("\hbox to \labeldimen{$0^\circ$\hss}", pp[1][0] shifted (1.5cm, 0)) on_picture bi_ang_pict[0];
  fi;

  if ddo_labels:
    dotlabel.lft("$pp_0^0$", pp[0][0]) on_picture bi_ang_pict[0];
    dotlabel.rt("$pp_1^0$", pp[1][0]) on_picture bi_ang_pict[0];
  fi;
  
  if ddo_labels:
    dotlabel.top("$pp_0^{90}$", pp[0][90]) on_picture bi_ang_pict[0];
    dotlabel.bot("$pp_0^{-90}$", pp[0][-90]) on_picture bi_ang_pict[0];
  fi;

  if do_labels_ra_decl:
    label("\hbox to \labeldimen{$90^\circ$\hss}", pp[0][90] shifted (1.5cm, 0)) on_picture bi_ang_pict[0];
    if draw_portion >= 1:
      label("\hbox to \labeldimen{$-90^\circ$\hss}", pp[0][-90] shifted (1.5cm, 0)) on_picture bi_ang_pict[0];
    fi;
  fi;

%% *** (3)

  i := m0;  %% It doesn't work to use m0 as a subscript.  Apparently,
            %% only simple variables can be used, not ones with numerical
            %% subscripts.

  if draw_vertical:
    draw (mediate(pp[0][i], pp[1][i])) -- pp[0][90] on_picture bi_ang_pict[0];
  fi;

  if draw_portion < 1:
    draw pp[0][i] -- pp[1][i] on_picture bi_ang_pict[0];
  fi;

%% *** (3)

  % show edge0;
  
  draw edge0 on_picture bi_ang_pict[0];
  draw edge1 on_picture bi_ang_pict[0]; 

%% *** (3)

  if draw_lines:
    j := -.25a;
    for i = -90 step m1 until 90:
      if i >= m0:
  	r[0][i] := r[2][1] rotated (0, 0, i);
  	r[1][i] := (0, ypart r[0][i]);
  	if testing:
  	  draw r[1][i] -- r[0][i] on_picture bi_ang_pict[0];
  	fi;
  	if ddo_labels and testing:
  	  dotlabel.rt("$r_0^{" & decimal i & "}$", r[0][i]) on_picture bi_ang_pict[0];
  	fi;
  	radius[i] := magnitude(r[0][i] - r[1][i]);
  	c[i] := unit_circle scaled (radius[i], 0, radius[i]);
  	circum[i] := circumference c[i];
  	biangle_width[i] := circum[i] / ra_divisions;

  	message "circum[" & decimal i & "]:";
  	show circum[i];

  	message "biangle_width[" & decimal i & "]:";
  	show biangle_width[i];

  	pp[0][i] := (-.5biangle_width[i], j);
  	pp[1][i] := (.5biangle_width[i], j);

  	if do_labels_ra_decl:
  	   label("\hbox to \labeldimen{$" & decimal i & "^\circ$\hss}",
  	      pp[1][i] shifted (1.5cm, 0)) on_picture bi_ang_pict[0];
  	fi;
	
  	draw pp[0][i] -- pp[1][i] with_color dark_gray on_picture bi_ang_pict[0];

      fi;
      j += m2;
    endfor;
  fi;  

  
%% *** (3)
  
enddef;

endinput;


%% ** (2) End of 3DLDF code.

%% * (1) Emacs-Lisp code for use in indirect buffers when using the          
%%       GNU Emacs editor.  The local variable list is not evaluated when an 
%%       indirect buffer is visited, so it's necessary to evaluate the       
%%       following s-expression in order to use the facilities normally      
%%       accessed via the local variables list.                              
%%       \initials{LDF 2004.02.12}.                                          

%% (progn (metafont-mode) (outline-minor-mode t) (setq fill-column 80))    

%% * (1) Local variables for Emacs.

%% Local Variables:
%% mode:Metapost
%% eval:(outline-minor-mode t)
%% eval:(read-abbrev-file abbrev-file-name)
%% abbrev-mode:t
%% outline-regexp:"%% [*\f]+"
%% End:

