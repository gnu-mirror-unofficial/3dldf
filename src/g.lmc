def get_spherical_biangle (pp) {numeric rad, boolean ddo_labels, numeric ra_divisions,
                                numeric decl_divisions, boolean draw_biangle,
                                numeric draw_portion,
			   	boolean draw_lines, boolean draw_vertical} = 

  circle c[];
  numeric a;
  numeric m[];
  numeric radius[];
  numeric circum[];
  numeric n[];
  numeric angle_divisions;
  point ra_decl_zero_pt;
  numeric tab_wd;

  point r[];

  boolean testing;

  testing := false; % true; % 

  
  tab_wd := .25cm;
  
  radius0 := rad;

  ra_decl_zero_pt := (rad, 0);

  c0 := unit_circle scaled (radius0, 0, radius0) rotated (90, 0);
  a := circumference c0;   %% a == Circumference of horizontal great circle.

  
  if testing:
    draw c0 with_color red on_picture bi_ang_pict[0];
  fi;

% (% 100 32)
% (/ 100 32)
% (/ 100 32.0)

% (* 3 32)

  
  message "decl_divisions:";
  show decl_divisions;

  m2 := 90 / decl_divisions;

  message "m2 == ";
  show m2;

  message "draw_portion:";
  show draw_portion;

  m0 := ((draw_portion * 180) - 90) * -1;
  message "m0 == ";
  show m0;
  
  r0 := (-radius0, 0);
  r1 := (radius0, 0);

  %message "magnitude (r1 - r0) (diameter of c0):";
  %show magnitude (r1 - r0);

  if testing:
    draw r0 -- r1 on_picture bi_ang_pict[0];  %% Horizontal line through origin.
  fi;

  if ddo_labels and testing:
    dotlabel.lft("$r_0$", r0) on_picture bi_ang_pict[0];
    dotlabel.rt("$r_1$", r1) on_picture bi_ang_pict[0];
  fi;

  r2 := (0, -radius0);
  r3 := (0, radius0);

  if ddo_labels and testing:
    dotlabel.bot("$r_2$", r2) on_picture bi_ang_pict[0];
    dotlabel.top("$r_3$", r3) on_picture bi_ang_pict[0];
  fi;
  
  decl_increment := .25;
  n := 90 - decl_increment;

  message "decl_increment == ";
  show decl_increment;

  message "n == ";
  show n;

  j := 4;
  for i = decl_increment step decl_increment until n:
    r[j] := r1 rotated (0, 0, i);
    r[j+1] := (0, ypart r[j]);
    if testing:
      draw r[j + 1] -- r[j] on_picture bi_ang_pict[0];
    fi;
    if ddo_labels and testing:
      dotlabel.rt("$r_{" & decimal j & "}$", r[j]) on_picture bi_ang_pict[0];
    fi;
    radius[j] := magnitude(r[j] - r[j + 1]);
    c[j] := unit_circle scaled (radius[j], 0, radius[j]);
    circum[j] := circumference c[j];
    biangle_width[i] := circum[j] / ra_divisions;
    message "biangle_width[" & decimal i & "]:";
    show biangle_width[i];
    j += 2;
  endfor;
  
% %% **** (4)

  edge0 := null_path; 
  edge1 := null_path; 
  edge2 := null_path;  
  edge3 := null_path;  

  edge0 += ..;
  edge1 += ..;
  edge2 += ..;
  edge3 += ..;

  n0 := a / ra_divisions;          %% 1/ra_divisions of circumference of c0 == width of
                                   %% spherical biangles at 0 deg. declination. 


  numeric b;
  b := 1 / decl_increment;
  b *= 360;
  
  n1 := a / b;                   %% Distance between the declination lines in increments
                                 %% of decl_increment degrees.

  


  pp[0][-0] := pp[0][0] := (-.5n0, 0);
  pp[1][-0] := pp[1][0] := (.5n0, 0);

  message "draw_lines:";
  show draw_lines;
  message "line_color:";
  show line_color;

  message "ddo_labels:";
  show ddo_labels;
    
  if (draw_portion >= .5) and do_labels_ra_decl:
    label("\hbox to \labeldimen{$0^\circ$\hss}", pp[1][0] shifted (1.5cm, 0)) on_picture bi_ang_pict[0];
  fi;
  
  if ddo_labels:
    dotlabel.lft("$pp_0^0$", pp[0][0]) on_picture bi_ang_pict[0];
    dotlabel.rt("$pp_1^0$", pp[1][0]) on_picture bi_ang_pict[0];
  fi;
  
  pp[0][90]  := pp[1][90]  := (0, .25a);
  pp[0][-90] := pp[1][-90] := (0, -.25a);

  
  if ddo_labels:
    dotlabel.top("$pp_0^{90}$", pp[0][90]) on_picture bi_ang_pict[0];
    dotlabel.bot("$pp_0^{-90}$", pp[0][-90]) on_picture bi_ang_pict[0];
  fi;

  if do_labels_ra_decl:
    label.rt("$90^\circ$", pp[0][90] shifted (.25cm, 0)) on_picture bi_ang_pict[0];
    if draw_portion >= 1:
      label.rt("$-90^\circ$", pp[0][-90] shifted (1cm, 0)) on_picture bi_ang_pict[0];
    fi;
  fi;

  message "decl_increment == ";
  show decl_increment;

  message "n == ";
  show n;

  j := 1;
  for i = decl_increment step decl_increment until n:

    message "i == ";
    show i;

    pp[0][i] := (-.5biangle_width[i], (j * n1));
    pp[1][i] := (.5biangle_width[i], (j * n1));

    pp[0][-i] := pp[0][i] rotated 180; 
    pp[1][-i] := pp[1][i] rotated 180; 

    j += 1;
  endfor;

%% *** (3)

  numeric flag;

  if m0 >= 0:
    flag := 1;
  else:
    flag := -1;
  fi;

  message "flag:";
  show flag;
  
  message "m0 before multiplication:";
  show m0;
  
  m0 *= flag;

  message "m0 after multiplication:";
  show m0;

  message "floor m0:";
  show floor m0;
  
  m1 := m0 modulus decl_increment;
  message "m1:";
  show m1;

  m4 := .5 * decl_increment;
  m5 := 3 * m4;

  if m1 == 0:
    ; % Do nothing
  elseif m1 < m4:
    m0 := floor m0;
  elseif (m1 >= m4) and (m1 < m5):
    m0 := floor m0 + decl_increment;
  elseif (m1 >= m5) and (m1 < m1 + 1):
    m0 := (floor m0) + 1;
  fi;

  message "m0 after conditional:";
  show m0;

  m0 *= flag;
  
  message "m0 after multiplication:";
  show m0;

  %pause;
  
  i := m0;  %% It doesn't work to use m0 as a subscript.  Apparently,
            %% only simple variables can be used, not ones with numerical
            %% subscripts.

  if draw_vertical:
    draw (mediate(pp[0][i], pp[1][i])) -- pp[0][90] on_picture bi_ang_pict[0];
  fi;

  if draw_portion < 1:
    draw pp[0][i] -- pp[1][i] on_picture bi_ang_pict[0];
  fi;
  
  for i = m0 step decl_increment until n:
    edge0 += pp[0][i];
    edge1 += pp[1][i];
    
    m3 := (magnitude i) / m2;

    message "i == ";
    show i;
    
    message "m3 == ";
    show m3;

    m6 := m3 modulus decl_increment;

    if draw_lines and (m6 == 0) and (magnitude i < 90):
      draw pp[0][i] -- pp[1][i] with_color line_color on_picture bi_ang_pict[0];
      if i <> -0:
	label("\hbox to \labeldimen{$" & decimal i & "^\circ$\hss}", pp[1][i] shifted (1.5cm, 0))
	  on_picture bi_ang_pict[0];
      fi;
      if ddo_labels and (i <> -0):
    	dotlabel.lft("$pp_0^{" & decimal i & "}$", pp[0][i]) on_picture bi_ang_pict[0];
    	dotlabel.rt("$pp_1^{" & decimal i & "}$", pp[1][i]) on_picture bi_ang_pict[0];
      fi;
    fi;

    
    % if m2 == floor m2:
    %   if do_labels_ra_decl:

    % 	label("$-" & decimal (decl_increment * j) & "^\circ$", pp[1][-i] shifted (2.5cm, 0))
    % 	  on_picture bi_ang_pict[0];
    %   fi;
    % fi;
    %   ;
    % else:
    % fi;    




    
  endfor;

%% *** (3)
 
  edge0 += pp[0][90];
  edge1 += pp[1][90];

  draw edge0 on_picture bi_ang_pict[0];
  draw edge1 on_picture bi_ang_pict[0]; 


  
%% *** (3)
  
enddef;

endinput;


%% ** (2) End of 3DLDF code.

%% * (1) Emacs-Lisp code for use in indirect buffers when using the          
%%       GNU Emacs editor.  The local variable list is not evaluated when an 
%%       indirect buffer is visited, so it's necessary to evaluate the       
%%       following s-expression in order to use the facilities normally      
%%       accessed via the local variables list.                              
%%       \initials{LDF 2004.02.12}.                                          

%% (progn (metafont-mode) (outline-minor-mode t) (setq fill-column 80))    

%% * (1) Local variables for Emacs.

%% Local Variables:
%% mode:Metapost
%% eval:(outline-minor-mode t)
%% eval:(read-abbrev-file abbrev-file-name)
%% abbrev-mode:t
%% outline-regexp:"%% [*\f]+"
%% End:

