def get_spherical_biangle (pp) {numeric rad, numeric biangle_picture_ctr,
                           	boolean ddo_labels, numeric ra_divisions,
                                numeric decl_divisions, boolean draw_biangle,
                                numeric draw_portion,
			   	boolean draw_lines, boolean draw_vertical} = 

  circle c[];
  numeric a;
  numeric radius[];
  numeric circum[];
  numeric n[];
  point ra_decl_zero_pt;
  numeric tab_wd;

  boolean testing;

  testing := false; % true; % 
  
  tab_wd := .25cm;
  
  radius0 := rad;

  ra_decl_zero_pt := (rad, 0);

  c0 := unit_circle scaled (radius0, 0, radius0) rotated (90, 0);
  a := circumference c0;   %% a == Circumference of horizontal great circle.

  if testing:
    draw c0 with_color red on_picture bi_ang_pict[biangle_picture_ctr];
  fi;

% (% 100 32)
% (/ 100 32)
% (/ 100 32.0)

% (* 3 32)


  message "decl_divisions:";
  show decl_divisions;
  message "draw_portion:";
  show draw_portion;

  pp0 := (-radius0, 0);
  pp1 := (radius0, 0);

  %message "magnitude (pp1 - pp0) (diameter of c0):";
  %show magnitude (pp1 - pp0);

  if testing:
    draw pp0 -- pp1 on_picture bi_ang_pict[biangle_picture_ctr];  %% Horizontal line through origin.
  fi;

  if ddo_labels and testing:
    dotlabel.lft("$p_0$", p0) on_picture bi_ang_pict[biangle_picture_ctr];
    dotlabel.rt("$p_1$", p1) on_picture bi_ang_pict[biangle_picture_ctr];
  fi;

  pp2 := (0, -radius0);
  pp3 := (0, radius0);

  if testing:
    draw pp2 -- pp3 on_picture bi_ang_pict[biangle_picture_ctr];  %% Vertical line through origin.
  fi;

  if ddo_labels and testing:
    dotlabel.bot("$p_2$", pp2) on_picture bi_ang_pict[biangle_picture_ctr];
    dotlabel.top("$p_3$", pp3) on_picture bi_ang_pict[biangle_picture_ctr];
  fi;

  k := 2 * decl_divisions;
  decl_increment := 360 / k;
  n := 90 - decl_increment;

  j := 4;
  for i = decl_increment step decl_increment until n:
    pp[j] := pp1 rotated (0, 0, i);
    pp[j + 1] := (0, ypart pp[j]);
    if testing:
      draw pp[j + 1] -- pp[j] on_picture bi_ang_pict[biangle_picture_ctr];
    fi;
    if ddo_labels and testing:
      dotlabel.rt("$p_{" & decimal j & "}$", pp[j]) on_picture bi_ang_pict[biangle_picture_ctr];
    fi;
    radius[j] := magnitude(pp[j] - pp[j + 1]);
    c[j] := unit_circle scaled (radius[j], 0, radius[j]);
    circum[j] := circumference c[j];
    biangle_width[j] := circum[j] / ra_divisions;
    message "biangle_width[" & decimal j & "]:";
    show biangle_width[j];
    j += 2;
  endfor;

  message "After first loop:  j == ";
  show j;
  pause;


%% **** (4)

  edge0 := null_path; 
  edge1 := null_path; 
  edge2 := null_path;  
  edge3 := null_path;  

  edge0 += ..;
  edge1 += ..;
  edge2 += ..;
  edge3 += ..;

  n0 := a / ra_divisions;          %% 1/ra_divisions of circumference of c0 == width of spherical biangles 
                                   %% at 0 deg. declination. 1/(2 * decl_divisions) of circumference of red circle ==
    
  n1 := a / (2 * decl_divisions);  %% Distance between the declination lines in increments of (360 / decl_divisions)
                                   %% deg.

  %% !! START HERE: LDF 2021.10.20.  Change the point numbers.
  
  pp20 := (-.5n0, 0);
  pp21 := (.5n0, 0);

  if draw_lines:
    draw pp20 -- pp21 with_color line_color on_picture bi_ang_pict[biangle_picture_ctr];
  fi;
  
  if do_labels_ra_decl:
    label.rt("$0^\circ$", pp21 shifted (1.5cm, 0)) on_picture bi_ang_pict[biangle_picture_ctr];
  fi;
  
  if ddo_labels:
    dotlabel.lft("$p_{20}$", pp20) on_picture bi_ang_pict[biangle_picture_ctr];
    dotlabel.rt("$p_{21}$", pp21) on_picture bi_ang_pict[biangle_picture_ctr];
  fi;

  edge0 += pp20;
  edge1 += pp21;

  pp22 := (0, -.25a);
  pp23 := (0, .25a);

  if draw_vertical:
    draw pp22 -- pp23 with_color black on_picture bi_ang_pict[biangle_picture_ctr];
  fi;
  
  if ddo_labels:
    dotlabel.bot("$p_{22}$", pp22) on_picture bi_ang_pict[biangle_picture_ctr];
    dotlabel.top("$p_{23}$", pp23) on_picture bi_ang_pict[biangle_picture_ctr];
  fi;

  if do_labels_ra_decl:
    label.rt("$-90^\circ$", pp22 shifted (.25cm, 0)) on_picture bi_ang_pict[biangle_picture_ctr];
    label.rt("$90^\circ$", pp23 shifted (.25cm, 0)) on_picture bi_ang_pict[biangle_picture_ctr];
  fi;

  j := 24;
  k := 4;
  for i = 1 step 1 until ((decl_divisions / 2) - 1):
    pp[j]     := (-.5biangle_width[k], (i * n1));
    pp[j + 1] := (.5biangle_width[k], (i * n1));


    
    if draw_lines:
      draw pp[j] -- pp[j+1] with_color line_color on_picture bi_ang_pict[biangle_picture_ctr];
      draw (pp[j] -- pp[j+1]) rotated 180 with_color line_color on_picture bi_ang_pict[biangle_picture_ctr];
    fi;

    if ddo_labels:
      dotlabel.lft("$p_{" & decimal j & "}$", pp[j]) on_picture bi_ang_pict[biangle_picture_ctr];
      dotlabel.rt("$p_{" & decimal (j + 1) & "}$", pp[j + 1]) on_picture bi_ang_pict[biangle_picture_ctr];
    fi;

    if not do_labels_ra_decl:
      ;
    else:
      if (decl_increment * i) ==  floor (decl_increment * i):
	label("$" & decimal (decl_increment * i) & "^\circ$", pp[j + 1] shifted (1.5cm, 0))
	  on_picture bi_ang_pict[biangle_picture_ctr];
      elseif (decl_increment * i) - floor (decl_increment * i) == .25:
	label("$" & decimal (floor (decl_increment * i)) & "^\circ 15^\prime$", pp[j + 1] shifted (1.5cm, 0))
	   on_picture bi_ang_pict[biangle_picture_ctr];
      elseif (decl_increment * i) - floor (decl_increment * i) == .5:
	label("$" & decimal (floor (decl_increment * i)) & "^\circ 30^\prime$", pp[j + 1] shifted (1.5cm, 0))
	   on_picture bi_ang_pict[biangle_picture_ctr];
      elseif (decl_increment * i) - floor (decl_increment * i) == .75:
	label("$" & decimal (floor (decl_increment * i)) & "^\circ 45^\prime$", pp[j + 1] shifted (1.5cm, 0))
	   on_picture bi_ang_pict[biangle_picture_ctr];
      fi;
    fi;

    edge0 += pp[j];
    edge1 += pp[j + 1];

    j += 2;
    k += 2;
  endfor;

  numeric last_point_pair_ctr;

  last_point_pair_ctr := j - 2;

  % message "last_point_pair_ctr:";
  % show last_point_pair_ctr;
  % pause;
  
  j := 1;
  k := last_point_pair_ctr + 2;
  
  for i := 24 step 2 until last_point_pair_ctr:
    pp[k] := pp[i] rotated (180, 0);
    pp[k+1] := pp[i+1] rotated (180, 0);
    if ddo_labels:
      dotlabel.lft("$p_{" & decimal (k) & "}$", pp[k]) on_picture bi_ang_pict[biangle_picture_ctr];
      dotlabel.rt("$p_{" & decimal (k+1) & "}$", pp[k+1]) on_picture bi_ang_pict[biangle_picture_ctr];
    fi;

    if not do_labels_ra_decl:
      ;
    else:

      if false:
	message "decl_increment * j == ";
	show (decl_increment * j);
	message "floor (decl_increment * j) == ";
	show floor (decl_increment * j);
	message "(decl_increment * j) - floor (decl_increment * j) == ";
	show ((decl_increment * j) - floor (decl_increment * j));
	%pause;
      fi;

      %% !! TODO: LDF 2021.10.19.  These are the cases I need to account for.
      
      %% 0.625
      %% 0.25
      %% 0.875
      %% 0.5
      %% 0.125
      %% 0.75
      %% 0.375
      %% 0
      %% 0.625
      %% 0.25
      
      if (decl_increment * j) ==  floor (decl_increment * j):
	label("$-" & decimal (decl_increment * j) & "^\circ$", pp[k+1] shifted (1.5cm, 0))
	  on_picture bi_ang_pict[biangle_picture_ctr];
      elseif (decl_increment * j) - floor (decl_increment * j) == .125:
	label("$-" & decimal (floor (decl_increment * j)) & "^\circ 7^\prime 30^{\prime\prime}$",
	    pp[k+1] shifted (1.5cm, 0)) on_picture bi_ang_pict[biangle_picture_ctr];
      elseif (decl_increment * j) - floor (decl_increment * j) == .25:
	label("$-" & decimal (floor (decl_increment * j)) & "^\circ 15^\prime$", pp[k+1] shifted (1.5cm, 0))
	   on_picture bi_ang_pict[biangle_picture_ctr];
      elseif (decl_increment * j) - floor (decl_increment * j) == .5:
	label("$-" & decimal (floor (decl_increment * j)) & "^\circ 30^\prime$", pp[k+1] shifted (1.5cm, 0))
	   on_picture bi_ang_pict[biangle_picture_ctr];
      elseif (decl_increment * j) - floor (decl_increment * j) == .75:
	label("$-" & decimal (floor (decl_increment * j)) & "^\circ 45^\prime$", pp[k+1] shifted (1.5cm, 0))
	   on_picture bi_ang_pict[biangle_picture_ctr];
      fi;
    fi;
  
    %label("$-" & decimal (decl_increment * j) & "^\circ$", pp[k+1] shifted (1.5cm, 0))
    % on_picture bi_ang_pict[biangle_picture_ctr];
    j += 1;
    k += 2;
  endfor;


  edge0 += pp23;
  edge1 += pp23;

  edge2 := edge0 rotated (180, 0);
  edge3 := edge1 rotated (180, 0);

  draw edge0 on_picture bi_ang_pict[biangle_picture_ctr]; % with_color dark_gray;
  draw edge1 on_picture bi_ang_pict[biangle_picture_ctr]; % with_color dark_gray;
  draw edge2 on_picture bi_ang_pict[biangle_picture_ctr]; % with_color dark_gray;
  draw edge3 on_picture bi_ang_pict[biangle_picture_ctr]; % with_color dark_gray;

enddef;
