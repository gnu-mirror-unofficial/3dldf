@q deftfncs.web @>
      
@q * (0) Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing. @>
@q Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, @>
@q 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021 The Free Software Foundation @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version. @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details. @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html. @>

@q (``@@'' stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de @>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston                 @> 
@q c/o Free Software Foundation, Inc.  @>
@q 51 Franklin St, Fifth Floor         @> 
@q Boston, MA  02110-1301              @>
@q USA                                 @>

@q Laurence.Finston@@gmx.de (@@ stands for a single ``at'' sign.)@>


@q * (0) |Definition_Info_Type| functions.@>
@** {\bf Definition\_Info\_Type} functions.
\initials{LDF 2004.12.21.}

\LOG
\initials{LDF 2004.12.21.}
Created this file.
\ENDLOG 

@q * (1) Include files.@>
@* Include files.

@<Include files@>=
#include "loader.h++"
#include "pspglb.h++"
#include "io.h++"
#include "gsltmplt.h++"
#include "creatnew.h++"
#include "pntrvctr.h++"
#include "primes.h++"
#include "complex.h++"
#include "matrices.h++"
#include "colors.h++"
#include "transfor.h++"
#include "pens.h++"
#include "dashptrn.h++"
#include "shapes.h++" 
#include "pictures.h++"
#include "points.h++"
#include "lines.h++"
#include "planes.h++"
#include "nurbs.h++"
#include "paths.h++"
#include "curves.h++"
#include "polygons.h++"
#include "triangle.h++"
#include "rectangs.h++"
#include "conicsct.h++"
#include "ellipses.h++"
#include "circles.h++"
#include "ellpsslc.h++"
#include "crclslc.h++"
#include "parabola.h++"
#include "hyprbola.h++"
#include "cncsctlt.h++"
#include "arc.h++"
#include "helices.h++"
#include "origami.h++"

#if 0 
   #include "patterns.h++"
#endif 

#include "solids.h++"
#include "solfaced.h++"
#include "cuboid.h++"
#include "polyhed.h++"
#include "ddchdrn.h++"
#include "rhtchdrn.h++"
#include "plyhdslc.h++"
#include "cones.h++"
#include "cylinder.h++" 
#include "ellpsoid.h++"
#include "spheres.h++" 
#include "sphrdevl.h++"
#include "parabold.h++"
#include "paraellp.h++"
#include "parahypr.h++"
#include "glyphs.h++"
#include "pctfncs0.h++"
#include "utility.h++"
#include "pntrvcf0.h++"
#include "predctes.h++"
#include "scanprse.h++"   
#include "figures.h++"   
#include "parser.h++"   
#include "parser_1.h++"
#include "scan.h++"
#include "scanprsf.h++"
#include "imetfncs.h++"

@q * (1) |Definition_Info_Type| functions.  @>
@* {\bf Definition\_Info\_Type} functions. 


@q ** (2) Clear.@> 
@ {\bf clear}.
\initials{LDF 2004.12.29.}

\LOG
\initials{LDF 2004.12.29.}
Added this function definition.

\initials{LDF 2004.12.29.}
Now clearing |untyped_parameter_vector| and |typed_parameter_vector|.

\initials{LDF 2005.01.02.}
No longer clearing |vector<string> untyped_parameter_vector| and 
|vector<Int_String> typed_parameter_vector|, since I've removed these 
data members.  Now setting |unsigned int untyped_parameter_ctr| and 
|unsigned int typed_parameter_ctr| to 0.

\initials{LDF 2005.01.03.}
Removed code for setting |Id_Map_Entry_Node entry| and
|Definition_Info_Node up| to 0 and |string name| to |""|, because I've
removed these data members from the |Definition_Info_Type| definition.
\ENDLOG 

@q ***** (5) Definition.@>

@<Define |Definition_Info_Type| functions@>=
void
Definition_Info_Type::clear(void)
{

  definition_strm_ptr[0]->str(""); 
  definition_strm_ptr[1]->str(""); 


  untyped_parameter_ctr = 0;
  typed_parameter_ctr   = 0;

  type = NULL_VALUE;

  return;

} /* End of |Definition_Info_Type| destructor definition.  */


@q ** (2) Show.@> 
@ {\bf show}.
\initials{LDF 2004.12.21.}

\LOG
\initials{LDF 2004.12.21.}
Added this function.

\initials{LDF 2004.12.22.}
@:BUG FIX@> BUG FIX::  Removed code referring to 
|definition_strm_ptr[2]|, which no longer exists.

\initials{LDF 2004.12.22.}
Now checking whether |definition_strm_ptr[0]| and 
|definition_strm_ptr[1]| are non-null before writing the strings they
contain to |cerr|.

\initials{LDF 2004.12.22.}
Made this function |const|.  
Now showing |definition_parameter_vector|.

\initials{LDF 2004.12.29.}
Now showing |untyped_parameter_vector| and |typed_parameter_vector|
instead of |definition_parameter_vector|.

\initials{LDF 2005.01.02.}
No longer showing |vector<string> untyped_parameter_vector| and 
|vector<Int_String> typed_parameter_vector|, since I've removed these 
data members.  Now showing |unsigned int untyped_parameter_ctr| and 
|unsigned int typed_parameter_ctr| instead.

\initials{LDF 2005.01.03.}
No longer showing |string name|, because I've
removed it from the |Definition_Info_Type| definition.
\ENDLOG

@<Define |Definition_Info_Type| functions@>=
void
Definition_Info_Type::show(string text) const
{
   using namespace Scan_Parse;

   if (text == "")
      text = "Definition_Info_Type:";

   cerr << text << endl << "`type' == " << name_map[type] << endl;

   if (definition_strm_ptr[0])
      cerr << "`definition_strm_ptr[0]->str()' == " << definition_strm_ptr[0]->str()
           << endl;
   else
      cerr << "`definition_strm_ptr[0]' is null." << endl;

   if (definition_strm_ptr[1])
      cerr << "`definition_strm_ptr[1]->str()' == " << definition_strm_ptr[1]->str()
        << endl;
   else
      cerr << "`definition_strm_ptr[1]' is null." << endl;

   cerr << "`untyped_parameter_ctr' == " << untyped_parameter_ctr << endl
        << "`typed_parameter_ctr' == " << typed_parameter_ctr << endl;

   return;


}  /* End of |Definition_Info_Type::show(void)| definition.  */


@q * (1) Putting the |Definition_Info_Type| functions together.@>
@* Putting the {\bf Definition\_Info\_Type} functions together.
  
@ This is what's compiled.
@c
@<Include files@>@;
@<Define |Definition_Info_Type| functions@>@;


@ This is what's written to \filename{deftfncs.h}.
@(deftfncs.h@>=



@q * Emacs-Lisp code for use in indirect buffers when using the          @>
@q   GNU Emacs editor.  The local variable list is not evaluated when an @>
@q   indirect buffer is visited, so it's necessary to evaluate the       @>
@q   following s-expression in order to use the facilities normally      @>
@q   accessed via the local variables list.                              @>
@q   \initials{LDF 2004.02.12}.                                          @>
@q   (progn (cweb-mode) (outline-minor-mode t) (setq fill-column 80))    @>




@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q fill-column:80 @>
@q End: @>
 
