@q  scanner2.web                                             @>
@q  Created by Laurence Finston Wed Nov  4 14:40:54 CET 2009 @>

@q  * (1) Scanner 2.  @>
@*2 scanner 2.

@
@<Include files@>=

#include <stdlib.h>
#include <stdio.h>
#include <fstream>
#include <getopt.h> 
#include <iomanip>
#include <ios>
#include <iostream>
#include <map>
#include <string>
#include <time.h>
#include <math.h>
#include <sstream>   

#include <stack>
#include <vector>

#include <pthread.h>

#include <config.h>

#include "loader.h++"
#include "pspglb.h++"
#include "io.h++"  
#include "parser2.h++"

@q ** (2) Define |YY_INPUT|.  @>
@ Define {\tt YY\_INPUT}.  
\initials{LDF 2008.09.08.}

\LOG
\initials{LDF 2008.09.08.}
Added this macro definition.  It's needed if the function |open_or_terminate| 
is used.  |open_or_terminate| is defined in \filename{procfncs.web}.
\ENDLOG

@<Define |YY_INPUT|@>=

#define YY_INPUT(buf,result,max_size) \
    { \
    signed char c = (signed char) fgetc(yyin); \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1); \
    }

@q  ** (2) Start conditions.  @>
@*3 Start conditions.

@<Start conditions@>=

@q  ** (2) Options.  @>
@*3 Options.

@<Options@>=
@=%option header-file="scanner2.hxx"@>
@=%option bison-bridge@>
@=%option reentrant@>
@=%option prefix="zz"@>

@q ** (2) Name definitions.  @>
@*3 Name definitions.  
@<Name definitions@>=

@q  * (1) Local variables for |zzlex|.  @>
@*3 Local variables for {\bf zzlex}.

@<Local variables for |zzlex|@>=

bool DEBUG_SCANNER = true; /* |false| */

@q ** (2) Code to be executed each time |zzlex| is entered.  @>

@*1 Code to be executed each time {\bf zzlex} is entered.
This code must be indented or it causes an error when FLEX 
is run.  LDF 2008.07.04.

@q *** (3) Set start condition on entry to |zzlex|.@> 
@*2 Set start condition on entry to {\bf zzlex}. 
\initials{LDF 2008.07.04.}

@<Execute on entry to |zzlex|@>=

Scanner_Type* scanner_node = static_cast<Scanner_Type*>(yyextra);

@q  ** (2) Rules.  @>
@*3 Rules.

@q *** (3) Punctuation.  @>

@*4 Punctuation.

@q *** (3) Whitespace.  @>
@*4 Whitespace.

@<Rules@>=
@=[[:space:]]+ {@>

#if 0 
   if (DEBUG_SCANNER)
   {
      
      cerr << endl << "In `zzlex':  Whitespace." << endl;
      
   }
#endif 

@=}@>

@q *** (3) Comments.  @>
@*4 Comments.  

\LOG
\initials{LDF 2008.07.14.}
Added this rule.
\ENDLOG

@<Rules@>=
@=#.*$ {@>

   if (DEBUG_SCANNER)
   {
      
      cerr << "In `zzlex':  Comment." << endl;
      
   }

@=}@>

@q *** (3) START_ENTRY.  @>
@*4 START\_ENTRY.

@<Rules@>=
@=START_ENTRY {@>

   if (DEBUG_SCANNER)
   {
      
      cerr << "In `zzlex':  START_ENTRY." << endl;
      
   }

   return END_2;

@=}@>

@q *** (3) END_ENTRY.  @>
@*4 END\_ENTRY.

@<Rules@>=
@=END_ENTRY {@>

   if (DEBUG_SCANNER)
   {
      
      cerr << "In `zzlex':  END_ENTRY." << endl;
      
   }

   return END_2;

@=}@>

@q *** (3) END.  @>
@*4 END.

@<Rules@>=
@=END {@>

   if (DEBUG_SCANNER)
   {
      
      cerr << "In `zzlex':  END." << endl;
      
   }

   return END_2;

@=}@>

@q *** (3) End-of-file (EOF).  @>
@*4 End-of-file (EOF).

@<Rules@>=
@=<<EOF>> {@>

   if (DEBUG_SCANNER)
   {
      
      cerr << "In `zzlex':  EOF.  Returning `END_2'." << endl;
      
   }

   return END_2;

@=}@>

@q ** (2) Additional functions.  @>

@*3 Additional functions.

@<|zzwrap| definition@>=

int
zzwrap(yyscan_t parameter)
{
    return 1;
}

@
@<|zzerror| definition@>=

int
zzerror(void* v, char const* s)
{
    return 0;
}

@*3 Putting scanner together.
@c
@=%{@>
@<Include files@>@;@/
@<Define |YY_INPUT|@>@;@/
using namespace std;
@=%}@>
@<Start conditions@>@;@/
@<Options@>@;@/
@<Name definitions@>@;@/
@=%%@>
@=%{@>
@<Local variables for |zzlex|@>@;@/
@=%}@>
@<Execute on entry to |zzlex|@>@;@/
@q Rules @>
@<Rules@>@;@/
@=%%@>
@q User code@>
@<|zzwrap| definition@>@;@/
@<|zzerror| definition@>@;@/

@q * (1) Local variables for Emacs @>

@q * Local variables for Emacs.@>

