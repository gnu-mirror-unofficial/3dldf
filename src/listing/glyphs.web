@q glyphs.web @>

@q * (0) Glyphs.@>
@** Glyphs\quad ({\tt glyphs\PERIOD web}).\hfil

\LOG
\initials{LDF 2005.06.08.}
Created this file.
It contains ``skeleton'' code.
\ENDLOG 

\immediate\write\functexifile{File:  glyphs.web^^J}

@q * (1) Include files.@>
@ Include files.

@<Include files@>=

#include "loader.h++"
#include "pspglb.h++"
#include "io.h++"
#include "creatnew.h++"
#include "pntrvctr.h++"
#include "primes.h++"
#include "complex.h++"
#include "matrices.h++"
#include "colors.h++"
#include "transfor.h++"
#include "pens.h++"
#include "dashptrn.h++"
#include "shapes.h++"  
#include "pictures.h++"  
#include "points.h++"
#include "lines.h++"
#include "planes.h++"
#include "nurbs.h++"
#include "paths.h++"
#include "curves.h++"
#include "polygons.h++"
#include "triangle.h++"
#include "rectangs.h++"
#include "conicsct.h++"
#include "ellipses.h++"
#include "circles.h++"
#include "ellpsslc.h++"
#include "crclslc.h++"
#include "parabola.h++"
#include "hyprbola.h++"
#include "cncsctlt.h++"
#include "arc.h++"
#include "helices.h++"
#include "origami.h++"
#include "solids.h++"
#include "solfaced.h++"
#include "polyhed.h++"
#include "ddchdrn.h++"
#include "rhtchdrn.h++"
#include "plyhdslc.h++"
#include "cones.h++"
#include "cylinder.h++" 
#include "ellpsoid.h++" 
#include "spheres.h++"  
#include "sphrdevl.h++"
#include "parabold.h++"
#include "paraellp.h++"
#include "parahypr.h++"

@q * (1) Glyph class definition.@>
@* {\bf Glyph} class definition.
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this |class| definition.

\initials{LDF 2005.06.09.}
Added the protected data members of type |Point| |ref_pt|,
|normal|, and |base_line_pt|.
\ENDLOG

@<Define |class Glyph|@>=

class Glyph
{

   protected:

   Point ref_pt;
   Point normal;
   Point base_line_pt;
  
   public:

  @<Declare |Glyph| functions@>@;
};

@q * (1) Constructors and setting functions.@>
@* Constructors and setting functions.@>
\initials{LDF 2005.06.08.}

@q ** (2) Default constructor.  No arguments.@>
@*1 Default constructor. No arguments.
@^\cfunc{Glyph}{Glyph}@>
\cfunctexi{Glyph}{Glyph}
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this function.
\ENDLOG

@q *** (3) Declaration.  @>

@<Declare |Glyph| functions@>=
Glyph(void);

@q *** (3) Definition.  @>

@
@<Define |Glyph| functions@>= 
Glyph::Glyph(void)
{

   return;

}

@q * (1) Destructor.@> 
@* Destructor.
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this function.
\ENDLOG

@<Declare |Glyph| functions@>=
virtual
~Glyph(void);

@q *** (3) Definition.  @>

@
@<Define |Glyph| functions@>= 
Glyph::~Glyph(void)
{
   return;
}

@q * (1) Pseudo-constructor for dynamic allocation.@>
@* Pseudo-constructor for dynamic allocation.

@q ** (2) Pointer argument.@>
@*1 Pointer argument.
@^\cfunc{Glyph}{create\_new\_glyph}@>
\cfunctexi{Glyph}{create\_new\_glyph}
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare non-member template functions for |Glyph|@>=
Glyph* 
create_new(const Glyph* c, Scanner_Node scanner_node);

@q ** (2) Reference argument.@>
@*1 Reference argument.
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare non-member template functions for |Glyph|@>=
Glyph* 
create_new(const Glyph& c, Scanner_Node scanner_node);

@q * (1) Assignment.@> 
@* Assignment.
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this section.
\ENDLOG

@q ** (2) Assignment from a |Glyph|.@> 
@*1 Assignment from a |Glyph|.
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Glyph| functions@>=
virtual
Glyph&
operator=(const Glyph& c);

@q *** (3) Definition.@> 

@
@<Define |Glyph| functions@>=

Glyph&
Glyph::operator=(const Glyph& c)
{
    if (this == &c) /* Make sure it's not self-assignment. */
       return *this;

    return *this;

}  /* End of |Glyph::operator=(const Glyph& h)| definition.  */

@q * (1) Returning elements and information.@>
@* Returning elements and information.

@q * (1) Transformations.@>
@* Transformations. 
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this section.
\ENDLOG

@q *** (3) Multiplication by a |Transform| with assignment.@>
@*2 Multiplication by a |Transform| with assignment.
@^\cofunc{Glyph}{*=}@>
\cofunctexi{Glyph}{*=}
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this function.
\ENDLOG 

@<Declare |Glyph| functions@>=
virtual
Transform
operator*=(const Transform& t);

@
@<Define |Glyph| functions@>=
Transform
Glyph::operator*=(const Transform& t)
{
   return t;
}

@q ** (2) Rotatation around the main axes.@>
@*1 Rotation  around the main axes. 
@^\cfunc{Glyph}{rotate}@>
\cfunctexi{Glyph}{rotate}
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this function.
\ENDLOG

@<Declare |Glyph| functions@>=
virtual
Transform 
rotate(const real x, const real y = 0, const real z = 0);

@
@<Define |Glyph| functions@>=
Transform 
Glyph::rotate(const real x, const real y, const real z)
{
  Transform t;
  t.rotate(x, y, z);
  return operator*=(t);
}

@q ** (2) Scale. @>
@*1 Scale. 
@^\cfunc{Glyph}{scale}@>
\cfunctexi{Glyph}{scale}
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this function.
\ENDLOG

@<Declare |Glyph| functions@>=
virtual
Transform 
scale(real x, real y = 1, real z = 1);

@
@<Define |Glyph| functions@>=
Transform 
Glyph::scale(real x, real y, real z)
{
   Transform t;
   t.scale(x, y, z);
   return operator*=(t);
}

@q ** (2) Shear.@>
@*1 Shear. 
@^\cfunc{Glyph}{shear}@>
\cfunctexi{Glyph}{shear}
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this function.
\ENDLOG

@<Declare |Glyph| functions@>=

virtual
Transform 
shear(real xy, real xz = 0, real yx = 0, real yz = 0, 
      real zx = 0, real zy = 0);

@
@<Define |Glyph| functions@>=
Transform 
Glyph::shear(real xy, real xz, real yx, real yz, 
      real zx, real zy)
{
  Transform t;
  t.shear(xy, xz, yx, yz, zx, zy);
  return operator*=(t);

}

@q ** (2) Shift.@>
@*1 Shift. 
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this section.
\ENDLOG

@q *** (3) |real| arguments.@>
@*2 {\bf real} arguments. 
@^\cfunc{Glyph}{shift}@>
\cfunctexi{Glyph}{shift}
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this function.
\ENDLOG

@<Declare |Glyph| functions@>=
virtual
Transform 
shift(real xx, real yy = 0, real zz = 0);

@
@<Define |Glyph| functions@>=
Transform
Glyph::shift(real xx, real yy, real zz)
{
  Transform t;
  t.shift(xx, yy, zz);
  return operator*=(t);
}

@q *** (3) Point argument.@>

@*2 {\bf Point} argument. 
@^\cfunc{Glyph}{shift}@>
\cfunctexi{Glyph}{shift}
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this function.
\ENDLOG

@<Declare |Glyph| functions@>=
virtual
Transform 
shift(const Point& p);

@
@<Define |Glyph| functions@>=
Transform 
Glyph::shift(const Point& p)
{
  return shift(p.get_x(), p.get_y(), p.get_z());
}

@q ** (2) Shift times. @>
@*1 Shift times. 
\initials{LDF 2005.06.08.}

@q *** (3) real arguments. @>

@*2 {\bf real} arguments. 
@^\cfunc{Glyph}{shift\_times}@>
\cfunctexi{Glyph}{shift\_times}
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this function.  It's currently commented-out.
\ENDLOG

@<Declare |Glyph| functions@>=

#if 0 

virtual
void 
shift_times(real x, real y = 1, real z = 1);

#endif 

@
@<Define |Glyph| functions@>=

#if 0 
void 
Glyph::shift_times(real x, real y, real z)
{

    return;
}
#endif 

@q *** (3) Point argument. @>

@*2 {\bf Point} argument. 
@^\cfunc{Glyph}{shift\_times}@>
\cfunctexi{Glyph}{shift\_times}
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this function.  It's currently commented-out.
\ENDLOG

@<Declare |Glyph| functions@>=
#if 0 
virtual
void
shift_times(const Point& p);
#endif 

@
@<Define |Glyph| functions@>=
#if 0 
void
Glyph::shift_times(const Point& p)
{
  return shift_times(p.get_x(), p.get_y(), p.get_z());
}
#endif 

@q ** (2) Rotatation around an arbitrary axis.@>
@*1 Rotatation around an arbitrary axis. 
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this section.
\ENDLOG

@q *** (3) Point arguments.@>

@*2 {\bf Point} arguments.
@^\cfunc{Glyph}{rotate}@>
\cfunctexi{Glyph}{rotate}
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this function.
\ENDLOG

@<Declare |Glyph| functions@>=

virtual
Transform 
rotate(const Point& p0, const Point& p1, const real angle = 180);

@
@<Define |Glyph| functions@>=
Transform 
Glyph::rotate(const Point& p0, const Point& p1, const real angle)
{
  Transform t;
  t.rotate(p0, p1, angle);
  return operator*=(t);
}

@q *** (3) Path argument.@>

@*2 {\bf Path} arguments.
@^\cfunc{Glyph}{rotate}@>
\cfunctexi{Glyph}{rotate}
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this function.
\ENDLOG

@<Declare |Glyph| functions@>=

virtual
Transform 
rotate(const Path& p, const real angle = 180);

@
@<Define |Glyph| functions@>=

Transform 
Glyph::rotate(const Path& p, const real angle)
{
   if (!p.is_linear())
     {
        return INVALID_TRANSFORM;
     }

   return rotate(p.get_point(0),
                 p.get_last_point(), angle);  
}   

@q * (1) Show.@> 
@* Show.
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this function.
\ENDLOG

@q ** (2) Declaration.@> 

@<Declare |Glyph| functions@>=

virtual 
void 
show(string text = "", 
     char coords = 'w',
     const bool do_persp = true, 
     const bool do_apply = true,
     Focus* f = 0, 
     const unsigned short proj = 0,
     const real factor = 1) const;

@q ** (2) Definition.@> 

@
@<Define |Glyph| functions@>=
void 
Glyph::show(string text, char coords,
            const bool do_persp, const bool do_apply,
            Focus* f, const unsigned short proj,
            const real factor) const

{
    if (text == "")
       text = "Glyph:";

    cerr << text << endl;

    return;

} /* End of |Glyph::show()| definition.  */

@q * (1) Glyph_Set_Option_Struct.@> 
@* {\bf Glyph\_Set\_Option\_Struct}.
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this section.
\ENDLOG

@q ** (2) Struct definition.@> 
@*1 Struct definition.
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this |struct| definition.
\ENDLOG

@<Define |struct Glyph_Set_Option_Struct|@>=

struct
Glyph_Set_Option_Struct
{

   @<Declare |Glyph_Set_Option_Struct| functions@>@;

};

@q ** (2) |Glyph_Set_Option_Struct| functions.@> 
@*1 {\bf Glyph\_Set\_Option\_Struct} functions.
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this section.
\ENDLOG

@q *** (3) Constructors.  @>
@*2 Constructors.
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this section.
\ENDLOG

@q **** (4) Default constructor.@>   
@*3 Default constructor.
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this function.
\ENDLOG

@q ***** (5) Declaration.@>  

@<Declare |Glyph_Set_Option_Struct| functions@>=

Glyph_Set_Option_Struct(void);

@q ***** (5) Definition.@>  

@
@<Define |Glyph_Set_Option_Struct| functions@>=

Glyph_Set_Option_Struct::Glyph_Set_Option_Struct(void) 
{
   return;
}

@q *** (3) Destructor.@> 
@*2 Destructor.
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this function.
\ENDLOG

@q **** (4) Declaration.@>  

@<Declare |Glyph_Set_Option_Struct| functions@>=

~Glyph_Set_Option_Struct(void); 

@q **** (4) Definition.@>  

@
@<Define |Glyph_Set_Option_Struct| functions@>=

Glyph_Set_Option_Struct::~Glyph_Set_Option_Struct(void) 
{
    return;
}

@q *** (3) Clear.@> 
@*2 Clear.
\initials{LDF 2005.06.08.}

\LOG
\initials{LDF 2005.06.08.}
Added this function.
\ENDLOG

@q **** (4) Declaration.@>  

@<Declare |Glyph_Set_Option_Struct| functions@>=

int 
clear(void); 

@q **** (4) Definition.@>  

@
@<Define |Glyph_Set_Option_Struct| functions@>=

int
Glyph_Set_Option_Struct::clear(void) 
{

    return 0;

}  /* End of |Glyph_Set_Option_Struct::clear()| definition.  */

@q * (1) Putting Glyph together. @>
@* Putting {\bf Glyph} together.

\immediate\write\functexifile{^^JEnd of file:  glyphs.web^^J}

This is what's compiled.
@c
@<Include files@>@;
@<Define |class Glyph|@>@;
@<Define |struct Glyph_Set_Option_Struct|@>@;
@<Define |Glyph| functions@>@;
@<Define |Glyph_Set_Option_Struct| functions@>@;
@<Declare non-member template functions for |Glyph|@>@;

@ This is what's written to \filename{glyphs.h}.
@(glyphs.h@>=
@<Define |class Glyph|@>@;
@<Define |struct Glyph_Set_Option_Struct|@>@;
@<Declare non-member template functions for |Glyph|@>@;

