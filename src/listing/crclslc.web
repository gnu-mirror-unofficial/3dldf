@q crclslc.web @>

@q * (0) Circle_Slice.@>
@** Circle\_Slice\quad ({\tt crclslc\PERIOD web}).\hfil
\initials{LDF 2005.03.29.}

\LOG
\initials{LDF 2005.03.29.}
Created this file.
\ENDLOG 

\immediate\write\functexifile{File:  crclslc.web^^J}

@f Circle_Slice Circle

@q * Include files.@>
@ Include files.
\initials{LDF 2005.03.29.}

@<Include files@>=

#include "loader.h++"
#include "pspglb.h++"
#include "io.h++"
#include "creatnew.h++"
#include "pntrvctr.h++"
#include "primes.h++"
#include "complex.h++"
#include "matrices.h++"
#include "colors.h++"
#include "transfor.h++"
#include "pens.h++"
#include "dashptrn.h++"
#include "shapes.h++"
#include "pictures.h++"  
#include "points.h++"
#include "lines.h++"
#include "planes.h++"
#include "nurbs.h++"
#include "paths.h++"
#include "curves.h++"
#include "polygons.h++"
#include "triangle.h++"
#include "rectangs.h++"
#include "conicsct.h++"
#include "ellipses.h++"
#include "circles.h++"
#include "ellpsslc.h++"

@q * (1) |Circle_Slice| class definition.@>
@* {\bf Circle\_Slice} class definition.
\initials{LDF 2005.03.29.}

\LOG
\initials{LDF 2005.03.29.}
Added this section.
\ENDLOG

@q ** (2) Definition.@> 

@<Define |class Circle_Slice|@>=
class Circle_Slice : public Path
{

  protected:

  Pointer_Vector<Circle> circle_vector;

  public:
    @<Declare |Circle_Slice| functions@>@;
};

@q * (1) Static data members. @>
@* Static data members.
\initials{LDF 2005.03.29.}

\LOG
\initials{LDF 2005.03.29.}
Added this section.  It's currently empty.
\ENDLOG

@<Define |static| |Circle_Slice| data members@>=

@q * (1) Constructors.@>
@* Constructors.
\initials{LDF 2005.03.29.}

\LOG
\initials{LDF 2005.03.29.}
Added this section.
\ENDLOG

@q ** (2) Default constructor.  No arguments.@>
@*1 Default constructor.  No arguments.
@^\cfunc{Circle\_Slice}{Circle\_Slice}@>
\cfunctexi{Circle\_Slice}{Circle\_Slice}
\initials{LDF 2005.03.29.}

\LOG
\initials{LDF 2005.03.29.}
Added this function.
\ENDLOG

@q *** (3) Declaration.  @>

@<Declare |Circle_Slice| functions@>=
Circle_Slice(void);

@q *** Definition.  @>

@
@<Define |Circle_Slice| functions@>= 
Circle_Slice::Circle_Slice(void)
{
   return;
}

@q ** (2) Pseudo-constructor for dynamic allocation.@>
@*1 Pseudo-constructor for dynamic allocation.
\initials{LDF 2005.03.29.}

\LOG
\initials{LDF 2005.03.29.}
Added this section.
\ENDLOG

@q *** (3) Pointer argument.@>
@*2 Pointer argument.
\initials{LDF 2005.03.29.}

\LOG
\initials{LDF 2005.03.29.}
Added this function.
\ENDLOG

@<Declare non-member template functions for |Circle_Slice|@>=

Circle_Slice* 
create_new(const Circle_Slice* c, Scanner_Node scanner_node);

@q *** (3) Reference argument.@>
@*2 Reference argument.
\initials{LDF 2005.03.29.}

\LOG
\initials{LDF 2005.03.29.}
Added this function.
\ENDLOG

@<Declare non-member template functions for |Circle_Slice|@>=

Circle_Slice* 
create_new(const Circle_Slice& c, Scanner_Node scanner_node);

@q * (1) Destructor. @>
@* Destructor. 
@^\cfunc{Circle\_Slice}{\~{}Circle\_Slice}@>
\cfunctexi{Circle\_Slice}{\noexpand~Circle\_Slice}
\initials{LDF 2005.03.29.}

\LOG
\initials{LDF 2005.03.29.}
Added this section.
\ENDLOG

@q ** (2) Declaration.@> 

@<Declare |Circle_Slice| functions@>= 

~Circle_Slice(void);

@q ** (2) Definition.@> 

@
@<Define |Circle_Slice| functions@>= 

Circle_Slice::~Circle_Slice(void)
{
   return;
}

@q * (1) Assignment. @>
@* Assignment.
@^\cofunc{Circle\_Slice}{=}@>
\cofunctexi{Circle\_Slice}{=}
\initials{LDF 2005.03.29.}

\LOG
\initials{LDF 2005.03.29.}
Added this function.
\ENDLOG

@<Declare |Circle_Slice| functions@>=

Circle_Slice&
operator=(const Circle_Slice& e);

@
@<Define |Circle_Slice| functions@>= 

Circle_Slice&
Circle_Slice::operator=(const Circle_Slice& e)
{
  if (this == &e)  /* Make sure it's not
                      self-assignment.  */
    return *this;

  return *this;
}

@q * (1) Get copy.@>
@* Get copy.
@^\cfunc{Circle\_Slice}{get\_copy}@>
\cfunctexi{Circle\_Slice}{get\_copy}
\initials{LDF 2005.03.29.}

\LOG
\initials{LDF 2005.03.29.}
Added this function.
\ENDLOG

@<Declare |Circle_Slice| functions@>=

virtual
Shape*
get_copy() const;

@
@<Define |Circle_Slice| functions@>=
Shape*
Circle_Slice::get_copy() const
{
  Circle_Slice* p = create_new<Circle_Slice>(0);
  *p = *this;
  return static_cast<Shape*>(p);
}

@q * (1) Putting Circle_Slice together.@>
@* Putting {\bf Circle\_Slice} together.
\initials{LDF 2005.03.29.}

\LOG
\initials{LDF 2005.03.29.}
Added this section.
\ENDLOG

\immediate\write\functexifile{^^JEnd of file:  crclslc.web^^J}

This is what's compiled.
\initials{LDF 2005.03.29.}

@c
@<Include files@>@;
@<Define |class Circle_Slice|@>@;
@<Define |static| |Circle_Slice| data members@>@;
@<Define |Circle_Slice| functions@>@;
@<Declare non-member template functions for |Circle_Slice|@>@;

@ This is what's written to \filename{crclslc.h}.
\initials{LDF 2005.03.29.}

@(crclslc.h@>=
@<Define |class Circle_Slice|@>@;
@<Declare non-member template functions for |Circle_Slice|@>@;

