@q parahypr.web @>
@q Created by Laurence D. Finston Wed Jan 25 13:02:54 CET 2006 @>

@q * (0) Hyperbolic Paraboloids.@>
@** Hyperbolic Paraboloids\quad ({\tt parahypr\PERIOD web}).\hfil

\LOG
\initials{LDF 2006.01.25.}
Created this file.
\ENDLOG 

\immediate\write\functexifile{File:  parahypr.web^^J}

@q * (1) Include files.@>
@ Include files.

@<Include files@>=

#include "loader.h++"
#include "pspglb.h++"
#include "io.h++"
#include "creatnew.h++"
#include "pntrvctr.h++"
#include "primes.h++"
#include "complex.h++"
#include "matrices.h++"
#include "colors.h++"
#include "transfor.h++"
#include "pens.h++"
#include "dashptrn.h++"
#include "shapes.h++"  
#include "pictures.h++"  
#include "points.h++"
#include "lines.h++"
#include "planes.h++"
#include "nurbs.h++"
#include "paths.h++"
#include "curves.h++"
#include "polygons.h++"
#include "triangle.h++"
#include "rectangs.h++"
#include "conicsct.h++"
#include "ellipses.h++"
#include "circles.h++"
#include "ellpsslc.h++"
#include "crclslc.h++"
#include "parabola.h++"
#include "hyprbola.h++"
#include "cncsctlt.h++"
#include "arc.h++"
#include "helices.h++"
#include "origami.h++"
#include "solids.h++"
#include "solfaced.h++"
#include "cuboid.h++"
#include "polyhed.h++"
#include "ddchdrn.h++"
#include "rhtchdrn.h++"
#include "plyhdslc.h++"
#include "cones.h++"
#include "cylinder.h++" 
#include "ellpsoid.h++" 
#include "parabold.h++" 
#include "paraellp.h++" 

@q * (1) Hyperbolic_Paraboloid class definition.@>
@* {\bf Hyperbolic\_Paraboloid} class definition.
\initials{LDF 2006.01.25.}

\LOG
\initials{LDF 2006.01.25.}
Added this |class| definition.
\ENDLOG

@<Define |class Hyperbolic_Paraboloid|@>=

class Hyperbolic_Paraboloid : public Paraboloid
{

   protected:

   public:

  @<Declare |Hyperbolic_Paraboloid| functions@>@;
};

@q ** (2) Static member variable definitions.@>
@*1 Static member variable definitions.
\initials{LDF 2006.01.25.}

@q *** (3) Code.@> 

@<Define |static| |class Hyperbolic_Paraboloid| data members@>=

@q * (1) Constructors and setting functions.@>
@* Constructors and setting functions.@>
\initials{LDF 2006.01.25.}

@q ** (2) Default constructor.  No arguments.@>
@*1 Default constructor. No arguments.
@^\cfunc{Hyperbolic\_Paraboloid}{Hyperbolic\_Paraboloid}@>
\cfunctexi{Hyperbolic\_Paraboloid}{Hyperbolic\_Paraboloid}
\initials{LDF 2006.01.25.}

\LOG
\initials{LDF 2006.01.25.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@>

@<Declare |Hyperbolic_Paraboloid| functions@>=
Hyperbolic_Paraboloid(void);

@q *** (3) Definition.@>

@
@<Define |Hyperbolic_Paraboloid| functions@>= 
Hyperbolic_Paraboloid::Hyperbolic_Paraboloid(void)
{
#if 0 
   shape_type = HYPERBOLIC_PARABOLOID_TYPE;
   type = HYPERBOLIC_PARABOLOID_NULL_TYPE;
   axis_x = axis_y = axis_z = 0;
   divisions_x = divisions_y = divisions_z = 0;
  
   parabola_point_count = 0;
#endif 

   return;

}

@q ** (2) Setting function.@> 
@*1 Setting function.
\initials{LDF 2006.01.25.}

\LOG
\initials{LDF 2006.01.25.}
Added this function.
\ENDLOG

@q *** (3) Declaration.  @>

@<Declare |Hyperbolic_Paraboloid| functions@>=
virtual
int
set(Paraboloid_Set_Option_Struct* options = 0, Scanner_Node scanner_node = 0);

@q *** (3) Definition.  @>

@
@<Define |Hyperbolic_Paraboloid| functions@>= 
int
Hyperbolic_Paraboloid::set(Paraboloid_Set_Option_Struct* options, Scanner_Node scanner_node)
{

@q **** (4) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q **** (4).@>
 
@q **** (4).@>

    if (options->type != HYPERBOLIC_TYPE)
       {
           cerr_strm << thread_name << "ERROR!  In `Hyperbolic_Paraboloid::set()':"
                     << endl
                     << "`options->type' != `Paraboloid::HYPERBOLIC_TYPE'.  "
                     << "This shouldn't happen."
                     << endl 
                     << "Deleting `options', setting it to 0, and exiting function "
                     << "unsuccessfully with return value 1.";
            
           log_message(cerr_strm);
           cerr_message(cerr_strm, error_stop_value);
           cerr_strm.str("");

           delete options;
           options = 0;

           return 1;

       }  /* |if (options->type != HYPERBOLIC_TYPE)|  */

@q **** (4)@> 

   type = HYPERBOLIC_TYPE;

   return 0;

}  /* End of |Hyperbolic_Paraboloid::set()| definition.  */

@q * (1) Destructor.@> 
@* Destructor.
\initials{LDF 2006.01.25.}

\LOG
\initials{LDF 2006.01.25.}
Added this function.
\ENDLOG

@<Declare |Hyperbolic_Paraboloid| functions@>=
virtual
~Hyperbolic_Paraboloid(void);

@q *** (3) Definition.  @>

@
@<Define |Hyperbolic_Paraboloid| functions@>= 
Hyperbolic_Paraboloid::~Hyperbolic_Paraboloid(void)
{
   for (vector<Parabola*>::iterator iter = main_parabolae.begin();
        iter != main_parabolae.end();  
        ++iter)
       {
          delete *iter;
          *iter = 0;
       }

   main_parabolae.clear();    

   return;
}

@q * (1) Pseudo-constructor for dynamic allocation.@>
@* Pseudo-constructor for dynamic allocation.

@q ** (2) Pointer argument.@>
@*1 Pointer argument.
@^\cfunc{Hyperbolic\_Paraboloid}{create\_new\_hyperbolic\_paraboloid}@>
\cfunctexi{Hyperbolic\_Paraboloid}{create\_new\_hyperbolic\_paraboloid}
\initials{LDF 2006.01.25.}

\LOG
\initials{LDF 2006.01.25.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare non-member template functions for |Hyperbolic_Paraboloid|@>=
Hyperbolic_Paraboloid* 
create_new(const Hyperbolic_Paraboloid* c, Scanner_Node scanner_node);

@q ** (2) Reference argument.@>
@*1 Reference argument.
\initials{LDF 2006.01.25.}

\LOG
\initials{LDF 2006.01.25.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare non-member template functions for |Hyperbolic_Paraboloid|@>=
Hyperbolic_Paraboloid* 
create_new(const Hyperbolic_Paraboloid& c, Scanner_Node scanner_node);

@q * (1) Returning elements and information.@>
@* Returning elements and information.

@q ** (2) Get |Shape| type.@> 
@*1 Get {\bf Shape} type.
\initials{LDF 2006.01.25.}

\LOG
\initials{LDF 2006.01.25.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Hyperbolic_Paraboloid| functions@>=
virtual 
inline
unsigned short 
get_shape_type(void) const
{
   return HYPERBOLIC_PARABOLOID_TYPE;
}

@q ** (2) Size.@> 
@*1 Size.
\initials{LDF 2006.01.25.}

\LOG
\initials{LDF 2006.01.25.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Hyperbolic_Paraboloid| functions@>=
virtual 
unsigned int
size(void);

@q *** (3) Definition.@> 

@
@<Define |Hyperbolic_Paraboloid| functions@>=
unsigned int
Hyperbolic_Paraboloid::size(void)
{
   return 0;
}

@q ** (2) Location.@> 
@*1 Location.
\initials{LDF 2006.01.25.}

Return values:\hfil\break
\item{0}: |Point| lies on the surface of the |Hyperbolic_Paraboloid|.
%
\item{1}: |Point| lies within the |Hyperbolic_Paraboloid|.
%
\item{-1}: |Point| lies outside the |Hyperbolic_Paraboloid|.
%
\item{-2}: |Hyperbolic_Paraboloid::standardize()| failed to put the |Hyperbolic_Paraboloid| 
into standard position.\hfil\break 
\initials{LDF 2006.01.25.}

\LOG
\initials{LDF 2006.01.25.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Hyperbolic_Paraboloid| functions@>=
Signed_Byte
location(Point p, Scanner_Node scanner_node = 0, bool no_transform = false) const;

@q *** (3) Definition.@> 
@
@<Define |Hyperbolic_Paraboloid| functions@>=
Signed_Byte
Hyperbolic_Paraboloid::location(Point p, Scanner_Node scanner_node, bool no_transform) const
{
@q **** (4) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q **** (4).@>

   return -2;

}  /* End of |Hyperbolic_Paraboloid::location()| definition.  */

@q * (1) Predicates.@> 
@* Predicates.
\initials{LDF 2006.01.25.}

\LOG
\initials{LDF 2006.01.25.}
Added this section.
\ENDLOG

@q ** (2) Is hyperbolic_paraboloidal.@>
@*1 Is hyperbolic-paraboloidal.
\initials{LDF 2006.01.25.}

\LOG
\initials{LDF 2006.01.25.}
Added this section.
\ENDLOG

@q *** (3) |Solid| version.@> 
@*2 {\bf Solid} version.
@^\cfunc{Solid}{is\_hyperbolic\_paraboloidal}@>
\cfunctexi{Solid}{is\_hyperbolic\_paraboloidal}
\initials{LDF 2006.01.25.}

\LOG
\initials{LDF 2006.01.25.}
Added this function.  It is declared in \filename{solids.web}.
It currently has a dummy definition and returns |false|.
\ENDLOG

@q **** (4) Definition.@> 
  
@
@<Define |Solid| functions@>=
bool
Solid::is_hyperbolic_paraboloidal(Scanner_Node scanner_node) const
{

@q ***** (5) Preliminaries.@> 

  bool DEBUG = false; /* |true| */

  using namespace Scan_Parse;

  stringstream cerr_strm;

  bool error_stop_value   = true;
  bool warning_stop_value = true;
  string thread_name      = "";

  if (scanner_node)
     scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                   &error_stop_value,
                                                   &warning_stop_value);

@q ***** (5)@>  
  
   return false;

} /* End of |Solid::is_hyperbolic_paraboloidal()| definition.  */

@q ** (2) Standardize.@> 
@*1 Standardize.
\initials{LDF 2006.01.25.}

\LOG
\initials{LDF 2006.01.25.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Hyperbolic_Paraboloid| functions@>=
virtual
Transform* 
standardize(Scanner_Node scanner_node = 0) const;

@q *** (3) Definition.@> 

@
@<Define |Hyperbolic_Paraboloid| functions@>=
Transform* 
Hyperbolic_Paraboloid::standardize(Scanner_Node scanner_node) const
{

@q **** (4) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q **** (4).@>

    return 0;

}  /* End of |Hyperbolic_Paraboloid::standardize()| definition.  */

@q * (1) Intersections.@> 
@* Intersections.

@q * (1) Putting Hyperbolic_Paraboloid together. @>
@* Putting {\bf Hyperbolic\_Paraboloid} together.

\immediate\write\functexifile{^^JEnd of file:  parahypr.web^^J}

@q ** (2) This is what's compiled.@> 

This is what's compiled.

@c
@<Include files@>@;
@<Define |class Hyperbolic_Paraboloid|@>@;
@<Define |static| |class Hyperbolic_Paraboloid| data members@>@;
@<Define |Hyperbolic_Paraboloid| functions@>@;
@<Declare non-member template functions for |Hyperbolic_Paraboloid|@>@;
@<Define |Solid| functions@>@;

@q ** (2) This is what's written to "parahypr.h".@> 

@ This is what's written to \filename{parahypr.h}.

@(parahypr.h@>=
@<Define |class Hyperbolic_Paraboloid|@>@;
@<Declare non-member template functions for |Hyperbolic_Paraboloid|@>@;

@q * Local variables for Emacs.@>

