@q transfor.web @>
  
@q * (0) Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing. @>
@q Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, @>
@q 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021 The Free Software Foundation, Inc. @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version. @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details. @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA@>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html. @>

@q (``@@'' stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de @>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston                 @> 
@q c/o Free Software Foundation, Inc.  @>
@q 51 Franklin St, Fifth Floor         @> 
@q Boston, MA  02110-1301              @>
@q USA                                 @>

@q Laurence.Finston@@gmx.de (@@ stands for a single ``at'' sign.)@>

@q * (0) Transformations.@>
@** Transformations\quad ({\tt transform\PERIOD web}).\hfil

\LOG
\initials{LDF 2003.11.12.}  Removed the version control identifiers from the CWEB
files for the distribution of 3DLDF 1.1.  They're still used in my
development versions.

\initials{LDF 2003.12.10.}  Put the version control identifiers back
into my release versions for 3DLDF 1.1.4.  I've already put some of
them back in, now I'm doing the rest of them.  However, the release
versions are now in their own RCS repository.
\ENDLOG 

@q * Include files. @>
@ Include files.
@<Include files@>=

#include "loader.h++"
#include "pspglb.h++"
#include "io.h++"
#include "creatnew.h++"
#include "pntrvctr.h++"
#include "primes.h++"
#include "complex.h++"
#include "matrices.h++"
#include "colors.h++"

@q * {\bf Transform} class definition.@>
@* {\bf Transform} class definition.@>
The |Transform| class has a $4\times4$ transformation matrix as its only
data member and a number of member functions.  |Points|, |Pictures|,
and |Focuses| contain |Transforms| as data members.
\initials{LDF Undated.}

@:!!@> !!  Remember to add items to |operator=| if if I add them to
the class definition here.
\initials{LDF Undated.}

\LOG
\initials{LDF 2003.07.04.}  
Removed |friend| declaration for |Focus|.  I've added
|set_element| and |get_element|, which are used in the |Focus|
functions, so the latter need no longer be a |friend| of |Transform|.  
\ENDLOG 

@f Transform int  
@<Define |class Transform|@>=

class Transform
{
  friend class Point;

  Transform_Matrix transform_matrix; 
                 
  public:
  
     @<Declare |Transform| functions@>@;
			    
};

@q * (1) |Transform| functions. @>
@* {\bf Transform} functions.
\initials{LDF 2007.10.02.}

\LOG
\initials{LDF 2007.10.02.}
Added this section.
\ENDLOG

@q ** (2) Constructors. @>
@*1 Constructors.

@q *** (3) Default constructor.  (No arguments).@>
@*2 Default constructor.  (No arguments).
@^\cfunc{Transform}{Transform}@>
Initializes a new transformation matrix as the identity matrix
@<Declare |Transform| functions@>=
Transform();

@ 
@<Define |Transform| functions@>=
Transform::Transform()
{

  reset();

}    

@q *** (3) Constructor with one {\bf real} argument.@>
@*2 Constructor with one {\bf real} argument.  
@^\cfunc{Transform}{Transform}@>
\initials{LDF Undated.}

All elements of
|transform_matrix| are set to the |real| argument |r|.
\initials{LDF Undated.}

@<Declare |Transform| functions@>=
Transform(real r);

@ 
@<Define |Transform| functions@>=
Transform::Transform(real r)
{
  for(int i = 0; i < 4; i++)
    for(int j = 0; j < 4; j++)
      transform_matrix[i][j] = r;
}

@q *** (3) Constructor with 16 {\bf real} arguments.@>
@*2 Constructor with 16 {\bf real} arguments.  
@^\cfunc{Transform}{Transform}@>
\initials{LDF 2002.09.06.}  Added this constructor.
This constructor makes it possible to specify all of the elements of
|transform_matrix|.
@<Declare |Transform| functions@>=
Transform(real r0_0, real r0_1, real r0_2, real r0_3,
          real r1_0, real r1_1, real r1_2, real r1_3,  
          real r2_0, real r2_1, real r2_2, real r2_3,  
          real r3_0, real r3_1, real r3_2, real r3_3);

@ 
@<Define |Transform| functions@>=
Transform::Transform(real r0_0, real r0_1, real r0_2, real r0_3,
                     real r1_0, real r1_1, real r1_2, real r1_3,  
                     real r2_0, real r2_1, real r2_2, real r2_3,  
                     real r3_0, real r3_1, real r3_2, real r3_3)
{
  transform_matrix[0][0] = r0_0;
  transform_matrix[0][1] = r0_1;
  transform_matrix[0][2] = r0_2;
  transform_matrix[0][3] = r0_3;
                    
  transform_matrix[1][0] = r1_0;
  transform_matrix[1][1] = r1_1;
  transform_matrix[1][2] = r1_2;
  transform_matrix[1][3] = r1_3;
                    
  transform_matrix[2][0] = r2_0;
  transform_matrix[2][1] = r2_1;
  transform_matrix[2][2] = r2_2;
  transform_matrix[2][3] = r2_3;
                   
  transform_matrix[3][0] = r3_0;
  transform_matrix[3][1] = r3_1;
  transform_matrix[3][2] = r3_2;
  transform_matrix[3][3] = r3_3;
}   

@q ** (2) Pseudo-constructor for dynamic allocation.@>
@*1 Pseudo-constructor for dynamic allocation.@>

\LOG
\initials{LDF 2004.05.09.}  
Added this template function specialization.

\initials{LDF 2004.10.11.}
This declaration no longer declares a specialization.  
Removed the definition for the specialization.
Added |Scanner_Node scanner_node| argument.
\ENDLOG 

@<Declare non-member template functions for |Transform|@>=
Transform* 
create_new(const Transform* t, Scanner_Node scanner_node = 0);

Transform* 
create_new(const Transform& t, Scanner_Node scanner_node = 0);

@q ** (2) Operators.@>
@*1 Operators.
\initials{LDF 2007.10.02.}

\LOG
\initials{LDF 2007.10.02.}
Added this section.
\ENDLOG

@q *** (3) Assignment.@>
@*2 Assignment.@>
@^\cofunc{Transform}{=}@>
\initials{LDF Undated.}

Sets |transform_matrix| to be identical to the |transform_matrix| of another
|Transform|. @:!!@> !!  Remember to add items here if I add them to
the class definition.
\initials{LDF Undated.}

@q *** (3) Declaration.@>

@<Declare |Transform| functions@>=
Transform
operator=(const Transform& t);

@q *** (3) Definition.@>
@
@<Define |Transform| functions@>=
Transform
Transform::operator=(const Transform& t)
{
    for(int i = 0; i < 4; i++)
      for(int j = 0; j < 4; j++)
        transform_matrix[i][j] = t.transform_matrix[i][j];
    return t;
}  

@q *** (3) Equality.@>
@*2 Equality.@>
@^\cofunc{Transform}{==}@>
\initials{LDF 2007.10.02.}

@q **** (4)Is Equal.@>
@*3 Is Equal.
\initials{LDF 2007.10.14.}

\LOG
\initials{LDF 2007.10.14.}
Added this function.
\ENDLOG

@q ***** (5) Declaration.@>

@<Declare |Transform| functions@>=
bool
is_equal(const Transform& t, real tolerance = -1) const;

@q ***** (5) Definition.@>
@
@<Define |Transform| functions@>=
bool
Transform::is_equal(const Transform& t, real tolerance) const
{

    if (tolerance < 0)
       tolerance = .0001;

    for(int i = 0; i < 4; i++)
    {
       for(int j = 0; j < 4; j++)
       {
          if (fabs(transform_matrix[i][j] - t.transform_matrix[i][j]) > tolerance)
             return false;
       }
    }

    return true;

}  /* End of |Transform::is_equal| definition.  */

@q **** (4) Equality operator.@>
@*3 Equality operator.
\initials{LDF 2007.10.02.}

\LOG
\initials{LDF 2007.10.02.}
Added this function.

\initials{LDF 2007.10.14.}
Removed code from this function and put it into |Transform::is_equal|,
which this function now calls.
\ENDLOG

@q ***** (5) Declaration.@>

@<Declare |Transform| functions@>=
bool
operator==(const Transform& t) const;

@q ***** (5) Definition.@>
@
@<Define |Transform| functions@>=
bool
Transform::operator==(const Transform& t) const
{
   return is_equal(t, -1);

}  /* End of |Transform::operator==| definition.  */

@q *** (3) Inequality.@>
@*2 Inequality.@>

@q **** (4) Is Unequal.@>
@*3 Is Unequal.
@^\cfunc{Transform}{is\_unequal}@>
\initials{LDF 2007.10.14.}

\LOG
\initials{LDF 2007.10.14.}
Added this function.
\ENDLOG

@q ***** (5) Declaration.@>

@<Declare |Transform| functions@>=
bool
is_unequal(const Transform& t, real tolerance = -1) const;

@q ***** (5) Definition.@>
@
@<Define |Transform| functions@>=
bool
Transform::is_unequal(const Transform& t, real tolerance) const
{

    return !is_equal(t, tolerance);

}  /* End of |Transform::is_unequal| definition.  */

@q **** (4) Operator.@>
@*3 Operator.
@^\cofunc{Transform}{!=}@>
\initials{LDF 2007.10.02.}

\LOG
\initials{LDF 2007.10.02.}
Added this function.
\ENDLOG

@q ***** (5) Declaration.@>

@<Declare |Transform| functions@>=
bool
operator!=(const Transform& t) const;

@q ***** (5) Definition.@>
@
@<Define |Transform| functions@>=
bool
Transform::operator!=(const Transform& t) const
{

    return !operator==(t);

}  /* End of |Transform::operator!=| definition.  */

@q ** (2) Reset to identity matrix. @>
@*1 Reset to identity matrix.
@^\cfunc{Transform}{reset}@>
@<Declare |Transform| functions@>=
void reset();

@ 
@<Define |Transform| functions@>=
void Transform::reset()
{
  for(int i = 0; i < 4; i++)    // Rows.
    for(int j = 0; j < 4; j++) // Columns.
    {
 	transform_matrix[i][j] = (i == j) ? 1 : 0;
    }
}

@q ** (2) Setting values.@>
@*1 Setting values.@>
@^\cfunc{Transform}{set\_element}@>
\LOG
\initials{LDF 2003.07.04.}  Added this function.
\ENDLOG
@<Declare |Transform| functions@>=
void
set_element(const unsigned short row, const unsigned short col, real r);  

@
@<Define |Transform| functions@>=
void
Transform::set_element(const unsigned short row,
                     const unsigned short col,
                     real r)
{
  transform_matrix[row][col] = (fabs(r) < epsilon()) ? 0 : r;
  return;
}

@q ** (2) Clean.@>
@*1 Clean.  
@^\cfunc{Transform}{clean}@>
|clean| changes elements in |transform_matrix| whose absolute values are |< epsilon| to 0.
@<Declare |Transform| functions@>=
void
clean();

@ 
@<Define |Transform| functions@>=
void
Transform::clean()
{
  real eps = epsilon();
  for(int i = 0; i < 4; i++)    // Rows.
    for(int j = 0; j < 4; j++) // Columns.
      {
        if (fabs(transform_matrix[i][j]) < eps)
          transform_matrix[i][j] = 0;
      }
}

@q ** (2) Epsilon  @>
@*1 Epsilon. 
@^\cfunc{Transform}{epsilon}@>
Minimum magnitude of values stored in |transform_matrix|.  
\initials{LDF 2002.10.16.}  The value returned by |epsilon| has to be fairly 
large because of the poor precision resulting from the use |floats|
and the Standard Library versions of the trigonometric functions.
There is currently no equality operator for |Transform|, but the
precision of the |Transforms| affects that of |Points|.  
@:!! TO DO@> TO DO: 
I hope to be able to solve the problem by finding routines for
calculating the trigonometric functions more accurately (and faster)
by using integers and bitwise shifts.  If this doesn't work out, I
could try redefining |real| as |double| (which I don't want to do), or
I could try to use |double| explicitly when using the trigonometric
functions.  In the latter case, I would have to truncate the |doubles|
to |floats| eventually, so I don't know if this would have any
benefit. 

\LOG
\initials{LDF 2004.1.2.}  Now returning different values, depending on
whether |real| is |float| or |double|.
@:!! TO DO@> TO DO:  Try to find out what values would be best.  It
will be necessary to check how good the value for |double| is.

\initials{LDF 2004.1.2.} Made |epsilon() static| and non-inline.
\ENDLOG 

@<Declare |Transform| functions@>=
static
real
epsilon();

@
@<Define |Transform| functions@>=
real
Transform::epsilon()
{
#if LDF_REAL_DOUBLE
  return .000000001;
#else
  return .00001;
#endif 
}

@q ** (2) Test for identity matrix. @>
@*1 Test for identity matrix.
\initials{LDF 2002.11.16.}  @:!! TO DO@> TO DO:  I should check the elements on
the main diagonal for whether they differ from 1 by an amount
|@t$<$@>epsilon|.  If so, they should be set to 1.
@q ** Non-const version.@>
@ Non-const version.
@^\cfunc{Transform}{is\_identity}@>
@<Declare |Transform| functions@>=
bool
is_identity();

@
@<Define |Transform| functions@>=
bool
Transform::is_identity() 
{
  clean();
  for (int i = 0; i < 4; i++)
    for (int j = 0; j < 4; j++)
      if ((i == j && transform_matrix[i][j] != 1)
          || ((i != j) && transform_matrix[i][j] != ZERO_REAL))
        return false;
  return true;
}

@q *** (3) |const| version.@>
@*2 {\bf const} version.
@^\cfunc{Transform}{is\_identity}@>
@<Declare |Transform| functions@>=
bool
is_identity() const;

@
@<Define |Transform| functions@>=
bool
Transform::is_identity() const
{
  Transform t;
  t = *this;
  t.clean();
  for (int i = 0; i < 4; i++)
    for (int j = 0; j < 4; j++)
      if ((i == j && transform_matrix[i][j] != 1)
          || ((i != j) && transform_matrix[i][j] != ZERO_REAL))
        return false;
  return true;
}

@q ** (2) Querying. @>
@*1 Querying.

@q *** (3) Get element. @>
@*2 Get element.
@^\cfunc{Transform}{get\_element}@>
\LOG
\initials{LDF 2003.07.04.}  Added this function.
\ENDLOG
@<Declare |Transform| functions@>=
real
get_element(const unsigned short row, const unsigned short col) const;

@
@<Define |Transform| functions@>=
real
Transform::get_element(const unsigned short row,
                       const unsigned short col) const
{
  return transform_matrix[row][col];
}

@q ** (2) Show. @>
@*1 Show.
@^\cfunc{Transform}{show}@>
@<Declare |Transform| functions@>=
void 
show(string text = "") const;

@
@<Define |Transform| functions@>=
void 
Transform::show(string text) const
{

  if (text == "")
    text = "Transform:";

  cout << text << "\n";

  for(int i = 0; i < 4; i++)
    {
    for (int j = 0; j < 4; j++)
      {
@:!!@> /* !!  \initials{LDF 2002.02.07.}
              Can't use |left| here, and I can't include
              \filename{ios}. This causes an error with a reference to
              something in the \CPLUSPLUS/ manual.
              Must write to K. Heuer and ask if he can fix it. */
	cout << setw(7) << setprecision(3) << transform_matrix[i][j] << " ";
      }
    cout << endl;
    }
    cout << endl;
}

@q ** Affine transformations.@>
@*1 Affine transformations.
\initials{LDF 2002.10.16.}  The functions for the affine transformations all
return a |Transform| representing the transformation, not |*this|.
This makes it possible to chain expressions using |operator*=|,
e.g., 
\begingroup
\par
\vskip\baselineskip
\leftskip=3em
\obeylines
|Point pt0;|
|Point pt1(1, 2, 3);|
|Point pt2(3, 4, 5);|
|Transform t;|
|t.rotate(90, 90, 90);|
|pt0 *= pt1 *= pt2 *= t;|
\par
\vskip\baselineskip
\endgroup
\noindent
|pt0|, |pt1|, and |pt2| are all rotated $90^\circ$ around the x, y, and
z-axes.

@q *** (3) Scale. @>
@*2 Scale.
@^\cfunc{Transform}{scale}@>
\LOG
\initials{LDF 2002.10.15.}  @:BUG FIX@> BUG FIX:  If the absolute value of an
argument is |< epsilon|, the argument is now set to 0 instead of 1.
Setting it to 1 causes no scaling to take place, which is not the
effect of multiplying the corresponding coordinate by a number of very
small magnitude.

\initials{LDF 2003.03.25.} @: BUG FIX@> BUG FIX:  Fixed conditional that tests
whether all the arguments are 1.
\ENDLOG 
@<Declare |Transform| functions@>=  
Transform
scale(real x, real y = 1, real z = 1);

@
@<Define |Transform| functions@>=
Transform
Transform::scale(real x, real y, real z)
{
  Transform t;
  
  if (x == 1 && y == 1 && z == 1) 
    {
#if 0 
      cerr << "WARNING! In Transform::scale():\n"
           << "All arguments == 1.  Returning identity transformation."
           << endl << endl;
#endif 
      return t;
    }

  real eps = epsilon();
  
  t.transform_matrix[0][0] = (fabs(x) >= eps) ? x : 0;
  t.transform_matrix[1][1] = (fabs(y) >= eps) ? y : 0;
  t.transform_matrix[2][2] = (fabs(z) >= eps) ? z : 0;

  *this *= t;
  clean();
  return t;
}

@q *** (3) Shear. @>
@*2 Shear.
@^\cfunc{Transform}{shear}@>

\LOG
\initials{LDF 2002.10.15.}  
Replaced the dummy definition of this function with a
proper one.
\ENDLOG 

@<Declare |Transform| functions@>=  
Transform
shear(real xy, real xz = 0, real yx = 0, real yz = 0, 
      real zx = 0, real zy = 0);

@
@<Define |Transform| functions@>=
Transform
Transform::shear(real xy, real xz, real yx, real yz, 
      real zx, real zy)
{
  Transform t;
  real eps = epsilon();

  if (fabs(xy) < eps)
    xy = 0;

  if (fabs(xz) < eps)
    xz = 0;

  if (fabs(yx) < eps)
    yx = 0;

  if (fabs(yz) < eps)
    yz = 0;

  if (fabs(zx) < eps)
    zx = 0;

  if (fabs(zy) < eps)
    zy = 0;

if (   xy == ZERO_REAL 
      && xz == ZERO_REAL 
      && yx == ZERO_REAL 
      && yz == ZERO_REAL 
      && zx == ZERO_REAL 
      && zy == ZERO_REAL)
    {
      cerr << "WARNING! In Transform::shear():\n"
           << "All arguments are 0.  Returning identity transformation."
           << endl << endl;
      return t;
    }
  
  t.transform_matrix[1][0] = xy;
  t.transform_matrix[2][0] = xz;
  t.transform_matrix[0][1] = yx;
  t.transform_matrix[2][1] = yz;
  t.transform_matrix[0][2] = zx;
  t.transform_matrix[1][2] = zy;

  (*this) *= t;
  clean();
  return t;
}

@q *** (3) Shift (translation). @>
@*2 Shift. (Translation.)

@q **** (4) {\bf real} arguments.@>
@*3 {\bf real} arguments.
@^\cfunc{Transform}{shift}@>
@<Declare |Transform| functions@>=
Transform 
shift(real x, real y = 0, real z = 0);
    
@ 
@<Define |Transform| functions@>=
Transform 
Transform::shift(real x, real y, real z)
{
  
  real eps = epsilon();
  Transform t;

  if (x == ZERO_REAL && y == ZERO_REAL && z == ZERO_REAL)
    return t;

  t.transform_matrix[3][0] = (fabs(x) > eps) ? x : 0;
  t.transform_matrix[3][1] = (fabs(y) > eps) ? y : 0;
  t.transform_matrix[3][2] = (fabs(z) > eps) ? z : 0;

  t.clean();
  (*this) *= t;
  clean();
  return t;
}

@q **** (4) {\bf Point} argument.@>
@*3 {\bf Point} argument.
@^\cfunc{Transform}{shift}@>
\initials{LDF 2002.04.24.}  Added this function.  It must be defined in
\filename{points.web}, because |Point| is an incomplete type here.

@<Declare |Transform| functions@>=
Transform 
shift(const Point& p);

@q **** (4) Shift with multiplication.@>
@*3 Shift with multiplication.
@^\cfunc{Transform}{shift}@>
\initials{LDF 2002.08.22.}  Added this function.  It takes |real| arguments and
multiplies the appropriate elements of |transform_matrix| by them.
@<Declare |Transform| functions@>=
Transform 
shift_times(real x, real y = 1, real z = 1);

@
@<Define |Transform| functions@>=
Transform 
Transform::shift_times(real x, real y, real z)
{
  bool DEBUG = false; /* |true| */@;

  if (DEBUG)
    {
      show("Before multiplication");
    }

  transform_matrix[3][0] *= x;
  transform_matrix[3][1] *= y;
  transform_matrix[3][2] *= z;

  if (DEBUG)
    {
      show("After multiplication");
    }

  return *this;
}

@q *** (3) Rotation around the main axes.@>
@*2 Rotation around the main axes.
@^\cfunc{Transform}{rotate}@>
\initials{LDF Undated.}

|rotate| will perform rotation about the x, y and z-axes in that
order if called with multiple, non-zero arguments. Rotation only about
the y and/or z-axis requires one or two dummy 0 arguments so that |rotate|
``knows'' about which axis (or axes) to rotate.
\initials{LDF Undated.}

@<Declare |Transform| functions@>=
Transform 
rotate(real x, real y = 0, real z = 0);

@
@<Define |Transform| functions@>=
Transform 
Transform::rotate(real x, real y, real z)
{
  bool DEBUG = false; /* |true| */@;  
  Transform t_all;
  real eps = epsilon();

  if (x == ZERO_REAL && y == ZERO_REAL && z == ZERO_REAL)
    {
      if (DEBUG) 
        cerr << "In rotate(real, real, real)\n"
             << "0 rotation about all axes. Returning identity matrix.\n";

      return t_all;
    }

  Transform t_x;
  Transform t_y;
  Transform t_z;
  real ssin; 
  real ccos; 
  real temp1;
  real temp2;
  int i;

@ Rotation around the x-axis.
@<Define |Transform| functions@>=

  if (x != ZERO_REAL)
    {

      @:!!@> /* !! Reversed direction of rotation because I didn't 
                like the way it was. */
      
      x *= -PI/180.0;  /* Convert to radians.  */
      ssin = sin(x);
      ccos = cos(x);
      
      for (i = 0; i < 4; i++)
        {
          temp1 = (t_x.transform_matrix[i][1] * ccos)
            - (t_x.transform_matrix[i][2] * ssin);
          temp2 = (t_x.transform_matrix[i][1] * ssin)
            + (t_x.transform_matrix[i][2] * ccos);
          t_x.transform_matrix[i][2]
            = (fabs(temp2) >= eps) ? temp2 : 0;
          t_x.transform_matrix[i][1]
            = (fabs(temp1) >= eps) ? temp1 : 0;
        }

    } // |if|

@ Rotation around the y-axis.
@<Define |Transform| functions@>=

  if (y != ZERO_REAL)
    {

      @:!!@> /* !! Reversed direction of rotation because I didn't 
                like the way it was. */

        y *= -PI/180.0;
        ssin = sin(y);
        ccos = cos(y);
        for (i = 0; i < 4; i++)
          {
            temp1 = (t_y.transform_matrix[i][0] * ccos)
              + (t_y.transform_matrix[i][2] * ssin);
            temp2 = (-t_y.transform_matrix[i][0] * ssin)
              + (t_y.transform_matrix[i][2] * ccos);
            t_y.transform_matrix[i][2]
              = (fabs(temp2) >= eps) ? temp2 : 0;       
            t_y.transform_matrix[i][0]
              = (fabs(temp1) >= eps) ? temp1 : 0;       
          }
    } // |if|

@ Rotation around the z-axis.
@<Define |Transform| functions@>=

   if (z != ZERO_REAL)
     {

         z *= PI/180.0;
         ssin = sin(z);
         ccos = cos(z);
         
         for (int i = 0; i < 4; i++)
           {
             temp1 = (t_z.transform_matrix[i][0] * ccos)
               - (t_z.transform_matrix[i][1] * ssin);
             temp2 = (t_z.transform_matrix[i][0] * ssin)
               + (t_z.transform_matrix[i][1] * ccos);
             t_z.transform_matrix[i][1]
               = (fabs(temp2) >= eps) ? temp2 : 0;       
             t_z.transform_matrix[i][0]
               = (fabs(temp1) >= eps) ? temp1 : 0;       
           }
       } // |if|

  t_all *= t_x;
  t_all *= t_y;
  t_all *= t_z;

  t_all.clean();

  (*this) *= t_all;

  clean();
  return t_all;
} // End of |rotate|.

@q *** (3) Rotation around an arbitrary axis.@>
@*2 Rotation around an arbitrary axis.

@q **** (4) Point arguments.@>
@*3 {\bf Point} arguments.
@^\cfunc{Transform}{rotate}@>
Defined in \filename{points.web} because |Point| is an incomplete type 
here.

\LOG
\initials{LDF 2002.4.7.}  
Added default value for |angle| $\equiv 180$.

\initials{LDF 2003.05.02.}  
Changed name of this function from |rotate_around|
to |rotate|.  This function now overloads |rotate| with three
|real| arguments.
\ENDLOG 

@<Declare |Transform| functions@>=
Transform
rotate(Point p0, Point p1, const real angle = 180);

@q **** (4) Path argument.@>
@*3 {\bf Path} argument.
@^\cfunc{Transform}{rotate}@>
\initials{LDF 2002.05.03.}
Defined in \filename{paths.web} because |Path| is an incomplete type  
here.

\LOG 
 \initials{LDF 2002.05.03.}  
Added this function.

\initials{LDF 2003.05.02.}  
Changed name of this function from |rotate_around|
to |rotate|.  This function now overloads |rotate| with three
|real| arguments.
\ENDLOG 

@<Declare |Transform| functions@>=
Transform
rotate(const Path& p,  const real angle = 180);

@q ** (2) Alignment with an axis. @>
@*1 Alignment with an axis.
@^\cfunc{Transform}{align\_with\_axis}@>

Defined in \filename{points.web}, because it uses |Points|, which
haven't been defined yet. 
\initials{LDF Undated.}

@q *** (3) Declaration.@> 

@<Declare |Transform| functions@>=

Transform
align_with_axis(Point p0, Point p1, char axis = 'z'); /* Default is the z-axis. */

@q ** (2) Matrix multiplication.@>
@*1 Matrix multiplication.

@q *** (3) With assignment.@>
@*2 With assignment.

@q **** (4) real argument.@>
@*3 {\bf real} argument.
@^\cofunc{Transform}{*=}@>
\initials{LDF 2002.08.22.}  

This function multiplies each element of |Transform_Matrix| by the |real|
argument |r| and returns |r|.  This
makes it possible to chain invocations of this function.
Not currently used anywhere, but it may turn out to be useful for
something.
\initials{LDF 2002.11.19.}

\LOG
\initials{LDF 2002.08.22.}  
Added this function.

\initials{LDF 2002.11.19.}  
Changed return value from |*this| to |r|.
\ENDLOG  

@q **** (4) Declaration.@>

@<Declare |Transform| functions@>=

real
operator*=(real r);

@q **** (4) Definition.@> 

@
@<Define |Transform| functions@>=
real
Transform::operator*=(real r)
{
  for(int i = 0; i < 4; i++)
    for(int j = 0; j < 4; j++)
      transform_matrix[i][j] *= r;
  clean();
  return r;
}

@q *** (3) Transform argument.@>
@*2 {\bf Transform} argument.
@^\cofunc{Transform}{*=}@>
\initials{LDF Undated.}

\LOG 
\initials{LDF 2002.11.06.}  
If |t| is the identity |Transform|, it is 
returned right away.  If |*this| is, it is set to |t| using
|operator=|.  @: BUG FIX@> BUG FIX:  Now |t| is always returned,
instead of |*this|.  This makes it possible to chain expressions using
this function.
\ENDLOG 

@q **** (4) Declaration.@> 

@<Declare |Transform| functions@>=

Transform
operator*=(const Transform& t);

@q **** (4) Definition.@> 

@
@<Define |Transform| functions@>= 
Transform
Transform::operator*=(const Transform& t)
{
  bool DEBUG = false; /* |true| */@; 
  if (DEBUG) 
    cout << "Entering Transform::operator*=().\n";

  if (t.is_identity())
    {
      if (DEBUG)
        cout << "t is the identity transformation. "
             << "Returning t.\n";
      return t;
    }

  else if (is_identity())
    {
      if (DEBUG)
        cout << "*this is the identity transformation. "
             << "Setting *this to t and returning t.\n";
      return (*this = t);
    }

  Transform_Matrix temp_transform_matrix = {{0, 0, 0, 0},
                        {0, 0, 0, 0},
                        {0, 0, 0, 0},
                        {0, 0, 0, 0}};

  for(int i = 0; i < 4; i++)
    for(int k = 0; k < 4; k++)
      for(int j = 0; j < 4; j++)
        temp_transform_matrix[i][k] += transform_matrix[i][j] * t.transform_matrix[j][k];

  for(int i = 0; i < 4; i++)
    for(int j = 0; j < 4; j++)
      {
        transform_matrix[i][j] = temp_transform_matrix[i][j];
      }
  clean();

  if (DEBUG) 
    cout << "Exiting Transform::operator*=().\n";

  return t;
}  

@q ** Plain multiplication.@>
@ Plain multiplication.

@q *** real argument.@>
@ {\bf real} argument.
@^\cofunc{Transform}{*}@>
\initials{LDF 2002.08.22.}  Added this function.
Not currently used anywhere, but it may turn out to be useful for
something. 
@<Declare |Transform| functions@>=
Transform
operator*(const real r) const;

@
@<Define |Transform| functions@>= 
Transform
Transform::operator*(const real r) const
{
  Transform t = *this;
  t *= r;
  t.clean();
  return t;
}

@q *** Transform argument.@>
@ {\bf Transform} argument.
@^\cofunc{Transform}{*}@>
@<Declare |Transform| functions@>=
Transform
operator*(const Transform t) const;

@
@<Define |Transform| functions@>= 
Transform
Transform::operator*(const Transform t) const
{
  Transform a = *this;
  a *= t;
  a.clean();
  return a;
}

@q * (1) Transform_Matrix inversion.@>
@* Matrix inversion.  

@q ** (2) const version (no assignment).@>
@*1 {\bf const} version (no assignment).
@^\cfunc{Transform}{inverse}@>
\initials{LDF Undated.}

It would be easy to generate the inverses
of the transformations that I call explicitly using |rotate|,
|shift|, etc., as I go along.  However, it is not possible to do 
this for the ones produced using |operator*| and |operator*=|.
So, since a matrix inversion routine is needed anyway, I 
don't bother to generate the inverses as I go along.
\initials{LDF Undated.}

@:!! TO DO@> TO DO: Get format for references!
|inverse| uses the Gau{\ss}-Jordan algorithm with column pivot
search.  I've taken the algorithm from  Stoer, Josef. 
{\it Numerische Mathematik 1}%
%
\fnote{Stoer, Josef. 
{\it Numerische Mathematik 1}. Achte, neu bearbeitete und erweiterte
Auflage. Springer-Verlag. Berlin 1999. ISBN 3-540-66154-9, page 205.}
%
and adapted it to \CPLUSPLUS/.
\initials{LDF Undated.}

\LOG
\initials{LDF 2002.12.01.} 
@:!!@> !! 
Changed |hi| from |real| to |int| because of a warning, when I tried
to compile under GNU/Linux.  I think |hi| can be an |int|, but test to
be sure!  
\ENDLOG 

@q *** (3) Declaration.@> 

@<Declare |Transform| functions@>=
Transform
inverse(void) const;

@q *** (3) Definition.@>

@
@<Define |Transform| functions@>= 
Transform
Transform::inverse(void) const
{
  bool DEBUG = false; /* |true| */@; 
  if (DEBUG)
    cout << "Entering Transform::inverse()." << endl;
  int i;
  int j;
  int k;
  int row;

  const int n = 4;
  real max;
  real hr;
  int hi; /* \initials{LDF 2002.12.01.}  See above in ``Log''.  */@;

  real hv[n];

  Transform t;

  if (DEBUG)
    {
      cout << "transform_matrix =\n";
    }
  
  for(i = 0; i < 4; i++)
    {
      for(j = 0; j < 4; j++)
        {
          t.transform_matrix[i][j] = transform_matrix[i][j];
          if (DEBUG)
            {
              cout << transform_matrix[i][j] << " ";
            }
        }
      if (DEBUG)
        {
            cout << "\n";
        }
    }
  
  if (DEBUG)
    {
      cerr << "\n";
      t.show("t");
    }

  int p[n];

  for(int j = 0; j < n; j++)
    p[j] = j;

  for (j = 0; j < n; j++)
    {

@ Pivot search. 
@<Define |Transform| functions@>= 

      max = fabs(t.transform_matrix[j][j]);
      row = j;
      for (i = j + 1; i < n; i++)
        {
          if (fabs(t.transform_matrix[i][j]) > max)
              {
                max = fabs(t.transform_matrix[i][j]);
                row = i;
              } /* |if| */
        } /* inner |for| */
      if (DEBUG)
        {
          cout << "max == " << max << endl;
          cout << "row == " << row << endl;
        }

      if (max == ZERO_REAL)
        {
          cerr << "ERROR! In Transform::inverse():\n"
               << "Transform_Matrix is singular.  Returning INVALID_TRANSFORM.\n";

          return INVALID_TRANSFORM;
        }
@ Row exchange. 
@<Define |Transform| functions@>= 

      if (row > j)
        {
          for (k = 0; k < n; k++)
            {
              hr = t.transform_matrix[j][k];
              t.transform_matrix[j][k] = t.transform_matrix[row][k];
              t.transform_matrix[row][k] = hr;
            } /* |for| */
          hi = p[j];
          p[j] = p[row];
          p[row] = hi;
        } /* |if| */
      if (DEBUG) 
        cout << "Finished row exchange.\n";

@ Transformation.  
@<Define |Transform| functions@>= 

      if (DEBUG) 
        cout << "t.transform_matrix[" << j << "][" << j << "] == " 
             << t.transform_matrix[j][j] << endl;

      hr = 1/t.transform_matrix[j][j];
      for (i = 0; i < n; i++)
        t.transform_matrix[i][j] = hr * t.transform_matrix[i][j];
      t.transform_matrix[j][j] = hr;
      for (k = 0; k < n; k++)
        if (k != j)
          {
            for(i =0; i < n; i++)
              if (i != j)
                t.transform_matrix[i][k] -=   t.transform_matrix[i][j] 
                                            * t.transform_matrix[j][k];
            t.transform_matrix[j][k] *= -hr;
          }
          
    } /* outer |for| */
  if (DEBUG) 
    cout << "Finished Transformation.\n";
@ Column exchange.  
@<Define |Transform| functions@>= 
  for (i = 0; i < n; i++)
    {
      for (k = 0; k < n; k++)
        hv[p[k]] = t.transform_matrix[i][k];
      for (k = 0; k < n; k++)
        t.transform_matrix[i][k] = hv[k];
    } /* |for| */
  if (DEBUG)
    {
      cout << "Finished column exchange.\n";
      cout << "Exiting Transform::inverse()." << endl;
    }

  if (DEBUG)
    cout << "Exiting Transform::inverse()." << endl;

  return t;
}

@q ** (2) Non-const version (with assignment).@>
@*1 Non-{\bf const} version (with assignment).
@^\cfunc{Transform}{inverse}@>
\initials{LDF 2002.10.20.}  

There is no point in calling this function with |assign == false|,
since it is equivalent to the |const| version above with no argument.
If it is called with |assign == false|, a warning is issued, the
|const| version is invoked, and its return value is returned.
\initials{LDF 2002.10.20.}  

\LOG
\initials{LDF 2002.10.20.}  
Added this function.  I thought of calling in
``|invert|'', but I decided against it, because I thought having two
functions called ``|inverse|'' and ``|invert|'' would be
confusing.
\ENDLOG 

@q *** (3) Declaration.@>

@<Declare |Transform| functions@>=
Transform
inverse(bool assign);

@q *** (3) Definition.@> 

@
@<Define |Transform| functions@>= 
Transform
Transform::inverse(bool assign)
{
  bool DEBUG = false; /* |true| */@; 
  if (DEBUG)
    cout << "Entering Transform::inverse(bool assign).\n";

  if (assign == false)
    {
        cerr << "WARNING: In Transform::inverse(bool assign):\n"
             << "assign == false.  There's no reason to ever "
             << "call this function with a \"false\" argument,\n"
             << "but it doesn't do any harm.  Continuing.\n\n";
      return inverse();
    }
  
  if (DEBUG)
    cout << "Exiting Transform::inverse(bool assign).\n";
  
  return (*this = inverse());
}

@q * (1) Transposition.@>
@* Transposition.
\initials{LDF 2007.10.14.}

\LOG
\initials{LDF 2007.10.14.}
Added this section.
\ENDLOG

@q ** (2) Non-const version (with assignment).@>
@*1 Non-{\bf const} version (with assignment).
@^\cfunc{Transform}{transpose}@>
\initials{LDF 2007.10.14.}

\LOG
\initials{LDF 2007.10.14.}
Added this function.  
\ENDLOG 

@q *** (3) Declaration.@>

@<Declare |Transform| functions@>=
Transform
transpose(bool assign);

@q *** (3) Definition.@> 

@
@<Define |Transform| functions@>= 
Transform
Transform::transpose(bool assign)
{
   real r;

   for (int i = 0; i < 4; ++i)
   {
       for (int j = i + 1; j < 4; ++j)
       {

          r = transform_matrix[i][j];
          transform_matrix[i][j] = transform_matrix[j][i];
          transform_matrix[j][i] = r;

       }  /* Inner |for|  */

   }  /* Outer |for|  */

   return *this;

}  /* End of |Transform::transpose(bool assign)| definition.  */

@q ** (2) const version (no assignment).@>
@*1 {\bf const} version (no assignment).
@^\cfunc{Transform}{transpose}@>
\initials{LDF 2007.10.14.}

\LOG
\initials{LDF 2007.10.14.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Transform| functions@>=
Transform
transpose(void) const;

@q *** (3) Definition.@>

@
@<Define |Transform| functions@>= 
Transform
Transform::transpose(void) const
{

  Transform t = *this;
  return t.transpose(true);

}  /* End of |Transform::transpose(void) const| definition.  */

@q * (1) Global variables. @>
@* Global variables.
@<Global variables@>=
Transform user_transform;

@
@<Declarations for the header file@>=
extern Transform user_transform;

@q * Global constants. @>
@ Global constants.
@<Global constants@>=
extern const Transform INVALID_TRANSFORM(INVALID_REAL);
extern const Transform IDENTITY_TRANSFORM;

@
@<Declarations for the header file@>=
extern const Transform INVALID_TRANSFORM;
extern const Transform IDENTITY_TRANSFORM;

@q * Putting {\bf Transform} together. @>
@ Putting {\bf Transform} together.

@ This is what's compiled.
@c
@<Include files@>@;
@<Define |class Transform|@>@;
@<Declare non-member template functions for |Transform|@>;
@<Global variables@>@;
@<Global constants@>@;
@<Define |Transform| functions@>@;

@ This is what's written to \filename{transfor.h}.
@(transfor.h@>=
#ifndef LDF_TRANSFOR_H_KNOWN
#define LDF_TRANSFOR_H_KNOWN
@<Define |class Transform|@>@;
@<Declare non-member template functions for |Transform|@>;
@<Declarations for the header file@>@;
#endif

@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q run-gxx-on-file:"main.c" @>
@q run-cweb-on-file:"transfor.web" @>
@q run-cweave-on-file:"3DLDF.web" @>
@q makefile:"makefile" @>
@q executable-name:"pp" @>
@q use-g++:t @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q End: @>

