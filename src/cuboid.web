@q cuboid.web @>
  
@q * Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing. @>
@q Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, @>
@q 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021 The Free Software Foundation, Inc. @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version. @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details. @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html. @>

@q (``@@'' stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de @>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston                 @> 
@q c/o Free Software Foundation, Inc.  @>
@q 51 Franklin St, Fifth Floor         @> 
@q Boston, MA  02110-1301              @>
@q USA                                 @>

@q Laurence.Finston@@gmx.de (@@ stands for a single ``at'' sign.)@>

@q * (0) Cuboid.@>
@** Cuboid\quad ({\tt cuboid\PERIOD web}).\hfil

\LOG
\initials{LDF 2002.04.22.}  Created this file.
When I've found out what the English word is for ``Quader'', I'll
change it globally.

\initials{LDF 2002.04.22.}
|Cuboid| is the first three-dimensional object I've defined.
I've just quickly put it together for use in a drawing.
Ultimately, I'd like to derive it from |Shape|, which will require
defining versions of all the pure |virtual| functions in |Shape|. 

\initials{LDF 2002.04.23.}  Changed |Quader| to |Cuboid|.  Haven't changed name
of file, because this is more complicated, because of RCS (the source
code control system).

\initials{LDF 2002.05.03.}  Changed the name of this file from
\filename{quader.web} to \filename{cuboid.web}.  This means that if
you need to compare this file with revisions earlier than the initial
version of this file, you'll have to check revisions of
\filename{quader.web}. 

\initials{LDF 2003.11.12.}  Removed the version control identifiers from the CWEB
files for the distribution of 3DLDF 1.1.  They're still used in my
development versions.

\initials{LDF 2003.12.10.}  Put the version control identifiers back
into my release versions for 3DLDF 1.1.4.  I've already put some of
them back in, now I'm doing the rest of them.  However, the release
versions are now in their own RCS repository.
\ENDLOG 

@f Cuboid Solid

@q * (1) Include files.@>
@ Include files.

\LOG
\initials{LDF 2004.05.21.}  Now including \filename{pens.web}.
\ENDLOG 

@<Include files@>=
#include "loader.h++"
#include "pspglb.h++"
#include "io.h++"
#include "creatnew.h++"
#include "pntrvctr.h++"
#include "primes.h++"
#include "complex.h++"
#include "matrices.h++"
#include "colors.h++"
#include "transfor.h++"
#include "dashptrn.h++"
#include "pens.h++"
#include "shapes.h++"  
#include "pictures.h++"  
#include "points.h++"
#include "lines.h++"
#include "planes.h++"
#include "nurbs.h++"
#include "paths.h++"
#include "curves.h++"
#include "polygons.h++"
#include "triangle.h++"
#include "rectangs.h++"
#include "conicsct.h++"
#include "ellipses.h++"
#include "circles.h++"
#include "ellpsslc.h++"
#include "crclslc.h++"
#include "parabola.h++"
#include "hyprbola.h++"
#include "cncsctlt.h++"
#include "arc.h++"
#include "helices.h++"
#include "origami.h++"
#include "solids.h++"
#include "solfaced.h++"

@q * (1) Cuboid class definition.@>
@* {\bf Cuboid} class definition.
\LOG
\initials{LDF 2002.04.22.}  Added this |class| declaration.

\initials{LDF 2003.08.10.}  Removed |dihedral_angle|. 
\ENDLOG 

@<Define |class Cuboid|@>=
class Cuboid : public Solid_Faced

{
 protected:
  real height; 
  real width;  
  real depth;  
 public:
  @<Declare |Cuboid| functions@>@;
};

@q * (1) Constructors and setting functions. @>
@* Constructors and setting functions.

@q ** (2) Default constructor. No arguments.@>

@*1 Default constructor. No arguments.
@^\cfunc{Cuboid}{Cuboid}@>
\initials{LDF 2002.04.22.}  

\LOG
\initials{LDF 2002.04.22.}  
Added this function.

\initials{LDF 2005.01.24.}
Now setting |shape_type = CUBOID_TYPE|.

\initials{LDF 2005.03.31.}
Now setting |surface_hiding_ctr = 0|.

\initials{LDF 2005.04.18.}
Now setting |decomposition_level = 0|.
\ENDLOG 

@<Declare |Cuboid| functions@>=
Cuboid(void);

@
@<Define |Cuboid| functions@>= 
 Cuboid::Cuboid(void)
{
  shape_type = CUBOID_TYPE;
  surface_hiding_ctr = 0;
  decomposition_level = 0;
  do_output = true;
  projective_extremes.resize(6, 0); 
  faces = 6;
  vertices = 8;
  edges = 12;
}

@q ** (2) Copy constructor.@>
@*1 Copy constructor.
@^\cfunc{Cuboid}{Cuboid}@>
\initials{LDF 2002.05.03.}  

\LOG
\initials{LDF 2002.05.03.}  
Added this function.  

\initials{LDF 2005.01.24.}
Now setting |shape_type = CUBOID_TYPE|.

\initials{LDF 2005.03.31.}
Now setting |surface_hiding_ctr = 0|.

\initials{LDF 2005.04.18.}
Now setting |decomposition_level = 0|.
\ENDLOG 

@<Declare |Cuboid| functions@>=
Cuboid(const Cuboid& c);

@
@<Define |Cuboid| functions@>= 
Cuboid::Cuboid(const Cuboid& c)
{
  shape_type = CUBOID_TYPE;
  surface_hiding_ctr = 0;
  decomposition_level = 0;
  do_output = true;
  projective_extremes.resize(6, 0); 
  faces = 6;
  vertices = 8;
  edges = 12;

  for (vector<Rectangle*>::const_iterator iter = c.rectangles.begin();
       iter != c.rectangles.end();
       iter++)
    {
      rectangles.push_back(create_new<Rectangle>(0));
      *(rectangles.back()) = **iter;
    }
}

@q ** (2) Center, width, height, depth, and angles.@>

@*1 Center, width, height, depth, and angles.
@^\cfunc{Cuboid}{Cuboid}@>
\initials{LDF 2002.10.06.}  

\LOG
\initials{LDF 2002.10.06.}  
Added this constructor.  

\initials{LDF 2005.01.24.}
Now setting |shape_type = CUBOID_TYPE|.

\initials{LDF 2005.03.31.}
Now setting |surface_hiding_ctr = 0|.

\initials{LDF 2005.04.18.}
Now setting |decomposition_level = 0|.

\initials{LDF 2005.12.07.}
Changed the order of the |const real| arguments |w| and |h|.  
|w| now comes first.

\initials{LDF 2005.12.09.}
@:BUG FIX@> BUG FIX:  Reversed the order of the |Point| arguments to 
|Rectangle::set()| for |*(rectangles[1])| and |*(rectangles[5])|, so 
that the normals of all of the |Rectangles| point outwards.
\ENDLOG 

@<Declare |Cuboid| functions@>=
Cuboid(const Point& c, const real w, const real h, const real d,
       const real x = 0, const real y = 0, const real z = 0);

@
@<Define |Cuboid| functions@>= 
Cuboid::Cuboid(const Point& c, const real w, const real h, const real d,
       const real x, const real y, const real z)
     : width(w), height(h), depth(d)

{
  bool DEBUG = false; /* |true| */

  shape_type = CUBOID_TYPE;
  surface_hiding_ctr = 0;
  decomposition_level = 0;
  do_output = true;
  projective_extremes.resize(6, 0); 
  center = c; 
  faces = 6;
  vertices = 8;
  edges = 12;

  Point pts[9];
  pts[1].shift(-.5 * width, -.5 * height, -.5 * depth);
  pts[2].shift(.5 * width, -.5 * height, -.5 * depth);
  pts[3].shift(.5 * width, .5 * height, -.5 * depth);
  pts[4].shift(-.5 * width, .5 * height, -.5 * depth);

  pts[5].shift(-.5 * width, -.5 * height, .5 * depth);
  pts[6].shift(.5 * width, -.5 * height, .5 * depth);
  pts[7].shift(.5 * width, .5 * height, .5 * depth);
  pts[8].shift(-.5 * width, .5 * height, .5 * depth);
  
  for (int i = 0; i < 6; i++)
    {
      rectangles.push_back(create_new<Rectangle>(0));
    }  

  rectangles[0]->set(pts[1], pts[2], pts[3], pts[4]);  /* front  */
  rectangles[1]->set(pts[8], pts[7], pts[6], pts[5]);  /* back  */
  rectangles[2]->set(pts[1], pts[4], pts[8], pts[5]);  /* left  */
  rectangles[3]->set(pts[2], pts[6], pts[7], pts[3]);  /* right  */
  rectangles[4]->set(pts[3], pts[7], pts[8], pts[4]);  /* top  */
  rectangles[5]->set(pts[5], pts[6], pts[2], pts[1]);  /* bottom  */

  rotate(x, y, z);
  shift(c);

#if 0 
  if (DEBUG)
    for (int i = 1; i < 9; i++)
      pts[i].dotlabel(i);
#endif 
}

@q * (1) Pseudo-constructor for dynamic allocation.@>
@* Pseudo-constructor for dynamic allocation.

@q ** (2) Pointer argument.@>
@*1 Pointer argument.
\initials{LDF 2002.04.22.}  

\LOG
\initials{LDF 2002.04.22.}  
Added this function.

\initials{LDF 2003.12.30.}  
Replaced |Cuboid::create_new_cuboid()|
with a specialization of |template <class C> C* create_new()| for
|Cuboid|.  The argument is now |const|.

\initials{LDF 2004.10.11.}
Added |Scanner_Node scanner_node| argument.
\ENDLOG 

@<Declare non-member template functions for |Cuboid|@>=
Cuboid* 
create_new(const Cuboid* c, Scanner_Node scanner_node);

@q ** (2) Reference argument.@>
@*1 Reference argument.
\initials{LDF 2003.12.30.} 

\LOG
\initials{LDF 2003.12.30.} 
Added this function.

\initials{LDF 2004.10.11.}
Added |Scanner_Node scanner_node| argument.
\ENDLOG 

@<Declare non-member template functions for |Cuboid|@>=
Cuboid* 
create_new(const Cuboid& c, Scanner_Node scanner_node);

@q * (1) Destructor. @>
@* Destructor. 
@^\cfunc{Cuboid}{\~{}Cuboid}@>

@:!!@> !! Make sure to delete anything else that I allocate
dynamically! 
\initials{LDF Undated.}

@<Declare |Cuboid| functions@>=
~Cuboid();

@ 
@<Define |Cuboid| functions@>=
Cuboid::~Cuboid()
{
  for(vector<Rectangle*>::iterator iter = rectangles.begin();
      iter != rectangles.end();
      iter++)
    {
      delete *iter;
    }
  rectangles.clear();
}

@q * (1) Assignment. @>
@* Assignment.
@^\cofunc{Cuboid}{=}@>

@q ** (2) Declaration.@> 

@<Declare |Cuboid| functions@>=
void
operator=(const Cuboid& c);

@q ** (2) Definition.@> 

@ 
@<Define |Cuboid| functions@>= 
void
Cuboid::operator=(const Cuboid& c)
{
  this->Solid::operator=(c);
  height = c.height;
  width = c.width;
  depth = c.depth;
}

@q * (1) Get copy.@>
@* Get copy.
@^\cfunc{Cuboid}{get\_copy}@>
\initials{LDF 2005.03.18.}

\LOG
\initials{LDF 2005.03.18.}
Added this function.
\ENDLOG

@<Declare |Cuboid| functions@>=
virtual
Shape*
get_copy() const;

@
@<Define |Cuboid| functions@>=
Shape*
Cuboid::get_copy() const
{
  Cuboid* p = create_new<Cuboid>(0);
  *p = *this;
  return static_cast<Shape*>(p);
}

@q * (1) Returning elements and information.@> 
@* Returning elements and information.
\initials{LDF 2005.03.18.}

\LOG
\initials{LDF 2005.03.18.}
Added this section.
\ENDLOG

@q ** (2) Get |Shape| type.@> 
@*1 Get {\bf Shape} type.
\initials{LDF 2005.03.18.}

\LOG
\initials{LDF 2005.03.18.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Cuboid| functions@>=
virtual 
inline
unsigned short 
get_shape_type(void) const
{
   return CUBOID_TYPE;
}

@q ** (2) Is |Cuboid|.@> 
@*1 Is {\bf Cuboid}.
\initials{LDF 2005.03.31.}

\LOG
\initials{LDF 2005.03.31.}
Added this function.

\initials{LDF 2005.04.04.}
Made this function |const|
\ENDLOG

@<Declare |Cuboid| functions@>=
virtual
inline
bool
is_cuboid(void) const
{
   return true;
}

@q ** (2) Location of a |Point| with respect to a |Cuboid|.@> 
@*1 Location of a {\bf Point} with respect to a {\bf Cuboid}.
\initials{LDF 2005.12.09.}

Return values:\hfil\break 
\item{0} The |Point| lies on one of the surfaces of the |Cuboid|.
%
\item{1} The |Point| lies within the |Cuboid|.
%
\item{-1} The |Point| lies outside the |Cuboid|.
%
\item{-2} Error:  |Rectangle::get_plane()| returned |INVALID_PLANE|.
\hfil\break 
\initials{LDF 2005.12.09.}

\TODO
@q { @>
@:TO DO}{{\bf TO DO}@>
@q } @> 
@q !! TO DO:  @>
\initials{LDF 2005.12.09.}
It would be possible to use different return values to indicate the position 
of the |Point| more precisely.  For example, whether it lies on one of the 
vertices or edges.
\ENDTODO 

\LOG
\initials{LDF 2005.12.09.}
Added this function.

\initials{LDF 2005.12.11.}
Made this function |const|.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Cuboid| functions@>=
virtual
Signed_Byte
location(const Point& p, Scanner_Node scanner_node = 0) const;

@q *** (3) Definition.@> 
@
@<Define |Cuboid| functions@>=
Signed_Byte
Cuboid::location(const Point& p, Scanner_Node scanner_node) const
{
@q **** (4) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q **** (4).@>

   Real_Short rs;
   Plane q;

   for (vector<Rectangle*>::const_iterator iter = rectangles.begin();
        iter != rectangles.end();
        ++iter)
      { 
          q = (**iter).get_plane();

@q ***** (5)@> 

          if (q == INVALID_PLANE)
             {
                 cerr_strm << thread_name << "ERROR!  In `Cuboid::location()':"
                           << endl 
                           << "`Rectangle::get_plane()' returned `INVALID_PLANE'.  "
                           << "Can't determine location of `Point' with respect to `Cuboid'."
                           << endl 
                           << "Exiting function unsuccessfully with return value -2.";

                 log_message(cerr_strm);
                 cerr_message(cerr_strm, error_stop_value);
                 cerr_strm.str("");

                 return -2;

             }  /* |if (q == INVALID_PLANE)|  */             

@q ***** (5)@> 

          rs = q.get_distance(p, scanner_node); 

@q ***** (5)@> 

          if (rs.second == 1)
             return -1;
        
@q ***** (5)@> 

          if (rs.second == 0)
             {
                 Point pt[4];
                 
                 for (int j = 0; j < 4; ++j)
                     pt[j] = (**iter).get_point(j);  

                 if (p.is_in_triangle(pt[0], pt[1], pt[2], DEBUG))
                    return 0;
           
                 if (p.is_in_triangle(pt[0], pt[3], pt[2], DEBUG))
                    return 0;
               
             }  /* |if (rs.second == 0)|  */

@q ***** (5)@> 

      }  /* |for|  */

   return 1;

}  /* End of |Cuboid::location(const Point& p, [etc.])| definition.  */

@q * (1) Intersections.@> 
@* Intersections.
\initials{LDF 2005.12.09.}

\LOG
\initials{LDF 2005.12.09.}
Added this section.
\ENDLOG

@q ** (2) |Path| argument.@> 
@*1 {\bf Path} argument.
\initials{LDF 2005.12.09.}

\LOG
\initials{LDF 2005.12.09.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Cuboid| functions@>=
virtual
Pointer_Vector<Bool_Point>* 
intersection_points(const Path& p, 
                    Scanner_Node scanner_node = 0) const;

@q *** (3) Definition.@>

@
@<Define |Cuboid| functions@>=
Pointer_Vector<Bool_Point>* 
Cuboid::intersection_points(const Path& p, 
                            Scanner_Node scanner_node) const

{

@q **** (4) Preliminaries.@> 

    bool DEBUG = false; /* |true| */

    using namespace Scan_Parse;

    stringstream cerr_strm;

    bool error_stop_value   = true;
    bool warning_stop_value = true;
    string thread_name      = "";

    if (scanner_node)
       scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                   &error_stop_value,
                                                   &warning_stop_value);

@q **** (4)@> 

    Bool_Point_Pair bpp;

    Pointer_Vector<Bool_Point>* bpv = 0;

    Bool_Point* bp = 0;

bool break_switch = false;

@q **** (4)@> 

    for (vector<Rectangle*>::const_iterator iter = rectangles.begin();
         iter != rectangles.end();
         ++iter)
       {
           bpp = (**iter).intersection_points(p, scanner_node, true);
 
@q ***** (5)@> 

           if (bpp.first.pt != INVALID_POINT)
              {
                  if (bpv == static_cast<Pointer_Vector<Bool_Point>*>(0))
                     {
                         bpv = new Pointer_Vector<Bool_Point>;
                         bp = new Bool_Point(bpp.first);
                         *bpv += bp;
                     }

                  else if (bpp.first.pt != bpv->v[0]->pt)
                     {
                         bp = new Bool_Point(bpp.first);
                         *bpv += bp;
                         return bpv;
                     }

              }  /* Outer |if|  */

@q ***** (5)@> 

           if (bpp.second.pt != INVALID_POINT)
              {
                  if (bpv == static_cast<Pointer_Vector<Bool_Point>*>(0))
                     {
                         bpv = new Pointer_Vector<Bool_Point>;
                         bp = new Bool_Point(bpp.second);
                         *bpv += bp;
                     }

                  else if (bpp.second.pt != bpv->v[0]->pt)
                     {
                         bp = new Bool_Point(bpp.second);
                         *bpv += bp;
                         return bpv;
                     }

              }  /* Outer |if|  */

@q ***** (5)@> 

       }  /* Outer |for|  */   

@q **** (4)@> 

    return bpv;

}  /* End of |Cuboid::intersection_points(const Path& p, [etc.])| 
      definition.  */

@q ** (2) |Plane*| argument.@> 
@*1 {\bf Plane*} argument.
\initials{LDF 2005.12.11.}

\LOG
\initials{LDF 2005.12.11.}
Added this function.

\initials{LDF 2006.01.20.}
Removed code from this function to  |Polygon::disentangle()|.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Cuboid| functions@>=
virtual
Polygon*
intersection(const Plane& q, 
             bool suppress_warnings = false,
             Scanner_Node scanner_node = 0) const;

@q ** (2) Definition.@>

@
@<Define |Cuboid| functions@>=
Polygon*
Cuboid::intersection(const Plane& q,
                     bool suppress_warnings,
                     Scanner_Node scanner_node) const

{

@q **** (4) Preliminaries.@> 

    bool DEBUG = false; /* |true| */

    using namespace Scan_Parse;

    stringstream cerr_strm;

    bool error_stop_value   = true;
    bool warning_stop_value = true;
    string thread_name      = "";

    if (scanner_node)
       scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                   &error_stop_value,
                                                   &warning_stop_value);

@q **** (4)@> 

    Line L;
    Bool_Point bp;
    Pointer_Vector<Point>* pv = new Pointer_Vector<Point>;
    Point curr_pt;
    Pointer_Vector<Bool_Point>* bpv = 0;

    Point p[4];
    Path ppath;

@q **** (4)@> 
@
\LOG
\initials{LDF 2005.12.13.}
Rearranged the code in this loop.
Now calling |Plane::intersection_line()| with |true| as the latter's  
|bool suppress_warnings| argument.  Also continuing 
if |Line L == INVALID_LINE|.
\ENDLOG 

@<Define |Cuboid| functions@>=

    for (vector<Rectangle*>::const_iterator iter = rectangles.begin();
         iter != rectangles.end();
         ++iter)
       {
           L = (**iter).get_plane().intersection_line(q, scanner_node, true);
           if (L == INVALID_LINE)
              continue;
           else 
              ppath = L.get_path();

           bpv = intersection_points(ppath, scanner_node);                  
           if (!bpv || bpv->ctr <= 0)
              continue;

           else  /* |   bpv != static_cast<Pointer_Vector<Bool_Point>*>(0) 
                     && bpv->ctr > 0|  */
              {

                  for (int i = 0; i < 4; ++i)   /* First inner |for|  */
                     {

                          for (vector<Bool_Point*>::const_iterator b_iter = bpv->v.begin();
                               b_iter != bpv->v.end();
                               ++b_iter)     /* Second inner |for|  */
                             {
                                 if ((**b_iter).pt != INVALID_POINT)
                                    {
                                        curr_pt = (**b_iter).pt;
                                        *pv += create_new<Point>(curr_pt);
                                    }

                             } /* End of second inner |for|  */

}  /* End of first inner |for|  */

             }  /* |else| (|bpv != static_cast<Pointer_Vector<Bool_Point>*>(0)|)  */

          delete bpv;
          bpv = 0;  

       }  /* Outer |for|  */   

@q **** (4)@> 

    if (pv->ctr == 0)
       {
           if (!suppress_warnings)
              {
                  cerr_strm << thread_name 
                            << "WARNING!  In `Cuboid::intersection(const Plane&, [etc.])':"
                            << endl 
                            << "`Plane' doesn't intersect `Cuboid'.  Exiting function "
                            << "with return value 0.";

                  log_message(cerr_strm);
                  cerr_message(cerr_strm, warning_stop_value);
                  cerr_strm.str("");

              }  /* |if (!suppress_warnings)|  */
               
           delete pv;
           pv = 0;
   
           return 0;

       }  /* |if (pv->ctr == 0)|  */     

@q **** (4)@> 

    Polygon* poly = static_cast<Polygon*>(Polygon::disentangle(
                                                      static_cast<void*>(pv), 
                                                      static_cast<void*>(scanner_node),
                                                      suppress_warnings));

    return poly;

@q **** (4)@> 

}  /* End of |Cuboid::intersection_points(const Plane& p, [etc.])| 
      definition.  */

@q * (1) Reflection in a |Plane|.@> 
@* Reflection in a |Plane|.
\initials{LDF 2004.10.05.}
@^\cfunc{Cuboid}{reflect\_in}@>

Please note that this function tries to allocate memory on the free 
store for the |Cuboid| pointed to by the pointer to |Shape| which is 
its return value.  Therefore, programmers who use this function must 
ensure that this memory is freed.
\initials{LDF 2004.10.05.}

If allocation fails, this function throws a |bad_alloc| exception.  
If the reflection of |*this| cannot be found in the |Plane|, 
this function returns 0.
\initials{LDF 2004.10.05.}

\LOG
\initials{LDF 2004.10.05.}
Added this function.

\initials{LDF 2004.10.12.}
Rewrote this function.  Following a system update, having |Shape*| 
as the return value no longer worked.

\initials{LDF 2004.10.12.}
@:BUG FIX@> Various bug fixes.
\ENDLOG

@q ** (2) Declaration.@> 

@<Declare |Cuboid| functions@>=
virtual
int
reflect_in(const Plane& p, 
           void* v,
           const Scanner_Node scanner_node = 0) const;

@q ** (2) Definition.@>

@
@<Define |Cuboid| functions@>=
int
Cuboid::reflect_in(const Plane& p, 
                   void* v,
                   const Scanner_Node scanner_node) const
{

@q *** (3) Preliminaries.@> 

  bool DEBUG = false; /* |true| */

  using namespace Scan_Parse;

  stringstream cerr_strm;

  bool error_stop_value   = true;
  bool warning_stop_value = true;
  string thread_name      = "";

  if (scanner_node)
     scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                   &error_stop_value,
                                                   &warning_stop_value);

@q *** (3).@> 

  Cuboid* cuboid_reflection = static_cast<Cuboid*>(v);  

@q *** (3) If |cuboid_reflection == static_cast<Cuboid*>(0)|, try to allocate memory @>
@q *** (3) on the free store for it.                                                 @>

@ If |cuboid_reflection == static_cast<Cuboid*>(0)|, try to allocate memory 
on the free store for it.                            
\initials{LDF 2004.10.12.}

@<Define |Cuboid| functions@>=

 if (cuboid_reflection == static_cast<Cuboid*>(0))
 {
  try
     {
       cuboid_reflection = create_new<Cuboid>(0, scanner_node);
     }

@q **** (4) Error handling:  |new Cuboid| failed.  Rethrow |bad_alloc|.@> 

@ Error handling:  |new Cuboid| failed.  Rethrow |bad_alloc|.
\initials{LDF 2004.10.05.}

@<Define |Cuboid| functions@>=

  catch (bad_alloc)
     {

       cerr_strm << thread_name << "ERROR! In `Point::reflect_in()':" 
                 << endl
                 << "`create_new<Cuboid>()' failed. "
                 << "Rethrowing `bad_alloc'.";

       log_message(cerr_strm);
       cerr_message(cerr_strm, error_stop_value);
       cerr_strm.str("");

       throw;

} /* |catch (bad_alloc)|  */

@q *** (3).@> 

  } /* |if (cuboid_reflection == static_cast<Cuboid*>(0))|  */

@q *** (3) Call |Solid_Faced::reflect_in()|.@> 

@ Call |Solid_Faced::reflect_in()|.
\initials{LDF 2004.10.05.}

@<Define |Cuboid| functions@>=

  Solid_Faced solid_faced_reflection;

  int status;

  try
     {
       status = Solid_Faced::reflect_in(p,
                            static_cast<void*>(&solid_faced_reflection),
                            scanner_node);  
     }

@q **** (4) Error handling:  |Solid_Faced::reflect_in()| threw |bad_alloc|.@> 

@ Error handling:  |Solid_Faced::reflect_in()| threw |bad_alloc|.
\initials{LDF 2004.10.05.}

@<Define |Cuboid| functions@>=

  catch (bad_alloc)
     {
       cerr_strm << thread_name << "ERROR! In `Cuboid::reflect_in():'"
                 << endl 
                 << "`Solid_Faced::reflect_in()' threw `bad_alloc'."
                 << endl << "Deleting `cuboid_reflection' and "
                 << "rethrowing `bad_alloc'.";

       log_message(cerr_strm);
       cerr_message(cerr_strm, error_stop_value);
       cerr_strm.str("");

       delete cuboid_reflection;

       throw;

     } /* |catch (bad_alloc)|  */

@q **** (4) Error handling:  |Solid_Faced::reflect_in()| returned 1.@> 

@ Error handling:  |Solid_Faced::reflect_in()| returned 1.
\initials{LDF 2004.10.12.}

@<Define |Cuboid| functions@>=

  if (status == 1)
    {

      cerr_strm << thread_name << "ERROR! In `Cuboid::reflect_in():'"
                << endl 
                << "`Solid_Faced::reflect_in()' failed and returned 1."
                << endl << "Deleting `cuboid_reflection' "
                << "and exiting function with return value 1.";

      log_message(cerr_strm);
      cerr_message(cerr_strm, error_stop_value);
      cerr_strm.str("");
  
      delete cuboid_reflection;

      return 1;

}  /* |if (status == 1)|  */

@q **** (4) |Solid_Faced::reflect_in()| succeeded.@> 

@ |Solid_Faced::reflect_in()| succeeded.
\initials{LDF 2004.10.05.}

@<Define |Cuboid| functions@>=

#if DEBUG_COMPILE
   if (DEBUG)
     {
        cerr_strm << thread_name << "In `Cuboid::reflect_in()':"
                  << endl << "`Solid_Faced::reflect_in()' succeeded.";

        log_message(cerr_strm);
        cerr_message(cerr_strm);
        cerr_strm.str("");

     }
#endif /* |DEBUG_COMPILE|  */ 

   cuboid_reflection->Solid_Faced::operator=(solid_faced_reflection);

@q *** (3) Set other data members of |*cuboid_reflection|.@> 

@ Set other data members of |*cuboid_reflection|.
\initials{LDF 2004.10.05.}

@<Define |Cuboid| functions@>=

  cuboid_reflection->height  = height; 
  cuboid_reflection->width   = width;  
  cuboid_reflection->depth   = depth;  

@q *** (3) Exit function successfully with   @> 
@q *** (3) return value 0.@> 

@ Exit function successfully with return value 0.
\initials{LDF 2004.10.05.}

@<Define |Cuboid| functions@>= 

#if DEBUG_COMPILE
   if (DEBUG)
     {
        cerr_strm << thread_name << "In `Cuboid::reflect_in()':"
                  << endl << "Exiting function successfully with "
                  << "return value 0.";

        log_message(cerr_strm);
        cerr_message(cerr_strm);
        cerr_strm.str("");

     }
#endif /* |DEBUG_COMPILE|  */ 

  return 0;

} /* End of |Cuboid::reflect_in()| definition.  */

@q * Putting Cuboid together.@>
@ Putting {\bf Cuboid} together.
This is what's compiled.
@c
@<Include files@>@;
@<Define |class Cuboid|@>@;
@<Define |Cuboid| functions@>@;
@<Declare non-member template functions for |Cuboid|@>@;

@ This is what's written to \filename{cuboid.h}.
@(cuboid.h@>=
@<Define |class Cuboid|@>@;
@<Declare non-member template functions for |Cuboid|@>@;

@q * Emacs-Lisp code for use in indirect buffers when using the          @>
@q   GNU Emacs editor.  The local variable list is not evaluated when an @>
@q   indirect buffer is visited, so it's necessary to evaluate the       @>
@q   following s-expression in order to use the facilities normally      @>
@q   accessed via the local variables list.                              @>
@q   \initials{LDF 2004.02.12}.                                          @>
@q   (progn (cweb-mode) (outline-minor-mode t) (setq fill-column 80))    @>

@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q run-cweave-on-file:"3DLDF.web" @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q End: @>
