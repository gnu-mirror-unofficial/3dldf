@q parser2.web@>
@q Created by Laurence D. Finston (LDF) Wed Nov  4 14:31:22 CET 2009 @>

@q * (1) Parser 2.  @>
@*2 Parser 2.
\initials{LDF 2009.11.04.}

@q ** (2) Include files.@>
@ Include files.

@<Include files@>=

#include <stdlib.h>
#include <stdio.h>
#include <stdarg.h>

#include <fstream>
#include <getopt.h> 
#include <iomanip>
#include <ios>
#include <iostream>
#include <iterator>
#include <map>
#include <new>
#include <string>
#include <ctype.h>
#include <time.h>
#include <math.h>
#include <sstream>   
#include <stdarg.h>
#include <stdexcept>

#include <stack>
#include <vector>
    
#include <pthread.h>

#include <config.h>

#include "parser2.h++"
#include "scanner2.h++"

@
@<Include files@>=

@q ** (2) Declarations of additional functions.@>
@*3 Declarations of additional functions.

@<Declarations of additional functions@>=

int 
zzlex(YYSTYPE* lvalp, yyscan_t parameter);

int
zzwrap(void);

int
zzerror(void* v, char const* s);

@q ** (2) Options.@>
@*3 Options.

@<Options@>=
@=%verbose@>@;@/
@=%pure-parser@>@;@/
@=%parse-param {yyscan_t parameter}@>@;@/
@=%lex-param {yyscan_t parameter}@>@;@/
@=%name-prefix="zz"@>@;@/
@=%debug@>

@q ** (2) |union| declaration.@>
@*3 {\bf union} declaration.

@<|union| declaration@>=

@=%union {@>
 
  int int_value;
  unsigned int uint_value;
  float float_value;
  char string_value[256];

@=}@>

@q ** (2) Token and type declarations.@>
@*3 Token and type declarations.

@q *** (3) Punctuation.  @>
@*3 Punctuation.

@<Token and type declarations@>=

@=%token<int_value> HYPHEN_2@>@;@/
@=%token<int_value> COLON_2@>@;@/            
@=%token<int_value> SEMI_COLON_2@>@;@/      
@=%token<int_value> EXCLAMATION_POINT_2@>@;@/      

@q *** (3) Start conditions for the scanner.  @>
@*3 Start conditions for the scanner.
\initials{LDF Undated.}

@<Token and type declarations@>=

@q *** (3) @>
@*3 Control.

@<Token and type declarations@>=      

@=%token<int_value> START_ENTRY_2@>   
@=%token<int_value> END_ENTRY_2@>   
@=%token<int_value> END_2@>   

@q **** (4) Tokens for start conditions.  @>
@*3 Tokens for start conditions.  
\initials{LDF Date unknown.}

@<Token and type declarations@>=      

@q *** (3) Numbers.  @>
@*3 Numbers.    

@<Token and type declarations@>=      

@=%token<int_value> INTEGER_2@>@;@/      
@=%token<uint_value> UNSIGNED_INTEGER_2@>@;@/      
@=%token<float_value> FLOAT_2@>@;@/      

@q ** (2) Rules.  @>
@*3 Rules.

@<Rules@>=

@q *** (3) Program.  @>
@*3 Program.

@<Rules@>=

@=program: statement_list END_2@>
{

    return 0;

};

@q *** (3) statement_list.  @>
@*3 \<statement list>.
\initials{LDF 2008.08.18.}

\LOG
\initials{LDF 2008.08.18.}
Added this section.
\ENDLOG  

@q **** (4) statement_list --> EMPTY.  @>

@*3 \<statement list> $\longrightarrow$ \.{EMPTY}.  
This rule ensures that an empty file won't cause an error.
\initials{LDF 2008.07.07.}

@<Rules@>=

@=statement_list: /* Empty  */  @>
{

};

@q **** (4) statement_list --> statement_list statement.  @>

@*3 \<statement list> $\longrightarrow$ \<statement>.
\initials{LDF 2009.10.05.}

@<Rules@>=

@=statement_list: statement_list statement @>
{

};

@q *** (3) Statement.  @>
@*3 Statement.
\initials{LDF 2009.10.05.}

@q **** (4) statement --> START_ENTRY_2 keyword_value_pair_list END_ENTRY_2 @>

@*3 \<statement> $\longrightarrow$ \.{START\_ENTRY\_2} \<keyword value pair list> 
\.{END\_ENTRY\_2}.
\initials{LDF 2009.10.05.}

@<Rules@>=

@=statement: START_ENTRY_2 entry_statement_list END_ENTRY_2 @>
{

};

@q **** (4) @>
@
@<Rules@>=

@=entry_statement_list: /* Empty  */  @>
{

};

@ Putting parser together.
@c
@=%{@>
@<Include files@>@;@/
using namespace std;
@<Declarations of additional functions@>@;@/
@=%}@>
@<Options@>@;@/
@<|union| declaration@>@;@/
@<Token and type declarations@>@;@/
@=%%@>
@q Rules @>
@<Rules@>@;@/

@q * (1) Emacs-Lisp code for use in indirect buffers  @>

@q (progn (cweb-mode) (outline-minor-mode) (setq abbrev-mode t)  @>

@q * (1) Local variables for Emacs @>

@q * Local variables for Emacs.@>
@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q abbrev-mode:t @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q fill-column:80 @>
@q End: @>
