@q 3DLDFcpl.web @>
 
@q * Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing. @>
@q Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,            @>
@q 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021 The Free Software Foundation @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version. @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details. @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html. @>

@q (``@@'' stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de @>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston                 @> 
@q c/o Free Software Foundation, Inc.  @>
@q 51 Franklin St, Fifth Floor         @> 
@q Boston, MA  02110-1301              @>
@q USA                                 @>

@q Laurence.Finston@@gmx.de (@@ stands for a single ``at'' sign.)@>



@q * (0) Compiling.@> 
@** Compiling\quad ({\tt 3DLDFcpl\PERIOD web}).\hfil

\.{3DLDFcpl} is a  separate program from GNU 3DLDF and is used for
compiling the latter. 
\filename{3DLDFcpl.web} includes \filename{3DLDFprc.web}.
\initials{LDF 2002.11.10.}  

It would be nice to prevent compilation if only
whitespace has been changed in a file, and also to check whether the
\CPLUSPLUS/ file has been changed.  Must use \.{diff} on the files.
\initials{LDF 2002.11.05.}  

\item{$\bullet$} \.{3DLDFcpl} can't tell whether only the {\TeX} part of a
\CWEB/ file has been changed. I could perform the same sort of test on
the file of \CPLUSPLUS/ code as I do on the header file.

\initials{LDF 2002.01.25.} 
If object files are missing, ctangle and cxx are run. A
backup is made of the header file before compilation. Following
compilation, the header file and the backup are copied and comments
and ``line'' commands are removed. Then, the copies are compared. If
no changes made to the \CWEB/ files caused changes to the header
files they write, then the following \CWEB/ files are not retangled
and recompiled, unless they've been changed, too, or the object files
are missing.

\.{3DLDFcpl} is for running ctangle on the \CWEB/ files for 3DLDF and
compiling them. The dependencies among the files, while simple, make
it tricky to use \.{make}. It might be possible to get \.{make} to do
what I want, but I'm not sure.

\TODO
@:TO DO}{{\bf TO DO}@>
@:!! TO DO@> TO DO:  
\initials{LDF 2003.08.18.}
Clean up the conditionally compiled code.  I
think it could be neater.  
\ENDTODO 


\LOG
\initials{LDF 2003.05.13.}  
Now using |rcs_id| for writing the version control
identifier (for RCS) to the object file \filename{cmplLIN.o}.  

\initials{LDF 2003.05.13.}  
Added code for handling \filename{utility.web}, which
I've added today.
  
\initials{LDF 2003.08.18.}  
Combined \filename{cmplLIN.web} and
\filename{cmplDEC.web} into this file, and renamed it
\filename{3DLDFcpl.web}.  It contains conditionally compiled code, so
that it can be used for compiling with the DEC \CPLUSPLUS/ compiler
under Compaq Tru64, and with both GCC 2.95 and GCC 3.3 under Linux.
\ENDLOG 

@q * Configuration file.@>
@* Configuration file.@>
\filename{config.h} is generated by the \.{configure} script generated
by Autoconf.
See the section of the same name in \filename{loader.web} for more
information.  \initials{LDF 2003.11.12.} 

\LOG
\initials{LDF 2003.11.12.}  
Added this section.

\initials{LDF 2003.12.17.} 
Added |#ifndef  __DECCXX|, because building
with Autoconf, etc.,
doesn't work on the DEC Alpha machine I'm using.
\ENDLOG 
@c
#ifndef  __DECCXX 
#include "config.h"
#endif 

@q * Library files.@>
@* Library files.
In my own version of 3DLDF (not for distribution),
\filename{plfmvar.h} is included first.  It contains \CPLUSPLUS/ 
preprocessor definitions for conditional compilation.  It accounts for
platform and compiler dependencies that affect compilation.   
There should be a version for each directory used for 
developing in a particular environment.
\initials{LDF 2003.08.17.}

\LOG
\initials{LDF 2003.09.03.}  Added |@[#define@]| |LDF_PUBLIC| in order to be
able to conditionally include \filename{plfmvar.h}.  The latter is not
included in the version for distribution.  Instead, the preprocessor
variables are defined or undefined here.
\ENDLOG 
@<Include files@>=

#undef LDF_PUBLIC

#ifndef __DECCXX /* Just to be extra sure.  \initials{LDF 2003.09.03.}  */
#ifdef LDF_PUBLIC
#define _GNU_SOURCE
#undef LDF_GCC_2_95 
#define   LDF_GCC_3_3
#endif 
#endif 

#include <bitset>


#include <errno.h>


#include <fstream>
#include <iostream>
#include <stdio.h>


#include <stdlib.h>


#include <string>



#include <sys/stat.h>



#include <sys/types.h>


#include <time.h>

#ifdef __GNUC__ 
#if HAVE_UNISTD_H 
#include <unistd.h>
#endif 
#endif 

@q * File age.@>
@* File age. 
\initials{LDF 2002.11.10.}
|file_age()| takes pointer to |char| arguments representing filenames,
and returns a value based on the relative ages of the two
files:

\BRVS{0}

\RV{0}\relax if the first file is older than the second file. 

\RV{1}\relax if the first file is younger than the second file. 

\RV{2}\relax if the two files are exactly the same age. 

\RV{3}\relax if only the first file doesn't exist.

\RV{4}\relax if only the second file doesn't exist.

\RV{5}\relax if neither file exists.

\RV{6}\relax if there's an error.

\ERVS

\LOG
\initials{LDF 2002.11.12.}  Replaced itemized list with ``\.{\char`\\BRVS}'',
``\.{\char`\\RV}'', and ``\.{\char`\\ERVS}''.

\initials{LDF 2003.08.27.}  Commented-out unused variable declarations: 
|struct tm *td|, |int MAX_STRING|, |char* file1|, and |char* file2|.  
\ENDLOG 

@<Define |file_age()|@>=

int 
file_age(char* filename_1, char* filename_2)
{
    struct stat file_info_1, file_info_2;

#if 0
    struct tm  *td;
#endif 
    time_t file_1_time;
    time_t file_2_time;

    int file_1_exists, file_2_exists;

#if 0 
    int MAX_STRING = 64;
    char *file1, *file2;
#endif 

     
    file_1_exists = stat(filename_1,&file_info_1); // 0, if the file 1 exists.
    file_2_exists = stat(filename_2,&file_info_2);

    if ((file_1_exists != 0) && (file_2_exists != 0)) /* Neither file
                                                         exists.  */
      return 5;
  
    else if (file_1_exists != 0)  /* file1 doesn't exist.  */
      return 3;

    else if (file_2_exists != 0) /* file2 doesn't exist.  */
      return 4;

    file_1_time = file_info_1.st_mtime;
    file_2_time = file_info_2.st_mtime;

    if (file_1_time < file_2_time) /* file1 is older than file 2. */
      return 0; 
      
    else if (file_1_time > file_2_time) /* file1 is younger than file 2. */
      return 1;
      
    else if (file_1_time == file_2_time) /* file1 and file 2 are
                                          exactly the same age. */
      return 2;
   
    else /* Something has gone wrong. */
    
      cerr << "file_age(" << filename_1 << ", " << filename_2
           << ") has failed. Returning 6.\n";
    return 6;   
}

@q * Global variables.@>
@* Global variables.
@<Global variables@>=
const unsigned short MAX_FLAGS = 32;
bitset<MAX_FLAGS> compile_and_link_flags; 
bool SILENT = false;
bitset<MAX_FLAGS> dependencies;

@q * Main.@>
@* Main.
\.{loader.web} doesn't generate a \CPLUSPLUS/ file.

For the |bitset| |compile_and_link_flags|:

\BARGS{Bit 26}

\ARG{Bit 0:}\relax 3DLDF must be relinked. This can occur when the
                   executable is missing.

\ARG{Bit  1:}\relax \filename{loader.web}.

\ARG{Bit  2:}\relax \filename{pspglb.web}.

\ARG{Bit  3:}\relax \filename{io.web}.

\ARG{Bit  4:}\relax \filename{colors.web}.

\ARG{Bit  5:}\relax \filename{transfor.web}.

\ARG{Bit  6:}\relax \filename{shapes.web}.

\ARG{Bit  7:}\relax \filename{pictures.web}.

\ARG{Bit  8:}\relax \filename{points.web}.

\ARG{Bit  9:}\relax \filename{lines.web}.

\ARG{Bit 10:}\relax \filename{planes.web}.

\ARG{Bit 11:}\relax \filename{paths.web}.

\ARG{Bit 12:}\relax \filename{triangle.web}.

\ARG{Bit 13:}\relax \filename{curves.web}.

\ARG{Bit 14:}\relax \filename{polygons.web}.

\ARG{Bit 15:}\relax \filename{rectangs.web}.

\ARG{Bit 16:}\relax \filename{ellipses.web}.

\ARG{Bit 17:}\relax \filename{circles.web}.

\ARG{Bit 18:}\relax \filename{patterns.web}.

\ARG{Bit 19:}\relax \filename{solids.web}.

\ARG{Bit 20:}\relax \filename{solfaced.web}.

\ARG{Bit 21:}\relax \filename{cuboid.web}.

\ARG{Bit 22:}\relax \filename{polyhed.web}.

\ARG{Bit 23:}\relax \filename{ellpsoid.web}.

\ARG{Bit 24:}\relax \filename{utility.web}.

\ARG{Bit 25:}\relax \filename{parser.web}.

\ARG{Bit 26:}\relax \filename{examples.web}.

\ARG{Bit 27:}\relax \filename{main.web}
\EARGS

%% \initials{LDF 2002.08.30.}  Commented out.  Not currently using
%% \filename{theater.web}. 
%%\ARG{Bit :}\relax \filename{theater.web}

LDF Date?  @:!!@> !! If I add files, I must check that |MAX_FLAGS| is
large enough! 
Currently, it is 32. 
\LOG
\initials{LDF 2002.11.12.}  Replaced itemized list with ``\.{\char`\\BARGS}'',
``\.{\char`\\ARG}'', and ``\.{\char`\\EARGS}''.
\ENDLOG 

@<Main@>=
int
main(int argc, char *argv[])
{@/

  volatile bool DEBUG = false;  /* |true|  */

  unsigned short comparison_value;       

  /* 
     \initials{LDF 2002.11.10.}  Note in printout from 2002.09.03:  Try using
     |proc_file()| with argument for non-compilation.  Check first!
     Not sure why I wrote this, anymore. 

     \initials{LDF 2002.05.10.}  Beginning of added routine for making it possible
     to use \filename{loader.web} to generate \filename{loader.h}.  
     It might be possible to use |process_file()| to process 
     \filename{loader.web}, but \filename{loader.c} is just ignored and
     never compiled, so it may be simpler to just do it this way.

     The advantage of having \filename{loader.web} is that I can include it
     in \filename{cwdriver.web} for generating documentation.
  */

   comparison_value = file_age("loader.h", "loader.web");

  if (comparison_value == 0) /* \filename{loader.h} is older than
                                  \filename{loader.web}. */
    {
#if 1 

        string temp_string0;
        string system_string0;
        system_string0 = "ctangle loader; rm -f loader.c";
        cout << "Running " << system_string0 << endl;
        system(system_string0.c_str());
#else
        cout << "Running ctangle loader.web.\n";
        system("ctangle loader.web");
#endif 
    }

    else if (comparison_value == 1) /* \filename{loader.h} is younger than
                                       \filename{loader.web}. 
                                       This means \filename{loader.h}
                                       is up-to-date.  */
      {
        cout << "loader.h is up-to-date.\n";
      }

    else if (comparison_value == 2) /* \filename{loader.h} and
                                       \filename{loader.web} are exactly the 
                                       same age. This can happen when 
                                       the source files are checked
                                       out of the archive. We'll assume
                                       \filename{loader.h} is up-to-date. */
      {
          cout << "loader.h is up-to-date.\n";
      }                                                   

    else if (comparison_value == 3) /* \filename{loader.h} doesn't exist, but 
                                       \filename{loader.web} does. 
                                       We must generate \filename{loader.h}
                                       by running {\bf ctangle}.  */
      {
#if 1  
        string temp_string0;
        string system_string0;
        system_string0 = "ctangle loader; rm -f loader.c";
        cout << "Running " << system_string0 << endl;
        system(system_string0.c_str());
#else
          cout << "Running ctangle loader.web.\n";
          system("ctangle loader.web");
#endif 
      }

    else if (comparison_value == 4 || comparison_value == 5)
                                    /* Either \filename{loader.web} doesn't
                                       exist, or neither \filename{loader.web}
                                       nor \filename{loader.h} exists. 
                                       This should never happen.
                                       Issue an error message and exit
                                       with return value 1.  */
      {
        cerr << "loader.web doesn't exist! "
             << "(loader.h possibly doesn't exist either.)" << endl
             << "Exiting with return value 1." << endl;
        exit(1);
           
      }
    
    else if (comparison_value == 6) /* An error occurred in
                                       |file_age()|. Issue an error message an
                                       return with value 1. */
     {

       cerr << "Error! An error occurred in file_age().\n"
            << "Exiting with return value 1\n";
       exit(1);
     }                                                   
                                    
    else /* Impossible case. */
      {
        cerr << "This can't happen!\n"
             << "file_age() has returned an impossible value.\n"
             << "Exiting with value 1.\n";
        exit(1);
      }

   comparison_value = file_age("loader.h", "3dldf");

    if (comparison_value == 0) /* \filename{loader.h} is older than
                                  \filename{3dldf}. */
      ; /* Do nothing.  */                                             

    else if (comparison_value == 1) /* \filename{loader.h} is younger than
                                       \filename{3dldf}. Since all the compilation
                                       units include \filename{loader.h},
                                       everything must be recompiled. */
      {
        if (DEBUG)
          cout << "loader is younger than 3dldf.\n";
        compile_and_link_flags.set(1);
      }                                                  

    else if (comparison_value == 2) /* \filename{loader.h} and
                                       \filename{3dldf} are exactly the 
                                       same age. This can happen when 
                                       the source files are checked
                                       out of the archive. We'll assume
                                       \filename{loader.h} is up-to-date. */
     
     ; /*   Do nothing  */  
                                                        

    else if (comparison_value == 3) /* \filename{loader.h} doesn't exist, but 
                                       \filename{3dldf} does. 
                                       If \filename{loader.h} doesn't exist, 
                                       we're in serious trouble. 
                                       We can't continue, so issue an error 
                                       message and exit with value 1. */

     {
       cerr << "Error! loader.h doesn't exist. Can't continue.\n"
            << "Exiting with return value 1\n";
       exit(1);
     }                                                   

    else if (comparison_value == 4) /* \filename{3dldf} doesn't exist, but 
                                       \filename{loader.h} does. 
                                       Assume \filename{loader.h} is up to 
                                       date and just relink. */
     {
       compile_and_link_flags.set(0);
     }                                                   

    else if (comparison_value == 5) /* Neither \filename{loader.h} nor 
                                       \filename{3dldf} exists. Same as case 3:
                                       If \filename{loader.h} doesn't exist, 
                                       we can't continue. */
     {

       cerr << "Error! loader.h doesn't exist. Can't continue.\n"
            << "Exiting with return value 1\n";
       exit(1);

     }                                                   

    else if (comparison_value == 6) /* An error occurred in
                                      |file_age()|. Issue an error message an
                                      return with value 1. */
     {

       cerr << "Error! An error occurred in file_age().\n"
            << "Exiting with return value 1\n";
       exit(1);
     }                                                   
                                    
    else /* Impossible case. */
      {
        cerr << "This can't happen!\n"
             << "file_age() has returned an impossible value.\n"
             << "Exiting with value 1.\n";
        exit(1);
      }

@
@<Main@>+=

  dependencies.set(1);
  /* name, |compile_and_link_position|, |bool writes_header| */
  process_file("pspglb", 2, true);

  dependencies.set(2);
  process_file("io", 3, true);

  dependencies.set(3);
  process_file("colors", 4, true);

  dependencies.set(4);
  process_file("transfor", 5, true);

  dependencies.set(5);
  process_file("shapes", 6, true);

  dependencies.set(6);
  process_file("pictures", 7, true); 

  dependencies.set(7);
  process_file("points", 8, true);

  dependencies.set(8);
  process_file("lines", 9, true);

  dependencies.set(9);
  process_file("planes", 10, true);

  dependencies.set(10);
  process_file("paths", 11, true);

  dependencies.set(11);
  process_file("triangle", 12, true);

  dependencies.set(12);
  process_file("curves", 13, true);

  dependencies.set(13);
  process_file("polygons", 14, true);

  dependencies.set(14);
  process_file("rectangs", 15, true);

  dependencies.set(15); 
  process_file("ellipses", 16, true); 

  dependencies.set(16); 
  process_file("circles", 17, true);

  dependencies.set(17);               /* LDF 2002.09.21.  Added.  */
  process_file("patterns", 18, true);

  /* |dependencies.set(18);| \initials{LDF 2002.09.26.}  I don't think |Solids|,
     or anything else except the user code, will depend on the
     patterns.  */

  process_file("solids", 19, true);

  dependencies.set(19);               /* LDF 2002.09.29.  Added.  */
  process_file("solfaced", 20, true);

  dependencies.set(20); 
  process_file("cuboid", 21, true);

  dependencies.set(21);

  process_file("polyhed", 22, true);

  dependencies.set(22);

  process_file("ellpsoid", 23, true);

  dependencies.set(23);

@
\LOG
\initials{LDF 2003.05.13.}  Removed the following calls to |process_file()| from
the loop that follows, and now setting the dependencies individually.
In the LINUX version, when they were in the
loop, \filename{parser.web}, \filename{examples.web}, and
possibly \filename{main.web} weren't recompiled, even though
\filename{utility.h} had changed.  I don't understand why not.
I don't think it can hurt make the change, and I don't feel like
testing it.
\ENDLOG 
@<Main@>+=

 process_file("utility", 24, true);
 dependencies.set(24);
 process_file("parser", 25, true);
 dependencies.set(25);
 process_file("examples", 26, true);


@
@<Main@>+=
 



 for (int i = 1; i < MAX_FLAGS; i++)
    dependencies.set(i); /* Depends on all header files. 
                            \initials{LDF 2002.11.10.}  Setting them all, in case
                            I've unset any above.  */
      {  
        process_file("main", 27, false); /* \filename{main.web}
                                            does not write a header
                                            file.  */@;
      }
 
 



  if(compile_and_link_flags.any())
    {
      if (SILENT == false)
        cout << "Relinking.\n";
@ 
\LOG
\initials{LDF 2002.08.30.}  Changed ``-05'' to ``-g'' in order to be 
able to debug.  Did the same thing in \filename{procLIN.web} 
and \filename{procDEC.web}.  

\initials{LDF 2002.4.7.}  Added compiler option ``-05'' to try to get 3DLDF to
run faster.    Did the same thing in \filename{procLIN.web} 
and \filename{procDEC.web}. 
\ENDLOG 

@<Main@>+=

   

#ifdef __GNUC__ 
  string system_string = "g++ -lm -g ";
      system_string += string("main.o ")
        + string("examples.o ")
        + string("parser.o ")
        + string("utility.o ")
        + string("ellpsoid.o ")
        + string("polyhed.o ")
        + string("cuboid.o ")
        + string("solfaced.o ")
        + string("solids.o ") /* LDF 2002.09.29.  Added.  */
        + string("patterns.o ")  /* LDF 2002.09.21.  Added.  */
        + string("circles.o ")
        + string("ellipses.o ")
        + string("rectangs.o ")
        + string("polygons.o ")
        + string("curves.o ")
        + string("triangle.o ")
        + string("paths.o ")
        + string("planes.o ")
        + string("lines.o ")
        + string("points.o ")
        + string("pictures.o ")
        + string("shapes.o ")
        + string("transfor.o ")
        + string("colors.o ")
        + string("io.o ")
        + string("pspglb.o ") 
        + string("-o 3dldf");
#else 
#ifdef __DECCXX
      string system_string = "cxx -lm -g ";
      system_string += "pspglb.o " 
        + string("io.o ")
        + string("colors.o ")
        + string("transfor.o ")
        + string("shapes.o ")
        + string("pictures.o ")
        + string("points.o ")
        + string("lines.o ")
        + string("planes.o ")
        + string("paths.o ")
        + string("triangle.o ")
        + string("curves.o ")
        + string("polygons.o ")
        + string("rectangs.o ")
        + string("ellipses.o ")
        + string("circles.o ")
        + string("patterns.o ")  /* LDF 2002.09.21.  Added.  */
        + string("solids.o ") /* LDF 2002.09.29.  Added.  */
        + string("solfaced.o ")
        + string("cuboid.o ")
        + string("polyhed.o ")
        + string("ellpsoid.o ")
        + string("parser.o ")
        + string("utility.o ")
        + string("examples.o ")
        + string("main.o ")
        + string("-o 3dldf");
#endif       
#endif       
      system(system_string.c_str()); /* \initials{LDF 2002.11.10.}  Link.  */
    }
  else
    if (SILENT == false)
      cout << "Not relinking.\n";
}

@i 3DLDFprc.web



@q * Putting {\tt 3DLDFcpl} together.@>
@* Putting {\tt 3DLDFcpl} together.

@c
@<Include files@>@;
using namespace std;
@<Global variables@>@; 
@<Define |file_age()|@>@;
@<Define |check_header_file()|@>@;
@<Define |process_file()|@>@;
@<Main@>@;

@q Local Variables: @>
@q mode:CWEB @>
@q eval:(read-abbrev-file) @>
@q run-cweb-on-file:"3DLDFcpl.web" @>
@q run-cweave-on-file:"3DLDF.web" @>
@q use-g++:t @>
@q executable-name:"3DLDFcpl" @>
@q End: @>
