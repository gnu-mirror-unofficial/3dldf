@q triangle.web @>
@q Created by Laurence D. Finston, Tue Sep 30 18:53:53 CEST 2003 @>
 
@q * Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing. @>
@q Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, @>
@q 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021 The Free Software Foundation, Inc. @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version. @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details. @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html. @>

@q (``@@'' stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de @>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston                 @> 
@q c/o Free Software Foundation, Inc.  @>
@q 51 Franklin St, Fifth Floor         @> 
@q Boston, MA  02110-1301              @>
@q USA                                 @>

@q Laurence.Finston@@gmx.de (@@ stands for a single ``at'' sign.)@>

@q * (0) Triangle.@>       
@** Triangle\quad ({\tt triangle\PERIOD web}).\hfil
\initials{LDF Undated.}

@f Triangle Shape

@q * (0) Include files. @>
@ Include files.

\LOG
\initials{LDF 2004.05.09.}  
Now including \filename{creatnew.h}.

\initials{LDF 2004.05.21.}  
Now including \filename{pens.web}.
\ENDLOG 

@<Include files@>=

#include "loader.h++"
#include "pspglb.h++"
#include "io.h++"
#include "creatnew.h++"
#include "pntrvctr.h++"
#include "primes.h++"
#include "complex.h++"
#include "matrices.h++"
#include "colors.h++"
#include "transfor.h++"
#include "pens.h++"
#include "dashptrn.h++"
#include "shapes.h++"
#include "pictures.h++"
#include "points.h++"
#include "lines.h++"
#include "planes.h++"
#include "nurbs.h++"
#include "paths.h++"
#include "curves.h++"
#include "polygons.h++"

@q * (1) class Triangle definition. @>
@* {\bf class Triangle} definition.
\initials{LDF Undated.}

@:TODO@> !! TODO:  Add |Triangle::is_congruent|.  
\initials{LDF 2010.07.07.}

\LOG
\initials{LDF 2003.10.06.} 
Added |SSS|, |SAS|, |SAA|, |ASA|, and |SSA|. 

\initials{LDF 2003.10.21.}  
Added |real area|.  Replaced |SSA| with
|SSA_A|, |SSA_B|, |SSA_L|, and |SSA_S|, 
for handling the various cases. 
See the constructor below for an
explanation.  

\initials{LDF 2005.01.14.}
Changed |Triangle| from a |struct| to a |class|.

\initials{LDF 2005.01.20.}
Now deriving |Triangle| from |Path| using |public| 
derivation.

\initials{LDF 2005.01.23.}
Removed |SSA_A| and |SSA_B|.
\ENDLOG 

@q ** (2) Definition.@> 

@<Define |class Triangle|@>=
class Triangle : public Polygon
{
  real a; /* Sides.  */
  real b;
  real c;

  real alpha; /* Angles.  */ 
  real beta; 
  real gamma; 
  
  real area;

  public:

     static const short SSS; /* Side-Side-Side  */
     static const short SAS; /* Side-Angle-Side  */
     static const short SAA; /* Side-Angle-Angle  */
     static const short ASA; /* Angle-Side-Angle  */

     static const short SSA_L; /* Side-Side-Angle, it is not known
                                which side lies opposite the
                                angle, but it is known that it's the
                                longer side.  */

     static const short SSA_S; /* Side-Side-Angle, it is not known
                                which side lies opposite the
                                angle, but it is known that it's the
                                shorter side.  */

     @<Declare |Triangle| functions@>@;

};

@q * (1) Definition.@> 
@* Initialize {\bf static const Triangle} data members.
\initials{LDF 2003.10.06.} 

\LOG
\initials{LDF 2003.10.06.} 
 Added this section.
\ENDLOG 

@<Initialize |static const Triangle| data members@>=

const short Triangle::SSS   = 0; 
const short Triangle::SAS   = 1; 
const short Triangle::SAA   = 2; 
const short Triangle::ASA   = 3; 
const short Triangle::SSA_L = 4;
const short Triangle::SSA_S = 5;

@q * (1) |Triangle| functions.@>
@* {\bf Triangle} functions.
\initials{LDF 2005.01.20.}

@q ** (2) Constructors and setting functions.@>
@*1 Constructors and setting functions.
\initials{LDF Undated.}

@q *** (3) Default constructor.@>
@*2 Default constructor.
@^\cfunc{Triangle}{Triangle}@>
\initials{LDF 2003.10.06.} 

\LOG
\initials{LDF 2003.10.06.} 
Added this function.

\initials{LDF 2005.01.24.}
Now setting |shape_type = TRIANGLE_TYPE|.

\initials{LDF 2005.02.24.}
Now setting |center = INVALID_POINT|.

\initials{LDF 2005.03.31.}
Now setting |surface_hiding_ctr = 0|.

\initials{LDF 2005.04.18.}
Now setting |decomposition_level = 0|.
\ENDLOG 

@<Declare |Triangle| functions@>=
Triangle(void);

@
@<Define |Triangle| functions@>=
Triangle::Triangle(void) 
{
    a = b = c = alpha = beta = gamma = area = 0;
    shape_type = TRIANGLE_TYPE;
    surface_hiding_ctr = 0;
    decomposition_level = 0;
    center = INVALID_POINT;
}

@q *** (3) |Point*| arguments.@>
@*2 {\bf Point*} arguments.
@^\cfunc{Triangle}{Triangle}@>
\initials{LDF 2005.01.23.}

@q **** (4) Constructor.@>   
@*3 Constructor.
\initials{LDF 2005.01.23.}

\LOG
\initials{LDF 2005.01.23.}
Added this function.

\initials{LDF 2005.01.24.}
Now setting |shape_type = TRIANGLE_TYPE|.

\initials{LDF 2005.02.24.}
Now setting |center|.

\initials{LDF 2005.02.25.}
Fixed the way |center| is set.

\initials{LDF 2005.03.10.}
@:BUG FIX@> BUG FIX: 
Now dereferencing |Point* C| and |Point* A| in the call to
|Point::intersection_point|.

\initials{LDF 2005.03.31.}
Now setting |surface_hiding_ctr = 0|.

\initials{LDF 2005.04.18.}
Now setting |decomposition_level = 0|.
\ENDLOG 

@q **** (4) Declaration.@> 

@<Declare |Triangle| functions@>=
Triangle(Point* A, Point* B, Point* C,
         Scanner_Node scanner_node = 0);

@q **** (4) Definition.@> 

@
@<Define |Triangle| functions@>=
Triangle::Triangle(Point* A, Point* B, Point* C,
                   Scanner_Node scanner_node)
{

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ 
#endif /* |DEBUG_COMPILE|  */@; 

   this->set(A, B, C, scanner_node);  

   shape_type = TRIANGLE_TYPE;
   surface_hiding_ctr = 0;
   decomposition_level = 0;

   center = Point::intersection_point(A->mediate(*B), *C, B->mediate(*C), *A).pt;

   return;

} /* End of the 
|Triangle::Triangle(Point* A, Point* B, Point* C,
         Scanner_Node scanner_node)| definition.  */

@q **** (4) Setting function.@>   
@*3 Setting function.
\initials{LDF 2005.01.23.}

\LOG
\initials{LDF 2005.01.23.}
Added this function.

\initials{LDF 2005.02.24.}
Now setting |center|.
\ENDLOG

@q **** (4) Declaration.@> 

@<Declare |Triangle| functions@>=
void
set(Point* A, Point* B, Point* C,
    Scanner_Node scanner_node = 0);

@q **** (4) Definition.@> 

@
@<Define |Triangle| functions@>=
void
Triangle::set(Point* A, Point* B, Point* C,
              Scanner_Node scanner_node)
{

@q ***** (5) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ***** (5).@>

#if DEBUG_COMPILE
   if (DEBUG)
     {
        cerr_strm << thread_name 
                  << "Entering `Triangle::set(Point, Point, Point, Scanner_Node)'.";

        log_message(cerr_strm);
        cerr_message(cerr_strm);
        cerr_strm.str("");
     }
#endif /* |DEBUG_COMPILE|  */@; 

@q ***** (5).@> 

@ 
\LOG
\initials{LDF 2005.01.24.}
@:BUG FIX@> BUG FIX:  Now calling |clear|.

\initials{LDF 2005.04.13.}
@:BUG FIX@> BUG FIX:  Now checking that |points.size() > 0| before 
calling |clear|.
\ENDLOG 

@<Define |Triangle| functions@>=

   if (points.size() > 0)
      clear();  

@q ***** (5).@> 
@
@<Define |Triangle| functions@>=

   points.push_back(A);
   points.push_back(B);
   points.push_back(C);

   Point a_minus_b = *A - *B;
   Point a_minus_c = *A - *C;
   Point b_minus_a = *B - *A;
   Point b_minus_c = *B - *C;
   Point c_minus_a = *C - *A;
   Point c_minus_b = *C - *B;

   a = c_minus_b.magnitude();
   b = c_minus_a.magnitude();
   c = b_minus_a.magnitude();

   alpha = fabs(b_minus_a.angle(c_minus_a));

   beta = fabs(c_minus_b.angle(a_minus_b));

   gamma = fabs(b_minus_c.angle(a_minus_c));

@q ***** (5) Error handling:  |a| and/or |b + c| is too large to square.@> 

@ Error handling:  |a| and/or |b + c| is too large to square.
Can't calculate |area|.  Setting it to |INVALID_REAL| and will try 
to continue.
\initials{LDF 2005.01.24.}  

\LOG
\initials{LDF 2005.01.24.}
Added this section.

\initials{LDF 2005.03.10.}
@:BUG FIX@> BUG FIX: 
Now dereferencing |Point* C| and |Point* A| in the call to
|Point::intersection_point|.
\ENDLOG

@<Define |Triangle| functions@>=

   if (a > MAX_REAL_SQRT || (b + c) > MAX_REAL_SQRT)
      {
          cerr_strm << thread_name << "ERROR!  "
                    << "In `Triangles::set(Point*, Point*, Point*, Scanner_Node)':"
                    << endl << "`a' and/or `b + c' is too large to square.  "
                    << "Can't calculate `area'.  Setting it to `INVALID_REAL' "
                    << "and will try to continue.";

          log_message(cerr_strm);
          cerr_message(cerr_strm, error_stop_value);
          cerr_strm.str("");
      }

@q ***** (5).@> 

   else
      { 
          real aa =  a * a;
          real b_plus_c_squared  = (b + c) * (b + c);
          real b_minus_c_squared = (b - c) * (b - c);
   
          area = sqrt(b_plus_c_squared - aa) * sqrt(aa - b_minus_c_squared) / 4;
      }
    
   connectors.push_back("--");
   set_cycle(true);

   center = Point::intersection_point(A->mediate(*B), *C, B->mediate(*C), *A).pt;

   return;

}  /* End of the 
|Triangle::set(Point* A, Point* B, Point* C,
               Scanner_Node scanner_node)| definition.  */

@q ** (2) Assignment.@>
@*1 Assignment.
\initials{LDF 2005.01.20.}

\LOG
\initials{LDF 2005.01.20.}
Started working on this function.  

\initials{LDF 2005.02.24.}
Now setting |center|.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Triangle| functions@>=
virtual 
const Triangle&
operator=(const Triangle& t);

@q *** (3) Definition.@> 
@
@<Define |Triangle| functions@>=
const Triangle&
Triangle::operator=(const Triangle& t)
{
   if (this == &t) /* Make sure it's not self-assignment. */
      return *this;

   a     = t.a;  
   b     = t.b;
   c     = t.c;

   alpha = t.alpha;  
   beta  = t.beta;  
   gamma = t.gamma;  

   area  = t.area;

   center = t.center;

   this->Path::operator=(static_cast<Path>(t));

   return t;

}  /* End of |Triangle::operator=(const Triangle& t)| definition.  */

@q * (1) Get copy.@>
@* Get copy.
@^\cfunc{Triangle}{get\_copy}@>
\initials{LDF 2005.03.18.}

\LOG
\initials{LDF 2005.03.18.}
Added this function.
\ENDLOG

@<Declare |Triangle| functions@>=
virtual
Shape*
get_copy() const;

@
@<Define |Triangle| functions@>=
Shape*
Triangle::get_copy() const
{
  Triangle* p = create_new<Triangle>(0);
  *p = *this;
  return static_cast<Shape*>(p);
}

@q ** (2) Get |Shape| type.@> 
@*1 Get {\bf Shape} type.
\initials{LDF 2005.03.18.}

\LOG
\initials{LDF 2005.03.18.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Triangle| functions@>=
virtual 
inline
unsigned short 
get_shape_type(void) const
{
   return TRIANGLE_TYPE;
}

@q ** (2) Is |Triangle|.@> 
@*1 Is {\bf Triangle}.
\initials{LDF 2005.03.31.}

\LOG
\initials{LDF 2005.03.31.}
Added this function.

\initials{LDF 2005.04.04.}
Made this function |const|
\ENDLOG

@<Declare |Triangle| functions@>=
virtual
inline
bool
is_triangle(void) const 
{
   return true;
}

@q ** (2) Is equal.@>
@*1 Is equal.
\initials{LDF 2010.08.11.}

\LOG
\initials{LDF 2010.08.11.}
Added this function.  
\ENDLOG

!! START HERE:  This won't work for |Triangles| that have been transformed, because 
|a|, |b|, |c|, |alpha|, |beta| and |gamma| are not recalculated when this happens!  
This is because |Path::operator*=| is used for multiplying a |Triangle| with a 
|Transform|.  @:TODO@> !! TODO:  Define this operator for |Triangle|!
\initials{LDF 2010.12.06.}

!! START HERE:  If not equal, make copies and sort the sides and angles 
before comparing.  It's not necessary to check the normals to make sure 
that the two |Triangles| have the same parity, because this isn't relevant 
in three dimensions.
\initials{LDF 2010.09.15.}
\initials{LDF 2010.12.06.}

@q *** (3) Declaration.@> 

@<Declare |Triangle| functions@>=
bool
is_equal(Triangle& t, real tolerance = .001) const;

@q *** (3) Definition.@> 
@
@<Define |Triangle| functions@>=
bool
Triangle::is_equal(Triangle& t, real tolerance) const
{

#if 0 
   cerr << "tolerance == " << tolerance
        << endl 
        << "fabs(a - t.a) < .001 == " << (fabs(a - t.a) < .001)
        << endl 
        << "fabs(a - t.a) == " << fabs(a - t.a)
        << endl
        << "fabs((b - t.b)  < tolerance == " << (fabs(b - t.b)  < tolerance)
        << endl
        << "fabs(b - t.b) == " << fabs(b - t.b)
        << endl
        << "fabs(c - t.c)  < tolerance == " << (fabs(c - t.c)  < tolerance)
        << endl
        << "fabs(c - t.c) == " << fabs(c - t.c)
        << endl
        << "fabs(alpha - t.alpha)  < tolerance == " << (fabs(alpha - t.alpha)  < tolerance)
        << endl
        << "fabs(alpha - t.alpha) == " << fabs(alpha - t.alpha)
        << endl
        << "fabs(beta - t.beta)  < tolerance == " << (fabs(beta - t.beta)  < tolerance)
        << endl
        << "fabs(beta - t.beta) == " << fabs(beta - t.beta)
        << endl
        << "fabs(gamma - t.gamma)  < tolerance == " << (fabs(gamma - t.gamma)  < tolerance)
        << endl
        << "fabs(gamma - t.gamma) == " << fabs(gamma - t.gamma)
        << endl;

  real A;
  real B;
  real C;

  real ALPHA;
  real BETA;
  real GAMMA;

  real T_A;
  real T_B;
  real T_C;

  real T_ALPHA;
  real T_BETA;
  real T_GAMMA;

   vector<real> v;
   v.push_back(alpha);
   v.push_back(beta);
   v.push_back(gamma);

   vector<real> t_v;
   t_v.push_back(t.alpha);
   t_v.push_back(t.beta);
   t_v.push_back(t.gamma);

   cerr << "alpha == " << alpha << endl;
   cerr << "t.alpha == " << t.alpha << endl;

   cerr << "beta == " << beta << endl;
   cerr << "t.beta == " << t.beta << endl;

   cerr << "gamma == " << gamma << endl;
   cerr << "t.gamma == " << t.gamma << endl;

   sort(v.begin(), v.end());
   sort(t_v.begin(), t_v.end());

   for (vector<real>::const_iterator iter = v.begin();
        iter != v.end();
        ++iter)
      cerr << "*iter = " << *iter << endl;

   for (vector<real>::const_iterator iter = t_v.begin();
        iter != t_v.end();
        ++iter)
      cerr << "*iter = " << *iter << endl;

   return (   fabs(a - t.a) < tolerance 
           && fabs(b - t.b)  < tolerance
           && fabs(c - t.c)  < tolerance
           && fabs(alpha - t.alpha)  < tolerance
           && fabs(beta - t.beta)  < tolerance
           && fabs(gamma - t.gamma)  < tolerance);

#endif 

   cerr << "WARNING! In `Triangle::is_equal':"
        << endl 
        << "This function doesn't work yet.  Returning `false'."
        << endl;

   return false;

}  /* End of |Triangle::is_equal| definition.  */

@q ** (2) Show.@>
@*1 Show.
\initials{LDF 2005.01.20.}

\LOG
\initials{LDF 2005.01.20.}
Added this function.  
Currently, it merely returns immediately.

\initials{LDF 2005.01.20.}
Working on this function.

\initials{LDF 2005.01.20.}
This function now outputs the values of |a|, |b|, |c|, |alpha|, 
|beta|, |gamma|, and |area|.

\initials{LDF 2005.01.20.}
Now showing |points|.

\initials{LDF 2005.03.10.}
No longer showing |points|.  Now calling |Path::show| instead.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Triangle| functions@>=
virtual 
void 
show(string text = "", char coords = 'w',
     const bool do_persp = true, const bool do_apply = true,
     Focus* f = 0, const unsigned short proj = 0,
     const real factor = 1) const;

@q *** (3) Definition.@> 
@
@<Define |Triangle| functions@>=
void 
Triangle::show(string text, char coords,
               const bool do_persp, const bool do_apply,
               Focus* f, const unsigned short proj,
               const real factor) const
{
   if (text == "")
      text = "Triangle:";

   cerr << text << endl
        << "`a' == " << a << endl  
        << "`b' == " << b << endl  
        << "`c' == " << c << endl  
        << "`alpha' == " << alpha << endl  
        << "`beta' == " << beta << endl  
        << "`gamma' == " << gamma << endl  
        << "`area' == " << area << endl;  

   int i = 0;
   stringstream s;

   Path::show("Path:");

   return;

}  /* End of |Triangle::show| definition.  */

@q * (1) Putting Triangle together.@>
@* Putting {\bf Triangle} together.

@ This is what's compiled.

\LOG
\initials{LDF 2005.11.10.}
@:BUG FIX@> BUG FIX:  Removed |@<Define |Plane| functions@>|, 
since it's not present.
\ENDLOG 

@c
@<Include files@>@;
@<Define |class Triangle|@>@;
@<Initialize |static const Triangle| data members@>@;
@<Define |Triangle| functions@>@;

@ This is what's written to \filename{triangle.h}. 
@(triangle.h@>=
@<Define |class Triangle|@>@;

@q * Emacs-Lisp code for use in indirect buffers when using the          @>
@q   GNU Emacs editor.  The local variable list is not evaluated when an @>
@q   indirect buffer is visited, so it's necessary to evaluate the       @>
@q   following s-expression in order to use the facilities normally      @>
@q   accessed via the local variables list.                              @>
@q   \initials{LDF 2004.02.12}.                                          @>
@q   (progn (cweb-mode) (outline-minor-mode t) (setq fill-column 80))    @>

@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q eval:(outline-minor-mode t)  @>
@q abbrev-file-name:"~/.abbrev_defs" @>
@q eval:(read-abbrev-file)  @>
@q fill-column:80 @>
@q run-cweave-on-file:"3DLDFprg.web"  @>
@q End: @>
