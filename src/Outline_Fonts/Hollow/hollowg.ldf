%% hollowg.ldf
%% Created by Laurence D. Finston (LDF) Sun 10 Apr 2022 09:30:39 PM CEST

%% * (1) Top

%% * (1) Copyright and License.

%%%% This file is part of GNU 3DLDF, a package for three-dimensional drawing. 
%%%% Copyright (C) 2022 The Free Software Foundation, Inc.

%%%% GNU 3DLDF is free software; you can redistribute it and/or modify 
%%%% it under the terms of the GNU General Public License as published by 
%%%% the Free Software Foundation; either version 3 of the License, or 
%%%% (at your option) any later version. 

%%%% GNU 3DLDF is distributed in the hope that it will be useful, 
%%%% but WITHOUT ANY WARRANTY; without even the implied warranty of 
%%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
%%%% GNU General Public License for more details. 

%%%% You should have received a copy of the GNU General Public License 
%%%% along with GNU 3DLDF; if not, write to the Free Software 
%%%% Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

%%%% GNU 3DLDF is a GNU package.  
%%%% It is part of the GNU Project of the  
%%%% Free Software Foundation 
%%%% and is published under the GNU General Public License. 
%%%% See the website http://www.gnu.org 
%%%% for more information.   
%%%% GNU 3DLDF is available for downloading from 
%%%% http://www.gnu.org/software/3dldf/LDF.html. 

%%%% Please send bug reports to Laurence.Finston@gmx.de
%%%% The mailing list help-3dldf@gnu.org is available for people to 
%%%% ask other users for help.  
%%%% The mailing list info-3dldf@gnu.org is for the maintainer of 
%%%% GNU 3DLDF to send announcements to users. 
%%%% To subscribe to these mailing lists, send an 
%%%% email with ``subscribe <email-address>'' as the subject.  

%%%% The author can be contacted at: 

%%%% Laurence D. Finston 
%%%% Kreuzbergring 41 
%%%% D-37075 Goettingen 
%%%% Germany 

%%%% Laurence.Finston@gmx.de 
 


%% * (1)



input "../../plainldf.lmc";




verbatim_metapost "prologues := 3;outputtemplate := \"%j%3c.eps\";";
verbatim_metapost   "verbatimtex \font\eurm=eurm10 scaled 16000"
                  & "\font\cmssbx=cmssbx10 scaled 8000 etex;";

verbatim_metafont "displaying := -1;\nfont_size := 2cm#;";

%% * (1) Global variables

path q[];
glyph g[];
path_vector pv;
point a[][];

pen small_pen;
pen medium_pen;
pen big_pen;
pen huge_pen;
pen dot_pen;

small_pen := pencircle scaled (.075mm, .075mm, .075mm);
medium_pen := pencircle scaled (.25mm, .25mm, .25mm);
big_pen := pencircle scaled (2pt, 2pt, 2pt);
huge_pen := pencircle scaled (3pt, 3pt, 3pt);
dot_pen := pencircle scaled (1mm, 1mm, 1mm);

let large_pen = big_pen;

pickup medium_pen;

string s;

%bboxmargin := 0;

boolean do_black;
boolean do_labels;
boolean do_rounded_corners;

do_labels          := true;  % false;
do_black           := false; % true;
do_rounded_corners := false; % true;

numeric coeff_left_diag;
numeric coeff_right_diag;
numeric coeff_lower_horiz;
numeric coeff_upper_horiz;

coeff_left_diag   := .25;
coeff_right_diag  := .25; 
coeff_lower_horiz := .25;
coeff_upper_horiz := .25;

point z[];
picture v[];
picture label_picture;

numeric frame_wd;
numeric frame_ht;

frame_wd := 10cm;
frame_ht := 10cm;

path frame;

numeric fig_num;

frame :=    ((-.5frame_wd, -.5frame_ht) -- (.5frame_wd, -.5frame_ht)
  -- (.5frame_wd, .5frame_ht) -- (-.5frame_wd, .5frame_ht)
  -- cycle) shifted (.475frame_wd, .5frame_ht-.825cm);

%% ** (2) Fig. 103 ("g" == 103 == 0147 == 0x67)


focus f;
set f with_position (0cm, 2cm, -50) 
       with_direction (0cm, 2cm, 10) with_distance 45; 

%% ** (2) Fig. 103.  cmssbx10 "g".

beginfig(103);

%% *** (3)  

  fig_num := 103;
  
  path q[];
  
  pickup medium_pen;

  draw frame shifted (-1cm, -2.5cm);
  
  clear pv;
  g103 := get_glyph 103 from "cmssbx10";

  scale g103 by 9;
  
  pv := get_paths from g103;

  % message "size pv:";
  % show size pv;

  % show pv0 with_connectors 4;
  % message "pv0 (see above)";
  % pause;

  draw pv0;

  draw pv1;
  draw pv2;

  % message "Showing pv0:";
  % show pv0 with_connectors 4;
  % message "Showed pv0 (see above)";
  

%% *** (3)    
  
  numeric n;

  n := (size pv0) - 1;

  % message "n:";
  % show n;
  
  for i = 0 upto n:
    a[0][i] := get_point (i) pv0;
  endfor;


%% *** (3)    
  
  n := (size pv1) - 1;

  % message "n:";
  % show n;

  %show pv1;

  %pause;
  
  for i = 0 upto n:
    a[1][i] := get_point (i) pv1;
  endfor;


%% *** (3)    
  
  n := (size pv2) - 1;

  % message "n:";
  % show n;
  
  for i = 0 upto n:
    a[2][i] := get_point (i) pv2;
  endfor;
		  

  point z[];

  z0 := mediate(a[1][1], a[1][3]);



  q0 := pv0;
  % message "q0:";
  % show q0;


  numeric scale_val;
  scale_val := .85;
  
  z2 := z0 scaled (scale_val, scale_val);

  
  q2 := q0 scaled (scale_val, scale_val) shifted by (z0 - z2);

  %draw q2 withcolor red with_pen big_pen;
  
  point m[];

  path_vector qv;

  qv := resolve q2 (3, 6) to 32 save;

  % show qv0 with_connectors 4;
  % message "qv0 (see above)";
  % pause;

  q3 := qv0;

  clear_connectors q3;
  draw q3 with_color dark_green with_pen big_pen;  

  
  n := size q3 - 1;
  for i = 0 upto n:
    m[i] := get_point(i) qv0;
    drawdot m[i] with_pen pencircle scaled (1mm, 1mm, 1mm);
  endfor;

  
  %q3 := subpath (3, 5) of q2;
  %draw q3 withcolor red with_pen big_pen;

  qv := resolve q2 (12, 15) to 32;

  q4 := qv0;

  clear_connectors q4;
  draw q4 with_color magenta with_pen big_pen;  

  z3 := z0 scaled (1.25, 1.25);
  q5 := pv1 scaled (1.25, 1.25) shifted by (z0 - z3);

  draw q5 with_color orange with_pen big_pen;


    
  %fill q5;
  %unfill pv1;

  scale_val := .5;

  q6 := resolve pv0 (6, 12) to 32;
  z4 := mediate(a[0][6], a[0][11]); 
  z5 := z4 scaled (scale_val, scale_val);


  scale q6 (scale_val, scale_val);
  shift q6 by (z4 - z5);
    
  draw q6 with_color red;
  n := size q6;


  
  z6 := mediate(a[2][3], a[2][1]);


  scale_val := 1.25;

  z7 := z6 scaled (scale_val, scale_val);

  q7 := resolve pv2 to 64;
  scale q7 (scale_val, scale_val);
  shift q7 by (z6- z7);
  q7 += cycle;

  draw q7 with_color blue with_pen big_pen;


  
  scale_val := .875;
  z8 := z6 scaled (scale_val, scale_val);


  q8 := resolve pv0 (17, 22) to 64;
  scale q8 (scale_val, scale_val);
  shift q8 by (z6- z8);
  draw q8 with_color red with_pen big_pen;



%% *** (3)
  
  scale_val := .7;
  z9 := mediate(a[0][16], a[0][1]);
  z10 := z9 scaled (scale_val, scale_val);

  q9 := resolve pv0 (15, 17) to 64;
  scale q9 (scale_val, scale_val);
  shift q9 by (z9- z10);
  draw q9 with_color orange with_pen big_pen;

%% *** (3)

  scale_val := .65;
  q10 := resolve pv0 (1, 3) to 16;
  scale q10 (scale_val, scale_val);
  shift q10 by (z9 - z10);
  draw q10 with_color teal_blue with_pen big_pen;

%% *** (3)
  
  scale_val := .6;
  z11 := mediate(a[2][4], a[0][0]);
  z12 := z11 scaled (scale_val, scale_val);
  q11 := resolve pv0 (0, 1) to 8;
  scale q11 (scale_val, scale_val);
  shift q11 by (z11 - z12);
  draw q11 with_color magenta with_pen big_pen;
  
%% *** (3)

  n := size q8 - 1;
  z13 := get_point (n) q8;

  z14 := get_point (0) q11;

  q12 := z13 -- z14;
  draw q12 with_pen big_pen with_color green;

%% *** (3)

  z20 := get_point(0)  q4;
  z21 := get_point(32) q3;

  z22 := mediate(z20, z21);

  %drawdot z22 with_pen dot_pen;


  z23 := mediate(z0, z22, 1.25);


  draw z0 -- z23 with_color dark_gray;

  z24 := z23 rotatedaround(z0, a[0][13]) 180;



  draw z0 -- z24 with_color dark_gray;

  z25 := mediate(z0, z24, .805);



  % n := magnitude(z25 - z0);
  % message "magnitude z25 - z0:";
  % show n;
  % pause;

  z26 := z25 rotatedaround(z0, a[0][13]) 180;
  


  z27 := mediate(get_point(0) q3, get_point(32) q4);

  
  q13 := q3;
  q13 += z26;
  q13 += ..;
  q13 := q13 .. q4;
  q13 += ..;
  q13 += z27;
  q13 += ..;
  q13 += cycle;

  %draw q13 with_color blue with_pen big_pen;

  n := size q3 * 11/16;

  
%% *** (3)

  q14 := subpath (3, 6) of pv0;
  draw q14 with_color teal_blue with_pen big_pen;


  
  q15 := resolve q14 to 32;
  
  for i = 0 upto size q15 - 1:
    drawdot get_point(i) q15 with_pen dot_pen;
  endfor;

  q16 := subpath (12, 15) of pv0;
  draw q16 with_color rose_madder with_pen big_pen;
  
  z28 := mediate(a[0][3], a[0][15]);


  z29 := mediate(a[0][12], a[0][6]);

  %% For some reason, the parsing function `yyparse', generated by
  %% Bison, won't recognize the `.. cycle' as part of a `path_element_list',
  %% although the rule is present.  I can't think of any way of fixing this.
  %% 
  %% A workaround is to use `+= cycle' in a separate
  %% statement, as below.
  %% LDF 2022.05.03.
  %%
  %% q17 := q16 .. z28 .. q14 .. z29 .. cycle; 
  
  q17 := q16 .. z28 .. q14 .. z29; 
  q17 += cycle; 
  
  %draw q17 with_color lime_green with_pen big_pen;

%% *** (3)

  z30 := get_point(0) q8;

  n := size q11 - 1;
  z31 := get_point(n) q11;


  z32 := mediate(z30, z31) shifted (2mm, 0); 


  q18 := z31 .. z32 .. z30;

  q19 := resolve q18 to 7;

  draw q19 with_color turquoise with_pen big_pen;



  % for i := 0 upto size q19 - 1:
  %   drawdot get_point(i) q19 with_pen dot_pen;
  % endfor;

%% *** (3)  

  % message "size q12:";
  % show size q12;
  % pause;
  
  q20 := q19 .. q8 .. q12 .. q11;
  q20 += cycle;

  q21 := resolve q20 to 360;
  q21 += cycle;
  
  draw q21 with_color cerulean_blue with_pen dot_pen;

%% *** (3)

  z33 := get_point(0) q6;
  z34 := get_last_point q6;

  dotlabel.lrt("$\scriptstyle z_{33}$", z33) with_color red;
  dotlabel.top("$\scriptstyle z_{34}$", z34) with_color red;

%% *** (3)  

  v0 := current_picture;
  clear current_picture;
  
%% *** (3)

  draw frame shifted (-1cm, -2.5cm);
  
  fill pv0 with_color dark_gray;
  unfill q21;

  fill q17 with_color dark_gray;
  unfill q13;
  fill q5 with_color dark_gray;
  unfill pv1;

  fill q7 with_color dark_gray;
  unfill pv2;

  v1 := current_picture;
  clear current_picture; 
  
%% *** (3) Labels

  dotlabel.top("$\scriptstyle a_0^{0}$", a[0][0]);
  dotlabel.rt("$\scriptstyle a_0^{1}$", a[0][1]);
  dotlabel.rt("$\scriptstyle a_0^{2}$", a[0][2]);
  drawdot a[0][3] with_pen dot_pen;
  label("$\scriptstyle a_0^{3}$", a[0][3] shifted (.125cm, .75cm));
  draw a[0][3] -- a[0][3] shifted (.125cm, .55cm) with_color dark_gray;
  %dotlabel.rt("$a_0^{4}$", a[0][4]);
  %dotlabel.rt("$a_0^{5}$", a[0][5]);
  dotlabel.lrt("$a_0^{6}$", a[0][6]);
  dotlabel.llft("$a_0^{7}$", a[0][7]);
  dotlabel.bot("$a_0^{8}$", a[0][8]);
  dotlabel.rt("$a_0^{9}$", a[0][9]);
  dotlabel.rt("$a_0^{10}$", a[0][10]);
  dotlabel.top("$a_0^{11}$", a[0][11]);
  dotlabel.ulft("$\scriptstyle a_0^{12}$", a[0][12]) shifted (4pt, 0);
  dotlabel.top("$a_0^{13}$", a[0][13]);
  dotlabel.lft("$a_0^{14}$", a[0][14]);
  dotlabel.lft("$a_0^{15}$", a[0][15]);
  dotlabel.lft("$a_0^{16}$", a[0][16]);
  dotlabel.lft("$a_0^{17}$", a[0][17]);
  dotlabel.lft("$a_0^{18}$", a[0][18]);
  dotlabel.bot("$a_0^{19}$", a[0][19]);
  dotlabel.bot("$a_0^{20}$", a[0][20]);
  dotlabel.rt("$a_0^{21}$", a[0][21]);
  dotlabel.rt("$a_0^{22}$", a[0][22]);

  dotlabel.urt("$a_1^{0}$", a[1][0]);
  dotlabel.rt("$a_1^{1}$", a[1][1]);
  dotlabel.bot("$a_1^{2}$", a[1][2]);
  dotlabel.lft("$a_1^{3}$", a[1][3]);

  dotlabel.top("$a_2^{0}$", a[2][0]);
  dotlabel.rt("$a_2^{1}$", a[2][1]);
  dotlabel.bot("$a_2^{2}$", a[2][2]);
  dotlabel.lft("$a_2^{3}$", a[2][3]);
  dotlabel.top("$a_2^{4}$", a[2][4]);		  
  dotlabel.top("$z_0$", z0);

  if false:
    dotlabel.top("$z_2$", z2);
  fi

  dotlabel.urt("0", get_point(0) q3) with_text_color green;

  n := size q3 - 1;
  s := "\vbox{\hbox{" & decimal n & "}\vskip-.125cm\hbox{$z_{21}$}}";

  drawdot z21 with_pen dot_pen;

  label.llft(s, z21 shifted (5pt, 0)) with_text_color green; %% "32"

  if false:
    dotlabel.top("$z_3$", z3);
  fi

  n := (size q6 / 2 + 3);
  dotlabel.rt("$q_6$", get_point (n) q6) with_text_color red;

  dotlabel.top("$z_4$", z4) shifted (0, .25cm);
  draw z4 -- z4 shifted (0, .35cm) with_color dark_gray;

  dotlabel.ulft("$z_5$", z5);

  if false:  
    dotlabel.top("$z_6$", z6);
    dotlabel.top("$z_7$", z7);
  fi;

  n := size q7 /4;
  dotlabel.rt("$q_7$", get_point (n-5) q7) with_text_color blue;

  if false:
    dotlabel.top("$z_8$", z8);
  fi

  n := (size q8) * 13/16 + 3;
  dotlabel.rt("$q_8$", get_point (n) q8) with_text_color red;

  dotlabel.lft("$z_9$", z9);
  %dotlabel.top("$z_{10}$", z10);

  n := (size q9) * 3/4;
  label.lft("$q_9$", get_point (n) q9 shifted (2pt, 0)) with_text_color orange;

  n := (size q10) * 3/4;
  dotlabel.rt("$q_{10}$", (get_point (n) q10 shifted (0, -.125cm))) with_text_color teal_blue;

  %dotlabel.top("$z_{11}$", z11);
  %dotlabel.top("$z_{12}$", z12);
  
  n := (size q11) - 1;
  label.urt("$\scriptstyle q_{11}$", (get_point (n) q11) shifted (0pt, -2pt))
    with_text_color magenta;

  if false:
    n := size q8 - 1;
    dotlabel.lrt("$z_{13}$", z13);
    dotlabel.bot("$z_{14}$", z14);
  fi

  dotlabel.bot("$q_{12}$", mediate(z13, z14)) with_text_color green;

  n := (size q3 * 1/2) + 3;
  dotlabel.lft("$q_3$", get_point (n) q3) with_text_color dark_green;

  n := (size q4) / 2;
  dotlabel.ulft("$q_4$", get_point (n) q4) with_text_color magenta;

  n := size q4 - 1;
  %drawdot z20 with_pen dot_pen;
  %label.lft("\vbox{\hbox{0}\vskip-.125cm\hbox{$z_{20}$}}", z20 shifted (5pt, 0))
  %   with_text_color magenta;
  %dotlabel.ulft(decimal n, get_point (n) q4) with_text_color magenta;

  n := size q5 * 3/ 4;
  dotlabel.rt("$q_5$", get_point (n) q5) with_text_color orange;

  %label.urt("$z_{22}$", z22 shifted (-2pt, 0));
  dotlabel.top("$\scriptstyle z_{23}$", z23) shifted (-2pt, .5pt);
  dotlabel.lft("$z_{24}$", z24);
  dotlabel.lft("$z_{25}$", z25);
  dotlabel.top("$\scriptstyle z_{26}$", z26);
  %dotlabel.urt("$\scriptstyle z_{27}$", z27);
  label.urt("$q_{13}$", get_point(n) q13) with_text_color blue;
  label.rt("$q_{14}$", get_point(2) q14) with_text_color teal_blue;
  label("$q_{16}$", get_point(1) q16 shifted (-.5cm, .25cm)) with_text_color rose_madder;
  dotlabel.llft("$\scriptstyle z_{28}$", z28);
  dotlabel.bot("$\scriptstyle z_{29}$", z29);

  label("$q_{17}$", get_point(2) q14 shifted (.25cm, -.75cm)) with_text_color lime_green;
  dotlabel.rt("$z_{30}$", z30);
  dotlabel.lft("$\scriptstyle z_{31}$", z31);
  dotlabel.lft("$\scriptstyle z_{32}$", z32);
  label.rt("$q_{19}$", z32) with_text_color turquoise;
  label.top("$q_{20}$", a[0][21]) with_text_color cerulean_blue;

  label_picture := current_picture;

%% *** (3)


  %output v1 with_projection parallel_x_y;

  current_picture += v0;
  current_picture += label_picture;
  
endfig with_projection parallel_x_y; % no_sort;
%endfig with_focus f no_sort;



% end_mp;
% end;

%% ** (2) This works.  Rotating the "g".

j := 1;
for i = 104 upto 111:
  beginfig(i);
    %current_picture := v0;
    current_picture := v1;
    rotate current_picture (-10*j, 0, 0);
  endfig with_focus f no_sort;
  j += 1;
endfor;



beginfig(112);
  %current_picture := v0;
  current_picture := v1;
  rotate current_picture (0, 30, 0);
endfig with_focus f no_sort; 

j := 1;
for i = 113 upto 119:
  beginfig(i);
    %current_picture := v0;
    current_picture := v1;
    rotate current_picture (-10*j, 0, 0);
    rotate current_picture (0, 30, 0);
  endfig with_focus f no_sort;
  j += 1;
endfor;


beginfig(120);
  %current_picture := v0;
  current_picture := v1;
  rotate current_picture (0, -30, 0);
endfig with_focus f no_sort;


j := 1;
for i = 121 upto 127:
  beginfig(i);
    %current_picture := v0;
    current_picture := v1;
    rotate current_picture (-10*j, 0, 0);
    rotate current_picture (0, -30, 0);
  endfig with_focus f no_sort;
  j += 1;
endfor;


beginfig(128);
  %current_picture := v0;
  current_picture := v1;
endfig with_focus f no_sort;


j := 1;
for i = 129 upto 136:
  beginfig(i);
    %current_picture := v0;
    current_picture := v1;
    rotate current_picture (10*j, 0, 0);
  endfig with_focus f no_sort;
  j += 1;
endfor;

%% ** (2)

%% * (1) End of 3DLDF code

end_mp;
end_mf;
end;

%% * (1) Local variables for Emacs

%% Local Variables:
%% mode: MetaPost
%% eval:(outline-minor-mode t)
%% outline-regexp:"%% [*\f]+"
%% End:
