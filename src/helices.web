@q helices.web @>
                       
@q * (1) Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing.  @>
@q Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, @>
@q 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018 The Free Software Foundation  @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version.  @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details.  @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA@>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html.@>

@q ("@@" stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de@>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston                 @> 
@q c/o Free Software Foundation, Inc.  @>
@q 51 Franklin St, Fifth Floor         @> 
@q Boston, MA  02110-1301              @>
@q USA                                 @>

@q Laurence.Finston@@gmx.de (@@ stands for a single "at" sign.)@>

        
@q * (0) Helix.@>
@** Helix\quad ({\tt helices\PERIOD web}).\hfil 

\LOG
\initials{LDF 2005.05.18.}
Created this file.
\ENDLOG


@f Helix Shape  

@q * Include files.@>
@ Include files.


@<Include files@>=
#include "loader.h++"
#include "pspglb.h++"
#include "io.h++"
#include "creatnew.h++"
#include "pntrvctr.h++"
#include "primes.h++"
#include "complex.h++"
#include "matrices.h++"
#include "colors.h++"
#include "transfor.h++"
#include "pens.h++"   
#include "dashptrn.h++"
#include "shapes.h++"
#include "pictures.h++"
#include "points.h++"
#include "lines.h++"
#include "planes.h++"
#include "nurbs.h++"
#include "paths.h++"
#include "curves.h++"
#include "polygons.h++"
#include "triangle.h++"
#include "rectangs.h++"
#include "conicsct.h++"
#include "ellipses.h++" 
#include "circles.h++"
#include "ellpsslc.h++"
#include "crclslc.h++"
#include "parabola.h++"
#include "hyprbola.h++"
#include "cncsctlt.h++"
#include "arc.h++"
  
@q * (1) Helix class definition.@>
@* {\bf Helix} class definition.
\initials{LDF 2005.05.18.}

\LOG
\initials{LDF 2005.05.19.}
Added the data members |Point* center|,
|Point* vector|, |real start_diameter|,
|real angle|, |unsigned short points_per_cycle|,
and |real cycles|.

\initials{LDF 2005.05.20.}
Added the |unsigned short| data member |helix_type|
and the 
|static unsigned short| data members
|HELIX_NULL_TYPE|,
|HELIX_ARCHIMEDEAN_TYPE|,
|HELIX_LOGARITHMIC_TYPE|,
|HELIX_PARABOLIC_TYPE|, and
|HELIX_HYPERBOLIC_TYPE|
for setting it.

\initials{LDF 2005.05.21.}
Changed the data member |Point* vector| to |direction|.

\initials{LDF 2005.05.21.}
Changed the name of the data member |unsigned short helix_type| to 
|type|.

\initials{LDF 2005.05.21.}
Made the |static unsigned short| data members
|HELIX_NULL_TYPE|, |HELIX_ARCHIMEDEAN_TYPE|,
|HELIX_LOGARITHMIC_TYPE|, |HELIX_PARABOLIC_TYPE|, 
and |HELIX_HYPERBOLIC_TYPE| |public|.

\initials{LDF 2005.05.21.}
Added |Pointer_Vector<Point>* direction_vector|.
\ENDLOG 

@<Define |class Helix|@>=

class Helix : public Path
{
   friend bool Path::is_helical(Scanner_Node scanner_node) const; 

   protected:

      Point* center;
      Point* direction;

      Pointer_Vector<Point>* direction_vector; 

      real start_diameter;
      real angle;
  
      unsigned short points_per_cycle;
      real cycles;
   
      unsigned short type;
  
   public:

      static unsigned short HELIX_NULL_TYPE;
      static unsigned short HELIX_ARCHIMEDEAN_TYPE;
      static unsigned short HELIX_LOGARITHMIC_TYPE;
      static unsigned short HELIX_PARABOLIC_TYPE; 
      static unsigned short HELIX_HYPERBOLIC_TYPE;


  @<Declare |Helix| functions@>@;
};

@q * (1) Static data members.@>
@ Static data members.
\initials{LDF 2005.05.20.}

\LOG
\initials{LDF 2005.05.20.}
Added this section.
\ENDLOG

@<Define |static| |Helix| data members@>=

   unsigned short Helix::HELIX_NULL_TYPE        = 0;
   unsigned short Helix::HELIX_ARCHIMEDEAN_TYPE = 1;
   unsigned short Helix::HELIX_LOGARITHMIC_TYPE = 2;
   unsigned short Helix::HELIX_PARABOLIC_TYPE   = 3; 
   unsigned short Helix::HELIX_HYPERBOLIC_TYPE  = 4;

@q * (1) Constructors and setting functions.@>
@* Constructors and setting functions.@>

@q ** (2) Default constructor.  No arguments.@>
@*1 Default constructor. No arguments.
@^\cfunc{Helix}{Helix}@>

\LOG
\initials{LDF 2005.05.18.}
Added this function.

\initials{LDF 2005.05.20.}
Now setting |Point* center|, |Point* vector|,
|real start_diameter|, |real angle|, 
|unsigned short points_per_cycle|, and |real cycles|   
to 0.

\initials{LDF 2005.05.21.}
Changed |Point* vector| to |direction|.

\initials{LDF 2005.05.21.}
Now setting |unsigned short type| to 0.

\initials{LDF 2005.05.21.}
Now setting |Pointer_Vector<Point>* direction_vector = 0|.
\ENDLOG


@q *** (3) Declaration.  @>

@<Declare |Helix| functions@>=
Helix(void);

@q *** (3) Definition.  @>

@
@<Define |Helix| functions@>= 
Helix::Helix(void)
{

   shape_type = HELIX_TYPE;

   surface_hiding_ctr = 0;

   decomposition_level = 0;

   line_switch = false;
   cycle_switch = true;    
   dash_pattern_vector = 0;
   pen_vector = 0; 

   center = 0;
   direction = 0;

   direction_vector = 0;

   real start_diameter = 0;
   real angle = 0;
  
   unsigned short points_per_cycle = 0;
   real cycles = 0;   

   type = HELIX_NULL_TYPE;

   return;

}

@q ** (2) Setting function:  |Helix_Set_Option_Struct*| argument.@>
@*1 Setting function:  {\bf Helix\_Set\_Option\_Struct*} argument.
@^\cfunc{Helix}{set}@>
\initials{LDF 2005.05.19.}

\LOG
\initials{LDF 2005.05.19.}
Added this function.

\initials{LDF 2005.05.20.}
Replaced the dummy definition with a real one.

\initials{LDF 2005.05.21.}
Now setting |unsigned short type| to |option_struct->type|.

\initials{LDF 2005.05.21.}
Added code for setting |Pointer_Vector<Point>* direction_vector|.
\ENDLOG


@q *** (3) Declaration.  @>

@<Declare |Helix| functions@>=
int
set(Helix_Set_Option_Struct* option_struct, Scanner_Node scanner_node = 0);

@q *** (3) Definition.  @>

@
@<Define |Helix| functions@>= 
int
Helix::set(Helix_Set_Option_Struct* option_struct, Scanner_Node scanner_node)
{

@q **** (4) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q **** (4).@>

   shape_type = HELIX_TYPE;

   surface_hiding_ctr = 0;

   decomposition_level = 0;

   line_switch = false;
   cycle_switch = true;    
   dash_pattern_vector = 0;
   pen_vector = 0; 

@q **** (4) @>   

   if (option_struct == static_cast<Helix_Set_Option_Struct*>(0))
      {
          cerr_strm << thread_name << "ERROR!  In 'Helix::set()':"
                    << endl  
                    << "'option_struct == 0'.  Can't set 'Helix'."
                    << endl 
                    << "Exiting function with return value 1.";

          log_message(cerr_strm);
          cerr_message(cerr_strm);
          cerr_strm.str("");

          return 1;

      }  /* |if (option_struct == static_cast<Helix_Set_Option_Struct*>(0))|  */      

@q **** (4) @>   

   if (option_struct->center)
      {
         if (center == static_cast<Point*>(0))
            center = option_struct->center;
         
         else 
           {
              *center = *(option_struct->center);
               delete option_struct->center;
           }

         option_struct->center = 0;
      }

    else
       {
          delete center;
          center = 0;
       }


   if (option_struct->direction)
      {
         if (direction == static_cast<Point*>(0))
            direction = option_struct->direction;
         
         else 
           {
              *direction = *(option_struct->direction);
               delete option_struct->direction;
           }

         option_struct->direction = 0;
      }

    else
       {
          delete direction;
          direction = 0;
       }



   if (option_struct->direction_vector)
      {
         if (direction_vector == static_cast<Pointer_Vector<Point>*>(0))
            direction_vector = option_struct->direction_vector;
         
         else 
           {
              *direction_vector = *(option_struct->direction_vector);
               delete option_struct->direction_vector;
           }

         option_struct->direction_vector = static_cast<Pointer_Vector<Point>*>(0);
      }

    else
       {
          delete direction_vector;
          direction_vector = 0;
       }





   start_diameter   = option_struct->start_diameter;
   angle            = option_struct->angle;
   points_per_cycle = option_struct->points_per_cycle;
   cycles           = option_struct->cycles;
   type             = option_struct->type;


@q **** (4) @>   

   delete option_struct;

   return 0;

}  /* End of |Helix::set()| definition.  */

@q * (1) Destructor.@> 
@* Destructor.
\initials{LDF 2005.05.19.}

\LOG
\initials{LDF 2005.05.19.}
Added this function.
\ENDLOG

@<Declare |Helix| functions@>=
virtual
~Helix(void);

@q *** (3) Definition.  @>

@
@<Define |Helix| functions@>= 
Helix::~Helix(void)
{
   delete center;
   delete direction;
   delete direction_vector;
  
   clear();

   return;
}

@q * (1) Pseudo-constructor for dynamic allocation.@>
@* Pseudo-constructor for dynamic allocation.

@q ** (2) Pointer argument.@>
@*1 Pointer argument.
@^\cfunc{Helix}{create\_new\_helix}@>

\LOG
\initials{LDF 2005.05.18.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare non-member template functions for |Helix|@>=
Helix* 
create_new(const Helix* c, Scanner_Node scanner_node);

@q ** (2) Reference argument.@>
@*1 Reference argument.

\LOG
\initials{LDF 2005.05.18.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare non-member template functions for |Helix|@>=
Helix* 
create_new(const Helix& c, Scanner_Node scanner_node);


@q * (1) Assignment.@> 
@* Assignment.
\initials{LDF 2005.05.20.}

\LOG
\initials{LDF 2005.05.20.}
Added this section.
\ENDLOG


@q ** (2) Assignment from a |Helix|.@> 
@*1 Assignment from a |Helix|.
\initials{LDF 2005.05.20.}

\LOG
\initials{LDF 2005.05.20.}
Added this function.

\initials{LDF 2005.05.20.}
@:BUG FIX@> BUG FIX:  Now checking that |h.center| and |h.vector| are 
non-null before assigning from them to |center| and |vector|.

\initials{LDF 2005.05.21.}
Changed the data member |Point* vector| to |direction|.

\initials{LDF 2005.05.21.}
Added code for setting |Pointer_Vector<Point>* direction_vector|.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Helix| functions@>=
virtual
Helix&
operator=(const Helix& h);

@q *** (3) Definition.@> 

@
@<Define |Helix| functions@>=

Helix&
Helix::operator=(const Helix& h)
{
    if (this == &h) /* Make sure it's not self-assignment. */
       return *this;

    if (h.center != static_cast<Point*>(0))
       {
          if (center == static_cast<Point*>(0))
             center = create_new<Point>(0);
 
          *center = *(h.center);
       }

    if (h.direction != static_cast<Point*>(0))
       {
          if (direction == static_cast<Point*>(0))
             direction = create_new<Point>(0);
 
          *direction = *(h.direction);
       }

    if (h.direction_vector != static_cast<Pointer_Vector<Point>*>(0))
       {
          if (direction_vector == static_cast<Pointer_Vector<Point>*>(0))
             direction_vector = new Pointer_Vector<Point>; 
 
          *direction_vector = *(h.direction_vector);
       }





    start_diameter = h.start_diameter;

    angle = h.angle;

    points_per_cycle = h.points_per_cycle;
    cycles = h.cycles;

    type = h.type;

    Path::operator=(h);

    return *this;

}  /* End of |Helix::operator=(const Helix& h)| definition.  */

@q * (1) Returning elements and information.@>
@* Returning elements and information.

@q ** (2) Get |Shape| type.@> 
@*1 Get {\bf Shape} type.
\initials{LDF 2005.05.21.}

\LOG
\initials{LDF 2005.05.21.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@> 

@<Declare |Helix| functions@>=
virtual 
inline
unsigned short 
get_shape_type(void) const
{
   return HELIX_TYPE;
}

@q * (1) Predicates.@> 
@* Predicates.
\initials{LDF 2005.05.20.}

\LOG
\initials{LDF 2005.05.20.}
Added this section.
\ENDLOG

@q ** (2) Is helical.@>
@*1 Is helical.

@q *** (3) |Path| version.@> 
@*2 {\bf Path} version.
@^\cfunc{Path}{is\_helical}@>
\initials{LDF 2005.05.18.}

\LOG
\initials{LDF 2005.05.18.}
Added this function.  It is declared in \filename{paths.web}.
It currently has a dummy definition and returns |false|.
\ENDLOG

@q **** (4) Definition.@> 
  
@
@<Define |Path| functions@>=
bool
Path::is_helical(Scanner_Node scanner_node) const
{

@q ***** (5) Preliminaries.@> 

  bool DEBUG = false; /* |true|  */

  using namespace Scan_Parse;

  stringstream cerr_strm;

  bool error_stop_value   = true;
  bool warning_stop_value = true;
  string thread_name      = "";

  if (scanner_node)
     scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                   &error_stop_value,
                                                   &warning_stop_value);

@q ***** (5)@>  
  
   return false;

} /* End of |Path::is_helical()| definition.  */

@q * (1) Transformations.@>
@* Transformations. 
\initials{LDF 2005.05.20.}

\LOG
\initials{LDF 2005.05.20.}
Added this section.
\ENDLOG


@q *** (3) Multiplication by a |Transform| with assignment.@>
@*2 Multiplication by a |Transform| with assignment.
@^\cofunc{Helix}{*=}@>
\initials{LDF 2005.05.20.}

\LOG
\initials{LDF 2005.05.20.}
Added this function.


\initials{LDF 2005.05.21.}
@:BUG FIX@> BUG FIX:  Removed code for transforming |direction|.
\ENDLOG 

@<Declare |Helix| functions@>=
virtual
Transform
operator*=(const Transform& t);

@
@<Define |Helix| functions@>=
Transform
Helix::operator*=(const Transform& t)
{
   if (center != static_cast<Point*>(0))
      *center *= t;

   return Path::operator*=(t);
}


@q ** (2) Rotatation around the main axes.@>
@*1 Rotation  around the main axes. 
@^\cfunc{Helix}{rotate}@>
\initials{LDF 2005.05.20.}

\LOG
\initials{LDF 2005.05.20.}
Added this function.
\ENDLOG

@<Declare |Helix| functions@>=
virtual
Transform 
rotate(const real x, const real y = 0, const real z = 0);

@
@<Define |Helix| functions@>=
Transform 
Helix::rotate(const real x, const real y, const real z)
{
  Transform t;
  t.rotate(x, y, z);
  return operator*=(t);
}

@q ** (2) Scale. @>
@*1 Scale. 
@^\cfunc{Helix}{scale}@>
\initials{LDF 2005.05.20.}

\LOG
\initials{LDF 2005.05.20.}
Added this function.
\ENDLOG

@<Declare |Helix| functions@>=
virtual
Transform 
scale(real x, real y = 1, real z = 1);

@
@<Define |Helix| functions@>=
Transform 
Helix::scale(real x, real y, real z)
{
   Transform t;
   t.scale(x, y, z);
   return operator*=(t);
}

@q ** (2) Shear.@>
@*1 Shear. 
@^\cfunc{Helix}{shear}@>
\initials{LDF 2005.05.20.}

\LOG
\initials{LDF 2005.05.20.}
Added this function.
\ENDLOG


@<Declare |Helix| functions@>=

virtual
Transform 
shear(real xy, real xz = 0, real yx = 0, real yz = 0, 
      real zx = 0, real zy = 0);

@
@<Define |Helix| functions@>=
Transform 
Helix::shear(real xy, real xz, real yx, real yz, 
      real zx, real zy)
{
  Transform t;
  t.shear(xy, xz, yx, yz, zx, zy);
  return operator*=(t);

}

@q ** (2) Shift.@>
@*1 Shift. 
\initials{LDF 2005.05.20.}

\LOG
\initials{LDF 2005.05.20.}
Added this section.
\ENDLOG


@q *** (3) |real| arguments.@>
@*2 {\bf real} arguments. 
@^\cfunc{Helix}{shift}@>

\LOG
\initials{LDF 2005.05.20.}
Added this function.
\ENDLOG

@<Declare |Helix| functions@>=
virtual
Transform 
shift(real xx, real yy = 0, real zz = 0);

@
@<Define |Helix| functions@>=
Transform
Helix::shift(real xx, real yy, real zz)
{
  Transform t;
  t.shift(xx, yy, zz);
  return operator*=(t);
}


@q *** (3) Point argument.@>

@*2 {\bf Point} argument. 
@^\cfunc{Helix}{shift}@>
\initials{LDF 2005.05.20.}

\LOG
\initials{LDF 2005.05.20.}
Added this function.
\ENDLOG

@<Declare |Helix| functions@>=
virtual
Transform 
shift(const Point& p);

@
@<Define |Helix| functions@>=
Transform 
Helix::shift(const Point& p)
{
  return shift(p.get_x(), p.get_y(), p.get_z());
}


@q ** (2) Shift times. @>
@*1 Shift times. 

@q *** (3) real arguments. @>

@*2 {\bf real} arguments. 
@^\cfunc{Helix}{shift\_times}@>
\initials{LDF 2005.05.20.}

\LOG
\initials{LDF 2005.05.20.}
Added this function.

\initials{LDF 2005.05.21.}
@:BUG FIX@> BUG FIX:  Removed code for calling |Point::shift_times()| on |direction|.
\ENDLOG

@<Declare |Helix| functions@>=

virtual
void 
shift_times(real x, real y = 1, real z = 1);

@
@<Define |Helix| functions@>=
void 
Helix::shift_times(real x, real y, real z)
{

    if (center != static_cast<Point*>(0))
       center->shift_times(x, y, z);


    Path::shift_times(x, y, z);
  
    return;
}

@q *** (3) Point argument. @>

@*2 {\bf Point} argument. 
@^\cfunc{Helix}{shift\_times}@>
\initials{LDF 2005.05.20.}

\LOG
\initials{LDF 2005.05.20.}
Added this function.
\ENDLOG

@<Declare |Helix| functions@>=
virtual
void
shift_times(const Point& p);

@
@<Define |Helix| functions@>=
void
Helix::shift_times(const Point& p)
{
  return shift_times(p.get_x(), p.get_y(), p.get_z());
}

@q ** (2) Rotatation around an arbitrary axis.@>
@*1 Rotatation around an arbitrary axis. 
\initials{LDF 2005.05.20.}

\LOG
\initials{LDF 2005.05.20.}
Added this section.
\ENDLOG

@q *** (3) Point arguments.@>

@*2 {\bf Point} arguments.
@^\cfunc{Helix}{rotate}@>
\initials{LDF 2005.05.20.}

\LOG
\initials{LDF 2005.05.20.}
Added this function.
\ENDLOG

@<Declare |Helix| functions@>=

virtual
Transform 
rotate(const Point& p0, const Point& p1, const real angle = 180);

@
@<Define |Helix| functions@>=
Transform 
Helix::rotate(const Point& p0, const Point& p1, const real angle)
{
  Transform t;
  t.rotate(p0, p1, angle);
  return operator*=(t);
}

@q *** (3) Path argument.@>

@*2 {\bf Path} arguments.
@^\cfunc{Helix}{rotate}@>
\initials{LDF 2005.05.20.}

\LOG
\initials{LDF 2005.05.20.}
Added this function.
\ENDLOG

@<Declare |Helix| functions@>=

virtual
Transform 
rotate(const Path& p, const real angle = 180);

@
@<Define |Helix| functions@>=

Transform 
Helix::rotate(const Path& p, const real angle)
{
   if (!p.is_linear())
     {
        return INVALID_TRANSFORM;
     }

   return rotate(p.get_point(0),
                 p.get_last_point(), angle);  
}   




@q * (1) Show.@> 
@* Show.
\initials{LDF 2005.05.20.}

\LOG
\initials{LDF 2005.05.20.}
Added this function.

\initials{LDF 2005.05.21.}
Now showing |type|.

\initials{LDF 2005.05.21.}
 Added code for showing |Pointer_Vector<Point>* direction_vector|.
\ENDLOG

@q ** (2) Declaration.@> 

@<Declare |Helix| functions@>=

virtual 
void 
show(string text = "", 
     char coords = 'w',
     const bool do_persp = true, 
     const bool do_apply = true,
     Focus* f = 0, 
     const unsigned short proj = 0,
     const real factor = 1) const;


@q ** (2) Definition.@> 

@
@<Define |Helix| functions@>=
void 
Helix::show(string text, char coords,
            const bool do_persp, const bool do_apply,
            Focus* f, const unsigned short proj,
            const real factor) const

{
   if (text == "")
      text = "Helix:";

   

   Path::show(text, coords, do_persp, do_apply,
              f, proj, factor);

   if (center == static_cast<Point*>(0))
      cerr << "center == 0" << endl;
   else
      center->show("center:");

 
   if (direction == static_cast<Point*>(0))
      cerr << "direction == 0" << endl;
   else
      direction->show("direction:");

   if (direction_vector == static_cast<Pointer_Vector<Point>*>(0))
      cerr << "direction_vector == 0" << endl;
   else
      direction_vector->show("direction_vector:");

   cerr << "start_diameter == " << start_diameter << endl
        << "angle == " << angle << endl
        << "points_per_cycle == " << points_per_cycle << endl
        << "cycles == " << cycles << endl;
  


   if (type == HELIX_NULL_TYPE)
      cerr << "type == HELIX_NULL_TYPE";

   else if (type == HELIX_ARCHIMEDEAN_TYPE)
      cerr << "type == HELIX_ARCHIMEDEAN_TYPE";

   else if (type == HELIX_LOGARITHMIC_TYPE)
      cerr << "type == HELIX_LOGARITHMIC_TYPE";
   
   else if (type == HELIX_PARABOLIC_TYPE)
      cerr << "type == HELIX_PARABOLIC_TYPE";

   else if (type == HELIX_HYPERBOLIC_TYPE)
      cerr << "type == HELIX_HYPERBOLIC_TYPE";

   else 
      cerr << "ERROR!  In 'Helix::show':  'Helix' has invalid 'type': " << type 
           << endl << "Continuing";

   cerr << endl;


   return;

} /* End of |Helix::show()| definition.  */


@q * (1) Helix_Set_Option_Struct.@> 
@* {\bf Helix\_Set\_Option\_Struct}.
\initials{LDF 2005.05.19.}

\LOG
\initials{LDF 2005.05.19.}
Added this section.
\ENDLOG

@q ** (2) Struct definition.@> 
@*1 Struct definition.
\initials{LDF 2005.05.19.}

\LOG
\initials{LDF 2005.05.19.}
Added this |struct| definition.

\initials{LDF 2005.05.20.}
Added default constructor.

\initials{LDF 2005.05.21.}
Added |unsigned short type|.

\initials{LDF 2005.05.21.}
Added |Pointer_Vector<Point>* direction_vector|.
\ENDLOG

@<Define |struct Helix_Set_Option_Struct|@>=

struct
Helix_Set_Option_Struct
{
   Point* center;
   Point* direction;
   Pointer_Vector<Point>* direction_vector;
   real start_diameter;
   real angle;
   unsigned short points_per_cycle;
   real cycles;
   unsigned short type;

   @<Declare |Helix_Set_Option_Struct| functions@>@;

};

@q ** (2) |Helix_Set_Option_Struct| functions.@> 
@*1 {\bf Helix\_Set\_Option\_Struct} functions.
\initials{LDF 2005.05.20.}

\LOG
\initials{LDF 2005.05.20.}
Added this section.
\ENDLOG


@q *** (3) Constructors.@>
@*2 Constructors.
\initials{LDF 2005.05.20.}

\LOG
\initials{LDF 2005.05.20.}
Added this section.
\ENDLOG

@q **** (4) Default constructor.@>   
@*3 Default constructor.
\initials{LDF 2005.05.20.}

\LOG
\initials{LDF 2005.05.20.}
Added this function.

\initials{LDF 2005.05.21.}
Now setting |Pointer_Vector<Point>* direction_vector = 0|.
\ENDLOG

@q ***** (5) Declaration.@>  



@<Declare |Helix_Set_Option_Struct| functions@>=

Helix_Set_Option_Struct(void);

@q ***** (5) Definition.@>  

@
@<Define |Helix_Set_Option_Struct| functions@>=

Helix_Set_Option_Struct::Helix_Set_Option_Struct(void) 
{
    center           = 0;
    direction        = 0;
    direction_vector = 0;
    start_diameter   = 0;
    angle            = 0;
    points_per_cycle = 0;
    cycles           = 0;
    type             = Helix::HELIX_NULL_TYPE;
}

@q *** (3) Destructor.@> 
@*2 Destructor.
\initials{LDF 2005.05.20.}

\LOG
\initials{LDF 2005.05.20.}
Added this function.

\initials{LDF 2005.05.21.}
Now deleting |Pointer_Vector<Point>* direction_vector|.
\ENDLOG

@q **** (4) Declaration.@>  

@<Declare |Helix_Set_Option_Struct| functions@>=

~Helix_Set_Option_Struct(void); 

@q **** (4) Definition.@>  

@
@<Define |Helix_Set_Option_Struct| functions@>=

Helix_Set_Option_Struct::~Helix_Set_Option_Struct(void) 
{
    delete center;
    delete direction;
    delete direction_vector;

    return;
}

@q *** (3) Clear.@> 
@*2 Clear.
\initials{LDF 2005.05.20.}

\LOG
\initials{LDF 2005.05.20.}
Added this function.

\initials{LDF 2005.05.21.}
Now setting |unsigned short type| to 0.

\initials{LDF 2005.05.21.}
Now deleting |Pointer_Vector<Point>* direction_vector| and setting it to 0.
\ENDLOG

@q **** (4) Declaration.@>  

@<Declare |Helix_Set_Option_Struct| functions@>=

int 
clear(void); 

@q **** (4) Definition.@>  

@
@<Define |Helix_Set_Option_Struct| functions@>=

int
Helix_Set_Option_Struct::clear(void) 
{
    delete center;
    center           = 0;

    delete direction;
    direction        = 0;

    delete direction_vector;
    direction_vector        = 0;

    start_diameter   = 0;
    angle            = 0;
    points_per_cycle = 0;
    cycles           = 0;
    type             = Helix::HELIX_NULL_TYPE;

    return 0;

}  /* End of |Helix_Set_Option_Struct::clear()| definition.  */



@q * (1) Putting Helix together. @>
@* Putting {\bf Helix} together.

This is what's compiled.
@c
@<Include files@>@;
@<Define |struct Helix_Set_Option_Struct|@>@;
@<Define |class Helix|@>@;
@<Define |static| |Helix| data members@>@;
@<Define |Helix| functions@>@;
@<Define |Helix_Set_Option_Struct| functions@>@;
@<Declare non-member template functions for |Helix|@>@;
@<Define |Path| functions@>@;


@ This is what's written to \filename{helices.h}.
@(helices.h@>=
@<Define |struct Helix_Set_Option_Struct|@>@;
@<Define |class Helix|@>@;
@<Declare non-member template functions for |Helix|@>@;


@q * Emacs-Lisp code for use in indirect buffers when using the          @>
@q   GNU Emacs editor.  The local variable list is not evaluated when an @>
@q   indirect buffer is visited, so it's necessary to evaluate the       @>
@q   following s-expression in order to use the facilities normally      @>
@q   accessed via the local variables list.                              @>
@q   \initials{LDF 2004.02.12}.                                          @>
@q   (progn (cweb-mode) (outline-minor-mode t) (setq fill-column 70))    @>


@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q run-gxx-on-file:"main.c" @>
@q run-cweb-on-file:"main.web" @>
@q run-cweave-on-file:"3DLDF.web" @>
@q makefile:"makefile" @>
@q executable-name:"pp" @>
@q use-g++:t @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q End: @>
