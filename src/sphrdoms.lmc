%% sphrdoms.lmc
%%%% Created by Laurence D. Finston (LDF) Sun 17 Oct 2021 10:05:09 AM CEST

%% * (1) Copyright and License.

%%%% This file is part of GNU 3DLDF, a package for three-dimensional drawing.  
%%%% Copyright (C) 2021 The Free Software Foundation  

%%%% GNU 3DLDF is free software; you can redistribute it and/or modify 
%%%% it under the terms of the GNU General Public License as published by 
%%%% the Free Software Foundation; either version 3 of the License, or 
%%%% (at your option) any later version.  

%%%% GNU 3DLDF is distributed in the hope that it will be useful, 
%%%% but WITHOUT ANY WARRANTY; without even the implied warranty of 
%%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
%%%% GNU General Public License for more details.  

%%%% You should have received a copy of the GNU General Public License 
%%%% along with GNU 3DLDF; if not, write to the Free Software 
%%%% Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA 

%%%% GNU 3DLDF is a GNU package.  
%%%% It is part of the GNU Project of the  
%%%% Free Software Foundation 
%%%% and is published under the GNU General Public License. 
%%%% See the website http://www.gnu.org 
%%%% for more information.   
%%%% GNU 3DLDF is available for downloading from 
%%%% http://www.gnu.org/software/3dldf/LDF.html.
  
%%%% Please send bug reports to Laurence.Finston@gmx.de
%%%% The mailing list help-3dldf@gnu.org is available for people to 
%%%% ask other users for help.  
%%%% The mailing list info-3dldf@gnu.org is for sending 
%%%% announcements to users. To subscribe to these mailing lists, send an 
%%%% email with ``subscribe <email-address>'' as the subject.  

%%%% The author can be contacted at: 

%%%% Laurence D. Finston 
%%%% c/o Free Software Foundation, Inc. 
%%%% 51 Franklin St, Fifth Floor 
%%%% Boston, MA  02110-1301  
%%%% USA

%%%% Laurence.Finston@gmx.de

%% ** (2) Variable declarations

%% *** (3)  Global

color label_color;
color line_color;

pen medium_pen;
pen large_pen;
pen Large_pen;

medium_pen := pencircle scaled (2pt, 2pt, 2pt);
large_pen  := pencircle scaled (3pt, 3pt, 3pt);
Large_pen  := pencircle scaled (4pt, 4pt, 4pt);

% * (1) Beginning of 3DLDF code.

%\font\TINY=cmr3\font\Tiny=cmr4

verbatim_metapost "if known do_svg_output: outputformat := \"svg\";\n"
  & "outputtemplate := \"%j_%c.svg\";\n"
  & "else: outputtemplate := \"%j_%c.eps\";fi;\n"
  & "verbatimtex \font\Tiny=cmr4\font\SMALL=cmr6\font\Small=cmr7\n"
  & "\font\small=cmr8\font\medium=cmr9\font\large=cmr12\n"
  & "\font\largebf=cmbx12\font\Largebf=cmbx14\n"
  & "\font\smallgreek=cmmi8\font\Smallgreek=cmmi7\n"
  & "\font\SMALLgreek=cmmi6\n"
  & "\\newdimen\labeldimen\box0=\hbox{$00.00^\circ$}\labeldimen=\wd0\advance\labeldimen by 1.5cm "
  & "etex;";

%% ** (2) macro get_spherical_biangle

macro get_spherical_biangle;



def get_spherical_biangle (pp, vv, lline_picture, llabel_picture, dot_pen) {numeric rad,
									    numeric ra_divisions,
                                    	     		    		    numeric decl_divisions,
                                    	     		    		    numeric draw_portion,
                                    	     		    		    numeric tab_width,
                                    	     		    		    numeric tab_interval_zero,
                                    	     		    		    numeric tab_interval_one,
                                    	     		    		    numeric picture_ctr} =



  message "Entering `get_spherical_biangle'.";
  message "Radius == ";
  show rad;
  
  circle c[][];
  numeric biangle_width[][];
  numeric aa[];
  numeric a[];
  numeric m[];
  numeric radius[][];
  numeric circum[][];
  numeric n[];
  numeric angle_divisions;
  point ra_decl_zero_pt;
  numeric tab_wd[];
  numeric flag;
  numeric jj;
  path edge[];
  
  point r[][];

  boolean testing;

  testing := false; % true; % 
  
  if draw_portion == 0:
    message "WARNING!  `draw_portion' == 0.  This is invalid.  Setting it to 1.";
    pause;
    draw_portion := 1;
  fi;
  
  if draw_portion < 0:
    draw_portion *= -1;
  fi;
  
  draw_portion := min(draw_portion, 1);

  tab_wd[3] := tab_width;
  tab_wd[6] := .5tab_width;

  tab_wd[12] := 2tab_width;
  tab_wd[15] := tab_width;

  
  radius[0][0] := rad;

  radius[3][0] := rad + tab_wd[3];
  radius[6][0] := rad + tab_wd[6];
  radius[9][0] := rad - tab_wd[6];  %% Trace

  radius[12][0] := rad + tab_wd[12];
  radius[15][0] := rad + tab_wd[15];
  radius[18][0] := rad - tab_wd[15];  %% Trace
  
  ra_decl_zero_pt := (rad, 0);

  c[0][0] := unit_circle scaled (radius[0][0], 0, radius[0][0]) rotated (90, 0);
  a := a0 := circumference c[0][0];   %% a == Circumference of horizontal great circle.

  % message "a0:";
  % show a0;
  
  if testing:
    draw c[0][0] with_color red on_picture vv[picture_ctr];
  fi;

% (% 100 32)
% (/ 100 32)
% (/ 100 32.0)

% (* 3 32)

  
  % message "decl_divisions:";
  % show decl_divisions;

  % message "draw_portion:";
  % show draw_portion;

  m0 := -((draw_portion * 180) - 90);

  % message "Before rounding:  m0  ==";
  % show m0;

  m0 := (round (4 * m0)) / 4;

  % message "After rounding:  m0 ==";
  % show m0;
  
  m1 := 180 / decl_divisions;
  m2 := .5a / decl_divisions;
  
  % message "decl_divisions:";
  % show decl_divisions;

  % message "decl_increment:";
  % show decl_increment;
  
  % message "m1 == ";
  % show m1;

  %% r[2][] is needed because r[0][0], r[0][1], r[1][0] and r[0][1] could
  %% be overwritten in the loop below.
  %% LDF 2021.10.23.

  r[2][0] := (-radius[0][0], 0);
  r[2][1] := (radius[0][0], 0);

  % message "magnitude (r[2][1] - r[2][0]) (diameter of c[0][0]):";
  % show magnitude (r[2][1] - r[2][0]);

  r[5][0] := (-radius[3][0], 0);
  r[5][1] := (radius[3][0], 0);

  r[8][0] := (-radius[6][0], 0);
  r[8][1] := (radius[6][0], 0);

  r[11][0] := (-radius[9][0], 0);
  r[11][1] := (radius[9][0], 0);

  r[14][0] := (-radius[12][0], 0);
  r[14][1] := (radius[12][0], 0);

  r[17][0] := (-radius[15][0], 0);
  r[17][1] := (radius[15][0], 0);

  r[20][0] := (-radius[18][0], 0);
  r[20][1] := (radius[18][0], 0);

  
  if testing:
    draw r[2][0] -- r[2][1] on_picture vv[picture_ctr];  %% Horizontal line through origin.
  fi;

  if testing:
    dotlabel.lft("$r_2^0$", r[2][0]) on_picture llabel_picture[picture_ctr];
    dotlabel.rt("$r_2^1$", r[2][1]) on_picture llabel_picture[picture_ctr];
  fi;

  r[2][2] := (0, -radius[0][0]);
  r[2][3] := (0, radius[0][0]);
  
  r[5][2] := (0, -radius[3][0]);
  r[5][3] := (0, radius[3][0]);

  r[8][5] := (0, -radius[6][0]);
  r[8][6] := (0, radius[6][0]);

  r[11][8] := (0, -radius[9][0]);
  r[11][9] := (0, radius[9][0]);

  r[14][8] := (0, -radius[12][0]);
  r[14][9] := (0, radius[12][0]);

  r[17][8] := (0, -radius[15][0]);
  r[17][9] := (0, radius[15][0]);

  r[20][8] := (0, -radius[18][0]);
  r[20][9] := (0, radius[18][0]);

  if testing:
    dotlabel.bot("$r_2^2$", r[2][2]) on_picture llabel_picture[picture_ctr];
    dotlabel.top("$r_2^3$", r[2][3]) on_picture llabel_picture[picture_ctr];
  fi;
  
  decl_increment := .25;  %% DO NOT CHANGE THIS!  The way m0 is calculated using
                          %% `round' and multiplication depends on `decl_increment'
                          %% having the value .25.  This value is sufficiently small
                          %% for any reasonably sized spherical biangle.
                          %% LDF 2021.10.23.
  
  % message "decl_increment == ";
  % show decl_increment;

% %% **** (4)

  edge0 := null_path; 
  edge1 := null_path; 
  edge2 := null_path;  
  edge3 := null_path;

  edge6 := null_path;
  edge7 := null_path;

  edge9 := null_path;
  edge10 := null_path;

  edge13 := null_path;
  edge14 := null_path;

  edge15 := null_path;
  edge16 := null_path;

  edge0 += ..;
  edge1 += ..;
  edge2 += ..;
  edge3 += ..;

  edge6 += ..;
  edge7 += ..;

  edge9 += ..;
  edge10+= ..;

  edge13 += ..;
  edge14 += ..;
  edge15 += ..;
  edge16 += ..;
  
  n0 := a0 / ra_divisions;  %% 1/ra_divisions of circumference of c[0][0] == width of
  			    %% spherical biangles at 0 deg. declination.        

  a1 := 360 / decl_increment;
  
  n1 := a0 / a1;                   %% Distance between the declination lines in increments
                                   %% of decl_increment degrees.

  
  pp[0][-0] := pp[0][0] := (-.5n0, 0);
  pp[1][-0] := pp[1][0] := (.5n0, 0);

  jj := -.25a;
  for ii = -90 step decl_increment until 90:
    
    % message "ii == ";
    % show ii;
    % message "jj == ";
    % show jj;

    r[0][ii] := r[2][1] rotated (0, 0, ii);
    r[1][ii] := (0, ypart r[0][ii]);

    r[3][ii] := r[5][1] rotated (0, 0, ii);
    r[4][ii] := (0, ypart r[3][ii]);

    r[6][ii] := r[8][1] rotated (0, 0, ii);
    r[7][ii] := (0, ypart r[6][ii]);

    r[9][ii] := r[11][1] rotated (0, 0, ii);
    r[10][ii] := (0, ypart r[9][ii]);

    r[12][ii] := r[14][1] rotated (0, 0, ii);
    r[13][ii] := (0, ypart r[12][ii]);

    r[15][ii] := r[17][1] rotated (0, 0, ii);
    r[16][ii] := (0, ypart r[15][ii]);

    r[18][ii] := r[20][1] rotated (0, 0, ii);
    r[19][ii] := (0, ypart r[18][ii]);
    
    if testing:
      draw r[1][ii] -- r[0][ii] on_picture vv[picture_ctr];
    fi;

    if testing:
      dotlabel.rt("$r_0^{" & decimal ii & "}$", r[0][ii]) on_picture llabel_picture[picture_ctr];
    fi;

    radius[0][ii] := magnitude(r[0][ii] - r[1][ii]);
    c[0][ii] := unit_circle scaled (radius[0][ii], 0, radius[0][ii]);
    circum[0][ii] := circumference c[0][ii];
    biangle_width[0][ii] := circum[0][ii] / ra_divisions;


    radius[3][ii] := magnitude(r[3][ii] - r[4][ii]);
    c[3][ii] := unit_circle scaled (radius[3][ii], 0, radius[3][ii]);
    circum[3][ii] := circumference c[3][ii];
    biangle_width[3][ii] := circum[3][ii] / ra_divisions;

    radius[6][ii] := magnitude(r[6][ii] - r[7][ii]);
    c[6][ii] := unit_circle scaled (radius[6][ii], 0, radius[6][ii]);
    circum[6][ii] := circumference c[6][ii];
    biangle_width[6][ii] := circum[6][ii] / ra_divisions;


    radius[9][ii] := magnitude(r[9][ii] - r[10][ii]);
    c[9][ii] := unit_circle scaled (radius[9][ii], 0, radius[9][ii]);
    circum[9][ii] := circumference c[9][ii];
    biangle_width[9][ii] := circum[9][ii] / ra_divisions;

    radius[12][ii] := magnitude(r[12][ii] - r[13][ii]);
    c[12][ii] := unit_circle scaled (radius[12][ii], 0, radius[12][ii]);
    circum[12][ii] := circumference c[12][ii];
    biangle_width[12][ii] := circum[12][ii] / ra_divisions;

    radius[15][ii] := magnitude(r[15][ii] - r[16][ii]);
    c[15][ii] := unit_circle scaled (radius[15][ii], 0, radius[15][ii]);
    circum[15][ii] := circumference c[15][ii];
    biangle_width[15][ii] := circum[15][ii] / ra_divisions;

    radius[18][ii] := magnitude(r[18][ii] - r[19][ii]);
    c[18][ii] := unit_circle scaled (radius[18][ii], 0, radius[18][ii]);
    circum[18][ii] := circumference c[18][ii];
    biangle_width[18][ii] := circum[18][ii] / ra_divisions;

        
    % message "circum[0][" & decimal ii & "]:";
    % show circum[0][ii];

    % message "biangle_width[0][" & decimal ii & "]:";
    % show biangle_width[0][ii];

    pp[0][ii] := (-.5biangle_width[0][ii], jj);
    pp[1][ii] := (.5biangle_width[0][ii], jj);

    pp[3][ii] := (-.5biangle_width[3][ii], jj);
    pp[4][ii] := (.5biangle_width[3][ii], jj);

    pp[6][ii] := (-.5biangle_width[6][ii], jj);
    pp[7][ii] := (.5biangle_width[6][ii], jj);

    pp[9][ii] := (-.5biangle_width[9][ii], jj);
    pp[10][ii] := (.5biangle_width[9][ii], jj);

    pp[12][ii] := (-.5biangle_width[12][ii], jj);
    pp[13][ii] := (.5biangle_width[12][ii], jj);

    pp[15][ii] := (.5biangle_width[15][ii], jj);

    pp[18][ii] := (-.5biangle_width[18][ii], jj); %% Trace
    
        
    % message "m0:";
    % show m0;
    % message "ii == ";
    % show ii;
    
    if ii >= m0:
      edge0 += pp[0][ii];
      edge1 += pp[1][ii];

      if (magnitude ii) <= 67.5:
	edge3 += pp[3][ii];
	edge4 += pp[4][ii];

	edge6 += pp[6][ii];
	edge7 += pp[7][ii];

	edge9  += pp[9][ii];
	edge10 += pp[10][ii];
      fi;

      if (ii >= 67.5) and (ii <= 78.75):
	edge13 += pp[13][ii];
	edge15 += pp[15][ii];

	edge18 += pp[18][ii];
      fi;

      if (ii <= -67.5) and (ii >= -78.75):
	edge14 += pp[13][ii];
	edge16 += pp[15][ii];

	edge19 += pp[18][ii];
	
      fi;
    fi;
    jj += n1;
  endfor;

  % message "line_color:";
  % show line_color;

  if testing:
    dotlabel.lft("$pp_0^0$", pp[0][0]) on_picture llabel_picture[picture_ctr];
    dotlabel.rt("$pp_1^0$", pp[1][0]) on_picture llabel_picture[picture_ctr];
  fi;

  if false:
    dotlabel.top("$pp_0^{90}$", pp[0][90]) on_picture llabel_picture[picture_ctr];
    dotlabel.bot("$pp_0^{-90}$", pp[0][-90]) on_picture llabel_picture[picture_ctr];
  fi;

%% *** (3)

  ii := m0;  %% It doesn't work to use m0 as a subscript.  Apparently,
            %% only simple variables can be used, not ones with numerical
            %% subscripts.

  draw (mediate(pp[0][ii], pp[1][ii])) -- pp[0][90] on_picture lline_picture[picture_ctr];
  
  if draw_portion < 1:
    draw pp[0][ii] -- pp[1][ii] on_picture vv[picture_ctr];
  fi;

%% *** (3)

  % show edge0;
  
  draw edge0 on_picture vv[picture_ctr];  %% Left, biangle %% with_color red 
  draw edge1 on_picture vv[picture_ctr]; %% Blue, biangle  %% with_color blue 

  draw edge4 on_picture vv[picture_ctr]; %% Right outside, tab middle. %% with_color green 
  %draw edge7 on_picture vv[picture_ctr];

  %draw edge9 on_picture vv[picture_ctr];

  draw edge13 on_picture vv[picture_ctr];  %% Top, tab right %% with_color cyan 
  
  if m0 <= -78.75:
    draw edge14 on_picture vv[picture_ctr];  %% Bottom, tab right %% with_color magenta 
  fi;

  draw pp[1][67.5] -- pp[13][67.5] on_picture vv[picture_ctr];
  draw pp[1][78.75] -- pp[13][78.75] on_picture vv[picture_ctr];

  if m0 <= -67.5:
    draw pp[1][-67.5] -- pp[4][-67.5] on_picture vv[picture_ctr];
  fi;

  if m0 <= -78.75:
    draw pp[1][-78.75] -- pp[4][-78.75] on_picture vv[picture_ctr];
  fi;

  if m0 <= -78.75:
    draw pp[1][-67.5] -- pp[13][-67.5] on_picture vv[picture_ctr];
  fi;


  if m0 <= -78.75:
    draw pp[1][-78.75] -- pp[13][-78.75] on_picture vv[picture_ctr];
  fi;

%% *** (3)


  jj := -.25a;
  for ii = -90 step m1 until 90:
    if ii >= m0:
      r[0][ii] := r[2][1] rotated (0, 0, ii);
      r[1][ii] := (0, ypart r[0][ii]);
      if testing:
	draw r[1][ii] -- r[0][ii] on_picture lline_picture[picture_ctr];
      fi;
      if testing:
	dotlabel.rt("$r_0^{" & decimal ii & "}$", r[0][ii]) on_picture llabel_picture[picture_ctr];
      fi;

      radius[0][ii] := magnitude(r[0][ii] - r[1][ii]);
      c[0][ii] := unit_circle scaled (radius[0][ii], 0, radius[0][ii]);
      circum[0][ii] := circumference c[0][ii];
      biangle_width[0][ii] := circum[0][ii] / ra_divisions;

      radius[3][ii] := magnitude(r[3][ii] - r[4][ii]);
      c[3][ii] := unit_circle scaled (radius[3][ii], 0, radius[3][ii]);
      circum[3][ii] := circumference c[3][ii];
      biangle_width[3][ii] := circum[3][ii] / ra_divisions;


      
  	% message "circum[0][" & decimal ii & "]:";
  	% show circum[0][ii];

  	% message "biangle_width[0][" & decimal ii & "]:";
  	% show biangle_width[0][ii];

      pp[0][ii] := (-.5biangle_width[0][ii], jj);
      pp[1][ii] := (.5biangle_width[0][ii], jj);

      pp[3][ii] := (-.5biangle_width[3][ii], jj);
      pp[4][ii] := (.5biangle_width[3][ii], jj);
      

      if ii > m0:
	draw pp[0][ii] -- pp[1][ii] with_color dark_gray on_picture lline_picture[picture_ctr];
      fi;

      if (magnitude ii) < 67.5:
	draw pp[1][ii] -- pp[4][ii] on_picture vv[picture_ctr]; %% Horizontal lines on tab.
                                                                %% Draw on main picture.
	                                                        %% These lines should always be drawn.
                                                                %% LDF 2021.10.26.
      fi;

    fi;
    jj += m2;
  endfor;


%% *** (3)

  n2 := (length edge7) - 1;


  
  for ii := tab_interval_zero step tab_interval_zero until n2:
    drawdot (get_point (ii) edge7) with_pen dot_pen on_picture vv[picture_ctr];
    drawdot (get_point (ii) edge9) with_pen dot_pen on_picture vv[picture_ctr];
  endfor;


  
  n3 := (length edge15) - 1;
  
  for ii := tab_interval_one step tab_interval_one until n3:
    drawdot (get_point (ii) edge15) with_pen dot_pen on_picture vv[picture_ctr];
    drawdot (get_point (ii) edge18) with_pen dot_pen on_picture vv[picture_ctr];
    if m0 <= -78.75:
      drawdot (get_point (ii) edge16) with_pen dot_pen on_picture vv[picture_ctr];
      drawdot (get_point (ii) edge19) with_pen dot_pen on_picture vv[picture_ctr];
    fi;
  endfor;
  
  drawdot p[1][80] shifted (-.25cm, 0) with_pen dot_pen on_picture vv[picture_ctr];
  drawdot p[1][83] shifted (-.25cm, 0) with_pen dot_pen on_picture vv[picture_ctr];

  drawdot (p[1][80] shifted (-.25cm, 0)) rotated (0, 180) with_pen dot_pen on_picture vv[picture_ctr];
  drawdot (p[1][83] shifted (-.25cm, 0)) rotated (0, 180) with_pen dot_pen on_picture vv[picture_ctr];
  
  drawdot mediate(p[0][86], p[1][86]) with_pen dot_pen on_picture vv[picture_ctr];

  if m0 == -90:
    drawdot (p[1][80] shifted (-.25cm, 0)) rotated 180 with_pen dot_pen on_picture vv[picture_ctr];
    drawdot (p[1][83] shifted (-.25cm, 0)) rotated 180with_pen dot_pen on_picture vv[picture_ctr];
    
    drawdot ((p[1][80] shifted (-.25cm, 0)) rotated (0, 180)) rotated 180
      with_pen dot_pen on_picture vv[picture_ctr];
    drawdot ((p[1][83] shifted (-.25cm, 0)) rotated (0, 180)) rotated 180
      with_pen dot_pen on_picture vv[picture_ctr];
    
    drawdot mediate(p[0][86], p[1][86]) rotated 180
      with_pen dot_pen on_picture vv[picture_ctr];
  fi;

%% *** (3)

  message "Exiting `get_spherical_biangle'.";
  
enddef;

endinput;

%% ** (2) End of 3DLDF code.

%% * (1) Emacs-Lisp code for use in indirect buffers when using the          
%%       GNU Emacs editor.  The local variable list is not evaluated when an 
%%       indirect buffer is visited, so it's necessary to evaluate the       
%%       following s-expression in order to use the facilities normally      
%%       accessed via the local variables list.                              
%%       \initials{LDF 2004.02.12}.                                          

%% (progn (metafont-mode) (outline-minor-mode t) (setq fill-column 80))    

%% * (1) Local variables for Emacs.

%% Local Variables:
%% mode:Metapost
%% eval:(outline-minor-mode t)
%% eval:(read-abbrev-file abbrev-file-name)
%% abbrev-mode:t
%% outline-regexp:"%% [*\f]+"
%% End:


