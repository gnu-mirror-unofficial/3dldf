%% sphrdoms.lmc
%%%% Created by Laurence D. Finston (LDF) Sun 17 Oct 2021 10:05:09 AM CEST

%% * (1) Copyright and License.

%%%% This file is part of GNU 3DLDF, a package for three-dimensional drawing.  
%%%% Copyright (C) 2021 The Free Software Foundation  

%%%% GNU 3DLDF is free software; you can redistribute it and/or modify 
%%%% it under the terms of the GNU General Public License as published by 
%%%% the Free Software Foundation; either version 3 of the License, or 
%%%% (at your option) any later version.  

%%%% GNU 3DLDF is distributed in the hope that it will be useful, 
%%%% but WITHOUT ANY WARRANTY; without even the implied warranty of 
%%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
%%%% GNU General Public License for more details.  

%%%% You should have received a copy of the GNU General Public License 
%%%% along with GNU 3DLDF; if not, write to the Free Software 
%%%% Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA 

%%%% GNU 3DLDF is a GNU package.  
%%%% It is part of the GNU Project of the  
%%%% Free Software Foundation 
%%%% and is published under the GNU General Public License. 
%%%% See the website http://www.gnu.org 
%%%% for more information.   
%%%% GNU 3DLDF is available for downloading from 
%%%% http://www.gnu.org/software/3dldf/LDF.html.
  
%%%% Please send bug reports to Laurence.Finston@gmx.de
%%%% The mailing list help-3dldf@gnu.org is available for people to 
%%%% ask other users for help.  
%%%% The mailing list info-3dldf@gnu.org is for sending 
%%%% announcements to users. To subscribe to these mailing lists, send an 
%%%% email with ``subscribe <email-address>'' as the subject.  

%%%% The author can be contacted at: 

%%%% Laurence D. Finston 
%%%% c/o Free Software Foundation, Inc. 
%%%% 51 Franklin St, Fifth Floor 
%%%% Boston, MA  02110-1301  
%%%% USA

%%%% Laurence.Finston@gmx.de

%% ** (2) Variable declarations

%% *** (3)  Global, used in macros.

point p[];    
picture v[];  
numeric bi_ang[];  
picture bi_ang_pict[];
numeric biangle_width[];
numeric middle_angle;   
numeric min_edge_angle; 
numeric max_edge_angle;
point R[];
picture qv[];

pen medium_pen;
pen large_pen;
pen Large_pen;
path Q;
color ccolor;

numeric label_pos_zero;
numeric label_pos_top;
numeric label_pos_bot;
numeric label_pos_rt;
numeric label_pos_urt;
numeric label_pos_ulft;
numeric label_pos_lrt;
numeric label_pos_llft;

picture tab_picture[];
path edge[];
path tab[];

label_pos_zero := 0;
label_pos_top  := 1;
label_pos_bot  := 2;
label_pos_lft  := 3;
label_pos_rt   := 4;
label_pos_urt  := 5;
label_pos_ulft := 6;
label_pos_lrt  := 7;
label_pos_llft := 8;

medium_pen := pencircle scaled (2pt, 2pt, 2pt);
large_pen  := pencircle scaled (3pt, 3pt, 3pt);
Large_pen  := pencircle scaled (4pt, 4pt, 4pt);

% * (1) Beginning of 3DLDF code.

%\font\TINY=cmr3\font\Tiny=cmr4

verbatim_metapost "verbatimtex \font\Tiny=cmr4\font\SMALL=cmr6\font\Small=cmr7"
  & "\font\small=cmr8\font\medium=cmr9\font\largebf=cmbx12\font\Largebf=cmbx14"
  & "\font\smallgreek=cmmi8\font\Smallgreek=cmmi7\font\SMALLgreek=cmmi6 "
  & "etex;";

%% ** (2) macro get_spherical_biangle

macro get_spherical_biangle;

input "g.lmc";


%% ** (2) macro get_point_on_spherical_biangle

macro get_point_on_spherical_biangle;

def get_point_on_spherical_biangle (pp) {numeric index, numeric ra, numeric decl,
                                         numeric rradius, boolean ddraw_dot,
                                         numeric biangle} =

  %message "Entering macro `get_point_on_spherical_biangle'.";
  
  point P[];
  circle c[];
  numeric a[];

  color ccolor;
  
  ccolor := black;

  c0 := unit_circle scaled (rradius, 0, rradius);

  P0 := (rradius, 0) rotated (0, 0, decl);

  % message "P0:";
  % show P0;
  
  P1 := P0 rotated (0, ra);

  % message "P1:";
  % show P1;

  P2 := (0, ypart P1);  %% Point on y-axis with height corresponding to declination

  % message "P2:";
  % show P2;

  a0 := magnitude(P1 - P2);

  % message "a0 (radius of circle through P1):";
  % show a0;

  c1 := unit_circle scaled (a0, 0, a0) shifted (0, ypart P2);

  if decl == 0:
    a1 := 0;
  else:
    a1 := arc_length (magnitude(decl)) c0;
  fi;

  % message "a1 (arc length corresponding to declination):";
  % show a1;

  a2 := circumference c1;   %% a2 == Circumference of circle at height corresponding to declination

  a3 := (a2 * ra) / 360;

  % message "a3:";
  % show a3;
  
%% *** (3)

  pp[index] := (a3, a1);

  if ddraw_dot:
    drawdot  pp[index] with_color ccolor with_pen pencircle scaled (3pt, 3pt, 3pt) on_picture qv[biangle];
  fi;
  
  % message "Exiting macro `get_point_on_spherical_biangle'.";  
  
enddef;

%% ** (2) macro plot_stitches_on_spherical_biangles

macro plot_stitches_on_spherical_biangles;

def plot_stitches_on_spherical_biangles {numeric decl_divisions} =

  % message "Entering macro `plot_stitches_on_spherical_biangles'.";

  point M[];
  point N[];
  color ccolor;
  path q[];

  pen dot_pen;

  dot_pen := pencircle scaled (2.5pt, 2.5pt, 2.5pt);

  numeric decl_increment;  
  numeric k;
  
  k := 2 * decl_divisions;
  decl_increment := 360 / k;
  
  q0 += ..;
  q1 += ..;
  
  j := 0;
  for i := 0 step 3 until 67.5:
    get_point_on_spherical_biangle (M) {j, 27.5, i, radius, false, 0};
    get_point_on_spherical_biangle (N) {j, 17.5, i, radius, false, 0};
    rotate N[j] (0, 180);
    %drawdot N[j] with_pen dot_pen on_picture tab_picture[0];
    q0 += M[j];
    q1 += N[j];
    % message "M[" & decimal j & "]:";
    % show M[j];
    j += 1;
  endfor;

  get_point_on_spherical_biangle (M) {j, 27.5, 67.5, radius, false, 0};
  get_point_on_spherical_biangle (N) {j, 27.5, 67.5, radius, false, 0};
  q0 += M[j];
  rotate N[j] (0, 180);
  q1 += N[j];

  last_pt_ctr := j;

  point A[];
  point B[];
  
  j := 0;
  for i := 0 step 2.5 until 67.5:
    get_point_on_spherical_biangle (A) {j, 25, i, radius, false, 0};
    get_point_on_spherical_biangle (B) {j, 20, i, radius, false, 0};
    rotate B[j] (0, 180);
    for k = 0 upto 7:
      drawdot A[j] with_pen dot_pen on_picture tab_picture[k];
      drawdot B[j] with_pen dot_pen on_picture tab_picture[k];
      drawdot A[j] rotated (180, 0) with_pen dot_pen on_picture tab_picture[k];
      drawdot B[j] rotated (180, 0) with_pen dot_pen on_picture tab_picture[k];
    endfor;
    j += 1;
  endfor;
  
  for i = 0 upto 7:

    draw q0 on_picture tab_picture[i];
    %draw q1 with_color dark_gray on_picture tab_picture[i];

    draw M[last_pt_ctr] -- p35 on_picture tab_picture[i];
    %draw N[last_pt_ctr] -- p34 with_color dark_gray on_picture tab_picture[i];

    draw q0 rotated (180, 0) on_picture tab_picture[i];
    %draw q1 rotated (180, 0) with_color dark_gray on_picture tab_picture[i];
  
    draw (M[last_pt_ctr] -- p35) rotated (180, 0) on_picture tab_picture[i];
    %draw (N[j] -- p36) rotated (180, 0) with_color dark_gray on_picture tab_picture[i];
  endfor;

  %% Draw the extensions of the lines of declination over the tab.

  point C[];


  for m = 0 upto 7:
    j := 0;
    k := 23;
    for i = 0 step decl_increment until 67.5:
      get_point_on_spherical_biangle (C) {j, 27.5, i, radius, false, 0};
      if j == 0:
	draw p21 -- C[j] on_picture tab_picture[m];
      else:
	draw p[k] -- C[j] on_picture tab_picture[m];
	draw (p[k] -- C[j]) rotated 180 on_picture tab_picture[m];
      fi;
      j += 1;
      k += 2;
    endfor;
  endfor;


%% *** (3)

  point D[];
  point E[];
  point F[];
  point T[];
  point U[];
  
  q2 += ..;
  q3 += ..;
  
  j := 0;
  for i := 67.5 step 3 until 78.75:
    get_point_on_spherical_biangle (T) {j, 32.5, i, radius, false, 0};
    get_point_on_spherical_biangle (U) {j, 22.5, i, radius, false, 0};
    rotate U[j] (0, 180);
    %drawdot U[j] with_pen dot_pen on_picture tab_picture[0];
    q2 += T[j];
    q3 += U[j];
    % message "T[" & decimal j & "]:";
    % show T[j];
    j += 1;
  endfor;

  get_point_on_spherical_biangle (T) {j, 32.5, 78.75, radius, false, 0};
  get_point_on_spherical_biangle (U) {j, 37.5, 78.75, radius, false, 0};
  q2 += T[j];
  rotate U[j] (0, 180);
  q3 += U[j];

  last_pt_ctr := j;

  %% Draw the dots
  
  j := 0;
  for i := 69 step 2 until 78.75:
    get_point_on_spherical_biangle (D) {j, 27.5, i, radius, false, 0};
    get_point_on_spherical_biangle (E) {j, 17.5, i, radius, false, 0};
    rotate E[j] (0, 180);
    for k = 0 upto 7:
      drawdot D[j] with_pen dot_pen on_picture tab_picture[k];
      drawdot E[j] with_pen dot_pen on_picture tab_picture[k];
      drawdot D[j] rotated (180, 0) with_pen dot_pen on_picture tab_picture[k];
      drawdot E[j] rotated (180, 0) with_pen dot_pen on_picture tab_picture[k];
    endfor;
    j += 1;
  endfor;
 
  for i = 0 upto 7:

    draw q2 on_picture tab_picture[i];
    %draw q3 with_color dark_gray on_picture tab_picture[i];

    draw T[last_pt_ctr] -- p37 on_picture tab_picture[i];
    %draw U[last_pt_ctr] -- p36 with_color dark_gray on_picture tab_picture[i];

    draw q2 rotated (180, 0) on_picture tab_picture[i];
    %draw q3 rotated (180, 0) with_color dark_gray on_picture tab_picture[i];
  
    draw (T[last_pt_ctr] -- p37) rotated (180, 0) on_picture tab_picture[i];

  endfor;

  %% Draw the extensions of the lines of declination over the tab.

  for m = 0 upto 7:
    draw p35 -- T[0] on_picture tab_picture[m];
    draw (p35 -- T[0]) rotated (180, 0) on_picture tab_picture[m];
  endfor;

%% *** (3)

  point V[];

  get_point_on_spherical_biangle (V) {0, 16, 80.5, radius, false, 0};
  get_point_on_spherical_biangle (V) {1, 13, 82.5, radius, false, 0};
  get_point_on_spherical_biangle (V) {2, 10, 84.5, radius, false, 0};


  for i = 0 upto 7:
    for j = 0 upto 2:
      drawdot V[j] with_pen dot_pen on_picture tab_picture[i];
      drawdot V[j] rotated (0, 0, 180) with_pen dot_pen on_picture tab_picture[i];
      drawdot V[j] rotated (180, 0) with_pen dot_pen on_picture tab_picture[i];
      drawdot V[j] rotated (180, 0, 180) with_pen dot_pen on_picture tab_picture[i];
    endfor;
  endfor;
  
%% *** (3)
  
  % message "Exiting plot_stitches_on_spherical_biangles";

enddef;

%% ** (2)

endinput;

%% ** (2) End of 3DLDF code.

%% * (1) Emacs-Lisp code for use in indirect buffers when using the          
%%       GNU Emacs editor.  The local variable list is not evaluated when an 
%%       indirect buffer is visited, so it's necessary to evaluate the       
%%       following s-expression in order to use the facilities normally      
%%       accessed via the local variables list.                              
%%       \initials{LDF 2004.02.12}.                                          

%% (progn (metafont-mode) (outline-minor-mode t) (setq fill-column 80))    

%% * (1) Local variables for Emacs.

%% Local Variables:
%% mode:Metapost
%% eval:(outline-minor-mode t)
%% eval:(read-abbrev-file abbrev-file-name)
%% abbrev-mode:t
%% outline-regexp:"%% [*\f]+"
%% End:


