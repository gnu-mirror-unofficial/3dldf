%%% sphrdoms.lmc
%%%% Created by Laurence D. Finston (LDF) Sun 17 Oct 2021 10:05:09 AM CEST

%% * (1) Copyright and License.

%%%% This file is part of GNU 3DLDF, a package for three-dimensional drawing.  
%%%% Copyright (C) 2021 The Free Software Foundation  

%%%% GNU 3DLDF is free software; you can redistribute it and/or modify 
%%%% it under the terms of the GNU General Public License as published by 
%%%% the Free Software Foundation; either version 3 of the License, or 
%%%% (at your option) any later version.  

%%%% GNU 3DLDF is distributed in the hope that it will be useful, 
%%%% but WITHOUT ANY WARRANTY; without even the implied warranty of 
%%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
%%%% GNU General Public License for more details.  

%%%% You should have received a copy of the GNU General Public License 
%%%% along with GNU 3DLDF; if not, write to the Free Software 
%%%% Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA 

%%%% GNU 3DLDF is a GNU package.  
%%%% It is part of the GNU Project of the  
%%%% Free Software Foundation 
%%%% and is published under the GNU General Public License. 
%%%% See the website http://www.gnu.org 
%%%% for more information.   
%%%% GNU 3DLDF is available for downloading from 
%%%% http://www.gnu.org/software/3dldf/LDF.html.
  
%%%% Please send bug reports to Laurence.Finston@gmx.de
%%%% The mailing list help-3dldf@gnu.org is available for people to 
%%%% ask other users for help.  
%%%% The mailing list info-3dldf@gnu.org is for sending 
%%%% announcements to users. To subscribe to these mailing lists, send an 
%%%% email with ``subscribe <email-address>'' as the subject.  

%%%% The author can be contacted at: 

%%%% Laurence D. Finston 
%%%% c/o Free Software Foundation, Inc. 
%%%% 51 Franklin St, Fifth Floor 
%%%% Boston, MA  02110-1301  
%%%% USA

%%%% Laurence.Finston@gmx.de

%% ** (2) Variable declarations

%% *** (3)  Global, used in macros.


point p[];    
picture v[];  
numeric bi_ang[];  
picture bi_ang_pict[];
numeric biangle_width[];
numeric RA_arc_length;
numeric Declination_arc_length;
numeric middle_angle;   
numeric min_edge_angle; 
numeric max_edge_angle;
point R[];
picture_vector pv;
picture qv[];
picture label_picture;
picture flat_quadrant_picture[];
numeric label_picture_ctr;
newwrite nw[];
pen medium_pen;
pen large_pen;
pen Large_pen;
path Q;
color ccolor;
boolean do_extra_labels;
numeric i;
numeric label_pos_zero;
numeric label_pos_top;
numeric label_pos_bot;
numeric label_pos_rt;
numeric label_pos_urt;
numeric label_pos_ulft;
numeric label_pos_lrt;
numeric label_pos_llft;
newwrite label_out;
picture tab_picture[];
newwrite star_info_combined;
path edge[];

rectangle D[][];
triangle T[][];
picture quadrant_picture;
point star_point;
star_point := origin;
path quadrant[][];
path flat_quadrant[][];
path temp_path[];
path tab[];

point stitch_pt_sphere[];
point stitch_pt_biangle[];

numeric RRA_ctr;

numeric DDecl_ctr;

numeric basic_shift_val;

basic_shift_val := 3pt;

RRA_ctr := 0;
DDecl_ctr := 0;


label_pos_zero := 0;
label_pos_top  := 1;
label_pos_bot  := 2;
label_pos_lft  := 3;
label_pos_rt   := 4;
label_pos_urt  := 5;
label_pos_ulft := 6;
label_pos_lrt  := 7;
label_pos_llft := 8;

pen star_pen[];

star_pen[-1] := pencircle scaled (8pt, 8pt, 8pt);       
star_pen[0]  := pencircle scaled (7pt, 7pt, 7pt); 
star_pen[1]  := pencircle scaled (6pt, 6pt, 6pt);       
star_pen[2]  := pencircle scaled (5pt, 5pt, 5pt); 
star_pen[3]  := pencircle scaled (4pt, 4pt, 4pt);       
star_pen[4]  := pencircle scaled (3pt, 3pt, 3pt); 
star_pen[5]  := pencircle scaled (2pt, 2pt, 2pt);
star_pen[6]  := pencircle scaled (1pt, 1pt, 1pt);       

medium_pen := pencircle scaled (2pt, 2pt, 2pt);
large_pen  := pencircle scaled (3pt, 3pt, 3pt);
Large_pen  := pencircle scaled (4pt, 4pt, 4pt);

label_picture_ctr := 0;

do_extra_labels := false;

label_out := "clstsph_1_labels.tex";

string empty_str;

empty_str := "";

% * (1) Beginning of 3DLDF code.

%\font\TINY=cmr3\font\Tiny=cmr4

verbatim_metapost "verbatimtex \font\Tiny=cmr4\font\SMALL=cmr6\font\Small=cmr7"
  & "\font\small=cmr8\font\medium=cmr9\font\largebf=cmbx12\font\Largebf=cmbx14\font\huge=cminch"
  & "\font\smallgreek=cmmi8\font\Smallgreek=cmmi7\font\SMALLgreek=cmmi6 "
  & "etex;";

%% ** (2) macro get_spherical_biangles

macro get_spherical_biangles;

def get_spherical_biangles {numeric rad, boolean ddo_labels} =

  circle c[];
  numeric a;
  numeric radius[];
  numeric circum[];
  numeric n[];
  point ra_decl_zero_pt;
  numeric tab_wd;

  boolean testing;

  testing := false; % true; %
  
  tab_wd := .25cm;
  
  radius0 := rad;

  ra_decl_zero_pt := (rad, 0);

  c0 := unit_circle scaled (radius0, 0, radius0) rotated (90, 0);
  a := circumference c0;   %% a == Circumference of horizontal great circle.

  if testing:
    draw c0 with_color red;
  fi;

  p0 := (-radius0, 0);
  p1 := (radius0, 0);

  %message "magnitude (p1 - p0) (diameter of c0):";
  %show magnitude (p1 - p0);

  if testing:
    draw p0 -- p1;  %% Horizontal line through origin.
  fi;

  if ddo_labels and testing:
    dotlabel.lft("$p_0$", p0);
    dotlabel.rt("$p_1$", p1);
  fi;

  p2 := (0, -radius0);
  p3 := (0, radius0);

  if testing:
    draw p2 -- p3;  %% Vertical line through origin.
  fi;

  if ddo_labels and testing:
    dotlabel.bot("$p_2$", p2);
    dotlabel.top("$p_3$", p3);
  fi;

  j := 4;
  for i = 11.25 step 11.25 until 78.75:
    p[j] := p1 rotated (0, 0, i);
    p[j + 1] := (0, ypart p[j]);
    %draw p[j + 1] -- p[j];
    if ddo_labels and testing:
      dotlabel.rt("$p_{" & decimal j & "}$", p[j]);
    fi;
    radius[j] := magnitude(p[j] - p[j + 1]);
    c[j] := unit_circle scaled (radius[j], 0, radius[j]);
    circum[j] := circumference c[j];
    biangle_width[j] := circum[j] / 8;
    %message "biangle_width[" & decimal j & "]:";
    %show biangle_width[j];
    j += 2;
  endfor;

%% **** (4)

  edge0 := null_path; 
  edge1 := null_path; 
  edge2 := null_path;  
  edge3 := null_path;  

  edge0 += ..;
  edge1 += ..;
  edge2 += ..;
  edge3 += ..;

  n0 := a / 8;  %% 1/8 of circumference of c0 == width of spherical biangles at 0 deg. declination.
  n1 := a / 32; %% 1/32 of circumference of red circle == Distance between the declination lines in 
                %% increments of 11.25 deg.

  p20 := (-.5n0, 0);
  p21 := (.5n0, 0);

  if do_labels_ra_decl:
    label.rt("$0^\circ$", p21 shifted (1.5cm, 0));
  fi;
  
  if ddo_labels:
    dotlabel.lft("$p_{20}$", p20);
    dotlabel.rt("$p_{21}$", p21);
  fi;

  edge0 += p20;
  edge1 += p21;

  p22 := (0, -.25a);
  p23 := (0, .25a);

  if ddo_labels:
    dotlabel.bot("$p_{22}$", p22);
    dotlabel.top("$p_{23}$", p23);
  fi;

  if do_labels_ra_decl:
    label.rt("$-90^\circ$", p22 shifted (.25cm, 0));
    label.rt("$90^\circ$", p23 shifted (.25cm, 0));
  fi;

  j := 24;
  k := 4;
  for i = 1 step 1 until 7:
    p[j]     := (-.5biangle_width[k], (i * n1));
    p[j + 1] := (.5biangle_width[k], (i * n1));
    if ddo_labels:
      dotlabel.lft("$p_{" & decimal j & "}$", p[j]);
      dotlabel.rt("$p_{" & decimal (j + 1) & "}$", p[j + 1]);
    fi;

    if not do_labels_ra_decl:
      ;
    else:
      if (11.25 * i) ==  floor (11.25 * i):
	label("$" & decimal (11.25 * i) & "^\circ$", p[j + 1] shifted (1.5cm, 0));
      elseif (11.25 * i) - floor (11.25 * i) == .25:
	label("$" & decimal (floor (11.25 * i)) & "^\circ 15^\prime$", p[j + 1] shifted (1.5cm, 0));
      elseif (11.25 * i) - floor (11.25 * i) == .5:
	label("$" & decimal (floor (11.25 * i)) & "^\circ 30^\prime$", p[j + 1] shifted (1.5cm, 0));
      elseif (11.25 * i) - floor (11.25 * i) == .75:
	label("$" & decimal (floor (11.25 * i)) & "^\circ 45^\prime$", p[j + 1] shifted (1.5cm, 0));
      fi;
    fi;


    edge0 += p[j];
    edge1 += p[j + 1];

    j += 2;
    k += 2;
  endfor;

  if ddo_labels:
    dotlabel.lft("$p_{24}$", p24);
    dotlabel.rt("$p_{25}$", p25);
  fi;

  j := 1;

  for i := 24 step 2 until 37:
    p[20 + i] := p[i] rotated (180, 0);
    p[20 + 1 + i] := p[i + 1] rotated (180, 0);
    if ddo_labels:
      dotlabel.lft("$p_{" & decimal (20 + i) & "}$", p[20 + i]);
      dotlabel.rt("$p_{" & decimal (20 + i + 1) & "}$", p[20 + i + 1]);
    fi;

    if not do_labels_ra_decl:
      ;
    else:
      if (11.25 * j) ==  floor (11.25 * j):
	label("$-" & decimal (11.25 * j) & "^\circ$", p[20 + i + 1] shifted (1.5cm, 0));
      elseif (11.25 * j) - floor (11.25 * j) == .25:
	label("$-" & decimal (floor (11.25 * j)) & "^\circ 15^\prime$", p[20 + i + 1] shifted (1.5cm, 0));
      elseif (11.25 * j) - floor (11.25 * j) == .5:
	label("$-" & decimal (floor (11.25 * j)) & "^\circ 30^\prime$", p[20 + i + 1] shifted (1.5cm, 0));
      elseif (11.25 * j) - floor (11.25 * j) == .75:
	label("$-" & decimal (floor (11.25 * j)) & "^\circ 45^\prime$", p[20 + i + 1] shifted (1.5cm, 0));
      fi;
    fi;
    
    %label("$-" & decimal (11.25 * j) & "^\circ$", p[20 + i + 1] shifted (1.5cm, 0));
    j += 1;
  endfor;

  if false:
    draw p20 -- p21;
    draw (p20 -- p21) rotated (180, 0);
    draw p22 -- p23;
    draw p24 -- p25;
    draw (p24 -- p25) rotated (180, 0);
    draw p26 -- p27;
    draw (p26 -- p27) rotated (180, 0);
    draw p28 -- p29;
    draw (p28 -- p29) rotated (180, 0) ;
    draw p30 -- p31;
    draw (p30 -- p31) rotated (180, 0);
    draw p32 -- p33;
    draw (p32 -- p33) rotated (180, 0);
    draw p34 -- p35;
    draw (p34 -- p35) rotated (180, 0);
    draw p36 -- p37;
    draw (p36 -- p37) rotated (180, 0);
  fi;

  edge0 += p23;
  edge1 += p23;

  edge2 := edge0 rotated (180, 0);
  edge3 := edge1 rotated (180, 0);

  draw edge0; % with_color dark_gray;
  draw edge1; % with_color dark_gray;
  draw edge2; % with_color dark_gray;
  draw edge3; % with_color dark_gray;

  p38 := p23;

  p39 := p22; %% We need to use p22 in the following loop.
              %% It's original value is restored below.
              %% LDF 2021.08.30.

  p22 := p20;

  j := 0;
  for i = 22 step 2 until 34:
    p100 := mediate(p[i], p[i+2], .5);

    p101 := p100 shifted (0, 0, 1);
    p102 := p[i+2] rotated_around (p100, p101) 90;
    p103 := mediate(p100, p102, .6);

    p104 := p[i] shifted by (p103 - p100);
    p105 := p[i+2] shifted by (p103 - p100);
    p106 := mediate(p103, p104, .6);
    p107 := mediate(p103, p105, .6);

    tab[j] := p[i] -- p106 -- p107 -- p[i+2];
    %draw tab[j] on_picture tab_picture[0];
    %draw tab[j] rotated (180, 0) on_picture tab_picture[0];
    j += 1;
  endfor;

  p22 := p39;  %% Restoring old value of p22.  LDF 2021.08.30.
  
 Q := edge0 .. (reverse edge1) .. edge3 .. (reverse edge2);

 Q += cycle;

 for i = 0 upto 7:
   bi_ang_pict[i] := current_picture;
   label("{\largebf " & decimal (i+1) & "}", p22 shifted (0, -.5cm)) on_picture bi_ang_pict[i];
 endfor;

%% **** (4)

 label("$337.5^\circ$", p22 shifted (-1.5cm, -1cm)) bi_ang_pict[0];

 label("$0^\circ$", p22 shifted (0, -1cm)) bi_ang_pict[0];

 label("$22.5^\circ$", p22 shifted (1.25cm, -1cm)) bi_ang_pict[0];

%% **** (4)
 
 label("$22.5^\circ$", p22 shifted (-1.5cm, -1cm)) bi_ang_pict[1];

 label("$45^\circ$", p22 shifted (0, -1cm)) bi_ang_pict[1];

 label("$67.5^\circ$", p22 shifted (1.25cm, -1cm)) bi_ang_pict[1];

%% **** (4)

 label("$67.5^\circ$", p22 shifted (-1.5cm, -1cm)) bi_ang_pict[2];

 label("$90.0^\circ$", p22 shifted (0, -1cm)) bi_ang_pict[2];
   
 label("$112.5^\circ$", p22 shifted (1.25cm, -1cm)) bi_ang_pict[2];

%% **** (4)
   
 label("$112.5^\circ$", p22 shifted (-1.5cm, -1cm)) bi_ang_pict[3];

 label("$135^\circ$", p22 shifted (0, -1cm)) bi_ang_pict[3];

 label("$157.5^\circ$", p22 shifted (1.25cm, -1cm)) bi_ang_pict[3];

%% **** (4)

 label("$157.5^\circ$", p22 shifted (-1.5cm, -1cm)) bi_ang_pict[4];

 label("$180^\circ$", p22 shifted (0, -1cm)) bi_ang_pict[4];

 label("$202.5^\circ$", p22 shifted (1.25cm, -1cm)) bi_ang_pict[4];

%% **** (4)

 label("$202.5^\circ$", p22 shifted (-1.5cm, -1cm)) bi_ang_pict[5];

 label("$225^\circ$", p22 shifted (0, -1cm)) bi_ang_pict[5];

 label("$247.5^\circ$", p22 shifted (1.25cm, -1cm)) bi_ang_pict[5];

%% **** (4)

 label("$247.5^\circ$", p22 shifted (-1.5cm, -1cm)) bi_ang_pict[6];

 label("$270^\circ$", p22 shifted (0, -1cm)) bi_ang_pict[6];

 label("$292.5^\circ$", p22 shifted (1.25cm, -1cm)) bi_ang_pict[6];

%% **** (4)

 label("$292.5^\circ$", p22 shifted (-1.5cm, -1cm)) bi_ang_pict[7];

 label("$315^\circ$", p22 shifted (0, -1cm)) bi_ang_pict[7];

 label("$337.5^\circ$", p22 shifted (1.25cm, -1cm)) bi_ang_pict[7];

%% **** (4)

%% *** (3)
 
 clear current_picture;
enddef;

%% ** (2) macro get_sphere_for_plotting_stars

macro get_sphere_for_plotting_stars;

def get_sphere_for_plotting_stars {numeric rradius} :=

  numeric i;
  numeric j;
  string u[];
  point r[];
  sphere s;
  circle c;
  circle ecliptic;
  point ra_decl_zero_pt;

  j := 0;
  m := 0;
  j := 11.25; 

  %message "rradius:"; 
  %show rradius;

  ra_decl_zero_pt := (rradius, 0);
  r16 := ra_decl_zero_pt;

  ecliptic := unit_circle scaled (rradius, 0, rradius) rotated (-23.4, 0);
  %draw ecliptic with_color blue;

  color ccolor;
  
  ccolor := black;

%% Find out why using the 'set' command for 'sphere s' didn't work here.  LDF 2021.7.1.
  
  s := unit_sphere scaled (rradius, rradius, rradius);

  draw s;
  
  j := 0;
  for i = 0 step 22.5 until 337.5:
    r[j] := (rradius, 0) rotated (0, i);
    u[j] := "$" & decimal i & "^\circ$";
    j += 1;
  endfor;
  
  v8  := current_picture;
  v9  := current_picture;
  v10 := current_picture;
  v11 := current_picture;

  clear current_picture;

  if do_labels_ra_decl:
    dotlabel.rt(u0, r0) v10;
    dotlabel.rt(u1, r1) v10;
    dotlabel.rt(u2, r2) v10;
    dotlabel.urt(u3, r3) v10;
    dotlabel.top(u4, r4) v10;
    dotlabel.ulft(u5, r5) v10;
    dotlabel.lft(u6, r6) v10;
    dotlabel.lft(u7, r7) v10;
    dotlabel.lft(u8, r8) v10;
    dotlabel.lft(u9, r9) v10;
    dotlabel.lft(u10, r10) v10;
    dotlabel.llft(u11, r11) v10;
    dotlabel.bot(u12, r12) v10;
    dotlabel.lrt(u13, r13) v10;
    dotlabel.rt(u14, r14) v10;
    dotlabel.rt(u15, r15) v10;
    dotlabel.rt("$r_{16}$:  $0^\circ$", r16) v8;
    dotlabel.rt("$r_{16}$:  $0^\circ$", r16) v9;
    %label.rt("$r_{16}$", r16 shifted (0, 0, -.3cm)) v10;
    dotlabel.rt("$r_{16}$", r16) v11;
  fi;
    
%% *** (3) Declination

  if do_labels_ra_decl:
    r20 := r16 rotated (0, 0, 11.25);
    r21 := r16 rotated (0, 0, -11.25);
    dotlabel.rt("$11.25^\circ$", r20) v9;
    dotlabel.rt("$-11.25^\circ$", r21) v9;
    rotate r20 (0, 0, 11.25);
    rotate r21 (0, 0, -11.25);
    dotlabel.rt("$22.5^\circ$", r20) v9;
    dotlabel.rt("$-22.5^\circ$", r21) v9;
    rotate r20 (0, 0, 11.25);    
    rotate r21 (0, 0, -11.25);
    dotlabel.rt("$33.75^\circ$", r20) v9;
    dotlabel.rt("$-33.75^\circ$", r21) v9;
    rotate r20 (0, 0, 11.25);    
    rotate r21 (0, 0, -11.25);
    dotlabel.rt("$45.0^\circ$", r20) v9;
    dotlabel.rt("$-45.0^\circ$", r21) v9;
    rotate r20 (0, 0, 11.25);    
    rotate r21 (0, 0, -11.25);
    dotlabel.urt("$56.25^\circ$", r20) v9;
    dotlabel.lrt("$-56.25^\circ$", r21) v9;
    rotate r20 (0, 0, 11.25);    
    rotate r21 (0, 0, -11.25);
    dotlabel.urt("$67.5^\circ$", r20) v9;
    dotlabel.lrt("$-67.5^\circ$", r21) v9;
    rotate r20 (0, 0, 11.25);    
    rotate r21 (0, 0, -11.25);
    dotlabel.top("$78.75^\circ$", r20) v9;
    dotlabel.lrt("$-78.75^\circ$", r21) v9;
    rotate r20 (0, 0, 11.25);    
    rotate r21 (0, 0, -11.25);
    dotlabel.top("$90^\circ$", r20) v9;
    dotlabel.bot("$-90^\circ$", r21) v9;

    r18 := r16 rotated (0, 22.5);
    dotlabel.llft("$22.5^\circ$", r18) v8;
    rotate r18 (0, 22.5);
    dotlabel.urt("$45^\circ$", r18) v8;
    rotate r18 (0, 22.5);
    dotlabel.urt("$67.5^\circ$", r18) v8; 
    rotate r18 (0, 22.5);
    dotlabel.urt("$90^\circ$", r18) v8;
    rotate r18 (0, 22.5);
    dotlabel.ulft("$112.5^\circ$", r18) v8;
    rotate r18 (0, 22.5);
    dotlabel.ulft("$135^\circ$", r18) v8;
    rotate r18 (0, 22.5);
    dotlabel.ulft("$157.5^\circ$", r18) v8;
    rotate r18 (0, 22.5);
    dotlabel.lft("$180^\circ$", r18) v8;
    rotate r18 (0, 22.5);
    dotlabel.lft("$202.5^\circ$", r18) v8;
    rotate r18 (0, 22.5);
    dotlabel.urt("$225^\circ$", r18) v8;
    rotate r18 (0, 22.5);
    dotlabel.urt("$247.5^\circ$", r18) v8;
    rotate r18 (0, 22.5);
    dotlabel.lrt("$270^\circ$", r18) v8;
    rotate r18 (0, 22.5);
    dotlabel.ulft("$292.5^\circ$", r18) v8;
    rotate r18 (0, 22.5);
    dotlabel.ulft("$315^\circ$", r18) v8;
    rotate r18 (0, 22.5);
    dotlabel.rt("$337.5^\circ$", r18) v8;
  fi;
%% *** (3)
  
  c := unit_circle scaled (rradius, 0, rradius);
  draw c on_picture v8;   %% with_color red 
  draw c on_picture v11;  %% with_color red 

enddef;


%% ** (2) macro draw_lines

macro draw_lines;

def draw_lines =

  ccolor := dark_gray;
  
  drawdot origin with_pen medium_pen with_color ccolor;
  draw p20 -- p21 with_color ccolor;
  draw p22 -- p23 with_color ccolor;
  draw p24 -- p25 with_color ccolor;
  draw (p24 -- p25) rotated (180, 0) with_color ccolor;
  draw p26 -- p27 with_color ccolor;
  draw (p26 -- p27) rotated (180, 0) with_color ccolor;
  draw p28 -- p29 with_color ccolor;
  draw (p28 -- p29) rotated (180, 0)  with_color ccolor;
  
  draw p30 -- p31 with_color ccolor;
  draw p32 -- p33 with_color ccolor;
  draw p34 -- p35 with_color ccolor;
  draw p36 -- p37 with_color ccolor;
  draw p50 -- p51 with_color ccolor;
  draw p52 -- p53 with_color ccolor;
  draw p54 -- p55 with_color ccolor;
  draw p56 -- p57 with_color ccolor;
    
enddef;

%% ** (2) macro get_point_on_spherical_biangle

macro get_point_on_spherical_biangle;

def get_point_on_spherical_biangle (pp) {numeric index, numeric ra, numeric decl,
                                         numeric rradius, boolean ddraw_dot, numeric biangle} =

  %message "Entering macro `get_point_on_spherical_biangle'.";
  
  point P[];
  circle c[];
  numeric a[];

  color ccolor;
  
  ccolor := black;

  c0 := unit_circle scaled (rradius, 0, rradius);

  P0 := (rradius, 0) rotated (0, 0, decl);

  % message "P0:";
  % show P0;
  
  P1 := P0 rotated (0, ra);

  % message "P1:";
  % show P1;

  P2 := (0, ypart P1);  %% Point on y-axis with height corresponding to declination

  % message "P2:";
  % show P2;

  a0 := magnitude(P1 - P2);

  % message "a0 (radius of circle through P1):";
  % show a0;

  c1 := unit_circle scaled (a0, 0, a0) shifted (0, ypart P2);

  if decl == 0:
    a1 := 0;
  else:
    a1 := arc_length (magnitude(decl)) c0;
  fi;

  % message "a1 (arc length corresponding to declination):";
  % show a1;

  a2 := circumference c1;   %% a2 == Circumference of circle at height corresponding to declination

  a3 := (a2 * ra) / 360;

  % message "a3:";
  % show a3;
  
%% *** (3)

  pp[index] := (a3, a1);

  if ddraw_dot:
    drawdot  pp[index] with_color ccolor with_pen pencircle scaled (3pt, 3pt, 3pt) on_picture qv[biangle];
  fi;
  
  % message "Exiting macro `get_point_on_spherical_biangle'.";  
  
enddef;

%% ** (2) macro plot_stitches_on_spherical_biangles

macro plot_stitches_on_spherical_biangles;

def plot_stitches_on_spherical_biangles =

  % message "Entering macro `plot_stitches_on_spherical_biangles'.";

  point M[];
  point N[];
  color ccolor;
  path q[];

  pen dot_pen;

  dot_pen := pencircle scaled (2.5pt, 2.5pt, 2.5pt);

  q0 += ..;
  q1 += ..;
  
  j := 0;
  for i := 0 step 3 until 80:
    get_point_on_spherical_biangle (M) {j, 27.5, i, radius, false, 0};
    get_point_on_spherical_biangle (N) {j, 17.5, i, radius, false, 0};
    rotate N[j] (0, 180);
    %drawdot N[j] with_pen dot_pen on_picture tab_picture[0];
    q0 += M[j];
    q1 += N[j];
    % message "M[" & decimal j & "]:";
    % show M[j];
    j += 1;
  endfor;

  get_point_on_spherical_biangle (M) {j, 27.5, 78.75, radius, false, 0};
  get_point_on_spherical_biangle (N) {j, 27.5, 78.75, radius, false, 0};
  q0 += M[j];
  rotate N[j] (0, 180);
  q1 += N[j];

  last_pt_ctr := j;

  point A[];
  point B[];
  
  j := 0;
  for i := 0 step 2.5 until 78:
    get_point_on_spherical_biangle (A) {j, 25, i, radius, false, 0};
    get_point_on_spherical_biangle (B) {j, 20, i, radius, false, 0};
    rotate B[j] (0, 180);
    for k = 0 upto 7:
      drawdot A[j] with_pen dot_pen on_picture tab_picture[k];
      drawdot B[j] with_pen dot_pen on_picture tab_picture[k];
      drawdot A[j] rotated (180, 0) with_pen dot_pen on_picture tab_picture[k];
      drawdot B[j] rotated (180, 0) with_pen dot_pen on_picture tab_picture[k];
    endfor;
    j += 1;
  endfor;
  
  for i = 0 upto 7:

    draw q0 on_picture tab_picture[i];
    %draw q1 with_color dark_gray on_picture tab_picture[i];

    draw M[last_pt_ctr] -- p37 on_picture tab_picture[i];
    %draw N[last_pt_ctr] -- p36 with_color dark_gray on_picture tab_picture[i];

    draw q0 rotated (180, 0) on_picture tab_picture[i];
    %draw q1 rotated (180, 0) with_color dark_gray on_picture tab_picture[i];
  
    draw (M[last_pt_ctr] -- p37) rotated (180, 0) on_picture tab_picture[i];
    %draw (N[j] -- p36) rotated (180, 0) with_color dark_gray on_picture tab_picture[i];
  endfor;

  point C[];


  for m = 0 upto 7:
    j := 0;
    k := 23;
    for i = 0 step 11.25 until 67.5:
      get_point_on_spherical_biangle (C) {j, 27.5, i, radius, false, 0};
      if j == 0:
	draw p21 -- C[j] on_picture tab_picture[m];
      else:
	draw p[k] -- C[j] on_picture tab_picture[m];
	draw (p[k] -- C[j]) rotated 180 on_picture tab_picture[m];
      fi;
      j += 1;
      k += 2;
    endfor;
  endfor;
  
  
%% *** (3)
  
  % message "Exiting plot_stitches_on_spherical_biangles";

enddef;


%% ** (2)

endinput;

%% ** (2) End of 3DLDF code.

%% * (1) Emacs-Lisp code for use in indirect buffers when using the          
%%       GNU Emacs editor.  The local variable list is not evaluated when an 
%%       indirect buffer is visited, so it's necessary to evaluate the       
%%       following s-expression in order to use the facilities normally      
%%       accessed via the local variables list.                              
%%       \initials{LDF 2004.02.12}.                                          

%% (progn (metafont-mode) (outline-minor-mode t) (setq fill-column 80))    

%% * (1) Local variables for Emacs.

%% Local Variables:
%% mode:Metapost
%% eval:(outline-minor-mode t)
%% eval:(read-abbrev-file abbrev-file-name)
%% abbrev-mode:t
%% outline-regexp:"%% [*\f]+"
%% End:


