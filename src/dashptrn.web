@q dashptrn.web @>
  
@q * (1) Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing.  @>
@q Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, @>
@q 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018 The Free Software Foundation  @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version.  @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details.  @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA@>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html.@>

@q ("@@" stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de  @>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston                 @> 
@q c/o Free Software Foundation, Inc.  @>
@q 51 Franklin St, Fifth Floor         @> 
@q Boston, MA  02110-1301              @>
@q USA                                 @>

@q Laurence.Finston@@gmx.de (@@ stands for a single "at" sign.)@>


@q * (0) Dash_Pattern.@>
@** Dash\_Pattern\quad ({\tt dashptrn\PERIOD web}).\hfil

\LOG  
\initials{LDF 2004.06.04.}  Created this file.
\ENDLOG

@q * Include files.@>
@* Include files.
@<Include files@>=
#include "loader.h++"
#include "pspglb.h++"
#include "io.h++"
#include "creatnew.h++"
#include "pntrvctr.h++"
#include "primes.h++"
#include "complex.h++"
#include "matrices.h++"
#include "colors.h++"
#include "transfor.h++"
#include "pens.h++"

@q * Dash_Pattern class definition.@>
@* {\bf Dash\_Pattern} class definition.

\LOG
\initials{LDF 2004.06.07.}  Changed |static const short WITHDOTS| to 
|WITH_DOTS|.
\ENDLOG 

@<Define |class Dash_Pattern|@>=
class Dash_Pattern
{
  Transform transform;
  unsigned short type;

 public:

  static const short EVENLY;
  static const short WITH_DOTS;
  
  @<Declare |Dash_Pattern| functions@>@;
};

@q * Define |static Dash_Pattern| data members.  @>
@ 
@<Define |static Dash_Pattern| data members@>=

const short Dash_Pattern::EVENLY   = 0;
const short Dash_Pattern::WITH_DOTS = 1;

@q * Constructors and setting functions.@>
@* Constructors and setting functions.

@q ** Default constructor.@>
@*1 Default constructor.
@^\cfunc{Dash\_Pattern}{Dash\_Pattern}@>

@<Declare |Dash_Pattern| functions@>=
Dash_Pattern();

@
@<Define |Dash_Pattern| functions@>=
Dash_Pattern::Dash_Pattern()
{
  type          = EVENLY;         
  return;
}

@q ** (2) Copy constructor.@>
@*1 Copy constructor.
@^\cfunc{Dash\_Pattern}{Dash\_Pattern}@>
@:!!@> !! Remember to add or change code here if I add or change
anything in the |class| definition!!

@<Declare |Dash_Pattern| functions@>=
Dash_Pattern(const Dash_Pattern& p);


@
@<Define |Dash_Pattern| functions@>=
Dash_Pattern::Dash_Pattern(const Dash_Pattern& p)
{
  type      = p.type;
  transform = p.transform;
  return;
}


@q * (1) Pseudo-constructor for dynamic allocation. @>
@* Pseudo-constructor for dynamic allocation. 


@q ** (2) Pointer argument. @>
@*1 Pointer argument. 

@<Declare non-member template functions for |Dash_Pattern|@>=

Dash_Pattern* 
create_new(const Dash_Pattern* p, Scanner_Node scanner_node);


@q ** (2) Reference argument.@>

@*1 Reference argument. 

@<Declare non-member template functions for |Dash_Pattern|@>=

Dash_Pattern* 
create_new(const Dash_Pattern& p, Scanner_Node scanner_node);
  

@q * (1) Assignment.@>
@* Assignment.
@^\cofunc{Dash\_Pattern}{=}@>


@<Declare |Dash_Pattern| functions@>=
const Dash_Pattern&
operator=(const Dash_Pattern& p);

@
@<Define |Dash_Pattern| functions@>=
const Dash_Pattern&
Dash_Pattern::operator=(const Dash_Pattern& p)
{
  type      = p.type;
  transform = p.transform;
  return p;
}

@q * Multiplication by a |Transform|.@>
@* Multiplication by a {\bf Transform}.
@^\cofunc{Dash\_Pattern}{*=}@>

@<Declare |Dash_Pattern| functions@>=
Transform
operator*=(const Transform& t);

@
@<Define |Dash_Pattern| functions@>=
Transform 
Dash_Pattern::operator*=(const Transform& t)
{
  return transform *= t;
}


@q * Show.@>
@* Show.
@^\cfunc{Dash\_Pattern}{show}@>

\LOG
\initials{LDF 2004.06.07.}  Replaced dummy code with real code in this function.
\ENDLOG 


@<Declare |Dash_Pattern| functions@>=
bool
show(string text = "") const;

@
@<Define |Dash_Pattern| functions@>=
bool
Dash_Pattern::show(string text) const
{

  bool return_value = true;
  
  if (text == "")
    text = "Dash_Pattern:";
  
  cerr << text << endl << "type: ";

  if (type == EVENLY)
    cerr << "EVENLY" << endl;

  else if (type == WITH_DOTS)
    cerr << "WITH_DOTS" << endl;
       
  else
    {
      cerr << "ERROR! In Dash_Pattern::show():" << endl 
           << "Invalid type: " << type << endl
           << "Will return `false'." << endl;
      return_value = false;

    }
  
  transform.show("transform:");

  return return_value;
}


@q * Returning elements and information.@>
@* Returning elements and information.


@q ** Get type.@>
@*1 Get type.
@^\cfunc{Dash\_Pattern}{get\_type}@>


@<Declare |Dash_Pattern| functions@>=
inline
unsigned short
get_type() const
{
  return type;
}

@q ** Get transform.@>
@*1 Get transform.
@^\cfunc{Dash\_Pattern}{get\_transform}@>

@<Declare |Dash_Pattern| functions@>=
inline
Transform
get_transform() const
{
  return transform;
}


@q * (1) Outputting.@>
@* Outputting.
\initials{LDF 2004.11.12.}

@q ** (2) Output operator@>
@*1 Output operator. 
@^\ofunc{$\ll$}@>

\LOG
\initials{LDF 2004.11.12.}
Added real code to this function.
\ENDLOG

@<Declare non-member non-template functions for |Dash_Pattern|@>=

ostream& 
operator<<(ostream& o, Dash_Pattern& dp); 

@ 
@<Define non-member non-template functions for |Dash_Pattern|@>=
ostream& 
operator<<(ostream& o, Dash_Pattern& dp)
{


@q **** (4) Preliminaries.@>   

#if DEBUG_COMPILE
  bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

  stringstream cerr_strm;

  bool error_stop_value   = true;
  bool warning_stop_value = true;
  string thread_name      = "";

  Scanner_Node scanner_node = 0;

#ifdef HAVE_PTHREAD_H 

  Thread_Info_Type* thread_info = Thread_Info_Type::get_thread_info();
  thread_name = Thread_Info_Type::get_thread_name(thread_info);
  scanner_node = Thread_Info_Type::get_scanner_node(thread_info);

#endif /* |HAVE_PTHREAD_H|  */@; 


  if (scanner_node)
     scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                   &error_stop_value,
                                                   &warning_stop_value);

  using namespace Scan_Parse;

@q **** (4).@>


   if (dp.get_type() == Dash_Pattern::EVENLY)
        {
          o << " dashed evenly";
        }
      else if (dp.get_type() == Dash_Pattern::WITH_DOTS)
        {
          o << " dashed withdots";
        }

      else /* Invalid |dp.type|.  */
        {
          cerr_strm << thread_name 
                    << "ERROR! In `operator<<()' for `Dash_Pattern':"
                    << endl 
                    << "Invalid `Dash_Pattern' type: " << dp.get_type()
                    << ". Returning.";
          
          log_message(cerr_strm);
          cerr_message(cerr_strm, error_stop_value);
          cerr_strm.str("");

          return o;
          
        } /* |else| (invalid |dp.type|).  */

@q **** (4) Handle |transform|.@>   
@ Handle |transform|.
\initials{LDF 2004.11.12.}


\LOG
\initials{LDF 2005.06.24.}
\initials{LDF 2005.06.24.}
@:BUG FIX@> BUG FIX:  Now appending |"cm"| to the numbers output 
for the transformation. 
\ENDLOG

@<Define non-member non-template functions for |Dash_Pattern|@>=

      Transform t = dp.get_transform();

      if (!t.is_identity())
        {
         
          o << " transformed "
            << "begingroup; save T; transform T;"  
            << endl << " xxpart T = " 
            << t.get_element(0, 0) << "cm; "
            << "xpart T = " 
            << t.get_element(3, 0) << "cm; "
            << "xypart T = " 
            << t.get_element(1, 0) << "cm;"
            << endl << " yypart T = " 
            << t.get_element(1, 1) << "cm; " 
            << "ypart T = " 
            << t.get_element(3, 1) << "cm; "
            << "yxpart T = " 
            << t.get_element(0, 1) << "cm; "
            << "T endgroup ";

        } /* |if (!dp.get_transform().is_identity())|  */@;


    o << "\n";

    return o;   

}  /* |operator<<(ostream& o, Dash_Pattern& dp)|  */


@q * (1) Modifying.@>
@* Modifying.

@q ** (2) Set type.@>
@*1 Set type.
@^\cfunc{Dash\_Pattern}{set\_type}@>

@<Declare |Dash_Pattern| functions@>=

void
set_type(const unsigned short s);

@
@<Define |Dash_Pattern| functions@>=
void
Dash_Pattern::set_type(const unsigned short s)
{
  type = s;
  return;
}



@q * Putting Dash_Pattern together.@>
@ Putting {\bf Dash\_Pattern} together.
@ This is compiled.

@c
@<Include files@>@;
@<Define |class Dash_Pattern|@>@;
@<Define |static Dash_Pattern| data members@>@;
@<Define |Dash_Pattern| functions@>@;
@<Declare non-member template functions for |Dash_Pattern|@>@;
@<Declare non-member non-template functions for |Dash_Pattern|@>@;
@<Define non-member non-template functions for |Dash_Pattern|@>@;
  

@ This is written to \filename{dashptrn.h}.
@(dashptrn.h@>=
@<Define |class Dash_Pattern|@>@;
@<Declare non-member template functions for |Dash_Pattern|@>@;
@<Declare non-member non-template functions for |Dash_Pattern|@>@;



@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q run-cweave-on-file:"3DLDF.web" @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q End: @>
