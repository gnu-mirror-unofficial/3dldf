@q pens.web @>
  
@q * (1) Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing.  @>
@q Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, @>
@q 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018 The Free Software Foundation  @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version.  @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details.  @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA@>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html.@>

@q ("@@" stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de@>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston                 @> 
@q c/o Free Software Foundation, Inc.  @>
@q 51 Franklin St, Fifth Floor         @> 
@q Boston, MA  02110-1301              @>
@q USA                                 @>

@q Laurence.Finston@@gmx.de (@@ stands for a single "at" sign.)@>


@q * (0) Pen.@>
@** Pen\quad ({\tt pens\PERIOD web}).\hfil
\initials{LDF 2004.05.21.}  

\LOG
\initials{LDF 2004.05.21.}  
Created this file.
\ENDLOG

@q * (1) Include files.@>
@* Include files.
@<Include files@>=
#include "loader.h++"
#include "pspglb.h++"
#include "io.h++"
#include "creatnew.h++"
#include "pntrvctr.h++"
#include "primes.h++"
#include "complex.h++"
#include "matrices.h++"
#include "colors.h++"
#include "transfor.h++"

@q * (1) Pen class definition.@>
@* {\bf Pen} class definition.

The static constants |CIRCLE_PEN|, |RAZOR_PEN|, etc., can't be called
plain ``|CIRCLE|'', ``|RAZOR|'', etc., or 
``|PEN_CIRCLE|'', ``|PEN_RAZOR|'', etc., because
these are preprocessor macros declared by means of Bison token
declarations in \filename{pbsndecl.w}.
\initials{LDF 2004.05.21.}


\LOG
\initials{LDF 2005.03.18.}
Added |static const short NULL_PEN|.
\ENDLOG 

@q ** (2) Definition.@>  

@<Define |class Pen|@>=

class Pen
{
  string name;
  Transform transform;
  unsigned short type;

 public:

  static const short NULL_PEN;
  static const short CIRCLE_PEN;
  static const short RAZOR_PEN;
  static const short SPECK_PEN;
  static const short SQUARE_PEN;
  
  @<Declare |Pen| functions@>@;
};

@q ** (2) Define |static Pen| data members.  @>
@*1 Define {\bf static Pen} data members.
\initials{LDF Undated.}

\LOG
\initials{LDF 2005.03.18.}
Now setting |NULL_PEN|.
\ENDLOG

@<Define |static Pen| data members@>=

   const short Pen::NULL_PEN   = 0;
   const short Pen::CIRCLE_PEN = 1;
   const short Pen::RAZOR_PEN  = 2;
   const short Pen::SPECK_PEN  = 3;
   const short Pen::SQUARE_PEN = 4;

@q * (1) |Pen| functions.@>
@* {\bf Pen} functions.

@q ** (2) Constructors and setting functions.@>
@*1 Constructors and setting functions.

@q *** (3) Default constructor.@>
@*2 Default constructor.
@^\cfunc{Pen}{Pen}@>

\LOG
\initials{LDF 2004.05.21.}  
Added this function.

\initials{LDF 2004.06.02.}  Now setting |type| to |CIRCLE_PEN| by default.
\ENDLOG 

@<Declare |Pen| functions@>=
Pen(void);

@
@<Define |Pen| functions@>=
Pen::Pen(void)
{
  name = "";
  type = CIRCLE_PEN;
  return;
}

@q *** (3) Copy constructor.@>
@*2 Copy constructor.
@^\cfunc{Pen}{Pen}@>
@:!!@> !! Remember to add or change code here if I add or change
anything in the |class| definition!!

\LOG
\initials{LDF 2004.05.21.}  
Added this function.
\ENDLOG 

@<Declare |Pen| functions@>=
Pen(const Pen& p, const string n = "");

@
@<Define |Pen| functions@>=
Pen::Pen(const Pen& p, const string n)
{
  
  name = n;
  type = p.type;
  transform = p.transform;
  return;
}


@q * (2)  Pseudo-constructor for dynamic allocation. @>
@*1 Pseudo-constructor for dynamic allocation. 

@q *** (3) Pointer argument. @>
@*2 Pointer argument. 

\LOG
\initials{LDF 2004.05.21.}  
Added this declaration.

\initials{LDF 2004.10.11.}
Added |Scanner_Node scanner_node| argument.

\initials{LDF 2004.10.11.}
Added default argument of 0 for |Scanner_Node scanner_node|.
\ENDLOG 

@<Declare non-member template functions for |Pen|@>=
Pen* 
create_new(const Pen* p, Scanner_Node scanner_node = 0);


@q *** (3) Reference argument. @>
@*2 Reference argument. 

\LOG
\initials{LDF 2004.05.21.}  
Added this declaration.

\initials{LDF 2004.10.11.}
Added |Scanner_Node scanner_node| argument.

\initials{LDF 2004.10.11.}
Added default argument of 0 for |Scanner_Node scanner_node|.
\ENDLOG 

@<Declare non-member template functions for |Pen|@>=
Pen* 
create_new(const Pen& p, Scanner_Node scanner_node = 0);
  

@q *** (3) Destructor.@>
@*2 Destructor.
@^\cfunc{Pen}{~Pen}@>

\LOG
\initials{LDF 2004.09.01.}  
Added this function.
\ENDLOG 

@<Declare |Pen| functions@>=
~Pen(void);


@
@<Define |Pen| functions@>=
Pen::~Pen(void)
{
  return;
}



@q * (1) Assignment.@>
@* Assignment.
@^\cofunc{Pen}{=}@>

\LOG
\initials{LDF 2004.05.21.}  
Added this operator function.

\initials{LDF 2004.05.21.}  
@:BUG FIX@> BUG FIX:  Now setting 
|name = p.name|.  Previously, it was set to the empty string. 

\initials{LDF 2004.06.02.}  
Now returning |const Pen&| rather than |void|.
\ENDLOG 

@<Declare |Pen| functions@>=
const Pen&
operator=(const Pen& p);

@
@<Define |Pen| functions@>=
const Pen&
Pen::operator=(const Pen& p)
{
  name = p.name;
  type = p.type;
  transform = p.transform;
  return p;
}

@q * (1) Multiplication by a |Transform|.@>
@* Multiplication by a {\bf Transform}.
@^\cofunc{Pen}{*=}@>

\LOG
\initials{LDF 2004.05.21.}  
Added this operator function.
\ENDLOG 

@<Declare |Pen| functions@>=
Transform
operator*=(const Transform& t);

@
@<Define |Pen| functions@>=
Transform 
Pen::operator*=(const Transform& t)
{
  return transform *= t;
}


@q * (1) Show.@>
@* Show.
@^\cfunc{Pen}{show}@>
\initials{LDF Undated.}

\LOG
\initials{LDF 2005.04.11.}
Added code for handling the case that |type == NULL_PEN|.
\ENDLOG 

@q ** (2) Declaration.@>

@<Declare |Pen| functions@>=
bool
show(string text = "") const;

@q ** (2) Definition.@> 

@
@<Define |Pen| functions@>=
bool
Pen::show(string text) const
{

  bool return_value = true;
  
  if (text == "")
    text = "Pen:";
  
  cerr << text << endl
       << "name == " << name << endl
       << "type == ";

  if (type == NULL_PEN)
    cerr << "null_pen" << endl;

  else if (type == CIRCLE_PEN)
    cerr << "pencircle" << endl;

  else if (type == RAZOR_PEN)
    cerr << "penrazor" << endl;

  else if (type == SPECK_PEN)
    cerr << "penspeck" << endl;

  else if (type == SQUARE_PEN)
    cerr << "pensquare" << endl;

  else
    {
      cerr << "ERROR! In Pen::show():\n"
           << "Invalid `type': " << type << endl;

      return_value = false;
    }

  transform.show("transform:");

  return return_value;
}


@q * Returning elements and information.@>
@* Returning elements and information.



@q ** Get type.@>
@*1 Get type.
@^\cfunc{Pen}{get\_type}@>

\LOG
\initials{LDF 2004.06.01.}  Added this function.
\ENDLOG 

@<Declare |Pen| functions@>=
inline
unsigned short
get_type() const
{
  return type;
}

@q ** Get transform.@>
@*1 Get transform.
@^\cfunc{Pen}{get\_transform}@>

\LOG
\initials{LDF 2004.06.01.}  Added this function.
\ENDLOG 

@<Declare |Pen| functions@>=
inline
Transform
get_transform() const
{
  return transform;
}

@q * (1) Outputting.@>
@* Outputting.

@q ** (2) Output operator@>
@*1 Output operator. 
@^\ofunc{$\ll$}@>

\LOG
\initials{LDF 2004.11.12.}
Added real code to this function.
\ENDLOG

@<Declare non-member non-template functions for |Pen|@>=

ostream& 
operator<<(ostream& o, Pen& p); 

@ 
@<Define non-member non-template functions for |Pen|@>=
ostream& 
operator<<(ostream& o, Pen& p)
{


@q **** (4) Preliminaries.@>   

#if DEBUG_COMPILE
  bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

  stringstream cerr_strm;

  bool error_stop_value   = true;
  bool warning_stop_value = true;
  string thread_name      = "";

  Scanner_Node scanner_node = 0;

#ifdef HAVE_PTHREAD_H 

  Thread_Info_Type* thread_info = Thread_Info_Type::get_thread_info();
  thread_name = Thread_Info_Type::get_thread_name(thread_info);
  scanner_node = Thread_Info_Type::get_scanner_node(thread_info);

#endif /* |HAVE_PTHREAD_H|  */@; 


  if (scanner_node)
     scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                   &error_stop_value,
                                                   &warning_stop_value);

  using namespace Scan_Parse;

@q **** (4).@>

   if (p.get_type() == Pen::CIRCLE_PEN)
     {
       o  << "pencircle";
     }
   else if (p.get_type() == Pen::RAZOR_PEN)
     {
       o  << "penrazor";
     }

   else if (p.get_type() == Pen::SPECK_PEN)
     {
       o  << "penspeck";
     }

   else if (p.get_type() == Pen::SQUARE_PEN)
     {
       o  << "pensquare";
     }
   else /* Invalid |p.type|.  */
     {
       cerr_strm << thread_name 
                 << "ERROR! In `operator<<()' for `Pen':"
                 << endl
                 << "Invalid `Pen' type: " << p.get_type()
                 << endl << "Returning.";
       
       log_message(cerr_strm);
       cerr_message(cerr_strm, error_stop_value);
       cerr_strm.str("");

       return o;
       
     } /* |else| (invalid |p.type|).  */




     Transform t = p.get_transform();

@q **** (4).@>
@ 
\LOG
\initials{LDF 2005.06.24.}
@:BUG FIX@> BUG FIX:  Now appending |"cm"| to the numbers output 
for the transformation. 
\ENDLOG 

@<Define non-member non-template functions for |Pen|@>=

     if (!t.is_identity())
        {
         
          o << " transformed "
            << "begingroup; save T; transform T;"
            << endl  
            << " xxpart T = " 
            << t.get_element(0, 0) << "cm; "
            << "xpart T = " 
            << t.get_element(3, 0) << "cm; "
            << "xypart T = " 
            << t.get_element(1, 0) << "cm;"
            << endl 
            << " yypart T = " 
            << t.get_element(1, 1) << "cm; "
            << "ypart T = " 
            << t.get_element(3, 1) << "cm; "
            << "yxpart T = " 
            << t.get_element(0, 1) << "cm; "
            << "T endgroup ";

        } /* |if (!p.get_transform().is_identity())|  */@;

    o << "\n";

    return o;   

}  /* |operator<<(ostream& o, Pen& p)|  */


@q * (1) Modifying.@>
@* Modifying.

@q ** (2) Set name.@>
@*1 Set name.
@^\cfunc{Pen}{set\_name}@>
\initials{LDF 2004.05.21.}  

\LOG
\initials{LDF 2004.05.21.}  
Added this function.
\ENDLOG 

@<Declare |Pen| functions@>=
void
set_name(const string s);

@
@<Define |Pen| functions@>=
void
Pen::set_name(const string s)
{
  name = s;
  return;
}

@q ** (2) Set type.@>
@*1 Set type.
@^\cfunc{Pen}{set\_type}@>
\initials{LDF 2004.05.21.}  

\LOG
\initials{LDF 2004.05.21.}  
Added this function.
\ENDLOG 

@<Declare |Pen| functions@>=
void
set_type(const unsigned short s);

@
@<Define |Pen| functions@>=
void
Pen::set_type(const unsigned short s)
{
  type = s;
  return;
}

@q * (1) Putting Pen together.@>
@* Putting {\bf Pen} together.
@ This is what's compiled.
\initials{LDF Undated.}

@c
@<Include files@>@;
@<Define |class Pen|@>@;
@<Define |static Pen| data members@>@;
@<Define |Pen| functions@>@;
@<Declare non-member template functions for |Pen|@>@;
@<Declare non-member non-template functions for |Pen|@>@;
@<Define non-member non-template functions for |Pen|@>@;
  

@ This is what's written to \filename{pens.h}.
\initials{LDF Undated.}

@(pens.h@>=
@<Define |class Pen|@>@;
@<Declare non-member template functions for |Pen|@>@;
@<Declare non-member non-template functions for |Pen|@>@;



@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q run-cweave-on-file:"3DLDF.web" @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q End: @>
