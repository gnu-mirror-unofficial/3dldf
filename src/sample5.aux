%%%% sample5.aux
%%%% Created by Laurence D. Finston (LDF) Wed 14 Jul 2021 03:22:02 PM CEST

%% * (1) Copyright and License.

%%%% This file is part of GNU 3DLDF, a package for three-dimensional drawing.  
%%%% Copyright (C) 2021 The Free Software Foundation  

%%%% GNU 3DLDF is free software; you can redistribute it and/or modify 
%%%% it under the terms of the GNU General Public License as published by 
%%%% the Free Software Foundation; either version 3 of the License, or 
%%%% (at your option) any later version.  

%%%% GNU 3DLDF is distributed in the hope that it will be useful, 
%%%% but WITHOUT ANY WARRANTY; without even the implied warranty of 
%%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
%%%% GNU General Public License for more details.  

%%%% You should have received a copy of the GNU General Public License 
%%%% along with GNU 3DLDF; if not, write to the Free Software 
%%%% Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA 

%%%% GNU 3DLDF is a GNU package.  
%%%% It is part of the GNU Project of the  
%%%% Free Software Foundation 
%%%% and is published under the GNU General Public License. 
%%%% See the website http://www.gnu.org 
%%%% for more information.   
%%%% GNU 3DLDF is available for downloading from 
%%%% http://www.gnu.org/software/3dldf/LDF.html.
  

%%%% Please send bug reports to Laurence.Finston@gmx.de
%%%% The mailing list help-3dldf@gnu.org is available for people to 
%%%% ask other users for help.  
%%%% The mailing list info-3dldf@gnu.org is for sending 
%%%% announcements to users. To subscribe to these mailing lists, send an 
%%%% email with ``subscribe <email-address>'' as the subject.  

%%%% The author can be contacted at: 

%%%% Laurence D. Finston 
%%%% c/o Free Software Foundation, Inc. 
%%%% 51 Franklin St, Fifth Floor 
%%%% Boston, MA  02110-1301  
%%%% USA

%%%% Laurence.Finston@gmx.de

% * (1) Beginning of 3DLDF code.

%% ** (2)

do_black := true;

picture save_picture;

save_picture := tab_picture;

beginfig(0);
  draw_lines;
  output current_picture with_projection parallel_x_y;
  output qv[0] with_projection parallel_x_y;
  output tab_picture with_projection parallel_x_y;
  output bi_ang_pict[0] with_projection parallel_x_y;
endfig;

beginfig(1);
  draw_lines;
  output current_picture  with_projection parallel_x_y;
  output qv[1] with_projection parallel_x_y;
  tab_picture := save_picture;
  output tab_picture with_projection parallel_x_y;
  output bi_ang_pict[1] with_projection parallel_x_y;
endfig;

beginfig(2);
  output bi_ang_pict[2] with_projection parallel_x_y;
  draw_lines;
  output current_picture  with_projection parallel_x_y;
  output qv[2] with_projection parallel_x_y;
  tab_picture := save_picture;
  output tab_picture with_projection parallel_x_y;
endfig;

beginfig(3);
  output bi_ang_pict[3] with_projection parallel_x_y;
  draw_lines;
  output current_picture  with_projection parallel_x_y;
  output qv[3] with_projection parallel_x_y;
  tab_picture := save_picture;
  output tab_picture with_projection parallel_x_y;
endfig;


beginfig(4);
  output bi_ang_pict[4] with_projection parallel_x_y;
  draw_lines;
  output current_picture  with_projection parallel_x_y;
  output qv[4] with_projection parallel_x_y;
  tab_picture := save_picture;
  output tab_picture with_projection parallel_x_y;
endfig;

beginfig(5);
  output bi_ang_pict[5] with_projection parallel_x_y;
  draw_lines;
  output current_picture  with_projection parallel_x_y;
  output qv[5] with_projection parallel_x_y;
  tab_picture := save_picture;
  output tab_picture with_projection parallel_x_y;
endfig;

beginfig(6);
  output bi_ang_pict[6] with_projection parallel_x_y;
  draw_lines;
  output current_picture  with_projection parallel_x_y;
  output qv[6] with_projection parallel_x_y;
  tab_picture := save_picture;
  output tab_picture with_projection parallel_x_y;
endfig;

beginfig(7);
  output bi_ang_pict[7] with_projection parallel_x_y;
  draw_lines;
  output current_picture  with_projection parallel_x_y;
  output qv[7] with_projection parallel_x_y;
  tab_picture := save_picture;
  output tab_picture with_projection parallel_x_y;
endfig;

%% ** (2)

focus f;

set f with_position (0, 20, -50) 
  with_direction (0, 20, 10) with_distance 70; 

beginfig(8);
  rotate v8 (0, 22.5);
  current_picture := v8;
  i := 0;
  forever:
    exit_if i >= size pv;
    message "In Fig. 8:  Outputting pv" & decimal i & ".";
    current_picture += pv[i];
    i += 4;
  endfor;
  current_picture += quadrant_picture;
  label("{\\bf Perspective Projection}", (0, -(radius + 1.25cm)));
endfig with_focus f;

beginfig(9);
  currentpicture := v9;
  i := 1;
  forever:
    exit_if i >= size pv;
    message "In Fig. 9:  Outputting pv" & decimal i & ".";
    current_picture += pv[i];
    i += 4;
  endfor;
  label("{\\bf Parallel X-Y} (Viewed from the front)", (0, -(radius + 1.25cm)));
  current_picture += quadrant_picture;
endfig with_projection parallel_x_y; 

beginfig(10);
  currentpicture := v10;
  i := 2;
  forever:
    exit_if i >= size pv;
    message "In Fig. 10:  Outputting pv" & decimal i & ".";
    current_picture += pv[i];
    i += 4;
  endfor;
  label("{\\bf Parallel X-Z} (Viewed from above)", (0, 0, -(radius + 1.25cm)));
  current_picture += quadrant_picture;
endfig with_projection parallel_x_z; 

beginfig(11);
  currentpicture := v11;
  i := 3;
  forever:
    exit_if i >= size pv;
    message "In Fig. 11:  Outputting pv" & decimal i & ".";
    current_picture += pv[i];
    i += 4;
  endfor;
  label("{\\bf Parallel Z-Y} (Viewed from the right side)", (0, -(radius + 1.25cm)));
  current_picture += quadrant_picture;
endfig with_projection parallel_z_y; 

beginfig(12);
  point p[];
  path q[];
  transform t[];
  numeric n[];
  q0 := D[0][1];
  draw q0;
  p0 := get_point (3) q0;
  p1 := get_point (0) q0;
  p2 := get_point (1) q0;
  p3 := get_point (2) q0;
  dotlabel.top("$p_0$", p0);
  dotlabel.top("$p_1$", p1);
  dotlabel.top("$p_2$", p2);
  dotlabel.top("$p_3$", p3);
  n0 := (p2 - p0) angle (p1 - p0);
  n1 := (p3 - p0) angle (p1 - p0);
  message "n0:";
  show n0;
  message "n1:";
  show n1;
  pause;
  n2 := magnitude(p1 - p0);
  n3 := magnitude(p2 - p0);
  n4 := magnitude(p3 - p0);
  message "n2:";
  show n2;
  message "n3:";
  show n3;
  message "n4:";
  show n4;

  p4 := origin;
  p5 := p4 shifted (n2, 0);
  p6 := (p4 shifted (n3, 0)) rotated (0, 0, n0);
  p7 := (p4 shifted (n4, 0)) rotated (0, 0, n1); 

  q1 := p4 -- p5 -- p6 -- p7 -- cycle;
  message "q1:";
  show q1;
  pause;
  draw q1;

  dotlabel.lft("$p_4$", p4);
  dotlabel.rt("$p_5$", p5);
  dotlabel.rt("$p_6$", p6);
  dotlabel.lft("$p_7$", p7);
  
  message "star_panel_point0:";
  show star_panel_point0;

  drawdot star_panel_point0 with_color red with_pen Large_pen;

  n5 := magnitude(star_panel_point0 - p0);
  message "n5:";
  show n5;
  
  n6 := (star_panel_point0 - p0) angle (p1 - p0);
  message "n6:";
  show n6;

  p8 := (p4 shifted (n5, 0)) rotated (0, 0, n6);
  drawdot p8 with_color red with_pen Large_pen;
  
endfig with_projection parallel_x_y; 

verbatim_metapost "end";
  
end;  

%% * (1) Local variables for Emacs.

%% Local Variables:
%% mode:Metapost
%% eval:(outline-minor-mode t)
%% eval:(read-abbrev-file abbrev-file-name)
%% abbrev-mode:t
%% outline-regexp:"%% [*\f]+"
%% End:
