@q astronmy.web  @>
@q Created by Laurence Finston (LDF) Fri 28 May 2021 12:36:22 AM CEST @>

@q * (0) Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing. @>
@q Copyright (C) 2021 The Free Software Foundation, Inc. @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version. @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details. @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html. @>

@q (``@@'' stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de @>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston                 @> 
@q c/o Free Software Foundation, Inc.  @>
@q 51 Franklin St, Fifth Floor         @> 
@q Boston, MA  02110-1301              @>
@q USA                                 @>

@q Laurence.Finston@@gmx.de (@@ stands for a single ``at'' sign.)@>

@q * (0) Astronomy.@>
@** Astronomy\quad ({\tt astronmy\PERIOD web}).\hfil

\LOG
\initials{LDF 2021.05.28.}
Created this file.
\ENDLOG 

\immediate\write\functexifile{File:  astronmy.web^^J}

@q * (1) Include files.@>
@ Include files.

@<Include files@>=

#include "loader.h++"
#include "pspglb.h++"
#include "io.h++"
#include "gsltmplt.h++"
#include "creatnew.h++"
#include "pntrvctr.h++"
#include "primes.h++"
#include "complex.h++"
#include "matrices.h++"
#include "colors.h++"
#include "transfor.h++"
#include "pens.h++"
#include "dashptrn.h++"
#include "shapes.h++" 
#include "pictures.h++"
#include "points.h++"
#include "lines.h++"
#include "planes.h++"
#include "paths.h++"
#include "curves.h++"
#include "polygons.h++"
#include "triangle.h++"
#include "rectangs.h++"
#include "conicsct.h++"
#include "ellipses.h++"
#include "circles.h++"
#include "ellpsslc.h++"
#include "crclslc.h++"
#include "parabola.h++"
#include "hyprbola.h++"
#include "cncsctlt.h++"
#include "arc.h++"
#include "helices.h++"
#include "origami.h++"

#if 0
   #include "patterns.h++"
#endif 

#include "solids.h++"
#include "solfaced.h++"
#include "cuboid.h++"
#include "polyhed.h++"
#include "ddchdrn.h++"
#include "rhtchdrn.h++"
#include "plyhdslc.h++"
#include "cones.h++"
#include "cylinder.h++" 
#include "ellpsoid.h++"
#include "spheres.h++"
#include "sphrdevl.h++"
#include "parabold.h++"
#include "paraellp.h++"
#include "parahypr.h++" 
#include "glyphs.h++"
#include "pctfncs0.h++"
#include "utility.h++"
#include "pntrvcf0.h++"
#include "predctes.h++"
#include "scanprse.h++"   
#include "figures.h++"   
#include "parser.h++"   
#include "parser_1.h++"   
#include "scan.h++"
#include "scanprsf.h++"
#include "imetfncs.h++"
#include "deftfncs.h++"
#include "sctpcrt.h++"  
#include "sctpfncs.h++"  
#include "prrfnc0.h++"

@q * (1) Star class definition.@>
@* {\bf Star} class definition.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this |class| definition.
\ENDLOG

@q ** (2) Code.@> 

@<Declare |class Star|@>=

class Star
{

   protected:

   real right_ascension;
   real declination;

   public:

      @<Declare |static| |class Star| data members@>@;

      @<Declare |Star| functions@>@;
};

@q ** (2) Static member variable declarations and initializations.@>
@*1 Static member variable declarations and initializations.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this section.
\ENDLOG

@<Declare |static| |class Star| data members@>=

@q *** (3) Code.@> 
@
@<Initialize |static| |class Star| data members@>=

@q ** (2) Global constants.@>
@*1 Global constants.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this section.
\ENDLOG

@<Global constants@>=

@q *** (3)@>
@
@<Declarations for the header file@>=

@q ** (2) |Star| functions.@> 
@*1 {\bf Star} functions.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this section.
\ENDLOG

@q *** (3) Constructors and Setting Functions.@>
@*2 Constructors and Setting Functions.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this section.
\ENDLOG

@q **** (4) Default Constructor.@> 
@*3 Default Constructor.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this function.
\ENDLOG

@q ***** (5) Declaration.@>

@<Declare |Star| functions@>=
Star(void);

@q ***** (5) Definition.  @>

@
@<Define |Star| functions@>= 
Star::Star(void)
{

   right_ascension = 0;
   declination = 0;

   return;
}


@q **** (4) Setting function.@> 
@*2 Setting function.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this function.
\ENDLOG

@q **** (4) Declaration.@> 

@<Declare |Star| functions@>=
int
set(real ra, real dcl, Scanner_Node scanner_node = 0);

@q **** (4) Definition.  @>

@
@<Define |Star| functions@>= 
int
Star::set(real ra, real dcl, Scanner_Node scanner_node)
{

@q ***** (5) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = true; /* |false| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ***** (5)@>

#if DEBUG_COMPILE
   if (DEBUG)
   {
       cerr_strm << thread_name << "Entering `Star::set'.";

       log_message(cerr_strm);
       cerr_message(cerr_strm);
       cerr_strm.str("");

   }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@; 

   right_ascension = ra;
   declination = dcl;

@q ***** (5)@>

   return 0;

@q ***** (5)@>

}  /* End of |Star::set| definition.  */

@q *** (3) Destructor.@> 
@*2 Destructor.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this function.
\ENDLOG

@q **** (4) Declaration.@> 

@<Declare |Star| functions@>=
virtual
~Star(void);

@q **** (4) Definition.  @>

@
@<Define |Star| functions@>= 
Star::~Star(void)
{

@q ***** (5) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   Scanner_Node scanner_node = 0;

#ifdef HAVE_PTHREAD_H

   Thread_Info_Type* thread_info = Thread_Info_Type::get_thread_info();

   if (thread_info != static_cast<Thread_Info_Type*>(0))
      scanner_node = thread_info->scanner_node;

#endif /* |HAVE_PTHREAD_H|  */@; 

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ***** (5)@>

}  /* End of |~Star| definition.  */

@q *** (3) Pseudo-constructor for dynamic allocation.@>
@*2 Pseudo-constructor for dynamic allocation.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this section.
\ENDLOG

@q **** (4) Pointer argument.@>
@*3 Pointer argument.@>
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this function declaration.
\ENDLOG

@<Declare non-member template functions for |Star|@>=

Star* 
create_new(const Star* p, Scanner_Node scanner_node = 0);

@q **** (4) Reference argument.@>
@*3 Referece argument.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this function declaration.
\ENDLOG

@<Declare non-member template functions for |Star|@>=
Star* 
create_new(const Star& p, Scanner_Node scanner_node = 0);

@q *** (3) Assignment.@> 
@*2 Assignment.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this section.
\ENDLOG

@q **** (4) Assignment from a |Star|.@> 
@*3 Assignment from a |Star|.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this function.
\ENDLOG

@q ***** (5) Declaration.@> 

@<Declare |Star| functions@>=
virtual
Star&
operator=(const Star& c);

@q ***** (5) Definition.@> 
@
@<Define |Star| functions@>=

Star&
Star::operator=(const Star& c)
{

@q ****** (6) Preliminaries.@>   

   volatile bool DEBUG = false; /* |true| */ @; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   Scanner_Node scanner_node = 0;

#ifdef HAVE_PTHREAD_H

   Thread_Info_Type* thread_info = Thread_Info_Type::get_thread_info();

   if (thread_info != static_cast<Thread_Info_Type*>(0))
      scanner_node = thread_info->scanner_node;

#endif /* |HAVE_PTHREAD_H|  */@; 

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ****** (6)@>

    if (this == &c) /* Make sure it's not self-assignment. */
       return *this;

@q ****** (6)@>

   right_ascension = c.right_ascension;
   declination = c.declination;

    return *this;

}  /* End of 
      |Star::operator=(const Star& m)| definition.  */

@q *** (3) Clear.@> 
@*2 Clear.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this function.
\ENDLOG

@q **** (4) Declaration.@> 

@<Declare |Star| functions@>=
int
clear(Scanner_Node scanner_node = 0);

@q **** (4) Definition.  @>

@
@<Define |Star| functions@>= 
int 
Star::clear(Scanner_Node scanner_node)
{
@q ***** (5) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ***** (5)@>

   right_ascension = 0;
   declination = 0;

   return 0;

}  /* End of |Star::clear| definition.  */

@q *** (3) Show.@> 
@*2 Show.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this function.
\ENDLOG

@q **** (4) Declaration.@> 

@<Declare |Star| functions@>=

void 
show(string text = "", Scanner_Node scanner_node = 0) const;

@q **** (4) Definition.@> 

@
@<Define |Star| functions@>=
void 
Star::show(string text, Scanner_Node scanner_node) const
{
@q ***** (5) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ***** (5)@>

    if (text == "")
       text = "Star:";

    cerr << text << endl
         << "right_ascension == " << right_ascension << endl 
         << "declination     == " << declination << endl 
         << endl;

@q ***** (5)@>

    return;

} /* End of |Star::show| definition.  */

@q * (1) Constellation class definition.@>
@* {\bf Constellation} class definition.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this |class| definition.
\ENDLOG

@q ** (2) Code.@> 

@<Declare |class Constellation|@>=

class Constellation
{

   protected:

   public:

      @<Declare |static| |class Constellation| data members@>@;

      @<Declare |Constellation| functions@>@;
};

@q ** (2) Static member variable declarations and initializations.@>
@*1 Static member variable declarations and initializations.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this section.
\ENDLOG

@<Declare |static| |class Constellation| data members@>=

@q *** (3) Code.@> 
@
@<Initialize |static| |class Constellation| data members@>=

@q ** (2) Global constants.@>
@*1 Global constants.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this section.
\ENDLOG

@<Global constants@>=

@q *** (3)@>
@
@<Declarations for the header file@>=

@q ** (2) |Constellation| functions.@> 
@*1 {\bf Constellation} functions.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this section.
\ENDLOG

@q *** (3) Constructors and Setting Functions.@>
@*2 Constructors and Setting Functions.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this section.
\ENDLOG

@q **** (4) Default Constructor.@> 
@*3 Default Constructor.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this function.
\ENDLOG

@q ***** (5) Declaration.@>

@<Declare |Constellation| functions@>=
Constellation(void);

@q ***** (5) Definition.  @>

@
@<Define |Constellation| functions@>= 
Constellation::Constellation(void)
{
   return;
}


@q **** (4) Setting function.@> 
@*2 Setting function.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this function.
\ENDLOG

@q **** (4) Declaration.@> 

@<Declare |Constellation| functions@>=
int
set(real real_part, real imaginary_part, Scanner_Node scanner_node = 0);

@q **** (4) Definition.  @>

@
@<Define |Constellation| functions@>= 
int
Constellation::set(real real_part, real imaginary_part, Scanner_Node scanner_node)
{

@q ***** (5) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ***** (5)@>

#if DEBUG_COMPILE
   if (DEBUG)
   {
       cerr_strm << thread_name << "Entering `Constellation::set'.";

       log_message(cerr_strm);
       cerr_message(cerr_strm);
       cerr_strm.str("");

   }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@; 

@q ***** (5)@>

   return 0;

@q ***** (5)@>

}  /* End of |Constellation::set| definition.  */

@q *** (3) Destructor.@> 
@*2 Destructor.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this function.
\ENDLOG

@q **** (4) Declaration.@> 

@<Declare |Constellation| functions@>=
virtual
~Constellation(void);

@q **** (4) Definition.  @>

@
@<Define |Constellation| functions@>= 
Constellation::~Constellation(void)
{

@q ***** (5) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   Scanner_Node scanner_node = 0;

#ifdef HAVE_PTHREAD_H

   Thread_Info_Type* thread_info = Thread_Info_Type::get_thread_info();

   if (thread_info != static_cast<Thread_Info_Type*>(0))
      scanner_node = thread_info->scanner_node;

#endif /* |HAVE_PTHREAD_H|  */@; 

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ***** (5)@>

}  /* End of |~Constellation| definition.  */

@q *** (3) Pseudo-constructor for dynamic allocation.@>
@*2 Pseudo-constructor for dynamic allocation.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this section.
\ENDLOG

@q **** (4) Pointer argument.@>
@*3 Pointer argument.@>
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this function declaration.
\ENDLOG

@<Declare non-member template functions for |Constellation|@>=

Constellation* 
create_new(const Constellation* p, Scanner_Node scanner_node = 0);

@q **** (4) Reference argument.@>
@*3 Referece argument.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this function declaration.
\ENDLOG

@<Declare non-member template functions for |Constellation|@>=
Constellation* 
create_new(const Constellation& p, Scanner_Node scanner_node = 0);

@q *** (3) Assignment.@> 
@*2 Assignment.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this section.
\ENDLOG

@q **** (4) Assignment from a |Constellation|.@> 
@*3 Assignment from a |Constellation|.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this function.
\ENDLOG

@q ***** (5) Declaration.@> 

@<Declare |Constellation| functions@>=
virtual
Constellation&
operator=(const Constellation& c);

@q ***** (5) Definition.@> 
@
@<Define |Constellation| functions@>=

Constellation&
Constellation::operator=(const Constellation& c)
{

@q ****** (6) Preliminaries.@>   

   volatile bool DEBUG = false; /* |true| */ @; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   Scanner_Node scanner_node = 0;

#ifdef HAVE_PTHREAD_H

   Thread_Info_Type* thread_info = Thread_Info_Type::get_thread_info();

   if (thread_info != static_cast<Thread_Info_Type*>(0))
      scanner_node = thread_info->scanner_node;

#endif /* |HAVE_PTHREAD_H|  */@; 

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ****** (6)@>

    if (this == &c) /* Make sure it's not self-assignment. */
       return *this;

@q ****** (6)@>

    return *this;

}  /* End of 
      |Constellation::operator=(const Constellation& m)| definition.  */

@q *** (3) Clear.@> 
@*2 Clear.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this function.
\ENDLOG

@q **** (4) Declaration.@> 

@<Declare |Constellation| functions@>=
int
clear(Scanner_Node scanner_node = 0);

@q **** (4) Definition.  @>

@
@<Define |Constellation| functions@>= 
int 
Constellation::clear(Scanner_Node scanner_node)
{
@q ***** (5) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ***** (5)@>

   return 0;

}  /* End of |Constellation::clear| definition.  */

@q *** (3) Show.@> 
@*2 Show.
\initials{LDF 2021.05.28.}

\LOG
\initials{LDF 2021.05.28.}
Added this function.
\ENDLOG

@q **** (4) Declaration.@> 

@<Declare |Constellation| functions@>=

void 
show(string text = "", Scanner_Node scanner_node = 0) const;

@q **** (4) Definition.@> 

@
@<Define |Constellation| functions@>=
void 
Constellation::show(string text, Scanner_Node scanner_node) const
{
@q ***** (5) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ***** (5)@>

    if (text == "")
       text = "Constellation:";

    cerr << text 
         << endl;

@q ***** (5)@>

    return;

} /* End of |Constellation::show| definition.  */

@q * (1) Planet class definition.@>
@* {\bf Planet} class definition.
\initials{LDF 2021.05.29.}

\LOG
\initials{LDF 2021.05.29.}
Added this |class| definition.
\ENDLOG

@q ** (2) Code.@> 

@<Declare |class Planet|@>=

class Planet
{

   protected:

   public:

      @<Declare |static| |class Planet| data members@>@;

      @<Declare |Planet| functions@>@;
};

@q ** (2) Static member variable declarations and initializations.@>
@*1 Static member variable declarations and initializations.
\initials{LDF 2021.05.29.}

\LOG
\initials{LDF 2021.05.29.}
Added this section.
\ENDLOG

@<Declare |static| |class Planet| data members@>=

@q *** (3) Code.@> 
@
@<Initialize |static| |class Planet| data members@>=

@q ** (2) Global constants.@>
@*1 Global constants.
\initials{LDF 2021.05.29.}

\LOG
\initials{LDF 2021.05.29.}
Added this section.
\ENDLOG

@<Global constants@>=

@q *** (3)@>
@
@<Declarations for the header file@>=

@q ** (2) |Planet| functions.@> 
@*1 {\bf Planet} functions.
\initials{LDF 2021.05.29.}

\LOG
\initials{LDF 2021.05.29.}
Added this section.
\ENDLOG

@q *** (3) Constructors and Setting Functions.@>
@*2 Constructors and Setting Functions.
\initials{LDF 2021.05.29.}

\LOG
\initials{LDF 2021.05.29.}
Added this section.
\ENDLOG

@q **** (4) Default Constructor.@> 
@*3 Default Constructor.
\initials{LDF 2021.05.29.}

\LOG
\initials{LDF 2021.05.29.}
Added this function.
\ENDLOG

@q ***** (5) Declaration.@>

@<Declare |Planet| functions@>=
Planet(void);

@q ***** (5) Definition.  @>

@
@<Define |Planet| functions@>= 
Planet::Planet(void)
{
   return;
}


@q **** (4) Setting function.@> 
@*2 Setting function.
\initials{LDF 2021.05.29.}

\LOG
\initials{LDF 2021.05.29.}
Added this function.
\ENDLOG

@q **** (4) Declaration.@> 

@<Declare |Planet| functions@>=
int
set(real real_part, real imaginary_part, Scanner_Node scanner_node = 0);

@q **** (4) Definition.  @>

@
@<Define |Planet| functions@>= 
int
Planet::set(real real_part, real imaginary_part, Scanner_Node scanner_node)
{

@q ***** (5) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ***** (5)@>

#if DEBUG_COMPILE
   if (DEBUG)
   {
       cerr_strm << thread_name << "Entering `Planet::set'.";

       log_message(cerr_strm);
       cerr_message(cerr_strm);
       cerr_strm.str("");

   }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@; 

@q ***** (5)@>

   return 0;

@q ***** (5)@>

}  /* End of |Planet::set| definition.  */

@q *** (3) Destructor.@> 
@*2 Destructor.
\initials{LDF 2021.05.29.}

\LOG
\initials{LDF 2021.05.29.}
Added this function.
\ENDLOG

@q **** (4) Declaration.@> 

@<Declare |Planet| functions@>=
virtual
~Planet(void);

@q **** (4) Definition.  @>

@
@<Define |Planet| functions@>= 
Planet::~Planet(void)
{

@q ***** (5) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   Scanner_Node scanner_node = 0;

#ifdef HAVE_PTHREAD_H

   Thread_Info_Type* thread_info = Thread_Info_Type::get_thread_info();

   if (thread_info != static_cast<Thread_Info_Type*>(0))
      scanner_node = thread_info->scanner_node;

#endif /* |HAVE_PTHREAD_H|  */@; 

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ***** (5)@>

}  /* End of |~Planet| definition.  */

@q *** (3) Pseudo-constructor for dynamic allocation.@>
@*2 Pseudo-constructor for dynamic allocation.
\initials{LDF 2021.05.29.}

\LOG
\initials{LDF 2021.05.29.}
Added this section.
\ENDLOG

@q **** (4) Pointer argument.@>
@*3 Pointer argument.@>
\initials{LDF 2021.05.29.}

\LOG
\initials{LDF 2021.05.29.}
Added this function declaration.
\ENDLOG

@<Declare non-member template functions for |Planet|@>=

Planet* 
create_new(const Planet* p, Scanner_Node scanner_node = 0);

@q **** (4) Reference argument.@>
@*3 Referece argument.
\initials{LDF 2021.05.29.}

\LOG
\initials{LDF 2021.05.29.}
Added this function declaration.
\ENDLOG

@<Declare non-member template functions for |Planet|@>=
Planet* 
create_new(const Planet& p, Scanner_Node scanner_node = 0);

@q *** (3) Assignment.@> 
@*2 Assignment.
\initials{LDF 2021.05.29.}

\LOG
\initials{LDF 2021.05.29.}
Added this section.
\ENDLOG

@q **** (4) Assignment from a |Planet|.@> 
@*3 Assignment from a |Planet|.
\initials{LDF 2021.05.29.}

\LOG
\initials{LDF 2021.05.29.}
Added this function.
\ENDLOG

@q ***** (5) Declaration.@> 

@<Declare |Planet| functions@>=
virtual
Planet&
operator=(const Planet& c);

@q ***** (5) Definition.@> 
@
@<Define |Planet| functions@>=

Planet&
Planet::operator=(const Planet& c)
{

@q ****** (6) Preliminaries.@>   

   volatile bool DEBUG = false; /* |true| */ @; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   Scanner_Node scanner_node = 0;

#ifdef HAVE_PTHREAD_H

   Thread_Info_Type* thread_info = Thread_Info_Type::get_thread_info();

   if (thread_info != static_cast<Thread_Info_Type*>(0))
      scanner_node = thread_info->scanner_node;

#endif /* |HAVE_PTHREAD_H|  */@; 

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ****** (6)@>

    if (this == &c) /* Make sure it's not self-assignment. */
       return *this;

@q ****** (6)@>

    return *this;

}  /* End of 
      |Planet::operator=(const Planet& m)| definition.  */

@q *** (3) Clear.@> 
@*2 Clear.
\initials{LDF 2021.05.29.}

\LOG
\initials{LDF 2021.05.29.}
Added this function.
\ENDLOG

@q **** (4) Declaration.@> 

@<Declare |Planet| functions@>=
int
clear(Scanner_Node scanner_node = 0);

@q **** (4) Definition.  @>

@
@<Define |Planet| functions@>= 
int 
Planet::clear(Scanner_Node scanner_node)
{
@q ***** (5) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ***** (5)@>

   return 0;

}  /* End of |Planet::clear| definition.  */

@q *** (3) Show.@> 
@*2 Show.
\initials{LDF 2021.05.29.}

\LOG
\initials{LDF 2021.05.29.}
Added this function.
\ENDLOG

@q **** (4) Declaration.@> 

@<Declare |Planet| functions@>=

void 
show(string text = "", Scanner_Node scanner_node = 0) const;

@q **** (4) Definition.@> 

@
@<Define |Planet| functions@>=
void 
Planet::show(string text, Scanner_Node scanner_node) const
{
@q ***** (5) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ***** (5)@>

    if (text == "")
       text = "Planet:";

    cerr << text 
         << endl;

@q ***** (5)@>

    return;

} /* End of |Planet::show| definition.  */





@q * (1) Putting Astronomy together.@>
@* Putting {\bf Astronomy} together.

\immediate\write\functexifile{^^JEnd of file:  astronmy.web^^J}

@q ** (2) This is what's compiled.@> 

This is what's compiled.

@c
@<Include files@>@;
@<Declare |class Star|@>@;
@<Initialize |static| |class Star| data members@>@;
@<Declare non-member template functions for |Star|@>@;
@<Define |Star| functions@>@;
@<Declare |class Constellation|@>@;
@<Initialize |static| |class Constellation| data members@>@;
@<Declare non-member template functions for |Constellation|@>@;
@<Define |Constellation| functions@>@;
@<Global constants@>@;

@q ** (2) This is what's written to "astronmy.h".@> 

@ This is what's written to \filename{astronmy.h}.

@(astronmy.h@>=
#ifndef LDF_ASTRONMY_KNOWN
#define LDF_ASTRONMY_KNOWN 1
@<Declare |class Star|@>@;
@<Declare |class Constellation|@>@;
@<Declare |class Planet|@>@;
@<Declare non-member template functions for |Star|@>@;
@<Declare non-member template functions for |Constellation|@>@;
@<Declare non-member template functions for |Planet|@>@;
@<Declarations for the header file@>@;
#endif

@q * Emacs-Lisp code for use in indirect buffers when using the          @>
@q   GNU Emacs editor.  The local variable list is not evaluated when an @>
@q   indirect buffer is visited, so it's necessary to evaluate the       @>
@q   following s-expression in order to use the facilities normally      @>
@q   accessed via the local variables list.                              @>
@q   \initials{LDF 2004.02.12}.                                          @>
@q   (progn (cweb-mode) (outline-minor-mode t) (setq fill-column 80))    @>

@q * Local variables for Emacs.@>
@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q End: @>
