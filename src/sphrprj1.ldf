%%%% sphrmd03.ldf
%%%% Created by Laurence D. Finston (LDF) Fri Jul 16 18:24:36 CEST 2010

%%%% $Id: sphrmd03.ldf,v 1.51 2021/04/14 23:01:38 lfinsto1 Exp $

%% * (1) Copyright and License.

%%%% This file is part of GNU 3DLDF, a package for three-dimensional drawing.  
%%%% Copyright (C) 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021 The Free Software Foundation, Inc.  

%%%% GNU 3DLDF is free software; you can redistribute it and/or modify 
%%%% it under the terms of the GNU General Public License as published by 
%%%% the Free Software Foundation; either version 3 of the License, or 
%%%% (at your option) any later version.  

%%%% GNU 3DLDF is distributed in the hope that it will be useful, 
%%%% but WITHOUT ANY WARRANTY; without even the implied warranty of 
%%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
%%%% GNU General Public License for more details.  

%%%% You should have received a copy of the GNU General Public License 
%%%% along with GNU 3DLDF; if not, write to the Free Software 
%%%% Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA 

%%%% GNU 3DLDF is a GNU package.  
%%%% It is part of the GNU Project of the  
%%%% Free Software Foundation 
%%%% and is published under the GNU General Public License. 
%%%% See the website http://www.gnu.org 
%%%% for more information.   
%%%% GNU 3DLDF is available for downloading from 
%%%% http://www.gnu.org/software/3dldf/LDF.html.

%%%% Please send bug reports to Laurence.Finston@gmx.de
%%%% The mailing list help-3dldf@gnu.org is available for people to 
%%%% ask other users for help.  
%%%% The mailing list info-3dldf@gnu.org is for sending 
%%%% announcements to users. To subscribe to these mailing lists, send an 
%%%% email with ``subscribe <email-address>'' as the subject.  

%%%% The author can be contacted at: 

%%%% Laurence D. Finston 
%%%% c/o Free Software Foundation, Inc. 
%%%% 51 Franklin St, Fifth Floor 
%%%% Boston, MA  02110-1301  
%%%% USA

%%%% Laurence.Finston@gmx.de
 


%% Created:  July 16, 2010
%% Last updated:  August 18, 2010

%% Run like this:

%% 3dldf sphrmd03.ldf 
%% mpost sphrmd03.mp 
%% tex sphrmd03.txt 
%% dvips -o sphrmd03.ps sphrmd03.dvi
%% ps2pdf sphrmd03.ps

%% All on one line:
if false:
3dldf sphrmd03.ldf && mpost sphrmd03.mp && tex sphrmd03.txt && \
dvips -o sphrmd03.ps sphrmd03.dvi \
&& ps2pdf sphrmd03.ps
fi;

%% View the PostScript file using Ghostview like this:
%% gv sphrmd03.ps &
%% or with GNU Ghostview like this:
%% ggv sphrmd03.ps &

%% View the PDF file with Acrobat Reader like this:
%% acroread sphrmd03.pdf &

%% * (1) Beginning of 3DLDF code.

%% ** (2) Plans for a paper or cardboard model of a sphere (Sphere Model 3)

verbatim_metapost "verbatimtex \font\large=cmr12 etex;";
verbatim_metapost "verbatimtex \font\small=cmr7 etex;";

verbatim_metapost "prologues := 3;";

%% *** (3) Declarations

macro draw_sphere_projection;

def draw_sphere_projection {numeric rradius} =

  point p[];

  transform t[];

  picture v[];

  pen dashed_pen;
  pen border_pen;
  pen large_pen;

  large_pen := pencircle scaled (.75mm, .75mm, .75mm);
  
  string s;

  ang_0 := 15;  %% Arcs of (2 * ang_0 == 30) degrees are used to find the points
                %% on the sphere that represent the corners of the trapezoids
                %% into which the surface of the sphere is divided.
                %% LDF 2010.08.06.

  focus f[];

  boolean do_thick_pens;

  set f0 with_position  (3, 10, -20) 
    with_direction (3, 10, 10) with_distance 20; 


%% *** (3) Set boolean values

%% These can be used for testing.  LDF 2010.08.04.

  do_thick_pens  	   := false; % true % true for testing

  if do_thick_pens:
    %message "Using thick pens";
    dashed_pen := pencircle scaled (.75mm, .75mm, .75mm);
    border_pen := pencircle scaled (.75mm, .75mm, .75mm);
  else:
    %message "Not using thick pens";
    dashed_pen := pencircle scaled (.5mm, .5mm, .5mm);
    border_pen := pencircle scaled (.5mm, .5mm, .5mm);
  fi;

% message "dashed_pen:"; 
% show dashed_pen;

% message "border_pen:"; 
% show border_pen;

%% **** (4)

  pickup pencircle scaled (.25mm, .25mm, .25mm);

%% **** (4)

  p0 := origin;
  p1 := (0, 1, 0);

  p2 := (rradius, 0);

  p3 := p2 rotated (0, 0,  ang_0);
  p4 := p2 rotated (0, 0, -ang_0);

  rotate p3 (0, ang_0);
  rotate p4 (0, ang_0);

  p5 := p2 rotated (0, 0, ang_0);
  p6 := p2 rotated (0, 0, -ang_0);

  rotate p5 (0, -ang_0);
  rotate p6 (0, -ang_0);

% message "p2:";
% show p2;

% message "p3:";
% show p3;

% message "p4:";
% show p4;

% message "p5:";
% show p5;

% message "p6:";
% show p6;

% draw p0 -- p2;
% draw p0 -- p3;
% draw p0 -- p4;
% draw p0 -- p5;
% draw p0 -- p6;


 % dotlabel.top("$p_{0}$", p0);
 % dotlabel.rt("$p_{2}$", p2);
 % dotlabel.rt("$p_{3}$", p3);

  draw p5 -- p3 -- p2 -- cycle with_color red;    % ; % 
  draw p5 -- p2 -- p6 -- cycle with_color blue;	  % ; % 
  draw p6 -- p4 -- p2 -- cycle with_color green;  % ; % 
  draw p4 -- p3 -- p2 -- cycle with_color cyan;	  % ; % 

%% **** (4)

  p7 := p2 rotated (0, 0,  3ang_0);
  rotate p7 (0, ang_0);

  p8  := p2 rotated (0, 0, 3ang_0);

  rotate p8 (0, -ang_0);

  p9 := p2 rotated (0, 0, 2ang_0);

% message "magnitude (p9 - p7):"; 
% show magnitude (p9 - p7);

% message "magnitude (p9 - p8):"; 
% show magnitude (p9 - p8);

% message "p7:";
% show p7;

% message "p8:";
% show p8;

% message "p9:";
% show p9;

  draw p8 -- p9 -- p7 -- cycle with_color red;    % ; %   
  draw p8 -- p9 -- p5 -- cycle with_color blue;	  % ; % 
  draw p5 -- p9 -- p3 -- cycle with_color green;  % ; % 
  draw p3 -- p9 -- p7 -- cycle with_color cyan;	  % ; %

%% **** (4)

  p10 := p2 rotated (0, 0,  -3ang_0);
  rotate p10 (0, ang_0);

  p11  := p2 rotated (0, 0, -3ang_0);

  rotate p11 (0, -ang_0);

  p12 := p2 rotated (0, 0, -2ang_0);

% message "magnitude (p12 - p10):"; 
% show magnitude (p12 - p10);

% message "magnitude (p12 - p11):"; 
% show magnitude (p12 - p11);

% message "p10:";
% show p10;

% message "p11:";
% show p11;

% message "p12:";
% show p12;

  draw p6 -- p12 -- p11  -- cycle with_color red;    % with_color red    % ; %
  draw p11 -- p12 -- p10 -- cycle with_color blue;   % with_color blue   % ; %
  draw p10 -- p12 -- p4  -- cycle with_color green;  % with_color green  % ; %
  draw p4 -- p12 -- p6   -- cycle with_color cyan;   % with_color cyan   % ; %


% %% **** (4)

  p13 := p2 rotated (0, 0,  5ang_0);
  rotate p13 (0, ang_0);

  p14  := p2 rotated (0, 0, 5ang_0);
  rotate p14 (0, -ang_0);

  p15 := p2 rotated (0, 0, 4ang_0);

% message "magnitude (p15 - p13):"; 
% show magnitude (p15 - p13);

% message "magnitude (p15 - p14):"; 
% show magnitude (p15 - p14);

% message "p13:";
% show p13;

% message "p14:";
% show p14;

% message "p15:";
% show p15;

  draw p14 -- p15 -- p8 -- cycle  with_color red;     % ; % with_color red;    
  draw p8 -- p15 -- p7 -- cycle   with_color blue;    % ; % with_color blue; 
  draw p7 -- p15 -- p13 -- cycle  with_color green;   % ; % with_color green;
  draw p13 -- p15 -- p14 -- cycle with_color cyan;    % ; % with_color cyan; 

% %% **** (4)

  p16 := p2 rotated (0, 0,  -5ang_0);
  rotate p16 (0, ang_0);

  p17  := p2 rotated (0, 0, -5ang_0);
  rotate p17 (0, -ang_0);

  p18 := p2 rotated (0, 0, -4ang_0);

% message "magnitude (p18 - p16):"; 
% show magnitude (p18 - p16);

% message "magnitude (p18 - p17):"; 
% show magnitude (p18 - p17);

% message "p16:";
% show p16;

% message "p17:";
% show p17;

% message "p18:";
% show p18;

  draw p17 -- p18 -- p11 -- cycle; % with_color red;
  draw p10 -- p18 -- p11 -- cycle; % with_color blue;
  draw p10 -- p18 -- p16 -- cycle; % with_color green;;
  draw p16 -- p18 -- p17 -- cycle; % with_color cyan;

% %% **** (4)

  p19 := (0, rradius);
  p20 := (0, -rradius);

  draw p14 -- p19 -- p13;
  draw p16 -- p20 -- p17;

%% **** (4)

  v1 := current_picture;
  clear current_picture;

  v2 := v1;
  v0 := v1;

  for i = 1 upto 11:
    rotate v2 (0, 2ang_0);
    v0 += v2;
  endfor;

  %fill p16 -- p20 -- p17 -- cycle with_color blue;
  
%% **** (4) Tick marks and gray lines
  
  point q[];
  
  q0 := (-(radius+1), 0, radius+1);
  q1 := (0, 0, (radius+1));
  q2 := (radius+1, 0, radius+1);
  q3 := (-(radius+1), 0);
  q4 := (radius+1, 0);
  q5 := (-(radius+1), 0, -(radius+1));
  q6 := (0, 0, -(radius+1));
  draw q3 -- q4 dashed evenly with_color dark_gray with_pen pencircle scaled (.5mm, .5mm, .5mm);
  draw q1 -- q6 dashed evenly with_color dark_gray with_pen pencircle scaled (.5mm, .5mm, .5mm);

%% **** (4)
  
  current_picture += v0;

  drawdot origin with_color white with_pen pencircle scaled (.25cm, .25cm, .25cm);
  drawdot origin with_color black with_pen pencircle scaled (1mm, 1mm, 1mm);

  draw q0 -- (q0 shifted (-.5cm, 0));
  draw q0 -- (q0 shifted (.5cm, 0));
  draw q0 -- (q0 shifted (0, 0, .5cm));
  draw q0 -- (q0 shifted (0, 0, -.5cm));

  draw q1 -- (q1 shifted (-.5cm, 0));
  draw q1 -- (q1 shifted (.5cm, 0));
  draw q1 -- (q1 shifted (0, 0, .5cm));
  draw q1 -- (q1 shifted (0, 0, -.5cm));

  label.top("{\large Radius of Sphere:  " & decimal radius & "cm}", q1 shifted (0, 0, 1cm));
  
  draw q2 -- (q2 shifted (-.5cm, 0));
  draw q2 -- (q2 shifted (.5cm, 0));
  draw q2 -- (q2 shifted (0, 0, .5cm));
  draw q2 -- (q2 shifted (0, 0, -.5cm));


  draw q3 -- (q3 shifted (-.5cm, 0));
  draw q3 -- (q3 shifted (.5cm, 0));
  draw q3 -- (q3 shifted (0, 0, .5cm));
  draw q3 -- (q3 shifted (0, 0, -.5cm));


  draw q4 -- (q4 shifted (-.5cm, 0));
  draw q4 -- (q4 shifted (.5cm, 0));
  draw q4 -- (q4 shifted (0, 0, .5cm));
  draw q4 -- (q4 shifted (0, 0, -.5cm));

  draw q5 -- (q5 shifted (-.5cm, 0));
  draw q5 -- (q5 shifted (.5cm, 0));
  draw q5 -- (q5 shifted (0, 0, .5cm));
  draw q5 -- (q5 shifted (0, 0, -.5cm));

  draw q6 -- (q6 shifted (-.5cm, 0));
  draw q6 -- (q6 shifted (.5cm, 0));
  draw q6 -- (q6 shifted (0, 0, .5cm));
  draw q6 -- (q6 shifted (0, 0, -.5cm));

  q7 := (radius+1, 0, -(radius+1));
  draw q7 -- (q7 shifted (-.5cm, 0));
  draw q7 -- (q7 shifted (.5cm, 0));
  draw q7 -- (q7 shifted (0, 0, .5cm));
  draw q7 -- (q7 shifted (0, 0, -.5cm));

  
%% **** (4)

enddef;


%% *** (3) Figure 1--9, 5cm--13cm radius

numeric radius;

for i = 1 upto 14:
  beginfig(i);
    radius := 3 + i;
    draw_sphere_projection {radius};
  endfig with_projection parallel_x_z no_sort;
endfor;


%% *** (3) End of 3DLDF code

verbatim_metapost "end;";

end;



%% ** (2) 

%% * (1) Emacs-Lisp code for use in indirect buffers when using the          
%%       GNU Emacs editor.  The local variable list is not evaluated when an 
%%       indirect buffer is visited, so it's necessary to evaluate the       
%%       following s-expression in order to use the facilities normally      
%%       accessed via the local variables list.                              
%%       LDF 2004.02.12.

%% (progn (metafont-mode) (outline-minor-mode t) (setq fill-column 80) (ignore '(  
%% )) (setq outline-regexp "%% [*\f]+"))

%% * (1) Local variables for Emacs.

%% Local Variables:
%% mode:Metafont
%% eval:(outline-minor-mode t)
%% eval:(read-abbrev-file abbrev-file-name)
%% outline-regexp:"%% [*\f]+"
%% End:

