@q solfaced.web @>
 
@q * (1) Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing.  @>
@q Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, @>
@q 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022 The Free Software Foundation, Inc.  @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version.  @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details.  @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA@>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html.@>

@q ("@@" stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de@>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston                 @> 
@q c/o Free Software Foundation, Inc.  @>
@q 51 Franklin St, Fifth Floor         @> 
@q Boston, MA  02110-1301              @>
@q USA                                 @>

@q Laurence.Finston@@gmx.de (@@ stands for a single "at" sign.)@>

@q * (0) Solid_Faced.@>
@** Solid\_Faced\quad ({\tt solfaced\PERIOD web}).\hfil
\initials{LDF 2002.09.26.}  

\LOG
\initials{LDF 2002.09.26.}  
Created this file.

\initials{LDF 2003.11.12.}  
Removed the version control identifiers from the CWEB
files for the distribution of 3DLDF 1.1.  They're still used in my
development versions.

\initials{LDF 2003.12.10.}  
Put the version control identifiers back
into my release versions for 3DLDF 1.1.4.  I've already put some of
them back in, now I'm doing the rest of them.  However, the release
versions are now in their own RCS repository.
\ENDLOG 

@q * (0) Include files.@>
@ Include files.

\LOG
\initials{LDF 2004.05.09.}  
Now including \filename{creatnew.h}.

\initials{LDF 2004.05.21.}  
Now including \filename{pens.web}.
\ENDLOG 

@<Include files@>=

#include "loader.h++"
#include "pspglb.h++"
#include "io.h++"
#include "creatnew.h++"
#include "pntrvctr.h++"
#include "primes.h++"
#include "complex.h++"
#include "matrices.h++"
#include "colors.h++"
#include "transfor.h++"
#include "pens.h++"
#include "dashptrn.h++"
#include "shapes.h++"  
#include "pictures.h++"  
#include "points.h++"
#include "lines.h++"
#include "planes.h++"
#include "nurbs.h++"
#include "paths.h++"
#include "curves.h++"
#include "polygons.h++"
#include "triangle.h++"
#include "rectangs.h++"
#include "conicsct.h++"
#include "ellipses.h++"
#include "sprellps.h++"
#include "circles.h++"
#include "ellpsslc.h++"
#include "crclslc.h++"
#include "parabola.h++"
#include "hyprbola.h++"
#include "cncsctlt.h++"
#include "arc.h++"
#include "helices.h++"
#include "origami.h++"
#include "solids.h++"

@q * (1) Solid_Faced class definition.@>
@* {\bf Solid\_Faced} class definition.
@<Define |class Solid_Faced|@>=
class Solid_Faced : public Solid
{
 protected:
  unsigned short faces;
  unsigned short vertices;
  unsigned short edges;
 public:
  @<Declare |Solid_Faced| functions@>@;
};
    
@q * (1) Is |Solid_Faced|.@> 
@* Is {\bf Solid\_Faced}.
\initials{LDF 2005.03.31.}

\LOG
\initials{LDF 2005.03.31.}
Added this function.

\initials{LDF 2005.04.04.}
Made this function |const|
\ENDLOG

@<Declare |Solid_Faced| functions@>=
virtual
inline
bool
is_solid_faced(void) const 
{
   return true;
}

@q * (1) Reflection in a |Plane|.@> 
@* Reflection in a |Plane|.
\initials{LDF 2004.10.05.}
@^\cfunc{Solid\_Faced}{reflect\_in}@>

Please note that this function tries to allocate memory on the free 
store for the |Solid_Faced| pointed to by the pointer to |Shape| which is 
its return value.  Therefore, programmers who use this function must 
ensure that this memory is freed.
\initials{LDF 2004.10.05.}

If allocation fails, this function throws a |bad_alloc| exception.  
If the reflection of |*this| cannot be found in the |Plane|, 
this function returns 0.
\initials{LDF 2004.10.05.}

\LOG
\initials{LDF 2004.10.05.}
Added this function.

\initials{LDF 2004.10.12.}
Rewrote this function.  Following a system update, having |Shape*| 
as the return value no longer worked.
\ENDLOG

@q ** (2) Declaration.@> 

@<Declare |Solid_Faced| functions@>=
virtual
int
reflect_in(const Plane& p, 
           void* v,
           const Scanner_Node scanner_node = 0) const;

@q ** (2) Definition.@>

@
@<Define |Solid_Faced| functions@>=
int
Solid_Faced::reflect_in(const Plane& p, 
                        void* v,
                        const Scanner_Node scanner_node) const
{

@q *** (3) Preliminaries.@> 

  bool DEBUG = false; /* |true| */

  using namespace Scan_Parse;

  stringstream cerr_strm;

  bool error_stop_value   = true;
  bool warning_stop_value = true;
  string thread_name      = "";

  if (scanner_node)
     scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                   &error_stop_value,
                                                   &warning_stop_value);

@q *** (3).@> 

  Solid_Faced* solid_faced_reflection = static_cast<Solid_Faced*>(v);

@q *** (3) If |solid_faced_reflection == 0|, try to allocate memory @>
@q *** (3) on the free store for it.                           @> 

@ If |solid_faced_reflection == 0|, try to allocate memory 
on the free store for it.                            
\initials{LDF 2004.10.12.}

@<Define |Solid_Faced| functions@>=

  if (solid_faced_reflection == static_cast<Solid_Faced*>(0))
    {
       try
         {
           solid_faced_reflection = create_new<Solid_Faced>(0, scanner_node);
         }

@q **** (4) Error handling:  |new Solid_Faced| failed.  Rethrow |bad_alloc|.@> 

@ Error handling:  |new Solid_Faced| failed.  Rethrow |bad_alloc|.
\initials{LDF 2004.10.05.}

@<Define |Solid_Faced| functions@>=

  catch (bad_alloc)
     {

       cerr_strm << thread_name << "ERROR! In `Point::reflect_in()':" 
                 << endl
                 << "`create_new<Solid_Faced>()' failed. "
                 << "Rethrowing `bad_alloc'.";

       log_message(cerr_strm);
       cerr_message(cerr_strm, error_stop_value);
       cerr_strm.str("");

       throw;

} /* |catch (bad_alloc)|  */

@q *** (3).@>

   } /* |if (solid_faced_reflection == 0)|  */

@q *** (3) Call |Solid::reflect_in|.@> 

@ Call |Solid::reflect_in|.
\initials{LDF 2004.10.12.}

@<Define |Solid_Faced| functions@>=

  Solid solid_reflection;

  int status;

  try
     {
       status = Solid::reflect_in(p,
                          static_cast<void*>(&solid_reflection),
                          scanner_node); 
     }

@q **** (4) Error handling:  |Solid::reflect_in| threw |bad_alloc|.@> 

@ Error handling:  |Solid::reflect_in| threw |bad_alloc|.
\initials{LDF 2004.10.05.}

@<Define |Solid_Faced| functions@>=

  catch (bad_alloc)
     {
       cerr_strm << thread_name << "ERROR! In `Solid_Faced::reflect_in():'"
                 << endl 
                 << "`Solid::reflect_in()' failed to allocate new `Solid'."
                 << endl << "Deleting `solid_faced_reflection' and "
                 << "rethrowing `bad_alloc'.";

       log_message(cerr_strm);
       cerr_message(cerr_strm, error_stop_value);
       cerr_strm.str("");

       delete solid_faced_reflection;

       throw;

     } /* |catch (bad_alloc)|  */

@q **** (4) Error handling:  |Solid::reflect_in| returned 1.@> 

@ Error handling:  |Solid::reflect_in| returned 1.
\initials{LDF 2004.10.12.}

@<Define |Solid_Faced| functions@>=

  if (status == 1)
    {

      cerr_strm << thread_name << "ERROR! In `Solid_Faced::reflect_in():'"
                << endl 
                << "`Solid::reflect_in()' failed and returned 1."
                << endl << "Deleting `solid_faced_reflection' "
                << "and exiting function with return value 1.";

      log_message(cerr_strm);
      cerr_message(cerr_strm, error_stop_value);
      cerr_strm.str("");
  
      delete solid_faced_reflection;

      return 1;

}  /* |if (status == 1)|  */

@q **** (4) |Solid::reflect_in| succeeded.@> 

@ |Solid::reflect_in| succeeded.
\initials{LDF 2004.10.05.}

@<Define |Solid_Faced| functions@>=

#if DEBUG_COMPILE
   if (DEBUG)
     {
        cerr_strm << thread_name << "In `Solid_Faced::reflect_in()':"
                  << endl << "`Solid::reflect_in()' succeeded.";

        log_message(cerr_strm);
        cerr_message(cerr_strm);
        cerr_strm.str("");

     }
#endif /* |DEBUG_COMPILE|  */ 

   solid_faced_reflection->Solid::operator=(solid_reflection);

@q *** (3) Set other data members of |*solid_faced_reflection|.@> 

@ Set other data members of |*solid_faced_reflection|.
\initials{LDF 2004.10.05.}

@<Define |Solid_Faced| functions@>=

  solid_faced_reflection->faces    = faces;
  solid_faced_reflection->vertices = vertices;
  solid_faced_reflection->edges    = edges;

@q *** (3) Exit function successfully with   @> 
@q *** (3) return value |solid_faced_reflection|.@> 

@ Exit function successfully with return value 0.
\initials{LDF 2004.10.05.}

@<Define |Solid_Faced| functions@>= 

#if DEBUG_COMPILE
   if (DEBUG)
     {
        cerr_strm << thread_name << "In `Solid_Faced::reflect_in()':"
                  << endl << "Exiting function successfully with "
                  << "return value 0.";

        log_message(cerr_strm);
        cerr_message(cerr_strm);
        cerr_strm.str("");

     }
#endif /* |DEBUG_COMPILE|  */ 

  return 0;

} /* End of |Solid_Faced::reflect_in| definition.  */

@q * Putting Solid_Faced together.@>
@ Putting {\bf Solid\_Faced} together.

@ This is what's compiled.
@c
@<Include files@>@;
@<Define |class Solid_Faced|@>@;
@<Define |Solid_Faced| functions@>@;

@ This is what's written to \filename{solfaced.h}. 
@(solfaced.h@>=
@<Define |class Solid_Faced|@>@;

@q * Emacs-Lisp code for use in indirect buffers when using the          @>
@q   GNU Emacs editor.  The local variable list is not evaluated when an @>
@q   indirect buffer is visited, so it's necessary to evaluate the       @>
@q   following s-expression in order to use the facilities normally      @>
@q   accessed via the local variables list.                              @>
@q   \initials{LDF 2004.02.12}.                                          @>
@q   (progn (cweb-mode) (outline-minor-mode t) (setq fill-column 70))    @>

@q * Local variables for Emacs.@>
@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q run-gxx-on-file:"main.c" @>
@q run-cweb-on-file:"main.web" @>
@q run-cweave-on-file:"3DLDF.web" @>
@q run-mp-on-file:"persp.mp" @>
@q makefile:"makefile" @>
@q executable-name:"pp" @>
@q use-g++:t @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q End: @>
