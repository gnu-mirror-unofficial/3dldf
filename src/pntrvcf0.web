@q pntrvcf0.web  @>

@q * Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing. @>
@q Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, @>
@q 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022 The Free Software Foundation, Inc.  @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version. @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details. @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html. @>

@q (``@@'' stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de @>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston                 @> 
@q c/o Free Software Foundation, Inc.  @>
@q 51 Franklin St, Fifth Floor         @> 
@q Boston, MA  02110-1301              @>
@q USA                                 @>

@q Laurence.Finston@@gmx.de (@@ stands for a single ``at'' sign.)@>

@q * (0) Additional |struct Pointer_Vector| Functions.@>
@** Additional {\bf struct Pointer\_Vector} functions 
\quad ({\tt pntrvcf0\PERIOD web}).\hfil

\LOG
\initials{LDF 2007.07.27.}
Created this file.  It contains code for |struct Pointer_Vector| functions
that require completely defined types which are unavailable in 
\filename{pntrvctr.web}.
\ENDLOG

\immediate\write\functexifile{File:  pntrvcf0.web^^J}

@q * (1) Include files.@>
@* Include files.

@<Include files@>=
#include "loader.h++"

#ifdef __GNUC__
#include <getopt.h> 
#endif 

#include "pspglb.h++"
#include "io.h++"
#include "gsltmplt.h++"
#include "creatnew.h++"
#include "pntrvctr.h++"
#include "primes.h++"
#include "complex.h++"
#include "matrices.h++"
#include "colors.h++"
#include "transfor.h++"
#include "pens.h++"
#include "dashptrn.h++"
#include "shapes.h++" 
#include "pictures.h++"
#include "points.h++"
#include "lines.h++"
#include "planes.h++"
#include "nurbs.h++"
#include "paths.h++"
#include "curves.h++"
#include "polygons.h++"
#include "triangle.h++"
#include "rectangs.h++"
#include "conicsct.h++"
#include "ellipses.h++"
#include "circles.h++"
#include "ellpsslc.h++"
#include "crclslc.h++"
#include "parabola.h++"
#include "hyprbola.h++"
#include "cncsctlt.h++"
#include "arc.h++"
#include "helices.h++"
#include "origami.h++"
#include "astronmy.h++"

#if 0
   #include "patterns.h++"
#endif 

#include "solids.h++"
#include "solfaced.h++"
#include "cuboid.h++"
#include "polyhed.h++"
#include "ddchdrn.h++"
#include "rhtchdrn.h++"
#include "plyhdslc.h++"
#include "cones.h++"
#include "cylinder.h++" 
#include "ellpsoid.h++"
#include "spheres.h++" 
#include "sphrdevl.h++"
#include "parabold.h++"
#include "paraellp.h++"
#include "parahypr.h++" 
#include "glyphs.h++"
#include "pctfncs0.h++"
#include "utility.h++"

@q * (1) Rectify.@>
@* Rectify.
\initials{LDF 2007.07.27.}

\LOG
\initials{LDF 2007.07.27.}
Added this function.

\initials{LDF 2007.07.29.}
Finished writing this function.  It seems to work correctly now.

\initials{LDF 2007.08.06.}
Added optional |Transform* transform| argument.  The default is 0.

\initials{LDF 2007.08.06.}
Added optional |bool do_transform| argument.  The default is |true|.
\ENDLOG

@q ** (2) Definition.@> 
@
@<Define |Pointer_Vector| specializations@>=
template<>
int
Pointer_Vector<Point, Point>::rectify(Scanner_Node scanner_node,
                              bool do_test,       
                              bool do_cull,
                              bool do_transform,
                              real tolerance,  
                              Transform* transform,
                              Point* p)                 
{
 
@q *** (3) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q *** (3)@> 

#if DEBUG_COMPILE
   if (DEBUG)
   {
       cerr_strm << thread_name 
                 << "Entering `Pointer_Vector::rectify'.";

       log_message(cerr_strm);
       cerr_message(cerr_strm);
       cerr_strm.str("");

   }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@; 

@q *** (3)@> 

    int status;

    if (do_cull)
    {

@q **** (4)@> 

#if DEBUG_COMPILE
        if (DEBUG)
        {
           cerr_strm << thread_name << "In `Pointer_Vector::rectify':"
                     << endl 
                     << "`do_cull' is `true'.  Calling `Pointer_Vector::cull'.";
           log_message(cerr_strm);
           cerr_message(cerr_strm);
           cerr_strm.str("");

        }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@; 

@q **** (4)@> 

       status = cull(Sorting::SORTING_EQUAL,
                     tolerance,
                     scanner_node,
                     p);    

@q **** (4)@> 

#if DEBUG_COMPILE
        if (DEBUG)
        {
           cerr_strm << thread_name << "In `Pointer_Vector::rectify':"
                     << endl 
                     << "`Pointer_Vector::cull' returned " << status 
                     << ".";
           log_message(cerr_strm);
           cerr_message(cerr_strm);
           cerr_strm.str("");

        }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@; 

@q **** (4)@> 

    }  /* |if (do_cull)|  */

@q *** (3)@> 

    else /* |!do_cull|  */
    {

@q **** (4)@> 

#if DEBUG_COMPILE
        if (DEBUG)
        {
           cerr_strm << thread_name << "In `Pointer_Vector::rectify':"
                     << endl 
                     << "`do_cull' == `false'.  Not calling `Pointer_Vector::cull'.";
           log_message(cerr_strm);
           cerr_message(cerr_strm);
           cerr_strm.str("");

        }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@; 

@q **** (4)@> 

    }  /* |else| (|!do_cull|)  */

@q *** (3) Error handling:  Fewer than three |Points| on the |vector|.@>
@ Error handling:  Fewer than three |Points| on the |vector|.
\initials{LDF 2007.07.27.}

@<Define |Pointer_Vector| specializations@>=

   if (ctr < 3)
   {
       cerr_strm << thread_name << "ERROR!  In `Pointer_Vector::rectify':"
                 << endl 
                 << "`ctr' < 3.  Cannot determine a plane for rectification."
                 << endl 
                 << "Exiting function unsuccessfully with return value 1.";
      
       log_message(cerr_strm);
       cerr_message(cerr_strm, error_stop_value);
       cerr_strm.str("");

       return 1;

   }  /* |if (ctr < 3)|  */

@q *** (3)@> 
@
@<Define |Pointer_Vector| specializations@>=

Path q;
   q += *(v[0]);
   q += *(v[1]);
   q += *(v[2]);

   Plane w = q.get_plane();

@q *** (3)@> 
@
@<Define |Pointer_Vector| specializations@>=

    if (do_test)
    {

        for (int i = 3; i < ctr; ++i)
        {
             if (!(*v[i]).is_on_plane(w, tolerance))
             {
                 cerr_strm << thread_name << "WARNING!  "
                           << "In `Pointer_Vector<Point, Point>::rectify':"
                           << endl 
                           << "`Points' are not all coplanar.  Can't rectify "
                           << "`Point_Vector<Point>'."
                           << endl 
                           << "Exiting function unsuccessfully with return value 1.";

                 log_message(cerr_strm);
                 cerr_message(cerr_strm, warning_stop_value);
                 cerr_strm.str("");

                 return 1;

             }  /* |if|  */

         }  /* |for|  */

    }  /* |if (do_test)|  */

@q *** (3)@> 
@
@<Define |Pointer_Vector| specializations@>=

   Point normal = q.get_normal();

   normal.shift(*(v[0]));

#if DEBUG_COMPILE
   if (DEBUG)
   {
      cerr_mutex.lock(); 
      q.show("q:");
      normal.show("normal:");
      cerr_mutex.unlock();  
   
   }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@; 

   Transform t;
   t.align_with_axis(*(v[0]), normal, 'y');

   for (vector<Point*>::iterator iter = v.begin();
        iter != v.end();
        ++iter)
   {
      **iter *= t;
   }

@q *** (3)@> 
@
\LOG
\initials{LDF 2007.08.19.}
Added error handling code for the case that |i <= 1|.
\ENDLOG 
@<Define |Pointer_Vector| specializations@>=

   Point approx_center(0, 0, 0);

   {
       int i = 0;
       real curr_max_value = (MAX_REAL / 4) * 3;
        
       for (; i < ctr; ++i)
       {
           approx_center += *(v[i]);

           if (   approx_center.get_x() > curr_max_value
               || approx_center.get_y() > curr_max_value
               || approx_center.get_z() > curr_max_value)
           {
              break;
           }

       }  /* |for|  */
        
       if (i > 1)
          approx_center /= i;            
       else 
       {  
           cerr_strm << "ERROR!  In `Pointer_Vector<Point, Point>::rectify':"
                     << endl 
                     << "Error setting `approx_center', "
                     << "`i' <= i (`i' == " << i << ")"
                     << endl
                     << "Exiting function unsuccessfully with return value 1.";

           log_message(cerr_strm);
           cerr_message(cerr_strm, warning_stop_value);
           cerr_strm.str("");
           approx_center = INVALID_POINT;            
           
           return 1;

       } /* |else| (|i <= 1|)  */

   }  /* End of group  */

#if DEBUG_COMPILE
   if (DEBUG)
   {

     cerr_mutex.lock(); 
     approx_center.show("approx_center before shift:");
     cerr_mutex.unlock();  

   }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@; 

   Transform u;

   u *= approx_center.shift(-approx_center);

#if DEBUG_COMPILE
   if (DEBUG)
   {

     cerr_mutex.lock(); 
     approx_center.show("approx_center after shift:");
     cerr_mutex.unlock();  

   }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@;

t *= u;

   for (vector<Point*>::iterator iter = v.begin();
        iter != v.end();
        ++iter)
   {
       **iter *= u;
   }

   if (do_transform && transform != static_cast<Transform*>(0))
      *transform = t;

@q *** (3)@> 
@
@<Define |Pointer_Vector| specializations@>=

   vector<Point*> northeast;
   vector<Point*> northwest;
   vector<Point*> southeast;
   vector<Point*> southwest;
 
   for (vector<Point*>::const_iterator iter = v.begin();
        iter != v.end();
        ++iter)
   {
      if ((**iter).get_x() >= 0 && (**iter).get_z() >= 0)
         northeast.push_back(*iter);
      else if ((**iter).get_x() < 0 && (**iter).get_z() >= 0)
         northwest.push_back(*iter);
      else if ((**iter).get_x() < 0 && (**iter).get_z() < 0)
         southwest.push_back(*iter);
      else if ((**iter).get_x() >= 0 && (**iter).get_z() < 0)
         southeast.push_back(*iter);

   }  /* |for|  */

#if DEBUG_COMPILE
   if (DEBUG)
   {
       cerr_mutex.lock(); 
       cerr << "Showing `northeast':" << endl;

       for (vector<Point*>::const_iterator iter = northeast.begin();
            iter != northeast.end();
            ++iter)
          (**iter).show();

       cerr << "Showing `northwest':" << endl;

       for (vector<Point*>::const_iterator iter = northwest.begin();
            iter != northwest.end();
            ++iter)
          (**iter).show();

       cerr << "Showing `southwest':" << endl;

       for (vector<Point*>::const_iterator iter = southwest.begin();
            iter != southwest.end();
            ++iter)
          (**iter).show();

       cerr << "Showing `southeast':" << endl;

       for (vector<Point*>::const_iterator iter = southeast.begin();
            iter != southeast.end();
            ++iter)
          (**iter).show();
            
       cerr_mutex.unlock();  

   }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@; 

    Point pos_x_axis_point(1, 0, 0);
    Point neg_x_axis_point(-1, 0, 0);

    Compare_Angles cmp_ang_pos(&ORIGIN, &pos_x_axis_point);
    Compare_Angles cmp_ang_neg(&ORIGIN, &neg_x_axis_point);

    sort(northeast.begin(), northeast.end(), cmp_ang_pos);
    sort(northwest.begin(), northwest.end(), cmp_ang_neg);
    sort(southwest.rbegin(), southwest.rend(), cmp_ang_neg);
    sort(southeast.rbegin(), southeast.rend(), cmp_ang_pos);

#if DEBUG_COMPILE
   if (DEBUG)
   {
       cerr_mutex.lock(); 
       cerr << "After sorting:\nShowing `northeast':" << endl;

       for (vector<Point*>::const_iterator iter = northeast.begin();
            iter != northeast.end();
            ++iter)
          (**iter).show();

       cerr << "Showing `northwest':" << endl;

       for (vector<Point*>::const_iterator iter = northwest.begin();
            iter != northwest.end();
            ++iter)
          (**iter).show();

       cerr << "Showing `southwest':" << endl;

       for (vector<Point*>::const_iterator iter = southwest.begin();
            iter != southwest.end();
            ++iter)
          (**iter).show();

       cerr << "Showing `southeast':" << endl;

       for (vector<Point*>::const_iterator iter = southeast.begin();
            iter != southeast.end();
            ++iter)
          (**iter).show();
            
       cerr_mutex.unlock();  

   }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@; 

   {
      int i = 0;
      t.inverse(true);

      for (vector<Point*>::const_iterator iter = northeast.begin();
           iter != northeast.end();
           ++iter)
      {
         **iter *= t;
         v[i++] = *iter;
      }

      for (vector<Point*>::reverse_iterator iter = northwest.rbegin();
           iter != northwest.rend();
           ++iter)
      {
         **iter *= t;
         v[i++] = *iter;
      }

      for (vector<Point*>::reverse_iterator iter = southwest.rbegin();
           iter != southwest.rend();
           ++iter)
      {
         **iter *= t;
         v[i++] = *iter;
      }

      for (vector<Point*>::const_iterator iter = southeast.begin();
           iter != southeast.end();
           ++iter)
      {
         **iter *= t;
         v[i++] = *iter;
      }

   }  /* End of group  */

@q *** (3)@> 

#if DEBUG_COMPILE
   if (DEBUG)
   {
       cerr_strm << thread_name 
                 << "Exiting `Pointer_Vector::rectify' "
                 << "successfully with return value 0.";

       log_message(cerr_strm);
       cerr_message(cerr_strm);
       cerr_strm.str("");

   }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@; 

    return 0;

}  /* End of |Pointer_Vector<Point, Point>::rectify| definition.  */

@q *** (3)@> 

@q ** (2)@> 

@q * (1) Get |Conic_Section_Lattice|.@> 
@* Get |Conic_Section_Lattice|.
\initials{LDF 2007.07.29.}

\LOG
\initials{LDF 2007.07.29.}
Added this function.

\initials{LDF 2007.08.06.}
Finished writing this function.
\ENDLOG

@q ** (2) Definition.@> 

@<Define |Pointer_Vector| specializations@>=
template<>
Conic_Section_Lattice*
Pointer_Vector<Point, Point>::get_conic_section_lattice(
                                 Scanner_Node scanner_node,
                                 bool do_cull,
                                 bool do_rectify,
                                 real tolerance,
                                 bool do_test,
                                 bool do_transform,
                                 Transform* t)
{

@q *** (3) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q *** (3)@> 

#if DEBUG_COMPILE
   if (DEBUG)
   {
      cerr_strm << thread_name 
                << "Entering `Pointer_Vector::get_conic_section_lattice'.";

      log_message(cerr_strm);
      cerr_message(cerr_strm);
      cerr_strm.str("");

   }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@; 

@q *** (3)@> 

    int status;   

    if ((do_test && v.size() < 6) || (!do_test && v.size() < 5))
    {
       
        cerr_strm << thread_name 
                  << "ERROR!  Pointer_Vector::get_conic_section_lattice':"
                  << endl 
                  << "`Pointer_Vector<Point>' has too few points:  "
                  << v.size()
                  << endl
                  << "At least 6 are required if testing the points and "
                  << "at least 5 if not."
                  << endl 
                  << "Exiting function unsuccessfully with return value 0.";

       log_message(cerr_strm);
       cerr_message(cerr_strm, error_stop_value);
       cerr_strm.str("");

       return 0;

   }  /* |if ((do_test && v.size() < 6) || (!do_test && v.size() < 5))|  */

@q *** (3)@> 

#if 0 
    cerr_mutex.lock(); 
    cerr << "In `Pointer_Vector::get_conic_section_lattice':" << endl;
    show("Before rectification:");
    cerr_mutex.unlock();  
#endif 

    if (do_transform && t == static_cast<Transform*>(0))
       t = create_new<Transform>(0);

    status = rectify(scanner_node,
                     do_test,
                     do_cull,
                     do_transform,
                     tolerance,  
                     t,
                     static_cast<Point*>(0));       

#if 0 
    cerr_mutex.lock(); 
    show("After rectification:");
    cerr_mutex.unlock();  
#endif 

@q *** (3) Error handling:  |rectify| returned a non-null value.@> 
@ Error handling:  |rectify| returned a non-null value.
\initials{LDF 2007.08.06.}

@<Define |Pointer_Vector| specializations@>=

    if (status != 0)
    {
        cerr_strm << thread_name << "ERROR!  "
                  << "In `Pointer_Vector::get_conic_section_lattice':"
                  << endl 
                  << "`rectify' returned " << status
                  << "Exiting function unsuccessfully with return value 0.";

        log_message(cerr_strm);
        cerr_message(cerr_strm, error_stop_value);
        cerr_strm.str(""); 

        delete t;
        t = 0;

        return 0;
  
    }  /* |if (status != 0)|  */

@q *** (3) Test points.@> 
@ Test points.
\initials{LDF 2007.08.06.}

@<Define |Pointer_Vector| specializations@>=

   if (do_test)
   {

      bool ignore_extra_points = true;

      bool b = Conic_Section::are_on_conic_section(
                                    this,
                                    static_cast<void*>(scanner_node), 
                                    tolerance, 
                                    0,
                                    ignore_extra_points);

#if DEBUG_COMPILE
   if (DEBUG)
   {
       cerr_strm << thread_name 
                 << "In `Pointer_Vector::get_conic_section_lattice':"
                 << endl 
                 << "`Conic_Section::are_on_conic_section' returned " << b;

       log_message(cerr_strm);
       cerr_message(cerr_strm);
       cerr_strm.str("");

   }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@; 

@q *** (3) Error handling:  |Conic_Section::are_on_conic_section| @> 
@q *** (3)returned |false|.                                       @> 
@ Error handling:  |Conic_Section::are_on_conic_section| 
returned |false|.
\initials{LDF 2007.08.06.}

@<Define |Pointer_Vector| specializations@>=

      if (b == false)
      {  
          cerr_strm << thread_name 
                    << "ERROR!  In `Pointer_Vector::get_conic_section_lattice':"
                    << endl 
                    << "`Conic_Section::are_on_conic_section' returned `false'."
                    << endl  
                    << "Can't generate curve.  Exiting function with return value 0.";

          log_message(cerr_strm);
          cerr_message(cerr_strm, error_stop_value);
          cerr_strm.str("");

          return 0;

      }  /* |if (b == false)|  */

   }  /* |if (test_points)|  */

@q *** (3)@> 
@
@<Define |Pointer_Vector| specializations@>=

    Conic_Section_Lattice* c
       = create_new<Conic_Section_Lattice>(0, scanner_node);   

    c->transform = t;  

    for (int i = 4; i >= 0; --i)        
    {
        c->lattice_points[i] = *(v[i]);
        c->lattice.push_back(&(c->lattice_points[i]));
    }

    if (do_test && v.size() >= 6)
    {
       c->pt6 = *(v[5]);
    }
    else
       c->pt6 = INVALID_POINT;

@q *** (3) Set |approx_center|.@> 
@ Set |approx_center|.
\initials{LDF 2007.08.16.}

\LOG
\initials{LDF 2007.08.16.}
Added this section.

\initials{LDF 2007.08.19.}
Now throwing |Bad_Assignment_Type| if the loop that's supposed to set 
|Point approx_center| fails.
\ENDLOG

@<Define |Pointer_Vector| specializations@>=

    {  /* Beginning of group.  */

       Bad_Assignment_Type bad_assignment;

       c->approx_center = *(v[0]);

       int i;
    
       try 
       {
          for (i = 1; i < 6; ++i)
          {
            if (   c->approx_center.get_x() + v[i]->get_x() <= MAX_REAL
                && c->approx_center.get_y() + v[i]->get_y() <= MAX_REAL
                && c->approx_center.get_z() + v[i]->get_z() <= MAX_REAL
                && c->approx_center.get_w() + v[i]->get_w() <= MAX_REAL)
               c->approx_center += *(v[i]);
            else
              break;

          }  /* |for|  */

           if (i > 1)
              c->approx_center /= i + 1;
           else
              throw bad_assignment;

       } /* |try|  */

       catch (...)
       {
           cerr_strm << thread_name << "WARNING!"
                     << endl 
                     << "In `Pointer_Vector::get_conic_section_lattice':"
                     << endl 
                     << "Failed to set `approx_center'.";

           log_message(cerr_strm);
           cerr_message(cerr_strm, warning_stop_value);
           cerr_strm.str("");
            
           c->approx_center = INVALID_POINT;

       }  /* |catch|  */

    }  /* End of group.  */

@q *** (3)@> 
@
@<Define |Pointer_Vector| specializations@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
      cerr_strm << thread_name 
                << "Exiting `Pointer_Vector::get_conic_section_lattice'.";

      log_message(cerr_strm);
      cerr_message(cerr_strm);
      cerr_strm.str("");

   }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@; 

    return c;

}  /* End of |Pointer_Vector<Point, Point>::get_conic_section_lattice| 
      definition.  */

@q * (1) Putting additional |struct Pointer_Vector| functions together.@>
@* Putting additional {\bf struct Pointer\_Vector} functions together.

\immediate\write\functexifile{^^JEnd of file:  pntrvcf0.web^^J}

@q ** This is what's compiled.@>
@ This is what's compiled.
@c
@<Include files@>@;
@<Define |Pointer_Vector| specializations@>@;


@q ** This is what's written to \filename{pntrvcf0.h}.@>
@ This is what's written to the \filename{pntrvcf0.h}.
@(pntrvcf0.h@>=
/* Nothing  */

@q * Emacs-Lisp code for use in indirect buffers when using the          @>
@q   GNU Emacs editor.  The local variable list is not evaluated when an @>
@q   indirect buffer is visited, so it's necessary to evaluate the       @>
@q   following s-expression in order to use the facilities normally      @>
@q   accessed via the local variables list.                              @>
@q   \initials{LDF 2004.02.12}.                                          @>
@q   (progn (cweb-mode) (outline-minor-mode t))                          @>

@q * Local variables for Emacs.@>
@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q run-cweave-on-file:"3DLDFprg.web" @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q fill-column:80 @>
@q End: @>
