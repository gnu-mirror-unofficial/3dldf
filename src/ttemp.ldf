%% ttemp.ldf

verbatim_metapost  "prologues := 3; outputtemplate := \"%j%3c.eps\";";

glyph g;
glyph h;
glyph t;

%% * (1)

beginfig(0);

%% ** (2)

  point p[];
  point z[];
  
  draw ((-10cm, -14.5cm) -- (10cm, -14.5cm) -- (10cm, 14.5cm) -- (-10cm, 14.5cm) -- cycle) shifted (7cm, 0);

  %pickup pencircle scaled (1.75mm, 1.75mm, 1.75mm);
  pickup pencircle scaled (.5mm, .5mm, .5mm);
  
  g := get_glyph 65 from "cmssbx10";

  %draw g;

  path_vector pv;

  path q;
  q := origin -- (1, 0);


  transform t;

  t := ((identity scaled (.75, .75, .75)) rotated (45, 45, 0)) shifted (-9.5cm, -5cm);

  %t := (identity scaled (.25, .25, .25)) shifted (-10cm, 0);

  
  g *= t;
  
  pv := get_paths from g;

  message "size pv:";
  show size pv;

  n := size pv;
  n -= 1;

  message "n:";
  show n;

  for i = 0 upto n:
    message "turningnumber pv" & decimal i & ":";
    show (turningnumber pv[i]);

    if (turningnumber pv[i]) < 0:
      draw pv[i]; % scaled (.5, .5, .5);
    else:
      draw pv[i]; % scaled (.5, .5, .5);
    fi
  endfor;

  message "length pv0:";
  show length pv0;

%% ** (2)
  
  for i = 0 upto ((length pv0) - 1):
    p[i] := get_point (i) pv0;
    z[i] := get_point (i) (pv0 scaled (.5, .5, .5));
  endfor;

  dotlabel.top("origin", origin);
  
  dotlabel.rt  ( "0",  z0);
  dotlabel.top ( "1",  z1);
  dotlabel.top ( "2",  z2);
  dotlabel.lft ( "3",  z3);
  dotlabel.lft ( "4",  z4);
  dotlabel.llft( "5",  z5);
  dotlabel.bot ( "6",  z6);
  dotlabel.bot ( "7",  z7);
  dotlabel.rt  ( "8",  z8);
  dotlabel.lrt ( "9",  z9);
  dotlabel.llft("10", z10);
  dotlabel.lft ("11", z11);
  dotlabel.bot ("12", z12);
  dotlabel.bot ("13", z13);
  dotlabel.lrt ("14", z14);
  dotlabel.rt  ("15", z15);

  message "length pv1:";
  show length pv1;

  for i = 0 upto ((length pv1) - 1):
    p[20+i] := get_point (i) pv1;
    z[20+i] := get_point (i) (pv1 scaled (.5, .5, .5));
  endfor;
  
  dotlabel.lft("20", z20);
  dotlabel.lft("21", z21);
  dotlabel.rt ("22", z22);
  dotlabel.rt ("23", z23);
  dotlabel.rt ("24", z24);
  dotlabel.lft("25", z25);

  numeric a;
  a := ((ypart p2) - (ypart p6));

  message "a in cm:";
  show a;
  
  a /= bp;
  
  message "a in bp:";
  show a;


  message "pv0 before resolve:"; 
  show pv0;

  message "pv0 before resolve (see above)."; 
  pause;
  
  resolve pv0 to 100;

  message "After resolve.";
  pause;

  message "length pv0:";
  show length pv0;
  
  
%% ** (2)
  
  
endfig with_projection parallel_x_y;
%endfig;

verbatim_metapost "end";

end;

%h := get_glyph 79 from "eufb10";

%t := get_glyph 84 from "eufb10";




path q;

q := origin .. (1, 1);

g += q;

show g;

end;



show infinity fixed;


end;


beginfig(0);

  path p;

  %p := origin .. tension 2.3 and atleast 3.5 .. (3, 3) .. tension atleast 1.2 .. (4, 4);

  %p := origin{dir 20} .. (3, 3) .. {(2,2)}(4, 4);

  %p := origin .. controls (1, 0) and (2, 3) .. (3, 3) {curl 1.2} .. {curl 3.4} (4, 4);

  p := origin{curl 3}.. (3, 3) .. {curl .5}(4, 4);
  draw p;
endfig with_projection parallel_x_y;

verbatim_metapost "end;";


end;


show p;

end;

p := origin -- (1, 0);
p := origin{curl 3} -- (1, 0) .. (2, 2) ... (3, 3);

show p;

end;



verbatim_metapost "prologues := 3;outputtemplate := \"%j%c.eps\";";

bool_point_vector bpv;

triangle q[];

set q0 with_points (origin, (10, 0), (5, 10));
shift q0 (-5, -5);



q1 := q0 rotated (0, 0, 50);



draw (-8, -8) -- (8, -8) -- (8, 8) -- (-8, 8) -- cycle;



%% This works.  LDF 2021.12.12.
%%
%% bpv := ((path) q0) intersection_points ((path) q1);

%% This also works.  LDF 2021.12.12.
%%
bpv := q0 intersection_points q1;


message "size bpv:";
show size bpv;

end;

beginfig(1);
  draw q0 with_color blue;
  draw q1 with_color red;

  for i = 0 upto (size bpv) - 1:
    dotlabel_if.top(decimal i, bpv[i]);
  endfor;
  
endfig with_projection parallel_x_y;

verbatim_metapost "end;";

end;

%% Local Variables:
%% mode: MetaPost
%% End:
