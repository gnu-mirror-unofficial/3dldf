%% ttemp.ldf

input "plainldf.lmc";
verbatim_metapost "prologues := 3;outputtemplate := \"%j%3c.eps\";";

beginfig(0); 
  path p[];
  p0 := (1, 0) .. (2, 0) .. (2, 2);

  draw p0 with_color blue;

  p1 := (1.5, 2) .. (1, 2) .. (1, 0); 

  draw p1 with_color blue;
  
endfig with_projection parallel_x_y;
end_mp;
end;


beginfig(0);
  drawdot origin;
endfig;% with_no_colors;

end;

verbatim_metapost "prologues := 3;outputtemplate := \"%j%3c.eps\";";

input "plainldf.lmc";

pen medium_pen;
medium_pen := pencircle scaled (.5mm, .5mm, .5mm);
pickup medium_pen;

pen big_pen;
big_pen := pencircle scaled (1mm, 1mm, 1mm);


path frame;
numeric frame_wd;
numeric frame_ht;

frame_wd := 10cm;
frame_ht := 10cm;

frame :=    (-.5frame_wd, 0, -.5frame_ht) -- (.5frame_wd, 0, -.5frame_ht) -- (.5frame_wd, 0, .5frame_ht)
         -- (-.5frame_wd, 0, .5frame_ht) -- cycle;

path q[];
rectangle r[];

focus f;

set f with_position (0, 20, -50) 
       with_direction (0, 20, 10) with_distance 70; 


%% ** (2) Fig. 2, Get rectangle

beginfig(2);

  numeric n;
  
  pickup medium_pen;

  draw (frame rotated (90, 0)) shifted (0, 0, -28cm);

  output current_picture with_projection parallel_x_y;
  clear current_picture;
  
  rectangle r[];
  superellipse s[];

  point p[];

  s0 := get_superellipse with_resolution 64 with_superness .75 with_a 2 with_b 3;

  rotate s0 (90, 0);

  rotate s0 (0, 45);
  rotate s0 (45, 0);

  
  draw s0 with_color red;

  n := size s0 - 1;
  
  for i = 0 step 1 until n:
    p[i] := get_point (i) s0;
  endfor;
  
  dotlabel.rt("0", p[0]);
  dotlabel.rt( "4",  p[4]);
  dotlabel.urt( "8 ", p[8]);
  dotlabel.urt("12", p[12]);
  dotlabel.top("16", p[16]);
  dotlabel.ulft("20", p[20]);
  dotlabel.ulft("24", p[24]);
  dotlabel.lft("28", p[28]);
  dotlabel.lft("32", p[32]);
  dotlabel.lft("36", p[36]);
  dotlabel.llft("40", p[40]);
  dotlabel.llft("44", p[44]);
  dotlabel.bot("48", p[48]);
  dotlabel.lrt("52", p[52]);
  dotlabel.lrt("56", p[56]);
  dotlabel.rt("60", p[60]);

  r0 := get_rectangle s0;

  draw r0 with_color blue;
  
endfig with_projection parallel_x_y no_sort;
%endfig with_focus f;



%% ** (2)

beginfig(1);

  numeric n;
  
  pickup medium_pen;

  draw (frame rotated (90, 0)) shifted (0, 0, -28cm);

  output current_picture with_projection parallel_x_y;
  clear current_picture;
  
  rectangle r[];
  superellipse s[];

  point p[];

  s0 := get_superellipse with_resolution 64 with_superness .75 with_a 2 with_b 3;

  rotate s0 (90, 0);

  
  draw s0 with_color red;

  n := size s0 - 1;
  
  for i = 0 step 1 until n:
    p[i] := get_point (i) s0;
  endfor;
  
  dotlabel.rt("0", p[0]);
  dotlabel.rt( "4",  p[4]);
  dotlabel.urt( "8 ", p[8]);
  dotlabel.urt("12", p[12]);
  dotlabel.top("16", p[16]);
  dotlabel.ulft("20", p[20]);
  dotlabel.ulft("24", p[24]);
  dotlabel.lft("28", p[28]);
  dotlabel.lft("32", p[32]);
  dotlabel.lft("36", p[36]);
  dotlabel.llft("40", p[40]);
  dotlabel.llft("44", p[44]);
  dotlabel.bot("48", p[48]);
  dotlabel.lrt("52", p[52]);
  dotlabel.lrt("56", p[56]);
  dotlabel.rt("60", p[60]);

  q0 := subpath (4, 20) of s0;

  draw q0 with_color blue;
  
endfig with_projection parallel_x_y no_sort;
%endfig with_focus f;

%% ** (2)


end_mp;
end;


%% ** (2)

beginfig(0);

  numeric n;
  
  pickup medium_pen;

  draw (frame rotated (90, 0)) shifted (0, 0, -28cm);

  output current_picture with_projection parallel_x_y;
  clear current_picture;
  
  rectangle r[];
  superellipse s[];

  point p[];

  s0 := get_superellipse with_resolution 64 with_superness .75 with_a 2 with_b 3;

  rotate s0 (90, 0);

  
  draw s0 with_color red with_pen big_pen;

  % p10 := get_center s0;

  % dotlabel.top("$p_{10}$", p10);

  % p11 := get_normal s0;

  % dotlabel.top("$p_{11}$", p11);
  
  n := size s0 - 1;
  
  for i = 0 step 1 until n:
    p[i] := get_point (i) s0;
  endfor;


  
  dotlabel.rt("0", p[0]);
  dotlabel.rt( "4",  p[4]);
  dotlabel.urt( "8 ", p[8]);
  dotlabel.urt("12", p[12]);
  dotlabel.top("16", p[16]);
  dotlabel.ulft("20", p[20]);
  dotlabel.ulft("24", p[24]);
  dotlabel.lft("28", p[28]);
  dotlabel.lft("32", p[32]);
  dotlabel.lft("36", p[36]);
  dotlabel.llft("40", p[40]);
  dotlabel.llft("44", p[44]);
  dotlabel.bot("48", p[48]);
  dotlabel.lrt("52", p[52]);
  dotlabel.lrt("56", p[56]);
  dotlabel.rt("60", p[60]);

  
  % r0 := get_rectangle s0;
  % show r0;
  % draw r0 with_color blue;

  n := size s0 - 1;
  message "n:";
  show n;
  

  s1 := s0;

  rotate s1 (90, 0, 0);

  %draw s1 with_color blue;

  % p1 := get_center s1;
  % %dotlabel.bot("$p_1$", p1);
  
  q0 := subpath (0, 16) of s0;

  %draw q0 with_color green with_pen big_pen;
  
endfig with_projection parallel_x_y no_sort;
%endfig with_focus f;

%% ** (2)

  


%% ** (2) Fig. 1

beginfig(1);

  s5 := get_superellipse with_resolution 64 with_superness .05 with_a 2 with_b 3;
  draw s5;

  n := size s5 - 1;

  for i = 0 step 8 until n:
    dotlabel.top(decimal i, get_point (i) s5);
  endfor;

endfig with_projection parallel_x_z;



%% ** (2) Fig. 2

beginfig(2);

  s6 := get_superellipse with_resolution 64 with_superness_beta .70 with_superness_gamma .80 with_a 2 with_b 3;
  draw s6;

  n := size s6 - 1;

  for i = 0 step 8 until n:
    dotlabel.top(decimal i, get_point (i) s6);
  endfor;

  n := size s7 - 1;
  s7 := get_superellipse with_resolution 64 with_superness_beta .25 with_superness_gamma .75 with_a 2 with_b 3;
  draw s7 with_color blue;


  n := size s8 - 1;
  s8 := get_superellipse with_resolution 64 with_superness_beta .125 with_superness_gamma .825 with_a 2 with_b 3;
  draw s8 with_color red;

  n := size s9 - 1;
  s9 := get_superellipse with_resolution 64 with_superness_beta .80 with_superness_gamma .10 with_a 2 with_b 3;
  draw s9 with_color green;

endfig with_projection parallel_x_z;



%% ** (2) Fig. 3

focus f;

set f with_position (0, 20, -50) 
       with_direction (0, 20, 10) with_distance 70; 


beginfig(3); 

  draw frame;

  q0 := s0;
  draw q0;  

endfig with_focus f; % with_projection parallel_x_z;    
end_mp;
end;





%r := (unit_rectangle rotated (45, 45)) shifted (2, 1, 3);

%r := unit_rectangle shifted (2, 1, 3);




%q := superellipse (2cm, 3cm, .75);

end_mp;
end;


path q[];

pen dot_pen;
dot_pen := pencircle scaled (2mm, 2mm, 2mm);

pen medium_pen;

medium_pen := pencircle scaled (.5mm, .5mm, .5mm);

beginfig(0);

  pickup medium_pen;

  circle c;

  set c with_diameter 12cm with_point_count 8;

  rotate c (90, 0);

  q0 := c;
  
  draw q0;

  point p[];

  for i = 0 upto 7:
    p[i] := get_point (i) q0;
  endfor;

  dotlabel.rt("$p_0$", p0);
  dotlabel.urt("$p_1$", p1);
  dotlabel.top("$p_2$", p2);
  dotlabel.ulft("$p_3$", p3);
  dotlabel.lft("$p_4$", p4);
  dotlabel.llft("$p_5$", p5);
  dotlabel.bot("$p_6$", p6);
  dotlabel.lrt("$p_7$", p7);
  
  for i = 0 upto (size q0 - 1):
    %drawdot get_point (i) q0 with_pen dot_pen with_color blue;
  endfor;

  path_vector pv;
  
  pv := resolve q0 to 18 with_no_transform save;

  message "size pv:";
  show size pv;
  %pause;
  
  for i = 0 upto (size pv0 - 1):
    p[10+i] := get_point (i) pv0;
    drawdot p[10+i] with_pen dot_pen with_color red;
  endfor;

  message "size pv0:";
  show size pv0;
  %pause;

  
  dotlabel.rt("$p_{10}$", p10);
  dotlabel.urt("$p_{11}$", p11);
  dotlabel.top("$p_{12}$", p12);
  dotlabel.ulft("$p_{13}$", p13);
  dotlabel.lft("$p_{14}$", p14);
  dotlabel.llft("$p_{15}$", p15);
  dotlabel.bot("$p_{16}$", p16);
  dotlabel.lrt("$p_{17}$", p17);
  dotlabel.lrt("$p_{18}$", p18);
  dotlabel.lrt("$p_{19}$", p19);
  dotlabel.lrt("$p_{20}$", p20);
  dotlabel.lrt("$p_{21}$", p21);
  
  
  
endfig with_projection parallel_x_y;

end_mp;
end;

%% ** (2) End of 3DLDF code.

%% * (1) Emacs-Lisp code for use in indirect buffers when using the          
%%   	 GNU Emacs editor.  The local variable list is not evaluated when an 
%%   	 indirect buffer is visited, so it's necessary to evaluate the       
%%   	 following s-expression in order to use the facilities normally      
%%   	 accessed via the local variables list.                              
%%   	 \initials{LDF 2004.02.12}.                                          

%% (progn (metapost-mode) (outline-minor-mode t) (setq fill-column 80))    

%% * (1) Local variables for Emacs.

%% Local Variables:
%% mode:metapost
%% eval:(outline-minor-mode t)
%% eval:(read-abbrev-file abbrev-file-name)
%% outline-regexp:"%% [*\f]+"
%% End:
