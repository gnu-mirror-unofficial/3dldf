%% ttemp.ldf

input "plain.lmc";

verbatim_metapost "prologues := 3; outputtemplate := \"%j%3c.eps\";";

glyph g;
glyph h;
glyph t;

%% * (1)


numeric frame_wd;
numeric frame_ht;
frame_wd := 10cm;
frame_ht := 10cm;

path frame;

frame :=    (-.5frame_wd, -.5frame_ht) -- (.5frame_wd, -.5frame_ht) -- (.5frame_wd, .5frame_ht)
         -- (-.5frame_wd, .5frame_ht) -- cycle;


%% ** (2)  
  
beginfig(0);

  focus f;
  set f with_position (0, 15, -10) with_direction (0, 15, 10) with_distance 5;

  path_vector pv;
  point p[][];

  draw frame shifted (5cm, 5cm);
  
  dotlabel.bot("origin", origin);
  
  g := get_glyph 65 from "cmssbx10";

  scale g by .25; 
  
  % message "g:";
  % show g;

  draw g;
  
  pv := get_paths from g;

  % message "Before resolve.";
  % message "length pv0:";
  % show length pv0;

  resolve pv0 (0, 1) to 6 with_no_transform;

  message "pv0:";
  show pv0 with_connectors 3;
  pause;

 
  n := (length pv0) - 1;

  for i = 0 upto n:
    p[0][i] := get_point (i) pv0;
  endfor;
   
  n := (length pv1) - 1;
  
  for i = 0 upto n:
    p[1][i] := get_point (i) pv1;
  endfor;

  dotlabel.lrt("$p_0^0$", p[0][0]);
  dotlabel.urt("$p_0^1$", p[0][1]);
  dotlabel.top("$p_0^2$", p[0][2]);
  dotlabel.lft("$p_0^3$", p[0][3]);
  dotlabel.ulft("$p_0^4$", p[0][4]);
  dotlabel.lft("$p_0^5$", p[0][5]);
  dotlabel.bot("$p_0^6$", p[0][6]);
  dotlabel.bot("$p_0^7$", p[0][7]);
  dotlabel.bot("$p_0^8$", p[0][8]);
  dotlabel.lrt("$p_0^9$", p[0][9]);
  dotlabel.llft("$p_0^{10}$", p[0][10]);
  dotlabel.lft("$p_0^{11}$", p[0][11]);
  dotlabel.bot("$p_0^{12}$", p[0][12]);
  dotlabel.bot("$p_0^{13}$", p[0][13]);
  dotlabel.rt("$p_0^{14}$", p[0][14]);
  dotlabel.urt("$p_0^{15}$", p[0][15]);
  dotlabel.urt("$p_0^{16}$", p[0][16]);
  dotlabel.urt("$p_0^{17}$", p[0][17]);
  dotlabel.urt("$p_0^{18}$", p[0][18]);
  dotlabel.urt("$p_0^{19}$", p[0][19]);
  dotlabel.top("$p_0^{20}$", p[0][20]);
  dotlabel.top("$p_0^{21}$", p[0][21]);
  
  
  dotlabel.lft("$p_1^0$", p[1][0]);
  dotlabel.lft("$p_1^1$", p[1][1]);
  dotlabel.rt("$p_1^2$", p[1][2]);
  dotlabel.rt("$p_1^3$", p[1][3]);
  dotlabel.rt("$p_1^4$", p[1][4]);
  dotlabel.lft("$p_1^5$", p[1][5]);


  replace connectors pv0 with "..";
  
  draw get_point (0) pv0 .. get_point (1) pv0 .. get_point (2) pv0 .. get_point (3) pv0
    with_color blue with_pen pencircle scaled (1mm, 1mm); %  rotated (-45, 0)
  


endfig with_projection parallel_x_y;
%endfig with_focus f;

end_mp;
  
end;

beginfig(1);
  %draw q;
endfig with_projection parallel_x_y;


verbatim_metapost "end;";

end;

beginfig(0);
  
%% ** (2)

  path q;
  
  verbatim_metapost "verbatimtex \font\cmssbx=cmssbx10 scaled 25000 etex;";
  
  %draw frame shifted (.5frame_wd, .5frame_ht);

  %label.urt("{\cmssbx A}", (6cm, -2pt));

  output current_picture with_projection parallel_x_y;
  clear current_picture;

focus f;
set f with_position (0, 50, -50) 
   with_direction (0, 50, 100) with_distance 20; 

%% ** (2)

  q := unit_circle scaled (12cm, 0, 12cm) rotated (-20, 10);

  draw q with_color blue;
  
  % rotate q (0, 45);
  
  % shift q (0, 0, 20);

   %rotate q (0, 0, -45);
 
  message "Before resolve:  q:";
  show q;

  message "point 5 of q before resolve:";
  show get_point 5 q;
  
  string s;

  for i = 0 upto (length q - 1):
    s := decimal i;
    label.top(s, get_point (i) q) with_text_color blue;
  endfor;

  resolve q (2, 5) to 15 with_ampersand; % save with_no_transform  

  message "After resolve:  q:";
  show q;

  message "point 17 of q after resolve:";
  show get_point 17 q;
  
  draw q with_pen pencircle scaled (.5mm, .5mm, .5mm);

  for i = 0 upto (length q - 1):
    s := decimal i;
    label.bot(s, get_point (i) q) with_text_color red;
  endfor;



endfig with_focus f;
%endfig with_projection parallel_x_y;

verbatim_metapost "end;";
  
end;






  point p[];
  point z[];
  
  draw ((-10cm, -14.5cm) -- (10cm, -14.5cm) -- (10cm, 14.5cm) -- (-10cm, 14.5cm) -- cycle) shifted (7cm, 0);

  %pickup pencircle scaled (1.75mm, 1.75mm, 1.75mm);
  pickup pencircle scaled (.5mm, .5mm, .5mm);
  
  g := get_glyph 65 from "cmssbx10";

  %draw g;

  path_vector pv;

  path q;
  q := origin -- (1, 0);

  transform t;

  %t := ((identity scaled (.75, .75, .75)) rotated (45, 45, 0)) shifted (-9.5cm, -5cm);

  %t := (identity scaled (.25, .25, .25)) shifted (-10cm, 0);
  
  
  %g *= t;
  
  pv := get_paths from g;

  message "size pv:";
  show size pv;

  n := size pv;
  n -= 1;

  message "n:";
  show n;

  % for i = 0 upto n:
  %   message "turningnumber pv" & decimal i & ":";
  %   show (turningnumber pv[i]);

  %   if (turningnumber pv[i]) < 0:
  %     draw pv[i]; % scaled (.5, .5, .5);
  %   else:
  %     draw pv[i]; % scaled (.5, .5, .5);
  %   fi
  % endfor;

  % message "length pv0:";
  % show length pv0;

%% ** (2)
  
  for i = 0 upto ((length pv0) - 1):
    p[i] := get_point (i) pv0;
    z[i] := get_point (i) (pv0 scaled (.5, .5, .5));
  endfor;

  dotlabel.top("origin", origin);
  
  dotlabel.rt  ( "0",  z0);
  dotlabel.top ( "1",  z1);
  dotlabel.top ( "2",  z2);
  dotlabel.lft ( "3",  z3);
  dotlabel.lft ( "4",  z4);
  dotlabel.llft( "5",  z5);
  dotlabel.bot ( "6",  z6);
  dotlabel.bot ( "7",  z7);
  dotlabel.rt  ( "8",  z8);
  dotlabel.lrt ( "9",  z9);
  dotlabel.llft("10", z10);
  dotlabel.lft ("11", z11);
  dotlabel.bot ("12", z12);
  dotlabel.bot ("13", z13);
  dotlabel.lrt ("14", z14);
  dotlabel.rt  ("15", z15);

  message "length pv1:";
  show length pv1;

  for i = 0 upto ((length pv1) - 1):
    p[20+i] := get_point (i) pv1;
    z[20+i] := get_point (i) (pv1 scaled (.5, .5, .5));
  endfor;
  
  dotlabel.lft("20", z20);
  dotlabel.lft("21", z21);
  dotlabel.rt ("22", z22);
  dotlabel.rt ("23", z23);
  dotlabel.rt ("24", z24);
  dotlabel.lft("25", z25);


  
  numeric a;
  a := ((ypart p2) - (ypart p6));

  message "a in cm:";
  show a;
  
  a /= bp;
  
  message "a in bp:";
  show a;


  % message "pv0 before resolve:"; 
  % show pv0;

  % message "pv0 before resolve (see above)."; 
  % pause;

  draw pv0 scaled (.5, .5, .5);
  draw pv1 scaled (.5, .5, .5);

  
  resolve pv0 to 50;
  resolve pv1 to 50;

  message "After resolve:  length pv0:";
  show length pv0;

  message "After resolve:  length pv1:";
  show length pv1;

  % for i = 0 upto n:
  %   message "turningnumber pv" & decimal i & ":";
  %   show (turningnumber pv[i]);

  %   if (turningnumber pv[i]) < 0:
  %     draw pv[i]; % scaled (.5, .5, .5);
  %   else:
  %     draw pv[i]; % scaled (.5, .5, .5);
  %   fi
  % endfor;

  drawdot get_point 0 pv0 with_color blue with_pen pencircle scaled (2mm, 2mm, 2mm);
  drawdot get_point 1 pv0 with_color red with_pen pencircle scaled (2mm, 2mm, 2mm);
  
  
%% ** (2)


endfig with_projection parallel_x_y no_sort;
verbatim_metapost "end;";

%endfig;


end;

%h := get_glyph 79 from "eufb10";

%t := get_glyph 84 from "eufb10";




path q;

q := origin .. (1, 1);

g += q;

show g;

end;



show infinity fixed;


end;


beginfig(0);

  path p;

  %p := origin .. tension 2.3 and atleast 3.5 .. (3, 3) .. tension atleast 1.2 .. (4, 4);

  %p := origin{dir 20} .. (3, 3) .. {(2,2)}(4, 4);

  %p := origin .. controls (1, 0) and (2, 3) .. (3, 3) {curl 1.2} .. {curl 3.4} (4, 4);

  p := origin{curl 3}.. (3, 3) .. {curl .5}(4, 4);
  draw p;
endfig with_projection parallel_x_y;

verbatim_metapost "end;";


end;


show p;

end;

p := origin -- (1, 0);
p := origin{curl 3} -- (1, 0) .. (2, 2) ... (3, 3);

show p;

end;



verbatim_metapost "prologues := 3;outputtemplate := \"%j%c.eps\";";

bool_point_vector bpv;

triangle q[];

set q0 with_points (origin, (10, 0), (5, 10));
shift q0 (-5, -5);



q1 := q0 rotated (0, 0, 50);



draw (-8, -8) -- (8, -8) -- (8, 8) -- (-8, 8) -- cycle;



%% This works.  LDF 2021.12.12.
%%
%% bpv := ((path) q0) intersection_points ((path) q1);

%% This also works.  LDF 2021.12.12.
%%
bpv := q0 intersection_points q1;


message "size bpv:";
show size bpv;

end;

beginfig(1);
  draw q0 with_color blue;
  draw q1 with_color red;

  for i = 0 upto (size bpv) - 1:
    dotlabel_if.top(decimal i, bpv[i]);
  endfor;
  
endfig with_projection parallel_x_y;

verbatim_metapost "end;";

end;

%% Local Variables:
%% mode: MetaPost
%% End:
