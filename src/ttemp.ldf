
picture v[];

beginfig(0);

  draw (-2, 0) -- (2, 0);
  
  dotlabel.rt("ABC", origin);
  
  v0 := current_picture;
  
endfig with_projection parallel_x_y;

beginfig(1);

  current_picture := v0;
  rotate current_picture (0, 0, -70);

  % rotate_labels current_picture by 45;


endfig with_projection parallel_x_y;




verbatim_metapost "end;";

end;




%% ** (2) macro draw_stitches
    
macro draw_stitches;

def draw_stitches {numeric RA, numeric Decl, point stitch_point, numeric bi_ang_one,
                   boolean left_or_right, boolean bottom_or_top, boolean do_labels} =

    message "Entering draw_stitches.";

    message "Exiting draw_stitches.";
    
  % point P[];
  
  % color ccolor;

  % if do_black:
  %   ccolor := white;
  % else:
  %   ccolor := black;
  % fi;

  % path curr_edge[];

  draw edge0 with_pen pencircle scaled (3pt, 3pt) with_color green on_picture qv[bi_ang_one];
  draw edge1 with_pen pencircle scaled (3pt, 3pt) with_color cyan on_picture qv[bi_ang_one];
  draw edge2 with_pen pencircle scaled (3pt, 3pt) with_color blue on_picture qv[bi_ang_one];
  draw edge3 with_pen pencircle scaled (3pt, 3pt) with_color red on_picture qv[bi_ang_one];
  
  % if bottom_or_top and left_or_right:         %% top right
  %   %message "top right.";
  %   curr_edge0 := edge1;                      %% top right 

  % elseif bottom_or_top and not left_or_right: %% top left

  %   %message "top left.";                     
  %   curr_edge0 := edge0;                      %% top left

  % elseif not bottom_or_top and left_or_right: %% bottom right
  %   %message "bottom right.";
  %   curr_edge0 := edge3;                      %% bottom right

  % else:                                       %% bottom left
  %   %message "bottom left.";
  %   curr_edge0 := edge2;                      %% bottom left
  % fi;

  % for i = 0 upto (length Q - 1):
  %   P[i] := get_point (i) Q;
  % endfor;

  % if do_labels:
  %   dotlabel.rt("$P_{0}$", P0) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{1}$", P1) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{2}$", P2) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{3}$", P3) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{4}$", P4) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{5}$", P5) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{6}$", P6) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{7}$", P7) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{8}$", P8) on_picture qv[bi_ang_one];
  %   dotlabel.rt("$P_{9}$", P9) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{10}$", P10) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{11}$", P11) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{12}$", P12) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{13}$", P13) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{14}$", P14) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{15}$", P15) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{16}$", P16) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{17}$", P17) on_picture qv[bi_ang_one];
  %   dotlabel.rt("$P_{18}$", P18) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{19}$", P19) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{20}$", P20) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{21}$", P21) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{22}$", P22) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{23}$", P23) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{24}$", P24) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{25}$", P25) on_picture qv[bi_ang_one];
  %   dotlabel.rt("$P_{26}$", P26) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{27}$", P27) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{28}$", P28) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{29}$", P29) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{30}$", P30) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{31}$", P31) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{32}$", P32) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{33}$", P33) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{34}$", P34) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{35}$", P35) on_picture qv[bi_ang_one];
  % fi;
  
  % P36 :=stitch_point shifted (-1cm, 0);
  % P37 := stitch_point shifted (1cm, 0);

  % %draw P36 -- P37 with_color red on_picture qv[bi_ang_one];

  % P38 := (P36 -- P37) intersection_point (P27 -- P8);

  % if do_labels:
  %   dotlabel.urt("$P_{38}$", P38) on_picture qv[bi_ang_one];
  % fi;
  
  % numeric mag[];

  % mag0 := magnitude(xpart stitch_point - xpart P38);

  % circle c;

  % P39 := (radius, 0);    
  
  % P40 := P39 rotated (0, 0, declination_decimal_degrees S);

  % numeric rad;
  % rad := xpart P40;

  % c := unit_circle scaled (rad, 0, rad) rotated (90, 0);

  % numeric circum;

  % circum := circumference c;
  
  % mag0 := circum / 16;

  % % message "mag0:";
  % % show mag0;

  % P41 := P38 shifted (-mag0, 0);
  % P42 := P38 shifted (mag0, 0);

  % if do_labels:
  %   dotlabel.lft("$P_{41}$", P41) on_picture qv[bi_ang_one];
  %   dotlabel.lft("$P_{42}$", P42) on_picture qv[bi_ang_one];
  % fi;
  
  % % message "P41:";
  % % show P42;

  % % message "P42:";
  % % show P42;

  % %pause;
  
  % %draw P41 -- P42 with_color red on_picture qv[bi_ang_one];

  % mag1 := magnitude(xpart P41 - xpart stitch_point);
  % mag2 := magnitude(xpart P42 - xpart stitch_point);
 
  % if mag1 < mag2:
  %   P43 := P41 shifted (0, -1cm);
  %   P44 := P41 shifted (0, 1cm);
  % else:
  %   P43 := P42 shifted (0, -1cm);
  %   P44 := P42 shifted (0, 1cm);
  % fi;

  % % dotlabel.lft("$P_{41}$", P41) with_text_color red with_dot_color red on_picture qv[bi_ang_one];
  % % dotlabel.lft("$P_{43}$", P43) with_text_color red with_dot_color red on_picture qv[bi_ang_one];
  % % dotlabel.rt("$P_{44}$", P44) with_text_color red with_dot_color red on_picture qv[bi_ang_one];
  % % dotlabel.top("$P_{8}$", P8) with_text_color red with_dot_color red on_picture qv[bi_ang_one];
  % % dotlabel.top("$P_{27}$", P27) with_text_color red with_dot_color red on_picture qv[bi_ang_one];

  % P45 := (stitch_point rotated_around (P43, P44) 180) rotated_around (P8, P27) 180;

  % % dotlabel.rt("$P_{45}$", P45) with_text_color red with_dot_color red on_picture qv[bi_ang_one];

  
  % drawdot P45 with_pen sstar_pen with_color red on_picture qv[bi_ang_one]; % white

enddef;

%% ** (2) End of 3DLDF code.

%% * (1) Emacs-Lisp code for use in indirect buffers when using the          
%%       GNU Emacs editor.  The local variable list is not evaluated when an 
%%       indirect buffer is visited, so it's necessary to evaluate the       
%%       following s-expression in order to use the facilities normally      
%%       accessed via the local variables list.                              
%%       \initials{LDF 2004.02.12}.                                          

%% (progn (metafont-mode) (outline-minor-mode t) (setq fill-column 80))    

%% * (1) Local variables for Emacs.

%% Local Variables:
%% mode:Metapost
%% eval:(outline-minor-mode t)
%% eval:(read-abbrev-file abbrev-file-name)
%% abbrev-mode:t
%% outline-regexp:"%% [*\f]+"
%% End:
