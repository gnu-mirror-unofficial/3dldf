@q crclslc.web @>

@q * (1) Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing.  @>
@q Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, @>
@q 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022 The Free Software Foundation, Inc.  @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version.  @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details.  @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA@>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html.@>

@q ("@@" stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de@>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston                 @> 
@q c/o Free Software Foundation, Inc.  @>
@q 51 Franklin St, Fifth Floor         @> 
@q Boston, MA  02110-1301              @>
@q USA                                 @>

@q Laurence.Finston@@gmx.de (@@ stands for a single "at" sign.)@>

@q * (0) Circle_Slice.@>
@** Circle\_Slice\quad ({\tt crclslc\PERIOD web}).\hfil
\initials{LDF 2005.03.29.}

\LOG
\initials{LDF 2005.03.29.}
Created this file.
\ENDLOG 

\immediate\write\functexifile{File:  crclslc.web^^J}

@f Circle_Slice Circle

@q * Include files.@>
@ Include files.
\initials{LDF 2005.03.29.}

@<Include files@>=

#include "loader.h++"
#include "pspglb.h++"
#include "io.h++"
#include "creatnew.h++"
#include "pntrvctr.h++"
#include "primes.h++"
#include "complex.h++"
#include "matrices.h++"
#include "colors.h++"
#include "transfor.h++"
#include "pens.h++"
#include "dashptrn.h++"
#include "shapes.h++"
#include "pictures.h++"  
#include "points.h++"
#include "lines.h++"
#include "planes.h++"
#include "nurbs.h++"
#include "paths.h++"
#include "curves.h++"
#include "polygons.h++"
#include "triangle.h++"
#include "rectangs.h++"
#include "conicsct.h++"
#include "ellipses.h++"
#include "circles.h++"
#include "ellpsslc.h++"

@q * (1) |Circle_Slice| class definition.@>
@* {\bf Circle\_Slice} class definition.
\initials{LDF 2005.03.29.}

\LOG
\initials{LDF 2005.03.29.}
Added this section.
\ENDLOG

@q ** (2) Definition.@> 

@<Define |class Circle_Slice|@>=
class Circle_Slice : public Path
{

  protected:

  Pointer_Vector<Circle> circle_vector;

  public:
    @<Declare |Circle_Slice| functions@>@;
};

@q * (1) Static data members. @>
@* Static data members.
\initials{LDF 2005.03.29.}

\LOG
\initials{LDF 2005.03.29.}
Added this section.  It's currently empty.
\ENDLOG

@<Define |static| |Circle_Slice| data members@>=

@q * (1) Constructors.@>
@* Constructors.
\initials{LDF 2005.03.29.}

\LOG
\initials{LDF 2005.03.29.}
Added this section.
\ENDLOG

@q ** (2) Default constructor.  No arguments.@>
@*1 Default constructor.  No arguments.
@^\cfunc{Circle\_Slice}{Circle\_Slice}@>
\cfunctexi{Circle\_Slice}{Circle\_Slice}
\initials{LDF 2005.03.29.}

\LOG
\initials{LDF 2005.03.29.}
Added this function.
\ENDLOG

@q *** (3) Declaration.  @>

@<Declare |Circle_Slice| functions@>=
Circle_Slice(void);

@q *** Definition.  @>

@
@<Define |Circle_Slice| functions@>= 
Circle_Slice::Circle_Slice(void)
{
   return;
}

@q ** (2) Pseudo-constructor for dynamic allocation.@>
@*1 Pseudo-constructor for dynamic allocation.
\initials{LDF 2005.03.29.}

\LOG
\initials{LDF 2005.03.29.}
Added this section.
\ENDLOG

@q *** (3) Pointer argument.@>
@*2 Pointer argument.
\initials{LDF 2005.03.29.}

\LOG
\initials{LDF 2005.03.29.}
Added this function.
\ENDLOG

@<Declare non-member template functions for |Circle_Slice|@>=

Circle_Slice* 
create_new(const Circle_Slice* c, Scanner_Node scanner_node);

@q *** (3) Reference argument.@>
@*2 Reference argument.
\initials{LDF 2005.03.29.}

\LOG
\initials{LDF 2005.03.29.}
Added this function.
\ENDLOG

@<Declare non-member template functions for |Circle_Slice|@>=

Circle_Slice* 
create_new(const Circle_Slice& c, Scanner_Node scanner_node);

@q * (1) Destructor. @>
@* Destructor. 
@^\cfunc{Circle\_Slice}{\~{}Circle\_Slice}@>
\cfunctexi{Circle\_Slice}{\noexpand~Circle\_Slice}
\initials{LDF 2005.03.29.}

\LOG
\initials{LDF 2005.03.29.}
Added this section.
\ENDLOG

@q ** (2) Declaration.@> 

@<Declare |Circle_Slice| functions@>= 

~Circle_Slice(void);

@q ** (2) Definition.@> 

@
@<Define |Circle_Slice| functions@>= 

Circle_Slice::~Circle_Slice(void)
{
   return;
}

@q * (1) Assignment. @>
@* Assignment.
@^\cofunc{Circle\_Slice}{=}@>
\cofunctexi{Circle\_Slice}{=}
\initials{LDF 2005.03.29.}

\LOG
\initials{LDF 2005.03.29.}
Added this function.
\ENDLOG

@<Declare |Circle_Slice| functions@>=

Circle_Slice&
operator=(const Circle_Slice& e);

@
@<Define |Circle_Slice| functions@>= 

Circle_Slice&
Circle_Slice::operator=(const Circle_Slice& e)
{
  if (this == &e)  /* Make sure it's not
                      self-assignment.  */
    return *this;

  return *this;
}

@q * (1) Get copy.@>
@* Get copy.
@^\cfunc{Circle\_Slice}{get\_copy}@>
\cfunctexi{Circle\_Slice}{get\_copy}
\initials{LDF 2005.03.29.}

\LOG
\initials{LDF 2005.03.29.}
Added this function.
\ENDLOG

@<Declare |Circle_Slice| functions@>=

virtual
Shape*
get_copy() const;

@
@<Define |Circle_Slice| functions@>=
Shape*
Circle_Slice::get_copy() const
{
  Circle_Slice* p = create_new<Circle_Slice>(0);
  *p = *this;
  return static_cast<Shape*>(p);
}

@q * (1) Putting Circle_Slice together.@>
@* Putting {\bf Circle\_Slice} together.
\initials{LDF 2005.03.29.}

\LOG
\initials{LDF 2005.03.29.}
Added this section.
\ENDLOG

\immediate\write\functexifile{^^JEnd of file:  crclslc.web^^J}

This is what's compiled.
\initials{LDF 2005.03.29.}

@c
@<Include files@>@;
@<Define |class Circle_Slice|@>@;
@<Define |static| |Circle_Slice| data members@>@;
@<Define |Circle_Slice| functions@>@;
@<Declare non-member template functions for |Circle_Slice|@>@;

@ This is what's written to \filename{crclslc.h}.
\initials{LDF 2005.03.29.}

@(crclslc.h@>=
@<Define |class Circle_Slice|@>@;
@<Declare non-member template functions for |Circle_Slice|@>@;

@q * Emacs-Lisp code for use in indirect buffers when using the          @>
@q   GNU Emacs editor.  The local variable list is not evaluated when an @>
@q   indirect buffer is visited, so it's necessary to evaluate the       @>
@q   following s-expression in order to use the facilities normally      @>
@q   accessed via the local variables list.                              @>
@q   \initials{LDF 2004.02.12}.                                          @>
@q   (progn (cweb-mode) (outline-minor-mode t) (setq fill-column 70))    @>

@q * Local variables for Emacs.@>

@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q run-gxx-on-file:"main.c" @>
@q run-cweb-on-file:"main.web" @>
@q run-cweave-on-file:"3DLDF.web" @>
@q makefile:"makefile" @>
@q executable-name:"pp" @>
@q use-g++:t @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q End: @>
