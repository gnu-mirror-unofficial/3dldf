%%% astronmy.lmc
%%%% Created by Laurence D. Finston (LDF) Wed Jul 14 15:32:11 2021 +0200

%% * (1) Copyright and License.

%%%% This file is part of GNU 3DLDF, a package for three-dimensional drawing.  
%%%% Copyright (C) 2021 The Free Software Foundation  

%%%% GNU 3DLDF is free software; you can redistribute it and/or modify 
%%%% it under the terms of the GNU General Public License as published by 
%%%% the Free Software Foundation; either version 3 of the License, or 
%%%% (at your option) any later version.  

%%%% GNU 3DLDF is distributed in the hope that it will be useful, 
%%%% but WITHOUT ANY WARRANTY; without even the implied warranty of 
%%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
%%%% GNU General Public License for more details.  

%%%% You should have received a copy of the GNU General Public License 
%%%% along with GNU 3DLDF; if not, write to the Free Software 
%%%% Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA 

%%%% GNU 3DLDF is a GNU package.  
%%%% It is part of the GNU Project of the  
%%%% Free Software Foundation 
%%%% and is published under the GNU General Public License. 
%%%% See the website http://www.gnu.org 
%%%% for more information.   
%%%% GNU 3DLDF is available for downloading from 
%%%% http://www.gnu.org/software/3dldf/LDF.html.
  
%%%% Please send bug reports to Laurence.Finston@gmx.de
%%%% The mailing list help-3dldf@gnu.org is available for people to 
%%%% ask other users for help.  
%%%% The mailing list info-3dldf@gnu.org is for sending 
%%%% announcements to users. To subscribe to these mailing lists, send an 
%%%% email with ``subscribe <email-address>'' as the subject.  

%%%% The author can be contacted at: 

%%%% Laurence D. Finston 
%%%% c/o Free Software Foundation, Inc. 
%%%% 51 Franklin St, Fifth Floor 
%%%% Boston, MA  02110-1301  
%%%% USA

%%%% Laurence.Finston@gmx.de

% * (1) Beginning of 3DLDF code.

verbatim_metapost "verbatimtex \font\small=cmr8\font\medium=cmr9\font\largebf=cmbx12\font\Largebf=cmbx14\font\huge=cminch etex;";

%% *** (3) Draw spherical biangle

macro get_spherical_biangles;

def get_spherical_biangles {numeric rad} =

  circle c[];
  numeric a;
  numeric radius[];
  numeric circum[];
  path edge[];
  path tab[];
  numeric n[];
  point ra_decl_zero_pt;
  numeric tab_wd;

  tab_wd := .375cm;
  
  radius0 := rad;

  ra_decl_zero_pt := (rad, 0);
  
  c0 := unit_circle scaled (radius0, 0, radius0) rotated (90, 0);
  a := circumference c0;   %% a == Circumference of horizontal great circle.

  %draw c0 with_color red;

  p0 := (-radius0, 0);
  p1 := (radius0, 0);

  %message "magnitude (p1 - p0) (diameter of c0):";
  %show magnitude (p1 - p0);

  %draw p0 -- p1;  %% Horizontal line through origin.

  %dotlabel.lft("$p_0$", p0);
  %dotlabel.rt("$p_1$", p1);

  p2 := (0, -radius0);
  p3 := (0, radius0);

  %draw p2 -- p3;  %% Vertical line through origin.

  %dotlabel.bot("$p_2$", p2);
  %dotlabel.top("$p_3$", p3);

  j := 4;
  for i = 11.25 step 11.25 until 78.75:
    p[j] := p1 rotated (0, 0, i);
    p[j + 1] := (0, ypart p[j]);
    %draw p[j + 1] -- p[j];
    %dotlabel.rt("$p_{" & decimal j & "}$", p[j]);
    radius[j] := magnitude(p[j] - p[j + 1]);
    c[j] := unit_circle scaled (radius[j], 0, radius[j]);
    circum[j] := circumference c[j];
    biangle_width[j] := circum[j] / 8;
    %message "biangle_width[" & decimal j & "]:";
    %show biangle_width[j];
    j += 2;
  endfor;

%% **** (4)

  %draw c0 with_color red;

  edge0 := null_path; 
  edge1 := null_path; 
  edge2 := null_path;  
  edge3 := null_path;  

  tab0 := null_path; 
  tab1 := null_path;  

  edge0 += ..;
  edge1 += ..;
  edge2 += ..;
  edge3 += ..;

  tab0 += ..;
  tab1 += ..;

  n0 := a / 8;  %% 1/8 of circumference of c0 == width of spherical biangles at 0 deg. declination.
  n1 := a / 32; %% 1/32 of circumference of red circle == Distance between the declination lines in 
                %% increments of 11.25 deg.

  p20 := (-.5n0, 0);
  p21 := (.5n0, 0);

  label.rt("$0^\circ$", p21 shifted (1.5cm, 0));

  %dotlabel.lft("$p_{20}$", p20);
  %dotlabel.rt("$p_{21}$", p21);

  edge0 += p20;
  edge1 += p21;

  tab0 += p20 shifted (-tab_wd, 0);

  draw p20 -- p20 shifted (-tab_wd, 0) on_picture tab_picture;
  
  p22 := (0, -.25a);
  p23 := (0, .25a);

  %dotlabel.bot("$p_{22}$", p22);
  %dotlabel.top("$p_{23}$", p23);
  label.rt("$-90^\circ$", p22 shifted (.25cm, 0));
  label.rt("$90^\circ$", p23 shifted (.25cm, 0));

  j := 24;
  k := 4;
  for i = 1 step 1 until 7:
    p[j]     := (-.5biangle_width[k], (i * n1));
    p[j + 1] := (.5biangle_width[k], (i * n1));
    %dotlabel.lft("$p_{" & decimal j & "}$", p[j]);
    %dotlabel.rt("$p_{" & decimal (j + 1) & "}$", p[j + 1]);
    label("$" & decimal (11.25 * i) & "^\circ$", p[j + 1] shifted (1.5cm, 0));
    edge0 += p[j];
    edge1 += p[j + 1];

    tab0 += p[j] shifted (-tab_wd, 0);
    draw p[j] -- p[j] shifted (-tab_wd, 0) on_picture tab_picture;
    draw (p[j] -- p[j] shifted (-tab_wd, 0)) rotated (180, 0) on_picture tab_picture;
    
    j += 2;
    k += 2;
  endfor;

  %dotlabel.lft("$p_{24}$", p24);
  %dotlabel.rt("$p_{25}$", p25);
  
  j := 1;

  for i := 24 step 2 until 37:
    p[20 + i] := p[i] rotated (180, 0);
    p[20 + 1 + i] := p[i + 1] rotated (180, 0);
    %dotlabel.lft("$p_{" & decimal (20 + i) & "}$", p[20 + i]);
    %dotlabel.rt("$p_{" & decimal (20 + i + 1) & "}$", p[20 + i + 1]);
    label("$-" & decimal (11.25 * j) & "^\circ$", p[20 + i + 1] shifted (1.5cm, 0));
    j += 1;
  endfor;

  if false:
    draw p20 -- p21;
    draw (p20 -- p21) rotated (180, 0);
    draw p22 -- p23;
    draw p24 -- p25;
    draw (p24 -- p25) rotated (180, 0);
    draw p26 -- p27;
    draw (p26 -- p27) rotated (180, 0);
    draw p28 -- p29;
    draw (p28 -- p29) rotated (180, 0) ;
    draw p30 -- p31;
    draw (p30 -- p31) rotated (180, 0);
    draw p32 -- p33;
    draw (p32 -- p33) rotated (180, 0);
    draw p34 -- p35;
    draw (p34 -- p35) rotated (180, 0);
    draw p36 -- p37;
    draw (p36 -- p37) rotated (180, 0);
  fi;

  tab0 += --;
  tab0 += p36;

  edge0 += p23;
  edge1 += p23;

  edge2 := edge0 rotated (180, 0);
  edge3 := edge1 rotated (180, 0);

  tab1 := tab0 rotated (180, 0);
  
  draw edge0;
  draw edge1;
  draw edge2;
  draw edge3;

  draw tab0 on_picture tab_picture;
  draw tab1 on_picture tab_picture;
  
  %drawarrow edge0 with_color blue with_pen pencircle scaled (3pt, 3pt, 3pt);
  p100 := get_last_point edge0;
  %drawdot p100 with_color blue with_pen pencircle scaled (8pt, 8pt, 8pt);

  %drawarrow edge1 with_pen pencircle scaled (3pt, 3pt, 3pt);
  p101 := get_last_point edge1;
  %drawdot p101 with_pen pencircle scaled (8pt, 8pt, 8pt);

  %drawarrow edge2 with_color green with_pen pencircle scaled (3pt, 3pt, 3pt);
  p102 := get_last_point edge2;
  %drawdot p102 with_color green with_pen pencircle scaled (8pt, 8pt, 8pt);

  %drawarrow edge3 with_color cyan with_pen pencircle scaled (3pt, 3pt, 3pt);
  p103 := get_last_point edge3;
  %drawdot p103 with_color cyan with_pen pencircle scaled (8pt, 8pt, 8pt);

  Q := edge0 .. (reverse edge1) .. edge3 .. (reverse edge2);

  Q += cycle;

  for i = 0 upto 7:
    bi_ang_pict[i] := current_picture;
    label.urt("{\largebf " & decimal i & "}", origin) on_picture bi_ang_pict[i];
  endfor;
  
  label("RA $337.5^\circ$", p22 shifted (-1.5cm, -.75cm)) bi_ang_pict[0];
  label("$0^\circ$",        p22 shifted (0, -.75cm))      bi_ang_pict[0];
  label("$22.5^\circ$",     p22 shifted (1.25cm, -.75cm)) bi_ang_pict[0];

  label("RA $22.5^\circ$", p22 shifted (-1.5cm, -.75cm))  bi_ang_pict[1];
  label("$45^\circ$",      p22 shifted (0, -.75cm))       bi_ang_pict[1];
  label("$67.5^\circ$",    p22 shifted (1.25cm, -.75cm))  bi_ang_pict[1];

  label("RA $67.5^\circ$",  p22 shifted (-1.5cm, -.75cm)) bi_ang_pict[2];
  label("$90^\circ$",       p22 shifted (0, -.75cm))      bi_ang_pict[2];
  label("$112.5^\circ$",    p22 shifted (1.25cm, -.75cm)) bi_ang_pict[2];

  label("RA $112.5^\circ$", p22 shifted (-1.5cm, -.75cm)) bi_ang_pict[3];
  label("$135^\circ$",      p22 shifted (0, -.75cm))      bi_ang_pict[3];
  label("$157.5^\circ$",    p22 shifted (1.25cm, -.75cm)) bi_ang_pict[3];

  label("RA $157.5^\circ$", p22 shifted (-1.5cm, -.75cm)) bi_ang_pict[4];
  label("$180^\circ$",      p22 shifted (0, -.75cm))      bi_ang_pict[4];
  label("$202.5^\circ$",    p22 shifted (1.25cm, -.75cm)) bi_ang_pict[4]; 

  label("RA $202.5^\circ$", p22 shifted (-1.5cm, -.75cm)) bi_ang_pict[5];
  label("$225^\circ$",      p22 shifted (0, -.75cm))      bi_ang_pict[5];
  label("$247.5^\circ$",    p22 shifted (1.25cm, -.75cm)) bi_ang_pict[5];

  label("RA $247.5^\circ$", p22 shifted (-1.5cm, -.75cm)) bi_ang_pict[6];
  label("$270^\circ$",      p22 shifted (0, -.75cm))      bi_ang_pict[6];
  label("$292.5^\circ$",    p22 shifted (1.25cm, -.75cm)) bi_ang_pict[6];

  label("RA $292.5^\circ$", p22 shifted (-1.5cm, -.75cm)) bi_ang_pict[7];
  label("$315^\circ$",      p22 shifted (0, -.75cm))      bi_ang_pict[7];
  label("$337.5^\circ$",    p22 shifted (1.25cm, -.75cm)) bi_ang_pict[7];
  
  clear current_picture;
  
enddef;

%% ** (2) macro get_sphere_for_plotting_stars

macro get_sphere_for_plotting_stars;

def get_sphere_for_plotting_stars {numeric rradius} :=

  numeric i;
  numeric j;
  string u[];
  point r[];
  sphere s;
  circle c;
  circle ecliptic;
  point ra_decl_zero_pt;

  j := 0;
  m := 0;
  j := 11.25; 

  %message "rradius:"; 
  %show rradius;

  ra_decl_zero_pt := (rradius, 0);
  r16 := ra_decl_zero_pt;

  ecliptic := unit_circle scaled (rradius, 0, rradius) rotated (-23.4, 0);
  %draw ecliptic with_color blue;

  color ccolor;
  
  if do_black:
    ccolor := white;
  else:
    ccolor := black;
  fi;

%% Find out why using the 'set' command for 'sphere s' didn't work here.  LDF 2021.7.1.
  
  s := unit_sphere scaled (rradius, rradius, rradius);

  draw s;
  
  j := 0;
  for i = 0 step 22.5 until 337.5:
    r[j] := (rradius, 0) rotated (0, i);
    u[j] := "$" & decimal i & "^\circ$";
    j += 1;
  endfor;
  
  v8  := current_picture;
  v9  := current_picture;
  v10 := current_picture;
  v11 := current_picture;

  clear current_picture;
  
  dotlabel.rt(u0, r0) v10;
  dotlabel.rt(u1, r1) v10;
  dotlabel.rt(u2, r2) v10;
  dotlabel.urt(u3, r3) v10;
  dotlabel.top(u4, r4) v10;
  dotlabel.ulft(u5, r5) v10;
  dotlabel.lft(u6, r6) v10;
  dotlabel.lft(u7, r7) v10;
  dotlabel.lft(u8, r8) v10;
  dotlabel.lft(u9, r9) v10;
  dotlabel.lft(u10, r10) v10;
  dotlabel.llft(u11, r11) v10;
  dotlabel.bot(u12, r12) v10;
  dotlabel.lrt(u13, r13) v10;
  dotlabel.rt(u14, r14) v10;
  dotlabel.rt(u15, r15) v10;
  dotlabel.rt("$r_{16}$:  $0^\circ$", r16) v8;
  dotlabel.rt("$r_{16}$:  $0^\circ$", r16) v9;
  %label.rt("$r_{16}$", r16 shifted (0, 0, -.3cm)) v10;
  dotlabel.rt("$r_{16}$", r16) v11;

%% *** (3) Declination

  r20 := r16 rotated (0, 0, 11.25);
  r21 := r16 rotated (0, 0, -11.25);
  dotlabel.rt("$11.25^\circ$", r20) v9;
  dotlabel.rt("$-11.25^\circ$", r21) v9;
  rotate r20 (0, 0, 11.25);
  rotate r21 (0, 0, -11.25);
  dotlabel.rt("$22.5^\circ$", r20) v9;
  dotlabel.rt("$-22.5^\circ$", r21) v9;
  rotate r20 (0, 0, 11.25);    
  rotate r21 (0, 0, -11.25);
  dotlabel.rt("$33.75^\circ$", r20) v9;
  dotlabel.rt("$-33.75^\circ$", r21) v9;
  rotate r20 (0, 0, 11.25);    
  rotate r21 (0, 0, -11.25);
  dotlabel.rt("$45.0^\circ$", r20) v9;
  dotlabel.rt("$-45.0^\circ$", r21) v9;
  rotate r20 (0, 0, 11.25);    
  rotate r21 (0, 0, -11.25);
  dotlabel.urt("$56.25^\circ$", r20) v9;
  dotlabel.lrt("$-56.25^\circ$", r21) v9;
  rotate r20 (0, 0, 11.25);    
  rotate r21 (0, 0, -11.25);
  dotlabel.urt("$67.5^\circ$", r20) v9;
  dotlabel.lrt("$-67.5^\circ$", r21) v9;
  rotate r20 (0, 0, 11.25);    
  rotate r21 (0, 0, -11.25);
  dotlabel.top("$78.75^\circ$", r20) v9;
  dotlabel.lrt("$-78.75^\circ$", r21) v9;
  rotate r20 (0, 0, 11.25);    
  rotate r21 (0, 0, -11.25);
  dotlabel.top("$90^\circ$", r20) v9;
  dotlabel.bot("$-90^\circ$", r21) v9;

  r18 := r16 rotated (0, 22.5);
  dotlabel.llft("$22.5^\circ$", r18) v8;
  rotate r18 (0, 22.5);
  dotlabel.urt("$45^\circ$", r18) v8;
  rotate r18 (0, 22.5);
  dotlabel.urt("$67.5^\circ$", r18) v8; 
  rotate r18 (0, 22.5);
  dotlabel.urt("$90^\circ$", r18) v8;
  rotate r18 (0, 22.5);
  dotlabel.ulft("$112.5^\circ$", r18) v8;
  rotate r18 (0, 22.5);
  dotlabel.ulft("$135^\circ$", r18) v8;
  rotate r18 (0, 22.5);
  dotlabel.ulft("$157.5^\circ$", r18) v8;
  rotate r18 (0, 22.5);
  dotlabel.lft("$180^\circ$", r18) v8;
  rotate r18 (0, 22.5);
  dotlabel.lft("$202.5^\circ$", r18) v8;
  rotate r18 (0, 22.5);
  dotlabel.urt("$225^\circ$", r18) v8;
  rotate r18 (0, 22.5);
  dotlabel.urt("$247.5^\circ$", r18) v8;
  rotate r18 (0, 22.5);
  dotlabel.lrt("$270^\circ$", r18) v8;
  rotate r18 (0, 22.5);
  dotlabel.ulft("$292.5^\circ$", r18) v8;
  rotate r18 (0, 22.5);
  dotlabel.ulft("$315^\circ$", r18) v8;
  rotate r18 (0, 22.5);
  dotlabel.rt("$337.5^\circ$", r18) v8;
  
%% *** (3)
  
  c := unit_circle scaled (rradius, 0, rradius);
  draw c with_color red on_picture v8;
  draw c with_color red on_picture v11;

enddef;

%% ** (2) macro plot_star_on_sphere

macro plot_star_on_sphere;

def plot_star_on_sphere (pp) {numeric rradius, star S} =

  path q[];
  string u[];
  point P[];
  circle c[];
  numeric a[];
  transform t[];

  pv += 4;
  c0 := unit_circle scaled (rradius, 0, rradius);
  
  ra_decl_zero_pt := (rradius, 0);
  
  u0 := common_name S;
  %message "star S == " & u0 & ".";

  a0 := ra_decimal_degrees S;
  %message "RA decimal deg. of star S (" & u0 & ") (a0):";
  %show a0;

  a1 := declination_decimal_degrees S;
  %message "Declination decimal deg. of star S (" & u0 & ") (a1):";
  %show a1;

  P17 := ra_decl_zero_pt rotated (0, a0);
  %dotlabel.top("$P_{17}$", P17) pv[ctr];
  %label.lft("$P_{17}$:  RA $" & decimal a0 & "^\circ$", P17 shifted (-.75cm, 0)) pv[ctr];
  %dotlabel.top("$P_{17}$", P17) pv[ctr + 1];
  %dotlabel.llft("$P_{17}$", P17) pv[ctr + 2];
  %dotlabel.top("$P_{17}$", P17) pv[ctr + 3];

  P19 := ra_decl_zero_pt rotated (0, 0, a1);
  %dotlabel.rt("$P_{19}$:  Decl.~$" & decimal a1 & "^\circ$", P19) pv[ctr];
  %dotlabel.rt("$P_{19}$:  Decl.~$" & decimal a1 & "^\circ$", P19) pv[ctr + 1];

  P22 := P19 rotated (0, a0);  %% a0:  RA of star S.

  pp := P22;

  q0 := origin -- P17 -- P22 --cycle;

  % draw q0 with_color blue on_picture pv[ctr];
  % draw q0 with_color blue on_picture pv[ctr + 1];
  % draw q0 with_color blue on_picture pv[ctr + 2];
  % draw q0 with_color blue on_picture pv[ctr + 3];

  P23 := get_normal q0;
  %show P23;

  t0 := identity rotated_around (origin, P23) 3;

  P24 := P17 transformed t0; 

  if (magnitude (P22 - P24)) > (magnitude (P22 - P17)):
    invert t0;
  fi;

  P24 := P17;
  
  q1 += ..;

  q1 += P17;

  forever:
    P24 *= t0;
    exit_if magnitude(ypart P24) >= magnitude(ypart P22);
    q1 += P24;
  endfor;

  q1 += P22;

  % draw q1 on_picture pv[ctr] with_pen medium_pen     with_color orange;
  % draw q1 on_picture pv[ctr + 1] with_pen medium_pen with_color orange;
  % draw q1 on_picture pv[ctr + 3] with_pen medium_pen with_color orange;

  %dotlabel.lft("$P_{22}$", P22) pv[ctr];
  %dotlabel.lft("$P_{22}$", P22) pv[ctr + 1];
  %dotlabel.lft("$P_{22}$", P22) pv[ctr + 2];
  %dotlabel.lft("$P_{22}$", P22) pv[ctr + 3];
  %message "a0 (RA of star S in decimal degrees):";
  %show a0;

  if (a0 == 337.5):
    %message "a0 (RA) == 337.5";
    bi_ang0 := 0;
    bi_ang1 := 7;
  elseif (a0 > 337.5) or (a0 < 22.5):
    %message "a0 (RA) > 337.5 or < 22.5";
    bi_ang0 := 0;
    bi_ang1 := -1;
    middle_angle := 0;       %% This case requires special handling.
    min_edge_angle := 337.5;
    max_edge_angle := 22.5;
  elseif (a0 == 22.5):
    %message "a0 (RA) == 22.5";
    bi_ang0 := 0;
    bi_ang1 := 1;
  elseif (a0 > 22.5) and (a0 < 67.5):
    %message "a0 (RA) > 22.5 or a0 < 67.5";
    bi_ang0 := 1;
    bi_ang1 := -1;
    middle_angle   := 45;
    min_edge_angle := 22.5;
    max_edge_angle := 67.5;
  elseif (a0 == 67.5):
    %message "a0 (RA) == 67.5";
    bi_ang0 := 1;
    bi_ang1 := 2;
  elseif (a0 > 67.5) and (a0 < 112.5):
    %message "a0 (RA) > 67.5 and a0 < 112.5";
    bi_ang0 := 2;
    bi_ang1 := -1;
    middle_angle   := 90;
    min_edge_angle := 67.5;
    max_edge_angle := 112.5;
  elseif (a0 == 112.5):
    %message "a0 (RA) == 112.5";
    bi_ang0 := 2;
    bi_ang1 := 3;
  elseif (a0 > 112.5) and (a0 < 157.5):
    bi_ang0 := 3;
    bi_ang1 := -1;
    middle_angle   := 135;
    min_edge_angle := 112.5;
    max_edge_angle := 157.5;
  elseif a0 == 157.5:
    %message "a0 (RA) == 157.5";
    bi_ang0 := 3;
    bi_ang1 := 4;
  elseif (a0 > 157.5) and (a0 < 202.5):
    %message "a0 (RA) > 157.5 and a0 < 202.5";
    bi_ang0 := 4;
    bi_ang1 := -1;
    middle_angle   := 180;
    min_edge_angle := 157.5;
    max_edge_angle := 202.5;
  elseif a0 == 202.5:
    %message "a0 (RA) == 202.5";
    bi_ang0 := 4;
    bi_ang1 := 5;
  elseif (a0 > 202.5) and (a0 < 247.5):
    %message "a0 (RA) > 202.5 and a0 < 247.5";
    bi_ang0 := 5;
    bi_ang1 := -1;
    middle_angle   := 225;
    min_edge_angle := 202.5;
    max_edge_angle := 247.5;
  elseif a0 == 247.5:
    %message "a0 (RA) == 247.5";
    bi_ang0 := 5;
    bi_ang1 := 6;
  elseif (a0 > 247.5) and (a0 < 292.5):
    %message "a0 (RA) > 247.5 and a0 < 292.5";
    bi_ang0 := 6;
    bi_ang1 := -1;
    middle_angle   := 270;
    min_edge_angle := 247.5;
    max_edge_angle := 292.5;
  elseif a0 == 292.5:
    %message "a0 (RA) == 292.5";
    bi_ang0 := 6;
    bi_ang1 := 7;
  elseif (a0 > 292.5) and (a0 < 337.5):
    %message "a0 (RA) > 292.5 and a0 < 337.5";
    bi_ang0 := 7;
    bi_ang1 := -1;
    middle_angle   := 315;
    min_edge_angle := 292.5;
    max_edge_angle := 337.5;
  else:
    errmessage "a0 (RA) has invalid value.";
  fi;

  %message "bi_ang0:"; 
  %show bi_ang0;

  %message "bi_ang1:"; 
  %show bi_ang1;

  %message "middle_angle:";
  %show middle_angle;   

  %message "min_edge_angle:";
  %show min_edge_angle; 

  %message "max_edge_angle:";
  %show max_edge_angle; 

  %message "P22:";
  %show P22;
  
  P25 := (0, ypart P22);  %% Point on y-axis with height equal to declination of star S.

  %message "P25:";
  %show P25;

  %dotlabel.ulft("$P_{25}$", P25) on_picture pv[ctr];
  %dotlabel.rt("$P_{25}$", P25) pv[ctr + 1];
  %dotlabel.rt("$P_{25}$", P25) pv[ctr + 3];

  %message "a1 (declination_decimal_degrees S)";
  %show a1;

  a2 := magnitude(P22 - P25);
  %message "a2 (rradius of circle through P22):";
  %show a2;

  c1 := unit_circle scaled (a2, 0, a2) shifted (0, ypart P25);

  % draw c1 with_color cyan on_picture pv[ctr];
  % draw c1 with_color cyan on_picture pv[ctr + 1];
  % draw c1 with_color cyan on_picture pv[ctr + 2];
  % draw c1 with_color cyan on_picture pv[ctr + 3];
  
  a3 := arc_length (magnitude(a1)) c0;

  %message "a3 (arc length corresponding to declination of star S):";
  %show a3;

  Declination_arc_length := a3;
  
  %message "a0 (RA of star S in decimal degrees):";
  %show a0;

  numeric middle_angle_one;
  
  if a0 >= 337.5:
    middle_angle_one := 360;
    a4 := 360 - a0;
  else:
    middle_angle_one := middle_angle;
    a4 := middle_angle - a0;
  fi;

  if middle_angle_one > a0:
    a4 := -magnitude(a4);
  elseif middle_angle_one < a0:
    a4 := -magnitude(a4);
  fi;
 
  if (a0 == middle_angle) or (a0 == middle_angle_one):
    %message "a0 == middle_angle (or middle_angle_one) == " & decimal middle_angle & ".  Don't need arc length for second arc.";
    %message "Setting RA_arc_length to 0.";
    RA_arc_length := 0;
  else:
    %message "a0 == " & decimal a0 & " is not equal to middle_angle == " & decimal middle_angle & ".";
    %message "Will calculate second arc length.";
    %message "a4 (difference between middle_angle == " & decimal middle_angle & " and RA of  of star S):";
    %show a4;
    
    q2 := q0 rotated (0, a4);

    % draw q2 with_color magenta on_picture pv[ctr];
    % draw q2 with_color magenta on_picture pv[ctr + 1];
    % draw q2 with_color magenta on_picture pv[ctr + 2];
    % draw q2 with_color magenta on_picture pv[ctr + 3];

    P26 := P22 rotated (0, a4);
    %dotlabel.bot("$P_{26}$", P26) on_picture pv[ctr];

    a5 := arc_length (magnitude(a4)) c1;
    %message "a5 (arc length of angle " & decimal magnitude(a4) & " of circle c1 with rradius " & decimal a2 & "):";
    %show a5;

    RA_arc_length := a5;
    
    P27 := P22;

    a6 := magnitude(P26 - P22);

    q3 += ..;
    q3 += P27;

    a7 := 3;
    if a4 < 0:
      a7 *= -1;
    fi;
    
    forever:
      exit_if magnitude(P27 - P22) > a6;
      rotate P27 (0, a7);
      q3 += P27;
    endfor;

    q3 += P26;
    
    % draw q3 with_color green with_pen large_pen on_picture pv[ctr];
    % draw q3 with_color green with_pen large_pen on_picture pv[ctr + 1];
    % draw q3 with_color green with_pen large_pen on_picture pv[ctr + 2];
    % draw q3 with_color green with_pen large_pen on_picture pv[ctr + 3];

  fi;

  %message "Declination_arc_length:";
  %show Declination_arc_length;

  %message "RA_arc_length:";
  %show RA_arc_length;

  i += 4;
  
enddef;

%% ** (2) Macro plot_star_on_spherical_biangle

macro plot_star_on_spherical_biangle;

def plot_star_on_spherical_biangle {star S, numeric point_number, numeric label_pos, numeric shift_x, numeric shift_y} =
  
  numeric decl;
  numeric ra;
  string s;
  string u;
  point y_axis_point;
  numeric box_wd;
  numeric box_ht;

  color ccolor;
  
  if do_black:
    ccolor := white;
  else:
    ccolor := black;
  fi;

  %message "Entering macro `plot_star_on_spherical_biangle'.";

  decl := declination_decimal_degrees S;
  ra   :=  right_ascension_decimal_degrees S;

  %message "decl:";
  %show decl;

  %message "ra:";
  %show ra;

  %message "bi_ang0:";
  %show bi_ang0;

  %message "bi_ang1:";
  %show bi_ang1;

  %message "middle_angle:";
  %show middle_angle;

  %message "min_edge_angle:";
  %show min_edge_angle;

  %message "max_edge_angle:";
  %show max_edge_angle;

  %message "Declination_arc_length:";
  %show Declination_arc_length;

  %message "RA_arc_length:";
  %show RA_arc_length;

  %message "ra_decl_zero_pt:";
  %show ra_decl_zero_pt;

%% !! START HERE: LDF 2021.7.6.  Add code for the case of stars on the y-axis or on one of the edges.
  
  if bi_ang1 == -1:
    %message "bi_ang0 == " & decimal bi_ang0 & " and bi_ang1 == -1.";
    if decl >= 0:
      y_axis_point := (0, Declination_arc_length);
    else:
      y_axis_point := (0, -Declination_arc_length);
    fi;

    % if ra > middle_angle:
    %   dotlabel.lft("$R^\prime_{" & decimal point_number & "}$", y_axis_point) bi_ang_pict[bi_ang0];
    % else:
    %   dotlabel.rt("$R^\prime_{" & decimal point_number & "}$", y_axis_point) bi_ang_pict[bi_ang0];
    % fi;

    %message "ra";
    %show ra;
    %message "middle_angle";
    %show middle_angle;
    %pause;

    if ra >= 336.5:
      middle_angle := 360.0;
    fi;
    
    if ra > middle_angle:
      R[point_number] := (RA_arc_length, ypart y_axis_point);
    else:
      R[point_number] := (-RA_arc_length, ypart y_axis_point);
    fi;

    if point_number < 10:
      u := "00";
    elseif point_number < 100:
      u := "0";
    else:
      u := "";
    fi;

    s := "\starinfo{" & u & decimal point_number & "}{" & decimal point_number & "}{" & common_name S
         & "}{" & decimal ra & "}{" & decimal decl & "}{" & decimal (bi_ang0 + 1) & "}";
    

    write s to nw[bi_ang0];
    write s to star_info_combined;

    if label_pos == label_pos_zero:
      label("{\medium " & common_name S & "}", R[point_number] shifted (shift_x, shift_y))
        with_text_color ccolor on_picture qv[bi_ang0];
    elseif label_pos == label_pos_top:
      label.top("{\medium " & common_name S & "}", R[point_number] shifted (shift_x, basic_shift_val + shift_y))
        with_text_color ccolor on_picture qv[bi_ang0];
    elseif label_pos == label_pos_bot:
      label.bot("{\medium " & common_name S & "}", R[point_number] shifted (shift_x, -basic_shift_val + shift_y))
        with_text_color ccolor on_picture qv[bi_ang0];
    elseif label_pos == label_pos_lft:
      label.lft("{\medium " & common_name S & "}", R[point_number] shifted (-basic_shift_val + shift_x, shift_y))
        with_text_color ccolor on_picture qv[bi_ang0];
    elseif label_pos == label_pos_rt:
      label.rt("{\medium " & common_name S & "}", R[point_number] shifted (basic_shift_val + shift_x, shift_y))
        with_text_color ccolor on_picture qv[bi_ang0];
    elseif label_pos == label_pos_urt:
      label.urt("{\medium " & common_name S & "}", R[point_number] shifted (basic_shift_val + shift_x, basic_shift_val + shift_y))
        with_text_color ccolor on_picture qv[bi_ang0];
    elseif label_pos == label_pos_ulft:
      label.ulft("{\medium " & common_name S & "}", R[point_number] shifted (-basic_shift_val + shift_x, basic_shift_val + shift_y))
        with_text_color ccolor on_picture qv[bi_ang0];
    elseif label_pos == label_pos_lrt:
      label.lrt("{\medium " & common_name S & "}", R[point_number] shifted (basic_shift_val + shift_x, -basic_shift_val + shift_y))
        with_text_color ccolor on_picture qv[bi_ang0];
    elseif label_pos == label_pos_llft:
      label.llft("{\medium " & common_name S & "}", R[point_number] shifted (-basic_shift_val + shift_x, -basic_shift_val + shift_y))
        with_text_color ccolor on_picture qv[bi_ang0];
    fi;

    numeric app_mag;
    pen sstar_pen;
   
    app_mag := apparent_magnitude S;

    if app_mag < 0:
      sstar_pen := star_pen[-1];
    elseif app_mag < 1:
      sstar_pen := star_pen[0];
    elseif app_mag < 2:
      sstar_pen := star_pen[1];
    elseif app_mag < 3:
      sstar_pen := star_pen[2];
    elseif app_mag < 4:
      sstar_pen := star_pen[3];
    elseif app_mag < 5:
      sstar_pen := star_pen[4];
    else:
      sstar_pen := star_pen[5];
    fi;
    
    drawdot R[point_number]with_pen sstar_pen with_color ccolor on_picture qv[bi_ang0];

    box_wd := .75cm;
    box_ht := .5cm;
    
    if length (common_name S) > 8:
      box_wd += .25cm;
    fi;
    
    s := "\\iffalse " & common_name S & "\\fi\\epsffile{sample3." & decimal (100 + label_picture_ctr)
      & "}\\hskip2em plus 1em minus 1em"; 
    
    write (s) to label_out;
    beginfig(100 + label_picture_ctr);
      fill (-box_wd, -box_ht) -- (box_wd, -box_ht) -- (box_wd, box_ht) -- (-box_wd, box_ht) -- cycle;
      label.top("{\medium " & common_name S & "}", (0, 0)) with_text_color white;
      drawdot (0, -.25box_ht) with_pen sstar_pen with_color white;
    endfig with_projection parallel_x_y;
    label_picture_ctr += 1;

    if do_extra_labels:
      %dotlabel.bot("$R_{" & decimal point_number & "}$", R[point_number]) with_text_color ccolor with_dot_color ccolor
      % on_picture qv[bi_ang0];
    fi;

  %message "Exiting macro `plot_star_on_spherical_biangle'.";

enddef;

%% ** (2) macro draw_lines

macro draw_lines;

def draw_lines =

  if do_black:
    fill Q;
    ccolor := dark_gray;
  else:
    ccolor := black;
  fi;
    
  drawdot origin with_pen medium_pen with_color ccolor;
  draw p20 -- p21 with_color ccolor;
  draw p22 -- p23 with_color ccolor;
  draw p24 -- p25 with_color ccolor;
  draw (p24 -- p25) rotated (180, 0) with_color ccolor;
  draw p26 -- p27 with_color ccolor;
  draw (p26 -- p27) rotated (180, 0) with_color ccolor;
  draw p28 -- p29 with_color ccolor;
  draw (p28 -- p29) rotated (180, 0)  with_color ccolor;
  output current_picture with_projection parallel_x_y;
  clear current_picture;
  
  draw p30 -- p31 with_color ccolor;
  draw p32 -- p33 with_color ccolor;
  draw p34 -- p35 with_color ccolor;
  draw p36 -- p37 with_color ccolor;
  draw p50 -- p51 with_color ccolor;
  draw p52 -- p53 with_color ccolor;
  draw p54 -- p55 with_color ccolor;
  draw p56 -- p57 with_color ccolor;
    
enddef;

%% ** (2) macro get_panels

macro get_panels;

def get_panels {numeric rradius} =

  numeric i;
  numeric j;
  numeric k;
  point K[];
  
  j := 0;
  m := 1;

  for k := 0 step 11.25 until 67.5:  %% Declination
    j := 0;
    for i := 0 step 22.5 until 337.5: %% Right ascension
      K0 := (origin shifted (rradius, 0)) rotated (0, 0, k);
      K1 := K0 rotated (0, 0, 11.25);
      rotate K0 (0, i);
      rotate K1 (0, i);
      K2 := K0 rotated (0, 22.5);
      K3 := K1 rotated (0, 22.5);
      
      K4 := (origin shifted (rradius, 0)) rotated (0, 0, -k);
      K5 := K4 rotated (0, 0, -11.25);
      rotate K4 (0, i);
      rotate K5 (0, i);
      K6 := K4 rotated (0, 22.5);
      K7 := K5 rotated (0, 22.5);
      
      D[j][m]  := (K0, K1, K3, K2);
      D[j][-m] := (K4, K5, K7, K6);
      draw D[j][m]  with_color green on_picture quadrant_picture;
      draw D[j][-m] with_color green on_picture quadrant_picture;
      if (k == 0) and (i < 180):
        label(decimal j & "/" & decimal m, mediate(K0, K3))  on_picture quadrant_picture;
        label(decimal j & "/" & decimal -m, mediate(K4, K7)) on_picture quadrant_picture;
      fi;
      j += 1;
    endfor;
    m += 1;
  endfor;

  j := 0;
  for i := 0 step 22.5 until 337.5:
    K0 := (origin shifted (rradius, 0)) rotated (0, 0, 78.75);
    K1 := K0 rotated (0, 22.5);
    K2 := (0, rradius);
    rotate K0 (0, i);
    rotate K1 (0, i);
    K6 := mediate(K2, mediate(K0, K1, .5), .75);
    %label("1/" & decimal j, K6) with_text_color magenta on_picture quadrant_picture;
    K3 := (origin shifted (rradius, 0)) rotated (0, 0, -78.75);
    K4 := K3 rotated (0, 22.5);
    K5 := (0, -rradius);
    rotate K3 (0, i);
    rotate K4 (0, i);
    K7 := mediate(K5, mediate(K3, K4, .5), .75);
    %label("-1/" & decimal j, K7) with_text_color magenta on_picture quadrant_picture;;
    set T[j][8] with_points (K0, K1, K2);
    set T[j][-8] with_points (K3, K4, K5);
    draw T[j][8]  with_color green on_picture quadrant_picture;   % magenta
    draw T[j][-8] with_color green on_picture quadrant_picture; % magenta
    j += 1;
  endfor;
  
enddef;

%% ** (2) macro plot_star_on_panel

macro plot_star_on_panel;

def plot_star_on_panel (sstar_panel_point) {star S, point sstar_point} =

  numeric RA;
  numeric Decl;
  numeric RA_ctr;
  numeric Decl_ctr;
  boolean b;
  path E[];
  point M[];
  rectangle V;
  triangle  W;

  bool_point bp;
  plane pl;

  RA   := right_ascension_decimal_degrees S;
  Decl := declination_decimal_degrees S; 

  %message "RA of " & common_name S & ":";
  %show RA;

  %message "Decl of " & common_name S & ":";
  %show Decl;

  RA_ctr := floor (RA / 22.5);

  dotlabel.top(common_name S, sstar_point) on_picture quadrant_picture; % with_text_color blue with_dot_color blue

  E0 := origin -- sstar_point;
  %draw E0 with_color red with_pen medium_pen on_picture quadrant_picture;

  if (Decl >= 0) and (Decl < 78.75):
    Decl_ctr := floor (Decl / 11.25) + 1;
    V := D[RA_ctr][Decl_ctr];
  elseif (Decl < 0) and (Decl > -78.75):
    Decl_ctr := (floor (-Decl / 11.25) + 1) * -1;
    V := D[RA_ctr][Decl_ctr];
  elseif Decl > 78.75:
    Decl_ctr := 8;
    W := T[RA_ctr][8];
  elseif Decl < -78.75:
    Decl_ctr := -8;
    W := T[RA_ctr][-8];
  fi;

  % message "RA_ctr for " & common_name S & ":";
  % show RA_ctr;

  % message "Decl_ctr for " & common_name S & ":";
  % show Decl_ctr;

  %pause;
    
  RRA_ctr   := RA_ctr;
  DDecl_ctr := Decl_ctr;
  
  if (Decl > 78.75) or (Decl < -78.75):
    %draw W with_color blue with_pen medium_pen on_picture quadrant_picture;
    pl := get_plane W;
  else:
    %draw V with_color blue with_pen medium_pen on_picture quadrant_picture;
    pl := get_plane V;
  fi;

  bp := E0 intersection_point pl; 
  b := bp;
  
  if b:
    M0 := bp;
    drawdot M0 with_color red with_pen medium_pen on_picture quadrant_picture;
  else:
    message "This can't happen.";
    M0 := origin;
    pause;
  fi;

  %message "M0:"; 
  %show M0;

  sstar_panel_point := M0;

enddef;

%% ** (2) macro plot_star_on_flat_panel

macro plot_star_on_flat_panel;

def plot_star_on_flat_panel (R) {star S, point P, numeric RA_ctr, numeric Decl_ctr, numeric label_pos} =
    
  path q[];
  point p[];
  numeric v;
  numeric n[];
  string s;

  color ccolor;
  
  if do_black:
    ccolor := white;  %% white
  else:
    ccolor := black;
  fi;

  if RA_ctr < 8:
    v := 0;
  else:
    v := 1;
  fi;
  
  %message "common_name S:";
  %show common_name S;
  
  %message "P:";
  %show P;

  %message "R:";
  %show R;

  %message "RA_ctr:";
  %show RA_ctr;

  %message "Decl_ctr:";
  %show Decl_ctr;

  if ((Decl_ctr > 0) and (Decl_ctr < 8)) or ((Decl_ctr < 0) and (Decl_ctr > -8)):
    q0 := D[RA_ctr][Decl_ctr];
    q1 := flat_quadrant[RA_ctr][Decl_ctr];
    %draw q1 with_color red with_pen medium_pen on_picture flat_quadrant_picture[v]; 
  elseif (Decl_ctr == 8) or (Decl_ctr == -8):
    q0 := T[RA_ctr][Decl_ctr];
    q1 := flat_quadrant[RA_ctr][Decl_ctr];
    %message "q0:";
    %show q0;
    %message "q1:";
    %show q1;
    %pause;
    %draw q1 with_color red with_pen medium_pen on_picture flat_quadrant_picture[v]; 
  fi;

  %draw q0 with_color red with_pen medium_pen on_picture v9;

  %message "RA_ctr:";
  %show RA_ctr;

  %message "Decl_ctr:";
  %show Decl_ctr;
  
  p0 := get_point (0) q0;

  if ((Decl_ctr > 0) and (Decl_ctr < 8)) or ((Decl_ctr < 0) and (Decl_ctr > -8)):
    p1 := get_point (3) q0;
  fi;

  p2 := get_point (2) q0;
  p3 := get_point (1) q0;

  p4 := get_point (0) q1;
  p5 := get_point (1) q1;
  p6 := get_point (2) q1;

  if ((Decl_ctr > 0) and (Decl_ctr < 8)) or ((Decl_ctr < 0) and (Decl_ctr > -8)):
    p7 := get_point (3) q1;
  fi;
  
  n0 := magnitude(P - p0);

  if ((Decl_ctr > 0) and (Decl_ctr < 8)) or ((Decl_ctr < 0) and (Decl_ctr > -8)):
    n1 := (P - p0) angle (p1 - p0);
  else:
    n1 := (P - p0) angle (p3 - p0);
  fi;

  %message "n0";
  %show n0;

  %message "n1";
  %show n1;

  if Decl_ctr > 0:
    n2 := 1;
  else:
    n2 := -1;
  fi;

  p8:= p4 shifted (0, 0, n2);

  p9 := (p4 shifted (n0, 0)) rotated_around (p4, p8) n1;

  % dotlabel.lft("$p_0$", p0) on_picture v8;
  % dotlabel.lft("$p_0$", p0) on_picture v10;

  % if ((Decl_ctr > 0) and (Decl_ctr < 8)) or ((Decl_ctr < 0) and (Decl_ctr > -8)):
  %   dotlabel.lft("$p_1$", p1) on_picture v8;
  % fi;
  
  % dotlabel.top("$p_2$", p2) on_picture v8;
  % dotlabel.top("$p_3$", p3) on_picture v8;

  % dotlabel.lft("$p_0$", p0) on_picture v9;

  % dotlabel.lft("$p_0$", p0) on_picture v10;
  % dotlabel.lft("$p_2$", p2) on_picture v10;
  % dotlabel.rt("$p_3$", p3) on_picture v10;
  
  % if ((Decl_ctr > 0) and (Decl_ctr < 8)) or ((Decl_ctr < 0) and (Decl_ctr > -8)):
  %   dotlabel.top("$p_1$", p1) on_picture v9;
  % fi;
  
  % dotlabel.top("$p_2$", p2) on_picture v9;
  % dotlabel.top("$p_3$", p3) on_picture v9;

  % dotlabel.lft("$p_4$", p4) on_picture flat_quadrant_picture[v]; 
  % dotlabel.rt("$p_5$", p5) on_picture flat_quadrant_picture[v]; 
  % dotlabel.rt("$p_6$", p6) on_picture flat_quadrant_picture[v]; 

  %if ((Decl_ctr > 0) and (Decl_ctr < 8)) or ((Decl_ctr < 0) and (Decl_ctr > -8)):
    %dotlabel.lft("$p_7$", p7) on_picture flat_quadrant_picture[v];
  %fi;

  %message "p9";
  %show p9;  
  R := p9;

  s := "{\small " & common_name S & "}";
  
  if label_pos == label_pos_zero:
    label(s, R shifted (shift_x, shift_y))
      with_text_color ccolor on_picture flat_quadrant_picture[v];
  elseif label_pos == label_pos_top:
    label.top(s, R shifted (shift_x, basic_shift_val + shift_y))
      with_text_color ccolor on_picture flat_quadrant_picture[v];
  elseif label_pos == label_pos_bot:
    label.bot(s, R shifted (shift_x, -basic_shift_val + shift_y))
      with_text_color ccolor on_picture flat_quadrant_picture[v];
  elseif label_pos == label_pos_lft:
    label.lft(s, R shifted (-basic_shift_val + shift_x, shift_y))
      with_text_color ccolor on_picture flat_quadrant_picture[v];
  elseif label_pos == label_pos_rt:
    label.rt(s, R shifted (basic_shift_val + shift_x, shift_y))
      with_text_color ccolor on_picture flat_quadrant_picture[v];
  elseif label_pos == label_pos_urt:
    label.urt(s, R shifted (basic_shift_val + shift_x, basic_shift_val + shift_y))
      with_text_color ccolor on_picture flat_quadrant_picture[v];
  elseif label_pos == label_pos_ulft:
    label.ulft(s, R shifted (-basic_shift_val + shift_x, basic_shift_val + shift_y))
      with_text_color ccolor on_picture flat_quadrant_picture[v];
  elseif label_pos == label_pos_lrt:
    label.lrt(s, R shifted (basic_shift_val + shift_x, -basic_shift_val + shift_y))
      with_text_color ccolor on_picture flat_quadrant_picture[v];
  elseif label_pos == label_pos_llft:
    label.llft(s, R shifted (-basic_shift_val + shift_x, -basic_shift_val + shift_y))
      with_text_color ccolor on_picture flat_quadrant_picture[v];
  fi;

  numeric app_mag;
  pen sstar_pen;

  app_mag := apparent_magnitude S;

  if app_mag < 0:
    sstar_pen := star_pen[-1];
  elseif app_mag < 1:
    sstar_pen := star_pen[0];
  elseif app_mag < 2:
    sstar_pen := star_pen[1];
  elseif app_mag < 3:
    sstar_pen := star_pen[2];
  elseif app_mag < 4:
    sstar_pen := star_pen[3];
  elseif app_mag < 5:
    sstar_pen := star_pen[4];
  else:
    sstar_pen := star_pen[5];
  fi;

  drawdot R with_pen sstar_pen with_color ccolor on_picture flat_quadrant_picture[v + 2];
  
  %dotlabel.bot("$p_8$", p8) on_picture flat_quadrant_picture[v];
  %dotlabel.top("$p_9$", p9) on_picture flat_quadrant_picture[v]; 
  
  % drawdot star_panel_point0 with_color red with_pen medium_pen;

  % n5 := magnitude(star_panel_point0 - p0);
  % message "n5:";
  %show n5;
  
  % n6 := (star_panel_point0 - p0) angle (p1 - p0);
  % message "n6:";
  % show n6;

  % p8 := (p4 shifted (n5, 0)) rotated (0, 0, n6);
  % drawdot p8 with_color red with_pen medium_pen;

enddef;

%% ** (2) macro get_flat_panels

macro get_flat_panels;

def get_flat_panels {numeric ttab_width}=

  point p[];
  path q[];
  point r[];
  point W[];
  path u[];
  transform t[];
  numeric k;
  numeric m;
  numeric n[];
  numeric v;
  point temp_a;      
  point temp_b;
  point temp_c;

  path temp_path_a;
  path temp_path_b;

  path temp_path_c;
  path temp_path_d;
  
  v := 0;
  
  k := 0;
  m := 0;
  for i = 0 upto 15:   % 15:
    t1 := identity shifted ((i * 5cm), 0);
    if i == 8:
      v := 1;
    fi;
    for j = 1 upto 7: 
      t0 := identity; 
      q[m] := D[i][j];    
      %draw q[m] on_picture flat_quadrant_picture[v];
      p[k] := get_point (3) q[m];
      %dotlabel.top("$p_{" & decimal k & "}$", p[k]) on_picture flat_quadrant_picture[v];
      p[k+1] := get_point (0) q[m];
      %dotlabel.top("$p_{" & decimal (k+1) & "}$", p[k+1]) on_picture flat_quadrant_picture[v];
      p[k+2] := get_point (1) q[m];
      %dotlabel.top("$p_{" & decimal (k+2) & "}$", p[k+2]) on_picture flat_quadrant_picture[v];
      p[k+3] := get_point (2) q[m];
      %dotlabel.top("$p_{" & decimal (k+3) & "}$", p[k+3]) on_picture flat_quadrant_picture[v];
      n0 := (p[k+2] - p[k]) angle (p[k+1] - p[k]);
      n1 := (p[k+3] - p[k]) angle (p[k+1] - p[k]);
      %message "n0:";
      %show n0;
      %message "n1:";
      %show n1;
      n2 := magnitude(p[k+1] - p[k]);
      n3 := magnitude(p[k+2] - p[k]);
      n4 := magnitude(p[k+3] - p[k]);
      %message "n2:";
      %show n2;
      %message "n3:";
      %show n3;
      %message "n4:";
      %show n4;

      p[k+4] := origin;
      p[k+5] := p[k+4] shifted (n2, 0);
      p[k+6] := (p[k+4] shifted (n3, 0)) rotated (0, 0, n0);
      p[k+7] := (p[k+4] shifted (n4, 0)) rotated (0, 0, n1); 

      q[m+1] := p[k+4] -- p[k+5] -- p[k+6] -- p[k+7] -- cycle;
      %message "q[" & decimal (m+1) & "]:";
      %show q[m+1];

      p[k+8] := mediate(p[k+4], p[k+5]);
      p[k+9] := mediate(p[k+6], p[k+7]);

      if j == 1:
        q[m+1] *= t1;
	if do_black:
	  fill q[m+1] with_color black on_picture flat_quadrant_picture[v];
 	  draw q[m+1] with_color dark_gray on_picture flat_quadrant_picture[v+2];
	else:
	  draw q[m+1] on_picture flat_quadrant_picture[v];
	fi;
	if do_black:
	  fill q[m+1] rotated (180, 0) with_color black on_picture flat_quadrant_picture[v];
	  draw q[m+1] rotated (180, 0) with_color dark_gray on_picture flat_quadrant_picture[v+2];
	else:
	  draw q[m+1] rotated (180, 0) on_picture flat_quadrant_picture[v];
	fi;
        if j == 7:
          %dotlabel.llft("$p_{" & decimal (k+4) & "}$", p[k+4]) on_picture flat_quadrant_picture[v];
          %dotlabel.lrt("$p_{" & decimal (k+5) & "}$", p[k+5]) on_picture flat_quadrant_picture[v];
          %dotlabel.urt("$p_{" & decimal (k+6) & "}$", p[k+6]) on_picture flat_quadrant_picture[v];
          %dotlabel.ulft("$p_{" & decimal (k+7) & "}$", p[k+7]) on_picture flat_quadrant_picture[v];
          %dotlabel.bot("$p_{" & decimal (k+8) & "}$", p[k+8]) on_picture flat_quadrant_picture[v];
          %dotlabel.top("$p_{" & decimal (k+9) & "}$", p[k+9]) on_picture flat_quadrant_picture[v];
        fi;
      fi;

      if j > 1:
        p[k+10] := get_point (0) q[m-1];
        p[k+11] := get_point (1) q[m-1];
        p[k+12] := get_point (2) q[m-1];
        p[k+13] := get_point (3) q[m-1];
        p[k+14] := mediate(p[k+10], p[k+11], .5);
        p[k+15] := mediate(p[k+12], p[k+13], .5);
        n5 := magnitude(p[k+15] - p[k+14]);

        %t0 := identity shifted by (p[k-7] - p[k+14]);
        %t0 := identity shifted (0, ((j-1) * 2cm));
        t0 := identity shifted by (p[k+15]- p[k+8]);

        p[k+4] *= t0;
        p[k+5] *= t0;
        p[k+6] *= t0;
        p[k+7] *= t0;
        p[k+8] *= t0;
        p[k+9] *= t0;

        if j == 7:
          %dotlabel.lft("$p_{" & decimal (k+4) & "}$", p[k+4]) on_picture flat_quadrant_picture[v];
          %dotlabel.rt("$p_{" & decimal (k+5) & "}$", p[k+5]) on_picture flat_quadrant_picture[v];
          %dotlabel.rt("$p_{" & decimal (k+6) & "}$", p[k+6]) on_picture flat_quadrant_picture[v];
          %dotlabel.lft("$p_{" & decimal (k+7) & "}$", p[k+7]) on_picture flat_quadrant_picture[v];
          %dotlabel.bot("$p_{" & decimal (k+8) & "}$", p[k+8]) on_picture flat_quadrant_picture[v];
          %dotlabel.top("$p_{" & decimal (k+9) & "}$", p[k+9]) on_picture flat_quadrant_picture[v];
        fi;

        q[m+1] *= t0;
        
	if do_black:
	  fill q[m+1] with_color black on_picture flat_quadrant_picture[v];
	  draw q[m+1] with_color dark_gray on_picture flat_quadrant_picture[v+2];
	  fill q[m+1] rotated (180, 0) with_color black on_picture flat_quadrant_picture[v];
	  draw q[m+1] rotated (180, 0) with_color dark_gray on_picture flat_quadrant_picture[v+2];
	else:
	  draw q[m+1] on_picture flat_quadrant_picture[v];
	  draw q[m+1] rotated (180, 0) on_picture flat_quadrant_picture[v];
	fi;

        if j == 7:
          %dotlabel.lft("$p_{" & decimal (k+10) & "}$", p[k+10]) on_picture flat_quadrant_picture[v];
          %dotlabel.rt("$p_{"  & decimal (k+11) & "}$", p[k+11]) on_picture flat_quadrant_picture[v];
          %dotlabel.rt("$p_{"  & decimal (k+12) & "}$", p[k+12]) on_picture flat_quadrant_picture[v];
          %dotlabel.lft("$p_{" & decimal (k+13) & "}$", p[k+13]) on_picture flat_quadrant_picture[v];
          %dotlabel.top("$p_{"  & decimal (k+14) & "}$", p[k+14]) on_picture flat_quadrant_picture[v];
          %dotlabel.bot("$p_{"  & decimal (k+15) & "}$", p[k+15]) on_picture flat_quadrant_picture[v];
        fi;
        
      fi;

      flat_quadrant[i][j] := q[m+1];
      flat_quadrant[i][-j] := q[m+1] rotated (180, 0);

      %draw ((get_point (0) flat_quadrant[i][j]) -- (get_point(2) flat_quadrant[i][j]);

      temp_a := mediate(get_point (0) flat_quadrant[i][j], get_point (1) flat_quadrant[i][j], .5);
      temp_b := mediate(get_point (2) flat_quadrant[i][j], get_point (3) flat_quadrant[i][j], .5);
      temp_c := mediate(temp_a, temp_b, .5) shifted (-1.75cm, 0);
      
      %draw flat_quadrant[i][j] with_color red with_pen medium_pen on_picture flat_quadrant_picture[v];
      %drawdot get_point (0) flat_quadrant[i][j] with_color red with_pen medium_pen on_picture flat_quadrant_picture[v];
      %draw get_point (0) flat_quadrant[i][j] -- get_point (2) flat_quadrant[i][j]
      %with_color red with_pen medium_pen on_picture flat_quadrant_picture[v];
      label(decimal i & "/" & decimal j, temp_c) on_picture flat_quadrant_picture[v];
      label(decimal i & "/-" & decimal j, temp_c rotated (180, 0)) on_picture flat_quadrant_picture[v];
      
      k += 16;
      m += 2;
    endfor;
  endfor;

  v := 0;

  for i := 0 upto 15:
    if i == 8:
      v := 1;
    fi;

    q[m] := T[i][8];

    % message "m:";
    % show m;

    p[k] := get_point (0) q[m];
    p[k+1] := get_point (1) q[m];
    p[k+2] := get_point (2) q[m];

    n0 := magnitude (p[k+1] - p[k]);
    n1 := magnitude (p[k+2] - p[k]);
    n2 := (p[k+2] - p[k]) angle (p[k+1] - p[k]);

    p[k+3] := (n1, 0) rotated (0, 0, n2); 
    p[k+4] := (.5n0, 0);
    
    q[m+1] := origin -- (n0, 0) -- p[k+3] -- cycle; 

    t2 := identity shifted by (p[105 + (i * 112)] - p[k+4]);

    q[m+1] *= t2;

    q[m+2] := q[m+1] rotated (180, 0);

    if do_black:
      draw q[m+1] with_color dark_gray on_picture flat_quadrant_picture[v+2];
      fill q[m+1] with_color black on_picture flat_quadrant_picture[v];
      draw q[m+2] with_color dark_gray on_picture flat_quadrant_picture[v+2];
      fill q[m+2] with_color black on_picture flat_quadrant_picture[v];
    else:
      draw q[m+1] on_picture flat_quadrant_picture[v];
      draw q[m+2] on_picture flat_quadrant_picture[v];
    fi;


    
    flat_quadrant[i][8]  := q[m+1];
    flat_quadrant[i][-8] := q[m+2];
    k += 5;
    m += 3;
  endfor;

  point temp_pt;
  
  v := 0;
  j := 0;
  m := 226;
  for i = 0 upto 15:
    if i == 8:
      v := 1;
    fi;
    temp_pt := get_point (2) q[m];
    label.lft("RA $" & decimal j & "^\circ$", temp_pt shifted (-.375cm, 0)) on_picture flat_quadrant_picture[v];
    label.rt("RA $" & decimal (j + 22.5) & "^\circ$",  temp_pt shifted (.375cm, 0)) on_picture flat_quadrant_picture[v];
    j += 22.5;
    m += 3;
  endfor;
  

  % drawdot get_point (2) q[229] with_color green with_pen Large_pen on_picture flat_quadrant_picture[0];
  % drawdot get_point (2) q[232] with_color green with_pen Large_pen on_picture flat_quadrant_picture[0];
  % drawdot get_point (2) q[235] with_color green with_pen Large_pen on_picture flat_quadrant_picture[0];
  % drawdot get_point (2) q[238] with_color green with_pen Large_pen on_picture flat_quadrant_picture[0];
  % drawdot get_point (2) q[241] with_color green with_pen Large_pen on_picture flat_quadrant_picture[0];
  % drawdot get_point (2) q[244] with_color green with_pen Large_pen on_picture flat_quadrant_picture[0];
  % drawdot get_point (2) q[247] with_color green with_pen Large_pen on_picture flat_quadrant_picture[0];

  % drawdot get_point (2) q[250] with_color green with_pen Large_pen on_picture flat_quadrant_picture[1];
  % drawdot get_point (2) q[253] with_color green with_pen Large_pen on_picture flat_quadrant_picture[1];
  % drawdot get_point (2) q[256] with_color green with_pen Large_pen on_picture flat_quadrant_picture[1];
  % drawdot get_point (2) q[259] with_color green with_pen Large_pen on_picture flat_quadrant_picture[1];
  % drawdot get_point (2) q[262] with_color green with_pen Large_pen on_picture flat_quadrant_picture[1];
  % drawdot get_point (2) q[265] with_color green with_pen Large_pen on_picture flat_quadrant_picture[1];
  % drawdot get_point (2) q[268] with_color green with_pen Large_pen on_picture flat_quadrant_picture[1];
  % drawdot get_point (2) q[271] with_color green with_pen Large_pen on_picture flat_quadrant_picture[1];
  
  r0 := p4;
  r1 := p5;
    
  % drawdot q[2] with_color red with_pen Large_pen on_picture flat_quadrant_picture[0];
  % drawdot q[2] with_color red with_pen Large_pen on_picture flat_quadrant_picture[0];


  %dotlabel.lft("$r_0$", r0) on_picture flat_quadrant_picture[0];
  %dotlabel.rt("$r_1$", r1) on_picture flat_quadrant_picture[0];

  j := 2;
  for i := 1 step 2 until 13:
    %draw q[i] with_color cyan with_pen medium_pen on_picture flat_quadrant_picture[0];
    r[j]   := get_point (3) q[i];
    r[j+1] := get_point (2) q[i];
    %dotlabel.lft("$r_{" & decimal j & "}$", r[j]) on_picture flat_quadrant_picture[0];
    %dotlabel.rt("$r_{" & decimal (j+1) & "}$", r[j+1]) on_picture flat_quadrant_picture[0];
    j += 2;
  endfor;

  %draw q225 with_color cyan with_pen medium_pen on_picture flat_quadrant_picture[0];

  r[17] := get_point (2) q[225];
  %dotlabel.top("$r_{17}$", r17) on_picture flat_quadrant_picture[0];

  temp_angle := 30;
  temp_distance_a := .2;
  temp_distance_b := .25;

  u100 := flat_quadrant[0][1];
  %draw u100 on_picture flat_quadrant_picture[0] with_color red with_pen Large_pen;

  u101 := flat_quadrant[1][1];
  %draw u101 on_picture flat_quadrant_picture[0] with_color blue with_pen Large_pen;

  u102 := flat_quadrant[8][1];
  %draw u102 on_picture flat_quadrant_picture[1] with_color blue with_pen Large_pen;
  
  t3 := identity shifted by (get_point (0) u101 - get_point (0) u100);
  t4 := identity shifted by (get_point (0) u102 - get_point (0) u100);
  
  k := 0;
  j := 0;
  for i := 1 step 2 until 15:
    if i < 15:
      W[j] := mediate(r[i], r[i+2], temp_distance_a);
    else:
      W[j] := mediate(r[i], r[i+2], temp_distance_b);
    fi;
    if i < 15:
      W[j+1] := W[j] shifted (ttab_width, 0);
    else:
      W[j+1] := W[j] shifted (ttab_width - .175cm, 0);
    fi;
    W[j+2] := W[j] shifted (0, 0, 1);
    W[j+3] := W[j+1] rotated_around (W[j], W[j+2]) temp_angle;
    %dotlabel.rt("$r_{" & decimal (i+20) & "}$", W[j+3]) on_picture flat_quadrant_picture[0];

    if i < 15:
      W[j+4] := mediate(r[i], r[i+2], (1 - temp_distance_a));  
    else:
      W[j+4] := mediate(r[i], r[i+2], (1 - temp_distance_b));
    fi;

    if i < 15:
      W[j+5] := W[j+4] shifted (ttab_width, 0);
    else:
      W[j+5] := W[j+4] shifted (ttab_width - .175cm, 0);
    fi;
    
    W[j+6] := W[j+4] shifted (0, 0, 1);
    W[j+7] := W[j+5] rotated_around (W[j+4], W[j+6]) -temp_angle;
    %dotlabel.rt("$r_{" & decimal (i+24) & "}$", W[j+7]) on_picture flat_quadrant_picture[0];

    u[k] := W[j] -- W[j+3] -- W[j+7] -- W[j+4] -- cycle;
    draw u[k] on_picture flat_quadrant_picture[0];

    draw u[k] transformed t3 on_picture flat_quadrant_picture[0];
    %draw u[k] shifted (5cm, 0) on_picture flat_quadrant_picture[0];
    
    u[k+1] := u[k] rotated (180, 0);
    draw u[k+1] on_picture flat_quadrant_picture[0];

    temp_path_a := u[k];
    temp_path_b := u[k+1];

    temp_path_c := u[k] transformed t4;
    temp_path_d := u[k+1] transformed t4;

    draw temp_path_c on_picture flat_quadrant_picture[1];
    draw temp_path_d on_picture flat_quadrant_picture[1];
    
    for A := 1 upto 7:
      temp_path_a *= t3;
      temp_path_b *= t3;
      draw temp_path_a on_picture flat_quadrant_picture[0];
      draw temp_path_b on_picture flat_quadrant_picture[0];
      temp_path_c *= t3;
      temp_path_d *= t3;
      draw temp_path_c on_picture flat_quadrant_picture[1];
      draw temp_path_d on_picture flat_quadrant_picture[1];
    endfor;

    k += 2;
    j += 8;
  endfor;

enddef;

%% *** (3)

%% ** (2)

endinput;

%% ** (2) End of 3DLDF code.

%% * (1) Emacs-Lisp code for use in indirect buffers when using the          
%%       GNU Emacs editor.  The local variable list is not evaluated when an 
%%       indirect buffer is visited, so it's necessary to evaluate the       
%%       following s-expression in order to use the facilities normally      
%%       accessed via the local variables list.                              
%%       \initials{LDF 2004.02.12}.                                          

%% (progn (metafont-mode) (outline-minor-mode t) (setq fill-column 80))    

%% * (1) Local variables for Emacs.

%% Local Variables:
%% mode:Metapost
%% eval:(outline-minor-mode t)
%% eval:(read-abbrev-file abbrev-file-name)
%% abbrev-mode:t
%% outline-regexp:"%% [*\f]+"
%% End:
