@q accsgtpt.web @>
@q Created by Laurence D. Finston (LDF) Fri 10 Sep 2021 10:53:45 PM CEST @>

@q * (1) Process command line options.  @>

@ Process command line options.

@<|process_command_line_options| definition@>=
int
process_command_line_options(int argc, char *argv[])
{
@q ** (2) @>

  bool DEBUG = true; /* |false| */ 

  int status = 0;

  const unsigned short HELP_INDEX     = 0;
  const unsigned short WHERE_INDEX    = 1;
  const unsigned short NO_WHERE_INDEX = 2;
  const unsigned short ORDER_BY_INDEX = 3;

@q *** Option struct.@>
@ Option struct.

@<|process_command_line_options| definition@>=

  static struct option long_options[] = {
    {"help", 0, 0, 0},
    {"where", 1, 0, 0},
    {"no-where", 1, 0, 0},
    {"order-by", 1, 0, 0},
    {0, 0, 0, 0}
  };
  
  int option_index = 0;
  int this_option_optind = optind ? optind : 1;  

@q *** (3) Loop for handling options.@>
@*2 Loop for handling options.

@<|process_command_line_options| definition@>=

  while (1) {

    option_ctr = getopt_long_only(argc, argv, "", long_options, &option_index);
#if 0 
    if (DEBUG)
      {
        cerr << "option_ctr == " << option_ctr << endl;
        cerr << "option_index == " << option_index << endl;
        if (optarg)
          cerr << "optarg == " << optarg << endl;
      }
#endif     

    if (option_ctr == -1)
      {
        if (DEBUG)
          cerr << "No more option arguments." << endl << endl ;
        break;
      }

    if (option_ctr == 0)
      {
        if (DEBUG)
          {
            cerr << "option " << long_options[option_index].name;
            if (optarg)
              cerr << " with arg " << optarg;
            cerr << endl;
          }


@
@<|process_command_line_options| definition@>=

        else if (option_index == HELP_INDEX)
          {
            cerr_mutex.lock(); 
            cerr << "GNU 3DLDF Version " << VERSION_3DLDF << ". "
                 << COPYRIGHT_3DLDF << endl 
                 << endl
                 << "Valid options for GNU 3DLDF are:" << endl
                 << endl
                 << "--bison-trace:           Prints information generated by Bison "
                 << endl << "                         "
                 << "for tracing which parser rules are reduced "
                 << endl << "                         "
                 << "and the state of the Bison stack." << endl
                 << endl
                 << "--help:                  Prints this message and exits "
                 << "with return value 0." << endl
                 << endl
                 << "--multithread-input:     Enables the use of multiple "
                 << "threads for input."
                 << endl
                 << endl
                 << "--multithread-output:    Enables the use of multiple "
                 << "threads for output."
                 << endl
                 << endl
                 << "--multithread-include:   Enables the use of multiple "
                 << "threads for input" << endl 
                 << "                         files included in other input files."
                 << endl
                 << endl
                 << "--quiet:                 Suppresses some output to standard "
                 << "output"
                 << endl 
                 << "                         and standard error when `3dldf' is run." 
                 << endl << endl
                 << "--silent:                Suppresses almost all output "
                 << "to standard output" << endl
                 << "                         and standard error when "
                 << "`3dldf' is run."
                 << endl << endl
                 << "--verbose:               Causes status information to be "
                 << "printed to standard output" << endl 
                 << "                         when `3dldf' is run."
                 << endl << endl 
                 << "--version:               Prints the version number of "
                 << "GNU 3DLDF" << endl 
                 << "                         to standard output and exits with "
                 << "return value 0." << endl << endl 
                 << "--database:              Enables the use of the MySQL databases."
                 << endl << endl 
                 << "--astronomy:             Enables the features of GNU 3DLDF pertaining to astronomy."
                 << endl << endl 
                 << "--stars-limit:           Sets the limit for the number of stars to be read from the database."
                 << endl << endl; 

            if (DEBUG)
              {
                  cerr << "Exiting with return value 0." << endl;
              }
 
            cerr_mutex.unlock(); 
            exit(0);

          } /* |if (option_index == HELP_INDEX)|  */


@q **** (4) stars_limit.@>
@ stars_limit.

\LOG
\initials{LDF 2021.06.03.}
Added the ``\.{stars_limit}'' option.
\ENDLOG 

@<|process_command_line_options| definition@>=

        else if (option_index == STARS_LIMIT_INDEX)
        {
           stars_limit = atoi(optarg);
        }

@q **** (4) Invalid option_index value.@>
@ Invalid {\tt option\_index} value.

@<|process_command_line_options| definition@>=

        else 
          {
            cerr << "This can't happen! "
                 << "option_index has invalid value: "
                 << option_index << endl
                 << "Will try to continue." 
                 << endl << endl ;
          }
      }

@q **** (4) Ambiguous option.@>
@ Ambiguous option.

@<|process_command_line_options| definition@>=

    else if (option_ctr == '?')
    {
        cerr << "`getopt_long_only' returned ambiguous match. Breaking."
             << endl << endl ;
        break;
    }

@q **** (4) Invalid option.@>
@ Invalid option.

@<|process_command_line_options| definition@>=

    else
      {
        cerr << "getopt_long() returned invalid option."
             << endl ;
      }

@q **** (4) End of while loop.@>
@ End of while loop.

   }  /* |while|  */

@q *** (3) Filename arguments.@>
@*2 Filename arguments.

@<|process_command_line_options| definition@>=
        
  if (optind < argc)
    {
#if 0 
      if (DEBUG)
        cerr << "non-option ARGV-elements: ";
#endif 
      unsigned short i = 0;      
      for (; optind < argc && i < MAX_FILE_ARGS; ++i, ++optind)
        {
       
          if (DEBUG)
            {
              cerr << "argv[" << optind << "] == " << argv[optind] << endl ;
              cerr << "strlen(argv[optind]) == " << strlen(argv[optind]) << endl
                   ;
            }

          if (strlen(argv[optind]) < MAX_FILENAME)
            {

#if 0 
              if (DEBUG)
                cerr << "It's less" << "\n" ;
#endif
              strcpy(filename_array[i], argv[optind]);

              if (DEBUG)
                {
                  cerr << "filename_array[" << i << "] == " 
                       << filename_array[i] << endl ;
                }
            }
          else
            {
              cerr << "WARNING: In main():\n"
                   << "Filename argument from the command line is too long:\n"
                   << argv[optind] << endl << "Ignoring.\n\n" ;
              break;
            }
        } /* |for| */ 
         
     filename_array_ctr = i;
      if (DEBUG)
        {
          for(unsigned short j  = 0; j < i; ++j)
            cerr << "filename_array[" << j << "] == "
                 << filename_array[j] << endl ;
        }

   } /* |if|  */

@q ** (2) @>
@
@<|process_command_line_options| definition@>=

    if (DEBUG)
    {
      cerr << "Exiting `process_command_line_options' successfully with return value 0."
           << endl;
      return 0;
    }
#endif 

}  /* End of |process_command_line_options| definition.  */


/* Local Variables:       */
/* mode:CWEB              */
/* auto-fill-function:nil */
/* End:                   */
