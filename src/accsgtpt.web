@q accsgtpt.web @>
@q Created by Laurence D. Finston (LDF) Fri 10 Sep 2021 10:53:45 PM CEST @>

@q * (1) Process command line options.  @>

@q ** (2) Include files.  @>
@ Include files.  

@<Include files@>=

#include <stdlib.h>
#include <stdio.h>
#include <vector>
#include <errno.h>
#include <exception>
#include <iomanip>
#include <ios>
#include <iostream>
#include <iterator>
#include <new>
#include <sstream>   
#include <stdexcept>
#include <mysql.h>
#include <string> 
#include <cstring> 
#include <unistd.h>
#include <getopt.h>

using namespace std;

@q * (1) @>

@q ** (2) @>
@
@<Global variables@>=

string where_str = "where approx_rank_apparent_magnitude > 0 and approx_rank_apparent_magnitude <= 200";
string order_str = "order by approx_rank_apparent_magnitude";
int star_limit   = 200;

@q ** (2) @>
@
@<|extern| declarations for global variables@>=

extern string where_str;
extern string order_str;
extern int star_limit;

@q * (1) @>
@ Process command line options.

@q ** (2) Declaration  @>
@
@<|process_command_line_options| declaration@>=
int
process_command_line_options(int argc, char *argv[]);

@q *** (3) Definition  @>
@
@<|process_command_line_options| definition@>=
int
process_command_line_options(int argc, char *argv[])
{
@q **** (4) @>

  bool DEBUG = true; /* |false| */ 

  int status = 0;
  int option_ctr = 0;

  const unsigned int HELP_INDEX     = 0;
  const unsigned int WHERE_INDEX    = 1;
  const unsigned int NO_WHERE_INDEX = 2;
  const unsigned int ORDER_BY_INDEX = 3;
  const unsigned int LIMIT_INDEX    = 4;

@q **** (4) Option struct.@>
@ Option struct.

@<|process_command_line_options| definition@>=

  static struct option long_options[] = {
    {"help", 0, 0, 0},
    {"where", 1, 0, 0},
    {"no-where", 1, 0, 0},
    {"order-by", 1, 0, 0},
    {"limit", 1, 0, 0},
    {0, 0, 0, 0}
  };
  
  int option_index = 0;
  int this_option_optind = optind ? optind : 1;  

@q **** (4) Loop for handling options.@>
@*2 Loop for handling options.

@<|process_command_line_options| definition@>=

  while (1) 
  {
@q ***** (5) @>

    option_ctr = getopt_long_only(argc, argv, "", long_options, &option_index);

    if (DEBUG)
    {
        cerr << "option_ctr == " << option_ctr << endl;
        cerr << "option_index == " << option_index << endl;
        if (optarg)
          cerr << "optarg == " << optarg << endl;
    }

@q ***** (5) @>

    if (option_ctr == -1)
    {
        if (DEBUG)
          cerr << "No more option arguments." << endl << endl ;
        break;
    }

@q ***** (5) @>

    if (option_ctr == 0)
    {
        if (DEBUG)
          {
            cerr << "option \"" << long_options[option_index].name << "\"";
            if (optarg)
              cerr << " with arg \"" << optarg << "\"";
            cerr << endl;
          }

@q ***** (5) @>
@
@<|process_command_line_options| definition@>=

        if (option_index == HELP_INDEX)
        {
            cerr << "accsdtbs 1.0" << endl 
                 << "Valid options for accsdtbs are:" << endl
                 << "--help:  Prints this message and exits with exit status 0."
                 << endl << endl; 

            if (DEBUG)
            {
               cerr << "Exiting `accsdtb' successfully with exit status 0." << endl;
            }
 
            exit(0);

        } /* |if (option_index == HELP_INDEX)|  */


@q ***** (5) @>
@
@<|process_command_line_options| definition@>=

        else if (option_index == WHERE_INDEX)
        {
            cerr << "`option_index' == `WHERE_INDEX'" << endl;

            where_str = optarg;

            where_str.insert(0, "where ");

            if (DEBUG)
            { 
               cerr << "`where_str' == " <<  where_str << endl;
            }          

        } /* |else if (option_index == WHERE_INDEX)|  */


@q ***** (5) @>
@
@<|process_command_line_options| definition@>=

        else if (option_index == ORDER_BY_INDEX)
        {
            cerr << "`option_index' == `ORDER_BY_INDEX'" << endl;

            order_str = optarg;

            order_str.insert(0, "order by ");

            if (DEBUG)
            { 
               cerr << "`order_str' == " <<  order_str << endl;
            }          

        } /* |else if (option_index == ORDER_BY_INDEX)|  */


@q ***** (5) @>
@
@<|process_command_line_options| definition@>=

        else if (option_index == LIMIT_INDEX)
        {
            cerr << "`option_index' == `LIMIT_INDEX'" << endl;

            star_limit = atoi(optarg);

            if (DEBUG)
            { 
               cerr << "`star_limit' == " <<  star_limit << endl;
            }          

        } /* |else if (option_index == LIMIT_INDEX)|  */

@q ***** (5) Invalid option_index value.@>
@ Invalid {\tt option\_index} value.

@<|process_command_line_options| definition@>=

        else 
        {
            cerr << "ERROR!  In `process_command_line_options':" << endl 
                 << "option_index has invalid value: "
                 << option_index << endl
                 << "Will try to continue." 
                 << endl << endl ;
        }

    }  /* |if (option_ctr == 0)|  */

@q ***** (5) Ambiguous option.@>
@ Ambiguous option.

@<|process_command_line_options| definition@>=

    else if (option_ctr == '?')
    {
        cerr << "`getopt_long_only' returned ambiguous match. Breaking."
             << endl << endl ;
        break;
    }

@q ***** (5) Invalid option.@>
@ Invalid option.

@<|process_command_line_options| definition@>=

    else
    {
       cerr << "`getopt_long_only' returned invalid option."
            << endl ;
    }

@q ***** (5) End of while loop.@>
@ End of while loop.
@<|process_command_line_options| definition@>=

   }  /* |while|  */

@q **** (4) Non-option arguments.@>
@*2 Non-option arguments.

@<|process_command_line_options| definition@>=
        
     if (optind < argc)
     {
         if (DEBUG)
           cerr << "non-option ARGV-elements: ";

         for (int i = 0; optind < argc; ++i, ++optind)
         {
             if (DEBUG)
             {
               cerr << "argv[" << optind << "] == " << argv[optind] << endl ;
               cerr << "strlen(argv[optind]) == " << strlen(argv[optind]) << endl;
             }

         } /* |for| */ 
            
     }  

@q **** (4) @>
@
@<|process_command_line_options| definition@>=

    if (DEBUG)
    {
      cerr << "Exiting 'process_command_line_options' successfully with return value 0."  << endl;
    }

    return 0;

}  /* End of |process_command_line_options| definition.  */

@q *** (3) @>

@q ** (2) @>

@q * (1) @>

@q ** (2) @>
@
@(accsgtpt.hxx@>=
@<|extern| declarations for global variables@>@;
@<|process_command_line_options| declaration@>@;

@q ** (2) @>
@
@c
@<Include files@>@;
@<Global variables@>@;
@<|process_command_line_options| definition@>@;


/* Local Variables:       */
/* mode:CWEB              */
/* auto-fill-function:nil */
/* End:                   */
