@q complex.web  @>
@q Created by Laurence Finston Sat Dec  1 00:11:36 CET 2007 @>

@q * (0) Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing. @>
@q Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, @>
@q 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021 The Free Software Foundation, Inc. @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version. @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details. @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html. @>

@q (``@@'' stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de @>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston                 @> 
@q c/o Free Software Foundation, Inc.  @>
@q 51 Franklin St, Fifth Floor         @> 
@q Boston, MA  02110-1301              @>
@q USA                                 @>

@q Laurence.Finston@@gmx.de (@@ stands for a single ``at'' sign.)@>

@q * (0) Complex.@>
@** Complex\quad ({\tt complex\PERIOD web}).\hfil

\LOG
\initials{LDF 2007.11.30.}
Created this file.
\ENDLOG 

\immediate\write\functexifile{File:  complex.web^^J}

@q * (1) Include files.@>
@ Include files.

@<Include files@>=

#include "loader.h++"
#include "pspglb.h++"
#include "io.h++"
#include "creatnew.h++"
#include "pntrvctr.h++"
#include "primes.h++"

@q * (1) Complex class definition.@>
@* {\bf Complex} class definition.
\initials{LDF 2007.11.30.}

\LOG
\initials{LDF 2007.11.30.}
Added this |class| definition.

\initials{LDF 2007.12.18.}
Added |friend| declaration for |yyparse|.
\ENDLOG

@q ** (2) Code.@> 

@<Declare |class Complex|@>=

class Complex
{

   friend int yyparse(yyscan_t);

   protected:

#if (HAVE_LIBGSL & HAVE_GSL_GSL_COMPLEX_H)

      gsl_complex complex;

#endif 
   
   public:

      @<Declare |static| |class Complex| data members@>@;

      @<Declare |Complex| functions@>@;
};

@q ** (2) Static member variable declarations and initializations.@>
@*1 Static member variable declarations and initializations.
\initials{LDF 2007.11.30.}

\LOG
\initials{LDF 2007.11.30.}
Added this section.
\ENDLOG

@<Declare |static| |class Complex| data members@>=

#if 0  
   static const unsigned short COMPLEX_COMPLEX_LONG_DOUBLE_TYPE;   
#endif 

@q *** (3) Code.@> 
@
@<Initialize |static| |class Complex| data members@>=

#if 0
   const unsigned short Complex::COMPLEX_COMPLEX_LONG_DOUBLE_TYPE   = 14; 
#endif

@q ** (2) Global constants.@>
@*1 Global constants.
\initials{LDF 2007.12.11.}

\LOG
\initials{LDF 2007.12.11.}
Added this section.
\ENDLOG

@<Global constants@>=

extern const Complex INVALID_COMPLEX(INVALID_REAL, INVALID_REAL);

@q *** (3)@>
@
@<Declarations for the header file@>=

extern const Complex INVALID_COMPLEX;

@q ** (2) |Complex| functions.@> 
@*1 {\bf Complex} functions.
\initials{LDF 2007.11.30.}

\LOG
\initials{LDF 2007.11.30.}
Added this section.
\ENDLOG

@q *** (3) Constructors and Setting Functions.@>
@*2 Constructors and Setting Functions.
\initials{LDF 2007.11.30.}

\LOG
\initials{LDF 2007.11.30.}
Added this section.
\ENDLOG

@q **** (4) Default Constructor.@> 
@*3 Default Constructor.
\initials{LDF 2007.11.30.}

\LOG
\initials{LDF 2007.11.30.}
Added this function.
\ENDLOG

@q ***** (5) Declaration.@>

@<Declare |Complex| functions@>=
Complex(void);

@q ***** (5) Definition.  @>

@
@<Define |Complex| functions@>= 
Complex::Complex(void)
{
   return;
}

@q **** (4) Constructor with arguments.@> 
@*2 Constructor with arguments.
\initials{LDF 2007.11.30.}

\LOG
\initials{LDF 2007.11.30.}
Added this function.
\ENDLOG

@q **** (4) Declaration.@> 

@<Declare |Complex| functions@>=
Complex(real real_part, 
        real imaginary_part,
        Scanner_Node scanner_node = 0);

@q **** (4) Definition.  @>

@
@<Define |Complex| functions@>= 
Complex::Complex(real real_part, 
                 real imaginary_part,
                 Scanner_Node scanner_node)
{

@q ***** (5) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ***** (5)@>

#if ! (HAVE_LIBGSL & HAVE_GSL_GSL_COMPLEX_H)

    cerr_strm << thread_name << "ERROR!  In non-default `Complex' constructor:"
              << endl 
              << "The GNU Scientific Library or its complex facilities,"
              << endl 
              << "which are required for this function, are unavailable."
              << endl 
              << "Not setting `complex'.";

    log_message(cerr_strm);
    cerr_message(cerr_strm, error_stop_value);
    cerr_strm.str("");
    
    return;

#else

   GSL_SET_COMPLEX(&complex, real_part, imaginary_part);

#endif 

   return;

}  /* End of non-default |Complex| constructor definition.  */

@q **** (4) Setting function.@> 
@*2 Setting function.
\initials{LDF 2007.11.30.}

\LOG
\initials{LDF 2007.11.30.}
Added this function.
\ENDLOG

@q **** (4) Declaration.@> 

@<Declare |Complex| functions@>=
int
set(real real_part, real imaginary_part, Scanner_Node scanner_node = 0);

@q **** (4) Definition.  @>

@
@<Define |Complex| functions@>= 
int
Complex::set(real real_part, real imaginary_part, Scanner_Node scanner_node)
{

@q ***** (5) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ***** (5)@>

#if DEBUG_COMPILE
   if (DEBUG)
   {
       cerr_strm << thread_name << "Entering `Complex::set'.";

       log_message(cerr_strm);
       cerr_message(cerr_strm);
       cerr_strm.str("");

   }  /* |if (DEBUG)|  */

#endif /* |DEBUG_COMPILE|  */@; 

@q ***** (5)@>

#if ! (HAVE_LIBGSL & HAVE_GSL_GSL_COMPLEX_H)

    cerr_strm << thread_name << "ERROR!  In `Complex::set':"
              << endl 
              << "The GNU Scientific Library or its complex facilities,"
              << endl 
              << "which are required for this function, are unavailable."
              << endl 
              << "Exiting function unsuccessfully with return value 1.";

    log_message(cerr_strm);
    cerr_message(cerr_strm, error_stop_value);
    cerr_strm.str("");
    
    return 1;

#else

   GSL_SET_COMPLEX(&complex, real_part, imaginary_part);

   return 0;

#endif 

@q ***** (5)@>

}  /* End of |Complex::set| definition.  */

@q *** (3) Destructor.@> 
@*2 Destructor.
\initials{LDF 2007.11.30.}

\LOG
\initials{LDF 2007.11.30.}
Added this function.
\ENDLOG

@q **** (4) Declaration.@> 

@<Declare |Complex| functions@>=
virtual
~Complex(void);

@q **** (4) Definition.  @>

@
@<Define |Complex| functions@>= 
Complex::~Complex(void)
{

@q ***** (5) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   Scanner_Node scanner_node = 0;

#ifdef HAVE_PTHREAD_H

   Thread_Info_Type* thread_info = Thread_Info_Type::get_thread_info();

   if (thread_info != static_cast<Thread_Info_Type*>(0))
      scanner_node = thread_info->scanner_node;

#endif /* |HAVE_PTHREAD_H|  */@; 

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ***** (5)@>

#if ! (HAVE_LIBGSL & HAVE_GSL_GSL_COMPLEX_H)

    cerr_strm << thread_name << "ERROR!  In `Complex' destructor:"
              << endl 
              << "The GNU Scientific Library or its complex facilities,"
              << endl 
              << "which are required for this function, are unavailable."
              << endl 
              << "Not deallocating `complex'.";

    log_message(cerr_strm);
    cerr_message(cerr_strm, error_stop_value);
    cerr_strm.str("");
    
    return;

#endif 

   return;

}  /* End of |~Complex| definition.  */

@q *** (3) Pseudo-constructor for dynamic allocation.@>
@*2 Pseudo-constructor for dynamic allocation.
\initials{LDF 2007.11.30.}

\LOG
\initials{LDF 2007.11.30.}
Added this section.
\ENDLOG

@q **** (4) Pointer argument.@>
@*3 Pointer argument.@>
\initials{LDF 2007.11.30.}

\LOG
\initials{LDF 2007.11.30.}
Added this function declaration.
\ENDLOG

@<Declare non-member template functions for |Complex|@>=

Complex* 
create_new(const Complex* p, Scanner_Node scanner_node = 0);

@q **** (4) Reference argument.@>
@*3 Referece argument.
\initials{LDF 2007.11.30.}

\LOG
\initials{LDF 2007.11.30.}
Added this function declaration.
\ENDLOG

@<Declare non-member template functions for |Complex|@>=
Complex* 
create_new(const Complex& p, Scanner_Node scanner_node = 0);

@q *** (3) Assignment.@> 
@*2 Assignment.
\initials{LDF 2007.11.30.}

\LOG
\initials{LDF 2007.11.30.}
Added this section.
\ENDLOG

@q **** (4) Assignment from a |Complex|.@> 
@*3 Assignment from a |Complex|.
\initials{LDF 2007.11.30.}

\LOG
\initials{LDF 2007.11.30.}
Added this function.
\ENDLOG

@q ***** (5) Declaration.@> 

@<Declare |Complex| functions@>=
virtual
Complex&
operator=(const Complex& c);

@q ***** (5) Definition.@> 
@
@<Define |Complex| functions@>=

Complex&
Complex::operator=(const Complex& c)
{

@q ****** (6) Preliminaries.@>   

   volatile bool DEBUG = false; /* |true| */ @; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   Scanner_Node scanner_node = 0;

#ifdef HAVE_PTHREAD_H

   Thread_Info_Type* thread_info = Thread_Info_Type::get_thread_info();

   if (thread_info != static_cast<Thread_Info_Type*>(0))
      scanner_node = thread_info->scanner_node;

#endif /* |HAVE_PTHREAD_H|  */@; 

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ****** (6)@>

#if ! (HAVE_LIBGSL & HAVE_GSL_GSL_COMPLEX_H)

    cerr_strm << thread_name << "ERROR!  In `Complex::operator=':"
              << endl 
              << "The GNU Scientific Library or its complex facilities,"
              << endl 
              << "which are required for this function, are unavailable."
              << endl 
              << "Not assigning.";

    log_message(cerr_strm);
    cerr_message(cerr_strm, error_stop_value);
    cerr_strm.str("");
    
    return *this;

#endif 

@q ****** (6)@>

    if (this == &c) /* Make sure it's not self-assignment. */
       return *this;

@q ****** (6)@>

#if (HAVE_LIBGSL & HAVE_GSL_GSL_COMPLEX_H)

   GSL_SET_COMPLEX(&complex, GSL_REAL(c.complex), GSL_IMAG(c.complex));

#endif 

    return *this;

}  /* End of 
      |Complex::operator=(const Complex& m)| definition.  */

@q *** (3) Predicates.@>
@*2 Predicates.
\initials{LDF 2007.11.30.}

\LOG
\initials{LDF 2007.11.30.}
Added this section.
\ENDLOG

@q *** (3) Arithmetic operators.@> 
@*2 Arithmetic operators.
\initials{LDF 2007.12.11.}

\LOG
\initials{LDF 2007.12.11.}
Added this section.
\ENDLOG

@q **** (4) Unary minus operator-().@>
@*3 Unary minus.
@^\cofunc{Complex}{-}@>
\cofunctexi{Complex}{-}
\initials{LDF 2007.12.11.}

\LOG
\initials{LDF 2007.12.11.}
Added this function.
\ENDLOG

@q ***** (5) Declaration.@>

@<Declare |Complex| functions@>=
Complex
operator-(void) const;

@q ***** (5) Definition.@>
@
@<Define |Complex| functions@>=
Complex
Complex::operator-(void) const
{
@q ****** (6) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   Scanner_Node scanner_node = 0;

#ifdef HAVE_PTHREAD_H

   Thread_Info_Type* thread_info = Thread_Info_Type::get_thread_info();

   if (thread_info != static_cast<Thread_Info_Type*>(0))
      scanner_node = thread_info->scanner_node;

#endif /* |HAVE_PTHREAD_H|  */@; 

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ****** (6)@>

#if ! (HAVE_LIBGSL & HAVE_GSL_GSL_COMPLEX_H)

    cerr_strm << thread_name << "ERROR!  In `Complex::operator-(void)' "
              << "(unary minus):"
              << endl 
              << "The GNU Scientific Library or its complex facilities,"
              << endl 
              << "which are required for this function, are unavailable."
              << endl 
              << "Exiting function unsuccessfully with return value `*this'.";

    log_message(cerr_strm);
    cerr_message(cerr_strm, error_stop_value);
    cerr_strm.str("");
    
    return *this;

@q ******* (7)@>

#else

    Complex c = *this;

    c.complex = gsl_complex_negative(complex);

    return c;

#endif 

}  /* End of |Complex::operator-(void)| definition.  */

@q **** (4) Multiplication.@>
@*3 Multiplication.
\initials{LDF 2007.12.11.}

\LOG
\initials{LDF 2007.12.11.}
Added this section.
\ENDLOG

@q ***** (5) Multiplication with Assignment.@>
@*4 Multiplication with Assignment.
\initials{LDF 2007.12.11.}

Multiplication without assignment isn't needed at present.
\initials{LDF 2007.12.11.}

\LOG
\initials{LDF 2007.12.11.}
Added this function.
\ENDLOG

@q ****** (6) Declaration.@> 

@<Declare |Complex| functions@>=
void
operator*=(const Complex& c);

@q ****** (6) Definition.  @>

@
@<Define |Complex| functions@>= 
void
Complex::operator*=(const Complex& c)
{

@q ******* (7) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   Scanner_Node scanner_node = 0;

#ifdef HAVE_PTHREAD_H

   Thread_Info_Type* thread_info = Thread_Info_Type::get_thread_info();

   if (thread_info != static_cast<Thread_Info_Type*>(0))
      scanner_node = thread_info->scanner_node;

#endif /* |HAVE_PTHREAD_H|  */@; 

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ******* (7)@>

#if ! (HAVE_LIBGSL & HAVE_GSL_GSL_COMPLEX_H)

    cerr_strm << thread_name << "ERROR!  In `Complex::operator*=(const Complex&)':"
              << endl 
              << "The GNU Scientific Library or its complex facilities,"
              << endl 
              << "which are required for this function, are unavailable."
              << endl 
              << "Exiting function unsuccessfully.";

    log_message(cerr_strm);
    cerr_message(cerr_strm, error_stop_value);
    cerr_strm.str("");
    
    return;

@q ******* (7)@>

#else

     complex = gsl_complex_mul(complex, c.complex);

   return;

#endif 

@q ******* (7)@>

}  /* End of |Complex::operator*=(const Complex& c)| definition.  */

@q **** (4) Division.@>
@*3 Division.
\initials{LDF 2007.12.11.}

\LOG
\initials{LDF 2007.12.11.}
Added this section.
\ENDLOG

@q ***** (5) Division with Assignment.@>
@*4 Division with Assignment.
\initials{LDF 2007.12.11.}

Division without assignment isn't needed at present.
\initials{LDF 2007.12.11.}

\LOG
\initials{LDF 2007.12.11.}
Added this function.
\ENDLOG

@q ****** (6) Declaration.@> 

@<Declare |Complex| functions@>=
void
operator/=(const Complex& c);

@q ****** (6) Definition.  @>

@
@<Define |Complex| functions@>= 
void
Complex::operator/=(const Complex& c)
{

@q ******* (7) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   Scanner_Node scanner_node = 0;

#ifdef HAVE_PTHREAD_H

   Thread_Info_Type* thread_info = Thread_Info_Type::get_thread_info();

   if (thread_info != static_cast<Thread_Info_Type*>(0))
      scanner_node = thread_info->scanner_node;

#endif /* |HAVE_PTHREAD_H|  */@; 

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ******* (7)@>

#if ! (HAVE_LIBGSL & HAVE_GSL_GSL_COMPLEX_H)

    cerr_strm << thread_name << "ERROR!  In `Complex::operator/=(const Complex&)':"
              << endl 
              << "The GNU Scientific Library or its complex facilities,"
              << endl 
              << "which are required for this function, are unavailable."
              << endl 
              << "Exiting function unsuccessfully.";

    log_message(cerr_strm);
    cerr_message(cerr_strm, error_stop_value);
    cerr_strm.str("");
    
    return;

@q ******* (7)@>

#else

   complex = gsl_complex_div(complex, c.complex);

   return;

#endif 

@q ******* (7)@>

}  /* End of |Complex::operator/=(const Complex& c)| definition.  */

@q **** (4) Addition.@>
@*3 Addition.
\initials{LDF 2007.12.11.}

\LOG
\initials{LDF 2007.12.11.}
Added this section.
\ENDLOG

@q ***** (5) Addition with Assignment.@>
@*4 Addition with Assignment.
\initials{LDF 2007.12.11.}

Addition without assignment isn't needed at present.
\initials{LDF 2007.12.11.}

\LOG
\initials{LDF 2007.12.11.}
Added this function.
\ENDLOG

@q ****** (6) Declaration.@> 

@<Declare |Complex| functions@>=
void
operator+=(const Complex& c);

@q **** (4) Definition.  @>

@
@<Define |Complex| functions@>= 
void
Complex::operator+=(const Complex& c)
{

@q ******* (7) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   Scanner_Node scanner_node = 0;

#ifdef HAVE_PTHREAD_H

   Thread_Info_Type* thread_info = Thread_Info_Type::get_thread_info();

   if (thread_info != static_cast<Thread_Info_Type*>(0))
      scanner_node = thread_info->scanner_node;

#endif /* |HAVE_PTHREAD_H|  */@; 

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ******* (7)@>

#if ! (HAVE_LIBGSL & HAVE_GSL_GSL_COMPLEX_H)

    cerr_strm << thread_name << "ERROR!  In `Complex::operator+=(const Complex&)':"
              << endl 
              << "The GNU Scientific Library or its complex facilities,"
              << endl 
              << "which are required for this function, are unavailable."
              << endl 
              << "Exiting function unsuccessfully.";

    log_message(cerr_strm);
    cerr_message(cerr_strm, error_stop_value);
    cerr_strm.str("");
    
    return;

@q ******* (7)@>

#else

     complex = gsl_complex_add(complex, c.complex);

   return;

#endif 

@q ******* (7)@>

}  /* End of |Complex::operator+=(const Complex& c)| definition.  */

@q **** (4) Subtraction.@>
@*3 Subtraction.
\initials{LDF 2007.12.11.}

\LOG
\initials{LDF 2007.12.11.}
Added this section.
\ENDLOG

@q ***** (5) Subtraction with Assignment.@>
@*4 Subtraction with Assignment.
\initials{LDF 2007.12.11.}

Subtraction without assignment isn't needed at present.
\initials{LDF 2007.12.11.}

\LOG
\initials{LDF 2007.12.11.}
Added this function.
\ENDLOG

@q ****** (6) Declaration.@> 

@<Declare |Complex| functions@>=
void
operator-=(const Complex& c);

@q **** (4) Definition.  @>

@
@<Define |Complex| functions@>= 
void
Complex::operator-=(const Complex& c)
{

@q ******* (7) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   Scanner_Node scanner_node = 0;

#ifdef HAVE_PTHREAD_H

   Thread_Info_Type* thread_info = Thread_Info_Type::get_thread_info();

   if (thread_info != static_cast<Thread_Info_Type*>(0))
      scanner_node = thread_info->scanner_node;

#endif /* |HAVE_PTHREAD_H|  */@; 

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ******* (7)@>

#if ! (HAVE_LIBGSL & HAVE_GSL_GSL_COMPLEX_H)

    cerr_strm << thread_name << "ERROR!  In `Complex::operator-=(const Complex&)':"
              << endl 
              << "The GNU Scientific Library or its complex facilities,"
              << endl 
              << "which are required for this function, are unavailable."
              << endl 
              << "Exiting function unsuccessfully.";

    log_message(cerr_strm);
    cerr_message(cerr_strm, error_stop_value);
    cerr_strm.str("");
    
    return;

@q ******* (7)@>

#else

   complex = gsl_complex_sub(complex, c.complex);

   return;

#endif 

@q ******* (7)@>

}  /* End of |Complex::operator-=(const Complex& c)| definition.  */

@q *** (3) Clear.@> 
@*2 Clear.
\initials{LDF 2007.11.30.}

\LOG
\initials{LDF 2007.11.30.}
Added this function.
\ENDLOG

@q **** (4) Declaration.@> 

@<Declare |Complex| functions@>=
int
clear(Scanner_Node scanner_node = 0);

@q **** (4) Definition.  @>

@
@<Define |Complex| functions@>= 
int 
Complex::clear(Scanner_Node scanner_node)
{
@q ***** (5) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ***** (5)@>

#if ! (HAVE_LIBGSL & HAVE_GSL_GSL_COMPLEX_H)

    cerr_strm << thread_name << "ERROR!  In `Complex::clear':"
              << endl 
              << "The GNU Scientific Library or its complex facilities,"
              << endl 
              << "which are required for this function, are unavailable."
              << endl 
              << "Not clearing.";

    log_message(cerr_strm);
    cerr_message(cerr_strm, error_stop_value);
    cerr_strm.str("");
    
    return 1;

#else

   GSL_SET_COMPLEX(&complex, 0, 0);

#endif 

   return 0;

}  /* End of |Complex::clear| definition.  */

@q *** (3) Show.@> 
@*2 Show.
\initials{LDF 2007.11.30.}

\LOG
\initials{LDF 2007.11.30.}
Added this function.
\ENDLOG

@q **** (4) Declaration.@> 

@<Declare |Complex| functions@>=

void 
show(string text = "", Scanner_Node scanner_node = 0) const;

@q **** (4) Definition.@> 

@
@<Define |Complex| functions@>=
void 
Complex::show(string text, Scanner_Node scanner_node) const
{
@q ***** (5) Preliminaries.@>   

#if DEBUG_COMPILE
   bool DEBUG = false; /* |true| */ @; 
#endif /* |DEBUG_COMPILE|  */@; 

   stringstream cerr_strm;

   bool error_stop_value   = true;
   bool warning_stop_value = true;
   string thread_name      = "";

   if (scanner_node)
      scanner_node->get_thread_name_and_stop_values(&thread_name,
                                                    &error_stop_value,
                                                    &warning_stop_value);

   using namespace Scan_Parse;

@q ***** (5)@>

#if ! (HAVE_LIBGSL & HAVE_GSL_GSL_COMPLEX_H)

    cerr_strm << thread_name << "ERROR!  In `Complex::show':"
              << endl 
              << "The GNU Scientific Library or its complex facilities,"
              << endl 
              << "which are required for this function, are unavailable."
              << endl 
              << "Not showing.";

    log_message(cerr_strm);
    cerr_message(cerr_strm, error_stop_value);
    cerr_strm.str("");
    
    return;

#else

@q ***** (5)@>

    if (text == "")
       text = "Complex:";

    cerr << text 
         << endl 
         << "(" << GSL_REAL(complex) 
         << ", " << GSL_IMAG(complex) << "i)"
         << endl;

@q ***** (5)@>

    return;

#endif 
   
} /* End of |Complex::show| definition.  */

@q * (1) Outputting.@>
@* Outputting.
\initials{LDF 2007.12.18.}

\LOG
\initials{LDF 2007.12.18.}
Added this section.
\ENDLOG

@q ** (2) Output operator@>
@*1 Output operator. 
@^\ofunc{$\ll$}@>
\ofunctexi{<<}
\initials{LDF 2007.12.18.}

\LOG
\initials{LDF 2007.12.18.}
Added this function.
\ENDLOG

@q *** (3) Declaration.@>

@<Declare non-member functions for |gsl_complex|@>=

#if (HAVE_LIBGSL & HAVE_GSL_GSL_COMPLEX_H)
ostream& operator<<(ostream& o, gsl_complex& g); 
#endif 

@q *** (3) Definition.@>
@ 
@<Define non-member non-template functions for |gsl_complex|@>=

#if (HAVE_LIBGSL & HAVE_GSL_GSL_COMPLEX_H)

ostream& 
operator<<(ostream& o, gsl_complex& g)
{

    o << "(" << GSL_REAL(g) << ", " << GSL_IMAG(g) << "i)";

    return o;   

}  /* End of |operator<<(ostream&, gsl_complex&)| definition.  */

#endif 

@q * (1) |Complex_Options|.@> 
@* {\bf Complex\_Options}.
\initials{LDF 2007.11.30.}

@q ** (2) Complex_Options struct definition.@>
@*1 {\bf Complex\_Options} struct definition.
\initials{LDF 2007.11.30.}

\LOG
\initials{LDF 2007.11.30.}
Added this |struct| definition.
\ENDLOG

@q *** (3) Definition@> 

@<Declare |struct Complex_Options|@>=

struct Complex_Options
{
    @<Declare |Complex_Options| functions@>@;

};

@q ** (2) |Complex_Options| functions.@> 
@*1 {\bf Complex\_Options} functions.
\initials{LDF 2007.11.30.}

\LOG
\initials{LDF 2007.11.30.}
Added this section.
\ENDLOG

@q *** (3) Default Constructor.@> 
@*2 Default Constructor.
\initials{LDF 2007.11.30.}

\LOG
\initials{LDF 2007.11.30.}
Added this function.
\ENDLOG

@q **** (4) Declaration.@>

@<Declare |Complex_Options| functions@>=
Complex_Options(void);

@q **** (4) Definition.@>
@
@<Define |Complex_Options| functions@>=
Complex_Options::Complex_Options(void)
{

@q ***** (5)@>

    return;

}  /* End of |Complex_Options| default constructor
      definition  */

@q *** (3) Destructor.@> 
@*2 Destructor.
\initials{LDF 2007.11.30.}

\LOG
\initials{LDF 2007.11.30.}
Added this function.
\ENDLOG

@q **** (4) Declaration.@>

@<Declare |Complex_Options| functions@>=
~Complex_Options(void);

@q **** (4) Definition.@>
@
@<Define |Complex_Options| functions@>=
Complex_Options::~Complex_Options(void)
{

    return;

}  /* End of |Complex_Options| destructor
      definition.   */

@q *** (3) Clear.@> 
@*2 Clear.
\initials{LDF 2007.11.30.}

\LOG
\initials{LDF 2007.11.30.}
Added this function.
\ENDLOG

@q **** (4) Declaration.@>

@<Declare |Complex_Options| functions@>=
int
clear(void);

@q **** (4) Definition.@>
@
@<Define |Complex_Options| functions@>=
int
Complex_Options::clear(void)
{
    return 0;

}  /* End of |Complex_Options::clear|  definition  */

@q *** (3) Show.@> 
@*2 Show.
\initials{LDF 2007.11.30.}

\LOG
\initials{LDF 2007.11.30.}
Added this function.
\ENDLOG

@<Declare |Complex_Options| functions@>=
void
show(string text = "", Scanner_Node scanner_node = 0);

@
@<Define |Complex_Options| functions@>=
void
Complex_Options::show(string text, Scanner_Node scanner_node)
{

    if (text == "")
       text = "Complex_Options:";

    return;

}  /* End of |Complex_Options::show| definition.   */

@q ** (2)@>

@q * (1) Putting Complex and Complex_Options together.@>
@* Putting {\bf Complex} and {\bf Complex\_Options} together.

\immediate\write\functexifile{^^JEnd of file:  complex.web^^J}

@q ** (2) This is what's compiled.@> 

This is what's compiled.

@c
@<Include files@>@;
@<Declare |class Complex|@>@;
#if (HAVE_LIBGSL & HAVE_GSL_GSL_COMPLEX_H)
@<Declare non-member functions for |gsl_complex|@>@;
#endif 
@<Declare |struct Complex_Options|@>@;
@<Initialize |static| |class Complex| data members@>@;
@<Declare non-member template functions for |Complex|@>@;
@<Define |Complex| functions@>@;
@<Global constants@>@;
@<Define |Complex_Options| functions@>@;
#if (HAVE_LIBGSL & HAVE_GSL_GSL_COMPLEX_H)
@<Define non-member non-template functions for |gsl_complex|@>@;
#endif 

@q ** (2) This is what's written to "complex.h".@> 

@ This is what's written to \filename{complex.h}.

@(complex.h@>=
#ifndef LDF_COMPLEX_KNOWN
#define LDF_COMPLEX_KNOWN 1
@<Declare |class Complex|@>@;
@<Declarations for the header file@>@;
#if (HAVE_LIBGSL & HAVE_GSL_GSL_COMPLEX_H)
@<Declare non-member functions for |gsl_complex|@>@;
#endif 
@<Declare |struct Complex_Options|@>@;
@<Declare non-member template functions for |Complex|@>@;
#endif

@q * Emacs-Lisp code for use in indirect buffers when using the          @>
@q   GNU Emacs editor.  The local variable list is not evaluated when an @>
@q   indirect buffer is visited, so it's necessary to evaluate the       @>
@q   following s-expression in order to use the facilities normally      @>
@q   accessed via the local variables list.                              @>
@q   \initials{LDF 2004.02.12}.                                          @>
@q   (progn (cweb-mode) (outline-minor-mode t) (setq fill-column 80))    @>

@q * Local variables for Emacs.@>
@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q End: @>
