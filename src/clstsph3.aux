%%%% clstsph3.aux
%%%% Created by Laurence D. Finston (LDF) Tue 07 Sep 2021 05:51:19 PM CEST

%% * (1) Copyright and License.

%%%% This file is part of GNU 3DLDF, a package for three-dimensional drawing.  
%%%% Copyright (C) 2021 The Free Software Foundation  

%%%% GNU 3DLDF is free software; you can redistribute it and/or modify 
%%%% it under the terms of the GNU General Public License as published by 
%%%% the Free Software Foundation; either version 3 of the License, or 
%%%% (at your option) any later version.  

%%%% GNU 3DLDF is distributed in the hope that it will be useful, 
%%%% but WITHOUT ANY WARRANTY; without even the implied warranty of 
%%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
%%%% GNU General Public License for more details.  

%%%% You should have received a copy of the GNU General Public License 
%%%% along with GNU 3DLDF; if not, write to the Free Software 
%%%% Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA 

%%%% GNU 3DLDF is a GNU package.  
%%%% It is part of the GNU Project of the  
%%%% Free Software Foundation 
%%%% and is published under the GNU General Public License. 
%%%% See the website http://www.gnu.org 
%%%% for more information.   
%%%% GNU 3DLDF is available for downloading from 
%%%% http://www.gnu.org/software/3dldf/LDF.html.
  

%%%% Please send bug reports to Laurence.Finston@gmx.de
%%%% The mailing list help-3dldf@gnu.org is available for people to 
%%%% ask other users for help.  
%%%% The mailing list info-3dldf@gnu.org is for sending 
%%%% announcements to users. To subscribe to these mailing lists, send an 
%%%% email with ``subscribe <email-address>'' as the subject.  

%%%% The author can be contacted at: 

%%%% Laurence D. Finston 
%%%% c/o Free Software Foundation, Inc. 
%%%% 51 Franklin St, Fifth Floor 
%%%% Boston, MA  02110-1301  
%%%% USA

%%%% Laurence.Finston@gmx.de

% * (1) Beginning of 3DLDF code.

%% ** (2)

picture save_picture;

save_picture := tab_picture;

color label_color;

numeric n[];
numeric_vector nv;

if do_black:
  label_color := white;
else:
  label_color := black;
fi;

beginfig(0);
  for i = 1 upto 8:
    draw flat_quadrant[0][i];
    draw flat_quadrant[0][-i];
  endfor;
  current_picture += flat_quadrant_picture[10];
endfig with_projection parallel_x_y; 

beginfig(1);
  for i = 1 upto 8:
    draw flat_quadrant[1][i];
    draw flat_quadrant[1][-i];
  endfor;
  current_picture += flat_quadrant_picture[11];
endfig with_projection parallel_x_y no_sort no_sort; 

beginfig(2);
  for i = 1 upto 8:
    draw flat_quadrant[2][i];
    draw flat_quadrant[2][-i];
  endfor;
  current_picture += flat_quadrant_picture[12];
endfig with_projection parallel_x_y no_sort no_sort; 

beginfig(3);
  for i = 1 upto 8:
    draw flat_quadrant[3][i];
    draw flat_quadrant[3][-i];
  endfor;
  current_picture += flat_quadrant_picture[13];
endfig with_projection parallel_x_y no_sort no_sort; 

beginfig(4);
  for i = 1 upto 8:
    draw flat_quadrant[4][i];
    draw flat_quadrant[4][-i];
  endfor;
  current_picture += flat_quadrant_picture[14];
endfig with_projection parallel_x_y no_sort no_sort; 

beginfig(5);
  for i = 1 upto 8:
    draw flat_quadrant[5][i];
    draw flat_quadrant[5][-i];
  endfor;
  current_picture += flat_quadrant_picture[15];
endfig with_projection parallel_x_y no_sort no_sort; 

beginfig(6);
  for i = 1 upto 8:
    draw flat_quadrant[6][i];
    draw flat_quadrant[6][-i];
  endfor;
  current_picture += flat_quadrant_picture[16];
endfig with_projection parallel_x_y no_sort no_sort; 

beginfig(7);
  for i = 1 upto 8:
    draw flat_quadrant[7][i];
    draw flat_quadrant[7][-i];
  endfor;
  current_picture += flat_quadrant_picture[17];
endfig with_projection parallel_x_y no_sort no_sort; 

beginfig(8);
  for i = 1 upto 8:
    draw flat_quadrant[8][i];
    draw flat_quadrant[8][-i];
  endfor;
  current_picture += flat_quadrant_picture[18];
endfig with_projection parallel_x_y no_sort no_sort; 

beginfig(9);
  for i = 1 upto 8:
    draw flat_quadrant[9][i];
    draw flat_quadrant[9][-i];
  endfor;
  current_picture += flat_quadrant_picture[19];
endfig with_projection parallel_x_y no_sort no_sort; 

beginfig(10);
  for i = 1 upto 8:
    draw flat_quadrant[10][i];
    draw flat_quadrant[10][-i];
  endfor;
  current_picture += flat_quadrant_picture[20];
endfig with_projection parallel_x_y no_sort no_sort; 

beginfig(11);
  for i = 1 upto 8:
    draw flat_quadrant[11][i];
    draw flat_quadrant[11][-i];
  endfor;
  current_picture += flat_quadrant_picture[21];
endfig with_projection parallel_x_y no_sort no_sort; 

beginfig(12);
  for i = 1 upto 8:
    draw flat_quadrant[12][i];
    draw flat_quadrant[12][-i];
  endfor;
  current_picture += flat_quadrant_picture[22];
endfig with_projection parallel_x_y no_sort no_sort; 

beginfig(13);
  for i = 1 upto 8:
    draw flat_quadrant[13][i];
    draw flat_quadrant[13][-i];
  endfor;
  current_picture += flat_quadrant_picture[23];
endfig with_projection parallel_x_y no_sort no_sort; 

beginfig(14);
  for i = 1 upto 8:
    draw flat_quadrant[14][i];
    draw flat_quadrant[14][-i];
  endfor;
  current_picture += flat_quadrant_picture[24];
endfig with_projection parallel_x_y no_sort no_sort; 

beginfig(15);
  for i = 1 upto 8:
    draw flat_quadrant[15][i];
    draw flat_quadrant[15][-i];
  endfor;
  current_picture += flat_quadrant_picture[25];
endfig with_projection parallel_x_y no_sort no_sort; 


endinput;  

%% * (1) Local variables for Emacs.

%% Local Variables:
%% mode:Metapost
%% eval:(outline-minor-mode t)
%% eval:(read-abbrev-file abbrev-file-name)
%% abbrev-mode:t
%% outline-regexp:"%% [*\f]+"
%% End:
