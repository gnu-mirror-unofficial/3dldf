%% small_rhombi.ldf
%% Created by Laurence D. Finston (LDF) Sun 12 Sep 2021 10:24:41 PM CEST

%% * (1) Copyright and License.

%%%% This file is part of GNU 3DLDF, a package for three-dimensional drawing.  
%%%% Copyright (C) 2021 The Free Software Foundation  

%%%% GNU 3DLDF is free software; you can redistribute it and/or modify 
%%%% it under the terms of the GNU General Public License as published by 
%%%% the Free Software Foundation; either version 3 of the License, or 
%%%% (at your option) any later version.  

%%%% GNU 3DLDF is distributed in the hope that it will be useful, 
%%%% but WITHOUT ANY WARRANTY; without even the implied warranty of 
%%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
%%%% GNU General Public License for more details.  

%%%% You should have received a copy of the GNU General Public License 
%%%% along with GNU 3DLDF; if not, write to the Free Software 
%%%% Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA 

%%%% GNU 3DLDF is a GNU package.  
%%%% It is part of the GNU Project of the  
%%%% Free Software Foundation 
%%%% and is published under the GNU General Public License. 
%%%% See the website http://www.gnu.org 
%%%% for more information.   
%%%% GNU 3DLDF is available for downloading from 
%%%% http://www.gnu.org/software/3dldf/LDF.html.

%%%% Please send bug reports to Laurence.Finston@gmx.de
%%%% The mailing list help-3dldf@gnu.org is available for people to 
%%%% ask other users for help.  
%%%% The mailing list info-3dldf@gnu.org is for sending 
%%%% announcements to users. To subscribe to these mailing lists, send an 
%%%% email with ``subscribe <email-address>'' as the subject.  

%%%% The author can be contacted at: 

%%%% Laurence D. Finston 
%%%% c/o Free Software Foundation, Inc. 
%%%% 51 Franklin St, Fifth Floor 
%%%% Boston, MA  02110-1301  
%%%% USA

%%%% Laurence.Finston@gmx.de

% * (1) Beginning of 3DLDF code.

verbatim_metapost   "verbatimtex \font\small=cmr8 \font\largebx=cmbx12 \font\Large=cmr12 scaled \magstep1"
                  & "\font\Largebx=cmbx12 scaled \magstep1 etex;";

%% ** (2)  Global variables

point p[];
point m[];
path tab_path[];
reg_polygon rp[];
numeric side_length;
path q[];
picture v[];
picture dot_picture[];

numeric scale_val;
scale_val := 2.375;

color label_text_color;

label_text_color := black; % blue; %

input "small_rhombi.lmc";

%% ** (2) Fig. 1:  Net

beginfig(1);

%% *** (3)  

  rectangle r[];
  transform t[];
  bool do_labels;
  numeric n[];

  do_labels := true; % false; % 
  
  rp0 := (unit_pentagon scaled (scale_val, 0, scale_val)) rotated (0, 18);

  draw rp0;

  for i = 0 upto 4:
    p[i] := get_point (i) rp0;
  endfor;

  % show (p4 - p3);
  % show xpart p4;
  % show xpart p3;

  if do_labels:
    dotlabel.top("$p_0$", p0) on_picture v3;
    dotlabel.lft("$p_1$", p1) on_picture v3;
    dotlabel.lft("$p_2$", p2) on_picture v3;
    dotlabel.urt("$p_3$", p3) on_picture v3;
    dotlabel.lrt("$p_4$", p4) on_picture v3;
  fi;
  
  p5 := p4 shifted (0, 1);

  p6 := p3 rotated_around (p4, p5) 90;

  if do_labels:
    dotlabel.rt("$p_6$", p6) on_picture v3;
  fi;

  p7 := (p6 - p4) shifted by p3;

  if do_labels:
    dotlabel.rt("$p_7$", p7) on_picture v3;
  fi;

  q0 := p3 -- p7 -- p6 -- p4 -- cycle;

  p22 := mediate(p6, p3, .5);


  
  if do_labels:
    label.top("$q_0$", p22) on_picture v3; % dot
    label.bot("$p_{22}$", p22) on_picture v3;  % dot
  fi;
  
  
  draw q0;

  p9 := get_center rp0;


  if do_labels:
    label.top("$rp_0$", p9) on_picture v3; % dot
    label.bot("$p_9$", p9) on_picture v3;  % dot
  fi;
  
  p10 := p6 rotated_around (p4, p5) 60;

  if do_labels:
    dotlabel.rt("$p_{10}$", p10) on_picture v3;
  fi;
  
  q1 := p4 -- p6 -- p10 -- cycle;
  draw q1;
  
  q2 := p4 -- mediate(p10, p6, .5);
  %draw q2;

  q3 := p6 -- mediate(p10, p4, .5);
  %draw q3;

  p11 := q2 intersection_point q3;


  
  if do_labels:
    label.top("$q_1$", p11) on_picture v3; % dot
    label.bot("$p_{11}$", p11) on_picture v3;  % dot
  fi;

  q4 := (q0 rotated_around (p4, p5) 60) rotated_around (p4, p10) 180;

  draw q4;

  for i = 0 upto 1:
    p[12 + i] := get_point (i) q4;
  endfor;

  if do_labels:
    dotlabel.lft("$p_{12}$", p12) on_picture v3;
    dotlabel.lft("$p_{13}$", p13) on_picture v3;
  fi;

  p23 := mediate(p13, p4, .5);

  if do_labels:
    label.top("$q_4$", p23) on_picture v3; % dot
    label.bot("$p_{23}$", p23) on_picture v3;  % dot
  fi;

  p14 := mediate(p4, p3, .5);
  p15 := mediate(p6, p7, .5);

  if do_labels:
    dotlabel.lft("$p_{14}$", p14) on_picture v3;
    dotlabel.rt("$p_{15}$", p15) on_picture v3;
  fi;
  
  q5 := q1 rotated_around (p14, p15) 180;

  draw q5;

  p24 := p11 rotated_around (p14, p15) 180;

  if do_labels:
    label.top("$q_5$", p24) on_picture v3; % dot
    label.bot("$p_{24}$", p24) on_picture v3;  % dot
  fi;

  q6 := q4 rotated_around (p14, p15) 180;

  draw q6;

  p25 := mediate(p13, p4, .5) rotated_around (p14, p15) 180;


  
  if do_labels:
    label.top("$q_6$", p25) on_picture v3; % dot
    label.bot("$p_{25}$", p25) on_picture v3;  % dot
  fi;

  for i = 0 upto 3:
    p[16+i] := get_point (i) q6;
  endfor;

  if do_labels:
    dotlabel.lft("$p_{16}$", p16) on_picture v3;
    dotlabel.ulft("$p_{17}$", p17) on_picture v3;
    dotlabel.rt("$p_{18}$", p18) with_text_color label_text_color on_picture v3;
  fi;

  p19 := mediate(p16, p3, .5);
  p20 := mediate(p17, p18, .5);

  if do_labels:
    dotlabel.top("$p_{19}$", p19) on_picture v3;
    dotlabel.bot("$p_{20}$", p20) on_picture v3;
  fi;

  q7 := q5 rotated_around (p19, p20) 180;

  draw q7;

  p26 := (p11 rotated_around (p14, p15) 180) rotated_around (p19, p20) 180;

  if do_labels:
    label.top("$q_7$", p26) on_picture v3; % dot
    label.bot("$p_{26}$", p26) on_picture v3;  % dot
  fi;

  p21 := get_point (1) q7;

  if do_labels:
    dotlabel.lft("$p_{21}$", p21) on_picture v3;
  fi;

  q8 := q0 shifted by (p21 - p4);
  p27 := p22 shifted by (p21 - p4);
  draw q8;

  if do_labels:
    label.top("$q_8$", p27) on_picture v3; % dot
    label.bot("$p_{27}$", p27) on_picture v3;  % dot
  fi;
  
  p28 := mediate(p21, p27, 2);
  p29 := mediate(p17, p27, 2);

  if do_labels:
    dotlabel.rt("$p_{28}$", p28) on_picture v3;
    dotlabel.lft("$p_{29}$", p29) on_picture v3;
  fi;

  rp1 := (rp0 shifted by (p21 - p4)) rotated_around (p26, p27) 180;
  p30 := (p9 shifted by (p21 - p4)) rotated_around (p26, p27) 180;
  
  draw rp1;

  if do_labels:
    label.top("$rp_1$", p30) on_picture v3; % dot
    label.bot("$p_{30}$", p30) on_picture v3;  % dot
  fi;

  q9 := q7 rotated_around (p27, p30) 180;
  draw q9;

  p36 := p26 rotated_around (p27, p30) 180;

  if do_labels:
    label.top("$q_9$", p36) on_picture v3; % dot
    label.bot("$p_{36}$", p36) on_picture v3;  % dot
  fi;
    
  q10 := q6 rotated_around (p27, p30) 180;

  p37 := p25 rotated_around (p27, p30) 180;
  p38 := p16 rotated_around (p27, p30) 180;

  draw q10;

  if do_labels:
    label.top("$q_{10}$", p37) on_picture v3; % dot
    label.bot("$p_{37}$", p37) on_picture v3;  % dot
    dotlabel.lft("$p_{38}$", p38) on_picture v3;
  fi;

  q11 := q6 rotated_around (p22, p24) 180;
  draw q11;
  
  p31 := p16 rotated_around (p22, p24) 180;
  p32 := p17 rotated_around (p22, p24) 180;

  if do_labels:
    dotlabel.top("$p_{31}$", p31) on_picture v3;
    dotlabel.top("$p_{32}$", p32) with_text_color label_text_color on_picture v3;
  fi;


%% *** (3)

  v4 := v0;  %% Save single unit.
  
  v0 := current_picture;
  suppress_labels v0;
  
  shift v0 by (p31 - p16);
  current_picture += v0;
 
  shift v0 by (p31 - p16);
  current_picture += v0;
 
  shift v0 by (p31 - p16);
  current_picture += v0;

  shift v0 by (p31 - p16);
  current_picture += v0;
  
  rp2 := rp0 shifted by (p13 - p2);
  p35 := p9 shifted by (p13 - p2);
  
  p33 := get_point (3) rp2;
  n0 := (p33 - p13) angle (p10 - p13);

  % message "n0:";
  % show n0;

  p34 := p13 shifted (0, 1);

  t0 := identity rotated_around (p13, p34) -n0;

  t1 := identity shifted by (p31 - p16);
  
  p35 *= rp2 *= t0;

  rp3 := rp2;
  p39 := p35;

  rotate_around rp3 (p13, p10) 180;
  rotate_around p39 (p13, p10) 180;

  shift rp3 by (p38 - p13);
  shift p39 by (p38 - p13);
  
  shift rp3 by (4 * (p31 - p16));
  shift p39 by (4 * (p31 - p16));

  draw rp3; %%  with_color blue;  

  if do_labels:
    label.top("$rp_3$", p39) with_text_color label_text_color on_picture v3; % dot
    label.bot("$p_{39}$", p39) with_text_color label_text_color on_picture v3;  % dot
  fi;
  
  p35 *= rp2 *= t1;
 
  draw rp2; %% with_color blue;
  
  if do_labels:
    label.top("$rp_2$", p35) with_text_color label_text_color on_picture v3; % dot
    label.bot("$p_{35}$", p35) with_text_color label_text_color on_picture v3;  % dot
  fi;
   
  if do_labels:
    dotlabel.top("$p_{33}$", p33) on_picture v3;
  fi;

  p40 := p32 shifted by (p38 - p18);
  p41 := p31 shifted by (p38 - p18);
  

  if do_labels:
    dotlabel.rt("$p_{40}$", p40) on_picture v3;
    dotlabel.rt("$p_{41}$", p41) on_picture v3;
  fi;

  for i = 0 upto 2:
    p[42+i] := get_point (i) rp1;
  endfor;

  if do_labels:
    dotlabel.top("$p_{42}$", p42) on_picture v3;
    dotlabel.top("$p_{43}$", p43) on_picture v3;
    dotlabel.top("$p_{44}$", p44) on_picture v3;
  fi;
  
  for i = 0 upto 4:
    p[45+i] := get_point (i) rp2;
  endfor;

  if do_labels:
    dotlabel.top("$p_{45}$", p45) on_picture v3;
    dotlabel.top("$p_{46}$", p46) on_picture v3;
    dotlabel.lft("$p_{47}$", p47) with_text_color label_text_color on_picture v3;
    dotlabel.rt("$p_{48}$", p48) with_text_color label_text_color on_picture v3;
    dotlabel.top("$p_{49}$", p49) on_picture v3;
  fi;

  for i = 0 upto 4:
    p[50+i] := get_point (i) rp3;
  endfor;

  if do_labels:
    dotlabel.top("$p_{50}$", p50) on_picture v3;
    dotlabel.top("$p_{51}$", p51) on_picture v3;
    dotlabel.bot("$p_{52}$", p52) with_text_color label_text_color on_picture v3;
    dotlabel.rt ("$p_{53}$", p53) on_picture v3; %with_text_color label_text_color;
    dotlabel.top("$p_{54}$", p54) on_picture v3;
  fi;

%% *** (3) Numbered Centers
  
  t3 := identity shifted by (p31 - p16); 
  
  label("{\Large 0}", p23) with_text_color label_text_color on_picture v1;
  label("{\Large 13}", (p23 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 25}", (p23 * t3 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 37}", (p23 * t3 * t3 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 49}", (p23 * t3 * t3 * t3 * t3)) with_text_color label_text_color on_picture v1;

  label("{\Large 1}", p11) with_text_color label_text_color on_picture v1;
  label("{\Large 14}", (p11 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 27}", (p11 * t3 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 39}", (p11 * t3 * t3 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 51}", (p11 * t3 * t3 * t3 * t3)) with_text_color label_text_color on_picture v1;
  
  label("{\Large 2}", p9) with_text_color label_text_color on_picture v1;
  label("{\Large 15}", (p9 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 26}", (p9 * t3 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 38}", (p9 * t3 * t3 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 50}", (p9 * t3 * t3 * t3 * t3)) with_text_color label_text_color on_picture v1;    

  label("{\Large 3}", p22) with_text_color label_text_color on_picture v1;
  label("{\Large 16}", (p22 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 28}", (p22 * t3 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 40}", (p22 * t3 * t3 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 52}", (p22 * t3 * t3 * t3 * t3)) with_text_color label_text_color on_picture v1;
  
  label("{\Large 4}", p25) with_text_color label_text_color on_picture v1;
  label("{\Large 17}", (p25 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 29}", (p25 * t3 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 41}", (p25 * t3 * t3 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 53}", (p25 * t3 * t3 * t3 * t3)) with_text_color label_text_color on_picture v1;

  label("{\Large 5}", p24) with_text_color label_text_color on_picture v1;
  label("{\Large 18}", (p24 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 30}", (p24 * t3 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 42}", (p24 * t3 * t3 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 54}", (p24 * t3 * t3 * t3 * t3)) with_text_color label_text_color on_picture v1;

  p70 := mediate(p18, p31);
  
  label("{\Large 6}", p70) with_text_color label_text_color on_picture v1;
  label("{\Large 24}", (p70 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 31}", (p70 * t3 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 43}", (p70 * t3 * t3 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 55}", (p70 * t3 * t3 * t3 * t3)) with_text_color label_text_color on_picture v1;

  label("{\Large 7}", p26) with_text_color label_text_color on_picture v1;
  label("{\Large 19}", (p26 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 32}", (p26 * t3 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 44}", (p26 * t3 * t3 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 56}", (p26 * t3 * t3 * t3 * t3)) with_text_color label_text_color on_picture v1;

  label("{\Large 8}", p27) with_text_color label_text_color on_picture v1;
  label("{\Large 20}", (p27 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 33}", (p27 * t3 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 45}", (p27 * t3 * t3 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 57}", (p27 * t3 * t3 * t3 * t3)) with_text_color label_text_color on_picture v1;

  label("{\Large 9}", p30) with_text_color label_text_color on_picture v1;
  label("{\Large 21}", (p30 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 34}", (p30 * t3 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 46}", (p30 * t3 * t3 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 58}", (p30 * t3 * t3 * t3 * t3)) with_text_color label_text_color on_picture v1;

  label("{\Large 10}", p36) with_text_color label_text_color on_picture v1;
  label("{\Large 22}", (p36 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 35}", (p36 * t3 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 47}", (p36 * t3 * t3 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 59}", (p36 * t3 * t3 * t3 * t3)) with_text_color label_text_color on_picture v1;

  label("{\Large 11}", p37) with_text_color label_text_color on_picture v1;
  label("{\Large 23}", (p37 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 36}", (p37 * t3 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 48}", (p37 * t3 * t3 * t3)) with_text_color label_text_color on_picture v1;
  label("{\Large 61}", (p37 * t3 * t3 * t3 * t3)) with_text_color label_text_color on_picture v1;
  
  label("{\Large 12}", p35) with_text_color label_text_color on_picture v1;
  label("{\Large 61}", p39) with_text_color label_text_color on_picture v1;


%% *** (3) Tabs

  n1 := 0;
  
  tab {2, 1, .2, true, .4, n1, false, 4, false};
  n1 += 1;
  tab {1, 0, .2, true, .4, n1, false, 4, false};
  n1 += 1;
  tab {12, 13, .2, true, .4, n1, false, 4, false};
  n1 += 1;
  tab {21, 16, .2, true, .4, n1, false, 4, false};
  n1 += 1;
  tab {29, 21, .2, true, .4, n1, false, 4, false};
  n1 += 1;
  tab {38, 29, .2, true, .4, n1, false, 4, false};
  n1 += 1;
  tab {40, 38, .2, true, .4, n1, false, 4, false};
  n1 += 1;
  tab {47, 46, .2, true, .4, n1, false, 4, false};
  n1 += 1;
  tab {51, 52, .2, true, .4, n1, false, 4, false};
  n1 += 1;
  tab {50, 51, .2, true, .4, n1, false, 4, false};
  n1 += 1;
  tab {32, 18, .2, true, .4, n1, false, 4, false};
  n1 += 1;
  tab {46, 45, .2, true, .4, n1, false, 4, false};
  n1 += 1;
  tab {45, 49, .2, true, .4, n1, false, 4, false};
  n1 += 1;
  tab {49, 48, .2, true, .4, n1, false, 4, false};
  n1 += 1;
  tab {54, 50, .2, true, .4, n1, false, 4, false};
  n1 += 1;
  tab {53, 54, .2, true, .4, n1, false, 4, false};
  n1 += 1;

  draw tab_path[0] shifted by (p31 - p16);
  v5 := dot_picture[0];
  shift v5 by (p31 - p16);
  current_picture += v5;
  
  draw tab_path[1] shifted by (p31 - p16);
  v5 := dot_picture[1];
  shift v5 by (p31 - p16);
  current_picture += v5;

  draw tab_path[2] shifted by (p31 - p16);
  v5 := dot_picture[2];
  shift v5 by (p31 - p16);
  current_picture += v5;

  draw tab_path[4] shifted by (p31 - p16);
  v5 := dot_picture[4];
  shift v5 by (p31 - p16);
  current_picture += v5;

  draw tab_path[5] shifted by (p31 - p16);
  v5 := dot_picture[5];
  shift v5 by (p31 - p16);
  current_picture += v5;

  draw tab_path[6] shifted by (p31 - p16);
  v5 := dot_picture[6];
  shift v5 by (p31 - p16);
  current_picture += v5;

  draw tab_path[10] shifted by (p31 - p16);
  v5 := dot_picture[10];
  shift v5 by (p31 - p16);
  current_picture += v5;

%% **** (4)  

  draw tab_path[0] shifted by 2 * (p31 - p16);
  v5 := dot_picture[0];
  shift v5 by (2 * (p31 - p16));
  current_picture += v5;

  draw tab_path[1] shifted by 2 * (p31 - p16);
  v5 := dot_picture[1];
  shift v5 by (2 * (p31 - p16));
  current_picture += v5;

  draw tab_path[2] shifted by 2 * (p31 - p16);
  v5 := dot_picture[2];
  shift v5 by (2 * (p31 - p16));
  current_picture += v5;

  draw tab_path[4] shifted by 2 * (p31 - p16);
  v5 := dot_picture[4];
  shift v5 by (2 * (p31 - p16));
  current_picture += v5;
  
  draw tab_path[5] shifted by 2 * (p31 - p16);
  v5 := dot_picture[5];
  shift v5 by (2 * (p31 - p16));
  current_picture += v5;
  
  draw tab_path[6] shifted by 2 * (p31 - p16);
  v5 := dot_picture[6];
  shift v5 by (2 * (p31 - p16));
  current_picture += v5;
  
  draw tab_path[10] shifted by 2 * (p31 - p16);
  v5 := dot_picture[10];
  shift v5 by (2 * (p31 - p16));
  current_picture += v5;
  
  draw tab_path[14] shifted by 2 * (p31 - p16);
  v5 := dot_picture[14];
  shift v5 by (2 * (p31 - p16));
  current_picture += v5;

  draw tab_path[0] shifted by 3 * (p31 - p16);
  v5 := dot_picture[0];
  shift v5 by (3 * (p31 - p16));
  current_picture += v5;

  draw tab_path[1] shifted by 3 * (p31 - p16);
  v5 := dot_picture[1];
  shift v5 by (3 * (p31 - p16));
  current_picture += v5;
  
  draw tab_path[2] shifted by 3 * (p31 - p16);
  v5 := dot_picture[2];
  shift v5 by (3 * (p31 - p16));
  current_picture += v5;

  draw tab_path[4] shifted by 3 * (p31 - p16);
  v5 := dot_picture[4];
  shift v5 by (3 * (p31 - p16));
  current_picture += v5;

  draw tab_path[5] shifted by 3 * (p31 - p16);
  v5 := dot_picture[5];
  shift v5 by (3 * (p31 - p16));
  current_picture += v5;

  draw tab_path[6] shifted by 3 * (p31 - p16);
  v5 := dot_picture[6];
  shift v5 by (3 * (p31 - p16));
  current_picture += v5;

  draw tab_path[10] shifted by 3 * (p31 - p16);
  v5 := dot_picture[10];
  shift v5 by (3 * (p31 - p16));
  current_picture += v5;

  draw tab_path[14] shifted by 3 * (p31 - p16);
  v5 := dot_picture[14];
  shift v5 by (3 * (p31 - p16));
  current_picture += v5;

  draw tab_path[0] shifted by 4 * (p31 - p16);
  v5 := dot_picture[0];
  shift v5 by (4 * (p31 - p16));
  current_picture += v5;

  draw tab_path[1] shifted by 4 * (p31 - p16);
  v5 := dot_picture[1];
  shift v5 by (4 * (p31 - p16));
  current_picture += v5;
  
  draw tab_path[2] shifted by 4 * (p31 - p16);
  v5 := dot_picture[2];
  shift v5 by (4 * (p31 - p16));
  current_picture += v5;
  
  draw tab_path[4] shifted by 4 * (p31 - p16);
  v5 := dot_picture[4];
  shift v5 by (4 * (p31 - p16));
  current_picture += v5;
  
  draw tab_path[5] shifted by 4 * (p31 - p16);
  v5 := dot_picture[5];
  shift v5 by (4 * (p31 - p16));
  current_picture += v5;
  
  draw tab_path[10] shifted by 4 * (p31 - p16);
  v5 := dot_picture[10];
  shift v5 by (4 * (p31 - p16));
  current_picture += v5;
  

%% *** (3) Traces

  tab {2, 3, .2, true, .4, n1, false, 4, true};
  n1 += 1;
    
  tab {42, 17, .2, true, .4, n1, false, 4, true};
  n1 += 1;

  tab {4, 0, .2, true, .4, n1, false, 4, true};
  n1 += 1;

  tab {28, 44, .2, true, .4, n1, false, 4, true};
  n1 += 1;

  tab {3, 16, .2, true, .4, n1, false, 4, true};
  n1 += 1;

  tab {10, 13, .2, true, .4, n1, false, 4, true};
  n1 += 1;

  tab {12, 4, .2, true, .4, n1, false, 4, true};
  n1 += 1;

  tab {6, 10, .2, true, .4, n1, false, 4, true};
  n1 += 1;

  tab {7, 6, .2, true, .4, n1, false, 4, true};
  n1 += 1;

  tab {41, 28, .2, true, .4, n1, false, 4, true};
  n1 += 1;

  tab {40, 41, .2, true, .4, n1, false, 4, true};
  n1 += 1;

  tab {31, 7, .2, true, .4, n1, false, 4, true};
  n1 += 1;

  tab {43, 42, .2, true, .4, n1, false, 4, true};
  n1 += 1;

  tab {44, 43, .2, true, .4, n1, false, 4, true};
  n1 += 1;

  tab {17, 18, .2, true, .4, n1, false, 4, true};
  n1 += 1;
  
  for j := 16 upto (n1 - 1):
    v5 := dot_picture[j];
    for i := 1 upto 4:
      draw tab_path[j] shifted by (i * (p31 - p16)) with_color dark_gray;
      shift v5 by (p31 - p16);
      current_picture += v5;
    endfor;
  endfor;

  p80 := p31 shifted by (4 * (p31 - p16));
  p81 := p32 shifted by (4 * (p31 - p16));

  tab {81, 80, .2, true, .4, n1, false, 4, true};
  n1 += 1;
  
  if do_labels:
    output v3 with_projection parallel_x_z;
  fi;

  v2 := current_picture;
  
%% *** (3)
  
endfig with_projection parallel_x_z;

%% ** (2)

beginfig(2);
  draw rp0;
  draw p9 -- p0;
  n5 := magnitude(p0 - p9);

  % message "{\Large n5:}";
  % show n5;
  %pause;

  drawdot p9 with_pen pencircle scaled (3pt, 3pt, 3pt);
  
  label.rt("{\small " & decimal n5 & "\\thinspace cm}", mediate(p0, p9));

  p63 := p14 shifted (.5cm, 0);

  p64 := p63 shifted (1cm, 0);

  draw (p63 shifted (.25pt, 0)) -- (p64 shifted (-.25pt, 0)) with_pen pencircle scaled (.5pt, .5pt, .5pt);

  drawdot (p63 shifted (.5pt, 0, .5pt)) with_pen pensquare scaled (1pt, 1pt, 1pt);
  drawdot (p64 shifted (-.5pt, 0, .5pt)) with_pen pensquare scaled (1pt, 1pt, 1pt);

  label.top("{\small 1\\thinspace cm}", mediate(p63, p64, .5));

  if do_labels:
    dotlabel.lft("$p_0$", p0);
    dotlabel.lft("$p_1$", p1);
    dotlabel.lft("$p_2$", p2);
    dotlabel.urt("$p_3$", p3);
    dotlabel.lrt("$p_4$", p4);
  fi;

  p55 := (.5 * unit_vector(p4 - p0)) shifted by p0;
  p56 := (.5 * unit_vector(p0 - p4)) shifted by p4;

  p57 := p0 shifted (0, 1);

  rotate_around p55 (p0, p57) 90;

  p58 := mediate(p0, p55, .3);

  p59 := p55 shifted by (p4 - p0);

  p60 := mediate(p4, p59, .3);

  draw p58 -- p55;
  draw p60 -- p59;

  side_length := magnitude(p4 - p0);

  p61 := (xpart p0, 0, zpart p4);

  n2 := (p0 - p4) angle (p61 - p4);
  
  label("{\small " & decimal side_length & "\\thinspace cm}", mediate(p55, p59, .5)) rotated (0, 0, -n2);

  p62 := mediate(p55, p59, .2);
  p63 := mediate(p59, p55, .2);

  draw p55 -- p62;
  draw p59 -- p63;
  
  if do_labels:
    dotlabel.lft("$p_{55}$", p55);
    dotlabel.lft("$p_{56}$", p56);
    dotlabel.rt("$p_{59}$", p59);
  %   dotlabel.rt("$p_{58}$", p58);
  fi;



  % p59 := mediate(p56, p58, .5);

  % p60 := (xpart p13, 0, zpart p10);

  % if do_labels:
  %   dotlabel.lft("$p_{60}$", p60);
  % fi;
 
  % % message "side_length:";
  % % show side_length;

  
  % p61 := mediate(p56, p58, .2);
  % p62 := mediate(p58, p56, .2);

  % if do_labels:
  %   dotlabel.top("$p_{61}$", p61);
  %   dotlabel.top("$p_{62}$", p62);
  % fi;

  % draw p55 -- p56 -- p61;
  % draw p57 -- p58 -- p62;
  
  %label("{\small " & decimal side_length & "\\thinspace cm}", p59) rotated (0, 0, -30);

 
endfig with_projection parallel_x_z;

%% ** (2) Fig. 3

beginfig(3);

  boolean do_labels;
  do_labels := false; % true;
  numeric n[];
  transform t[];
  
  rp4 := rp0 rotated (0, -18);
  draw rp4;

  for i = 0 upto 4:
    m[i] := get_point (i) rp4;
  endfor;

  if do_labels:
    dotlabel.top("$m_0$", m0);
    dotlabel.top("$m_1$", m1);
    dotlabel.top("$m_2$", m2);
    dotlabel.top("$m_3$", m3);
    dotlabel.top("$m_4$", m4);
  fi;

  n0 := 1.333;
  
  m5  := mediate(m4, m0, n0);
  m6  := mediate(m0, m4, n0);
  m7  := mediate(m0, m1, n0);
  m8  := mediate(m1, m0, n0);
  m9  := mediate(m1, m2, n0);
  m10 := mediate(m2, m1, n0);
  m11 := mediate(m3, m4, n0);
  m12 := mediate(m4, m3, n0);
  m13 := mediate(m2, m3, n0);
  m14 := mediate(m3, m2, n0);

  if do_labels:
    dotlabel.top("$m_5$", m5);
    dotlabel.top("$m_6$", m6);
    dotlabel.top("$m_7$", m7);
    dotlabel.top("$m_8$", m8);
    dotlabel.top("$m_9$", m9);
    dotlabel.top("$m_{10}$", m10);
    dotlabel.top("$m_{11}$", m11);
    dotlabel.top("$m_{12}$", m12);
    dotlabel.top("$m_{13}$", m13);
    dotlabel.top("$m_{14}$", m14);
  fi;

  draw m0 -- m5 dashed evenly;
  draw m0 -- m8 dashed evenly;
  draw m1 -- m7 dashed evenly;
  draw m1 -- m10 dashed evenly;
  draw m2 -- m9 dashed evenly;
  draw m2 -- m14 dashed evenly;
  draw m3 -- m12 dashed evenly;
  draw m3 -- m13 dashed evenly;
  draw m4 -- m6 dashed evenly;
  draw m4 -- m11 dashed evenly;

  v10 := current_picture;

  shift v10 (6cm, 0);
  current_picture += v10;

  shift v10 (6cm, 0);
  current_picture += v10;

  shift v10 (6cm, 0);
  current_picture += v10;


  shift v10 (6cm, 0);
  current_picture += v10;


  shift v10 (6cm, 0);
  current_picture += v10; 

  v11 := current_picture;

  shift v11 (0, 0, -6cm);

  current_picture += v11;


  output current_picture  with_projection parallel_x_z;
  clear current_picture;
    
%% *** (3)

  q20 := q0;

  if do_labels:
    dotlabel.top("$p_3$", p3);
    dotlabel.top("$p_4$", p4);
    dotlabel.top("$p_6$", p6);
    dotlabel.top("$p_7$", p7);
    label.top("$q_0$", p22); % dot
    label.bot("$p_{22}$", p22);  % dot
  fi;

  t0 := ((identity shifted by (m7 - p4)) shifted (0, 0, -6cm)) shifted (0, 0, zpart m9 - zpart m7);

  shift t0 (0, 0, -.5cm);
  
  q20 *= t0;
  
  draw q20;

  for i := 0 upto 3:
    m[15+i] := get_point (i) q20;
  endfor;

  if do_labels:
    dotlabel.bot("$m_{15}$", m15);
    dotlabel.bot("$m_{16}$", m16);
    dotlabel.top("$m_{17}$", m17);
    dotlabel.top("$m_{18}$", m18);
  fi;

  n1 := magnitude(m14 - m2);

  % message "n1:";
  % show n1;

  m19 := (n1 * unit_vector(m18 - m17)) shifted by m18;
  m20 := m18 shifted by (m17 - m19);
  m21 := m18 shifted by (m16 - m19);
  m22 := m19 shifted by (m15 - m18);

  m23 := (n1 * unit_vector(m18 - m15)) shifted by m18;
  m24 := m23 shifted by (m17 - m18);
  m25 := m18 shifted by (m15 - m23);
  m26 := m18 shifted by (m16 - m23);
  
  if do_labels:
    dotlabel.lft("$m_{19}$", m19);
    dotlabel.rt("$m_{20}$", m20);
    dotlabel.top("$m_{21}$", m21);
    dotlabel.top("$m_{22}$", m22);
    dotlabel.top("$m_{23}$", m23);
    dotlabel.top("$m_{24}$", m24);
    dotlabel.bot("$m_{25}$", m25);
    dotlabel.bot("$m_{26}$", m26);
  fi;

  draw m19 -- m18 dashed evenly;
  draw m18 -- m23 dashed evenly;
  draw m17 -- m24 dashed evenly;
  draw m17 -- m20 dashed evenly;
  draw m22 -- m15 dashed evenly;
  draw m25 -- m15 dashed evenly;
  draw m26 -- m16 dashed evenly;
  draw m21 -- m16 dashed evenly;

  v12 := current_picture;
  
  shift v12 (5cm, 0);
  current_picture += v12;
  shift v12 (5cm, 0);
  current_picture += v12;
  shift v12 (5cm, 0);
  current_picture += v12;
  shift v12 (5cm, 0);
  current_picture += v12;
  shift v12 (5cm, 0);
  current_picture += v12;
  shift v12 (5cm, 0);
  current_picture += v12;
  shift v12 (5cm, 0);
  current_picture += v12;

if false:
  shift v12 (5cm, 0);
  current_picture += v12;
  shift v12 (5cm, 0);
  current_picture += v12;
fi;

  v13 := current_picture;

  shift v13 (0, 0, -4cm);
  current_picture += v13;
  shift v13 (0, 0, -4cm);
  current_picture += v13;


%% *** (3)  

  
endfig with_projection parallel_x_z;

%% ** (2) Fig. 4

beginfig(4);

  boolean do_labels;

  do_labels := false; % true
  
  draw q0;
  
  m30 := m19 shifted by (p4 - m18);
  m31 := m20 shifted by (p6 - m17);
  m32 := m31 shifted by (p7 - p6);
  m33 := m30 shifted by (p3 - p4);
  m34 := m23 shifted by (p4 - m18);
  m35 := m34 shifted by (p6 - p4);
  m36 := p4 shifted by (p3 - m34);
  m37 := m36 shifted by (p7 - p3);

  
  if do_labels:
    dotlabel.lft("$p_{3}$", p3);
    dotlabel.rt("$p_{4}$", p4);
    dotlabel.top("$p_{6}$", p6);
    dotlabel.top("$p_{7}$", p7);
    dotlabel.top("$m_{30}$", m30);
    dotlabel.top("$m_{31}$", m31);
    dotlabel.top("$m_{32}$", m32);
    dotlabel.top("$m_{33}$", m33);
    dotlabel.top("$m_{34}$", m34);
    dotlabel.top("$m_{35}$", m35);
    dotlabel.bot("$m_{36}$", m36);
    dotlabel.bot("$m_{37}$", m37);
  fi;

  draw m30 -- p4 dashed evenly;
  draw p4 -- m34 dashed evenly;
  draw p6 -- m35 dashed evenly;
  draw p6 -- m31 dashed evenly;
  draw p3 -- m33 dashed evenly;
  draw p3 -- m36 dashed evenly;
  draw p7 -- m32 dashed evenly;
  draw p7 -- m37 dashed evenly;

  v20 := current_picture;

  shift v20 (5cm, 0);
  current_picture += v20;

  shift v20 (5cm, 0);
  current_picture += v20;

  shift v20 (5cm, 0);
  current_picture += v20;

  shift v20 (5cm, 0);
  current_picture += v20;

  shift v20 (5cm, 0);
  current_picture += v20;

  output current_picture with_projection parallel_x_z;

  clear current_picture;
  
  q30 := q1 shifted (0, 0, -7cm);

  draw q30;
  
  for i = 0 upto 2:
    m[40+i] := get_point (i) q30;
  endfor;
  
  if do_labels:
    dotlabel.lft("$m_{40}$", m40);
    dotlabel.rt("$m_{41}$", m41);
    dotlabel.top("$m_{42}$", m42);
  fi;

  m43 := unit_vector(m42 - m40) shifted by m42;
  m44 := unit_vector(m42 - m41) shifted by m42;
  m45 := unit_vector(m40 - m41) shifted by m40;
  m46 := unit_vector(m40 - m42) shifted by m40;
  m47 := unit_vector(m41 - m40) shifted by m41;
  m48 := unit_vector(m41 - m42) shifted by m41;
  
  if do_labels:
    dotlabel.lft("$m_{43}$", m43);
    dotlabel.lft("$m_{44}$", m44);
    dotlabel.lft("$m_{45}$", m45);
    dotlabel.lft("$m_{46}$", m46);
    dotlabel.rt("$m_{47}$", m47);
    dotlabel.rt("$m_{48}$", m48);
  fi;

  draw m42 -- m44 dashed evenly;
  draw m42 -- m43 dashed evenly;
  draw m40 -- m45 dashed evenly;
  draw m40 -- m46 dashed evenly;
  draw m41 -- m47 dashed evenly;
  draw m41 -- m48 dashed evenly;

  v21 := current_picture;

  shift v21 (5cm, 0);
  current_picture += v21;

  shift v21 (5cm, 0);
  current_picture += v21;

  shift v21 (5cm, 0);
  current_picture += v21;

  shift v21 (5cm, 0);
  current_picture += v21;

  shift v21 (5cm, 0);
  current_picture += v21;

  shift v21 (5cm, 0);
  current_picture += v21;

  shift v21 (5cm, 0);
  current_picture += v21;

  v22 := current_picture;

  shift v22 (0, 0, -4cm);

  current_picture += v22;

  output current_picture with_projection parallel_x_z;
  
  clear current_picture;
 
  shift v21 (-35cm, 0, -8cm);
  current_picture += v21;

  shift v21 (5cm, 0);
  current_picture += v21;

  shift v21 (5cm, 0);
  current_picture += v21;

  shift v21 (5cm, 0);
  current_picture += v21;

  m49 := mediate(p6, p7);

  shift m49 (15cm, 0, -11cm);
  
  label.rt("{\Largebx Extras}", m49);

  output current_picture with_projection parallel_x_z;
  clear current_picture;  
  
  rp5 := rp4;

  t2 := identity shifted (23cm, 0, -13cm);
  
  rp5 *= t2;
  
  draw rp5;

  for i = 0 upto 14:
    m[50+i] := m[i];
    m[50+i] *= t2;
  endfor;
  
  draw m50 -- m55 dashed evenly;
  draw m50 -- m58 dashed evenly;
  draw m51 -- m57 dashed evenly;
  draw m51 -- m60 dashed evenly;
  draw m52 -- m59 dashed evenly;
  draw m52 -- m64 dashed evenly;
  draw m53 -- m62 dashed evenly;
  draw m53 -- m63 dashed evenly;
  draw m54 -- m56 dashed evenly;
  draw m54 -- m61 dashed evenly;

  v23 := current_picture;

  shift v23 (6cm, 0);
  current_picture += v23;

  shift v23 (6cm, 0);
  current_picture += v23;

  shift v23 (0, 0, -6cm);
  current_picture += v23;

  shift v23 (-6cm, 0);
  current_picture += v23;

  shift v23 (-6cm, 0);
  current_picture += v23;

  output current_picture with_projection parallel_x_z;
  clear current_picture;

  v24 := v21;

  shift v24 (0, 0, -3.5cm);
  current_picture += v24;

  shift v24 (-5cm, 0);
  current_picture += v24;

  shift v24 (-5cm, 0);
  current_picture += v24;
  
  shift v24 (-5cm, 0);
  current_picture += v24;

  output current_picture with_projection parallel_x_z;
  clear current_picture;
  
  v25 := v20;

  shift v25 (-25cm, 0, -20cm);
  current_picture += v25;

  shift v25 (5cm, 0);
  current_picture += v25;

  shift v25 (5cm, 0);
  current_picture += v25;

  shift v25 (5cm, 0);
  current_picture += v25;
  
endfig with_projection parallel_x_z;

%% ** (2)

beginfig(5);

  current_picture := v1;
  current_picture += v2;
  current_picture += v3;
  
endfig with_projection parallel_x_z;

%% ** (2)




verbatim_metapost "end";
  
end;


%% ** (2) End of 3DLDF code.

%% * (1) Emacs-Lisp code for use in indirect buffers when using the          
%%       GNU Emacs editor.  The local variable list is not evaluated when an 
%%       indirect buffer is visited, so it's necessary to evaluate the       
%%       following s-expression in order to use the facilities normally      
%%       accessed via the local variables list.                              
%%       \initials{LDF 2004.02.12}.                                          

%% (progn (metapost-mode) (outline-minor-mode t) (setq fill-column 80))

%% * (1) Local variables for Emacs.

%% Local Variables:
%% mode:Metapost
%% eval:(outline-minor-mode t)
%% eval:(read-abbrev-file abbrev-file-name)
%% abbrev-mode:t
%% auto-fill-function:nil
%% outline-regexp:"%% [*\f]+"
%% End:
