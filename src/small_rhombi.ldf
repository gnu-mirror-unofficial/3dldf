%% small_rhombi.ldf
%% Created by Laurence D. Finston (LDF) Sun 12 Sep 2021 10:24:41 PM CEST

%% * (1) Copyright and License.

%%%% This file is part of GNU 3DLDF, a package for three-dimensional drawing.  
%%%% Copyright (C) 2021 The Free Software Foundation  

%%%% GNU 3DLDF is free software; you can redistribute it and/or modify 
%%%% it under the terms of the GNU General Public License as published by 
%%%% the Free Software Foundation; either version 3 of the License, or 
%%%% (at your option) any later version.  

%%%% GNU 3DLDF is distributed in the hope that it will be useful, 
%%%% but WITHOUT ANY WARRANTY; without even the implied warranty of 
%%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
%%%% GNU General Public License for more details.  

%%%% You should have received a copy of the GNU General Public License 
%%%% along with GNU 3DLDF; if not, write to the Free Software 
%%%% Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA 

%%%% GNU 3DLDF is a GNU package.  
%%%% It is part of the GNU Project of the  
%%%% Free Software Foundation 
%%%% and is published under the GNU General Public License. 
%%%% See the website http://www.gnu.org 
%%%% for more information.   
%%%% GNU 3DLDF is available for downloading from 
%%%% http://www.gnu.org/software/3dldf/LDF.html.

%%%% Please send bug reports to Laurence.Finston@gmx.de
%%%% The mailing list help-3dldf@gnu.org is available for people to 
%%%% ask other users for help.  
%%%% The mailing list info-3dldf@gnu.org is for sending 
%%%% announcements to users. To subscribe to these mailing lists, send an 
%%%% email with ``subscribe <email-address>'' as the subject.  

%%%% The author can be contacted at: 

%%%% Laurence D. Finston 
%%%% c/o Free Software Foundation, Inc. 
%%%% 51 Franklin St, Fifth Floor 
%%%% Boston, MA  02110-1301  
%%%% USA

%%%% Laurence.Finston@gmx.de

% * (1) Beginning of 3DLDF code.

beginfig(1);

  point p[];
  path q[];
  reg_polygon rp[];
  rectangle r[];
  transform t[];
  
  rp0 := (unit_pentagon scaled (2, 0, 2)) rotated (0, 18);

  draw rp0;

  for i = 0 upto 4:
    p[i] := get_point (i) rp0;
  endfor;

  % show (p4 - p3);
  % show xpart p4;
  % show xpart p3;
  
  dotlabel.top("$p_0$", p0);
  dotlabel.lft("$p_1$", p1);
  dotlabel.lft("$p_2$", p2);
  dotlabel.urt("$p_3$", p3);
  dotlabel.lrt("$p_4$", p4);

  p5 := p4 shifted (0, 1);

  p6 := p3 rotated_around (p4, p5) 90;

  dotlabel.rt("$p_6$", p6);

  p7 := (p6 - p4) shifted by p3;

  dotlabel.rt("$p_7$", p7);

  q0 := p3 -- p7 -- p6 -- p4 -- cycle;

  dotlabel.top("$q_0$", mediate(p6, p3, .5));
  
  draw q0;

  p9 := get_center rp0;

  dotlabel.top("${rp}_0$", p9);
  
  p10 := p6 rotated_around (p4, p5) 60;
  dotlabel.top("$p_{10}$", p10);
  
  q1 := p4 -- p6 -- p10 -- cycle;
  draw q1;
  
  q2 := p4 -- mediate(p10, p6, .5);
  %draw q2;

  q3 := p6 -- mediate(p10, p4, .5);
  %draw q3;

  p11 := q2 intersection_point q3;

  dotlabel.top("$q_1$", p11);

  q4 := (q0 rotated_around (p4, p5) 60) rotated_around (p4, p10) 180;

  draw q4;

  for i = 0 upto 1:
    p[12 + i] := get_point (i) q4;
  endfor;

  dotlabel.lft("$p_{12}$", p12);
  dotlabel.top("$p_{13}$", p13);

  dotlabel.top("$q_4$", mediate(p13, p4, .5));

  p14 := mediate(p4, p3, .5);
  p15 := mediate(p6, p7, .5);

  dotlabel.lft("$p_{14}$", p14);
  dotlabel.rt("$p_{15}$", p15);

  q5 := q1 rotated_around (p14, p15) 180;

  draw q5;

  dotlabel.top("$q_5$", p11 rotated_around (p14, p15) 180);

  q6 := q4 rotated_around (p14, p15) 180;

  draw q6;

  dotlabel.top("$q_6$", mediate(p13, p4, .5) rotated_around (p14, p15) 180);

  for i = 0 upto 3:
    p[16+i] := get_point (i) q6;
  endfor;

  dotlabel.lft("$p_{16}$", p16);
  dotlabel.lft("$p_{17}$", p17);
  dotlabel.rt("$p_{18}$", p18);

  p19 := mediate(p16, p3, .5);
  p20 := mediate(p17, p18, .5);

  dotlabel.top("$p_{19}$", p19);
  dotlabel.bot("$p_{20}$", p20);

  q7 := q5 rotated_around (p19, p20) 180;

  draw q7;

  dotlabel.top("$q_7$", (p11 rotated_around (p14, p15) 180) rotated_around (p19, p20) 180);
  
  p21 := get_point (1) q7;

  dotlabel.lft("$p_{21}$", p21);

  q8 := q0 rotated_around (p7, p6) 180;

  draw q8 with_color red;

  q9 := q1 rotated_around (p7, p6) 180;

  draw q9 with_color red;
    
endfig with_projection parallel_x_z;

%% ** (2)

verbatim_metapost "end";
  
end;


%% ** (2) End of 3DLDF code.

%% * (1) Emacs-Lisp code for use in indirect buffers when using the          
%%       GNU Emacs editor.  The local variable list is not evaluated when an 
%%       indirect buffer is visited, so it's necessary to evaluate the       
%%       following s-expression in order to use the facilities normally      
%%       accessed via the local variables list.                              
%%       \initials{LDF 2004.02.12}.                                          

%% (progn (metafont-mode) (outline-minor-mode t) (setq fill-column 80))    

%% * (1) Local variables for Emacs.

%% Local Variables:
%% mode:Metapost
%% eval:(outline-minor-mode t)
%% eval:(read-abbrev-file abbrev-file-name)
%% abbrev-mode:t
%% outline-regexp:"%% [*\f]+"
%% End:
