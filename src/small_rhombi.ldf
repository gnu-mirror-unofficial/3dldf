%% small_rhombi.ldf
%% Created by Laurence D. Finston (LDF) Sun 12 Sep 2021 10:24:41 PM CEST

%% * (1) Copyright and License.

%%%% This file is part of GNU 3DLDF, a package for three-dimensional drawing.  
%%%% Copyright (C) 2021 The Free Software Foundation  

%%%% GNU 3DLDF is free software; you can redistribute it and/or modify 
%%%% it under the terms of the GNU General Public License as published by 
%%%% the Free Software Foundation; either version 3 of the License, or 
%%%% (at your option) any later version.  

%%%% GNU 3DLDF is distributed in the hope that it will be useful, 
%%%% but WITHOUT ANY WARRANTY; without even the implied warranty of 
%%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
%%%% GNU General Public License for more details.  

%%%% You should have received a copy of the GNU General Public License 
%%%% along with GNU 3DLDF; if not, write to the Free Software 
%%%% Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA 

%%%% GNU 3DLDF is a GNU package.  
%%%% It is part of the GNU Project of the  
%%%% Free Software Foundation 
%%%% and is published under the GNU General Public License. 
%%%% See the website http://www.gnu.org 
%%%% for more information.   
%%%% GNU 3DLDF is available for downloading from 
%%%% http://www.gnu.org/software/3dldf/LDF.html.

%%%% Please send bug reports to Laurence.Finston@gmx.de
%%%% The mailing list help-3dldf@gnu.org is available for people to 
%%%% ask other users for help.  
%%%% The mailing list info-3dldf@gnu.org is for sending 
%%%% announcements to users. To subscribe to these mailing lists, send an 
%%%% email with ``subscribe <email-address>'' as the subject.  

%%%% The author can be contacted at: 

%%%% Laurence D. Finston 
%%%% c/o Free Software Foundation, Inc. 
%%%% 51 Franklin St, Fifth Floor 
%%%% Boston, MA  02110-1301  
%%%% USA

%%%% Laurence.Finston@gmx.de

% * (1) Beginning of 3DLDF code.

verbatim_metapost "verbatimtex \font\small=cmr8 etex;";

%% ** (2)  Global variables

point p[];
path tab_path[];
reg_polygon rp[];
numeric side_length;

%% ** (2) Macro thin_tab

macro thin_tab;

def thin_tab {numeric pp, numeric qq, numeric offset, numeric offset_one, boolean ddo_labels,
              numeric width, boolean do_rotate, numeric tab_path_ctr} =

  point P[];

  P0 := mediate(p[pp], p[qq], offset);
  P1 := mediate(p[qq], p[pp], offset_one);

  if ddo_labels:
    dotlabel.top("$P_0$", P0);
    dotlabel.top("$P_1$", P1);
  fi;

  P2 := (width * unit_vector(P1 - P0)) shifted by P1;

  P3 := P1 shifted (0, 1);

  rotate_around P2 (P1, P3) -90;

  if ddo_labels:
    dotlabel.top("$P_2$", P2);
  fi;

  tab_path[tab_path_ctr] := P0 -- P2 -- P1;

  if do_rotate:
    rotate_around tab_path[tab_path_ctr] (P0, P1) 180;
  fi;

  draw tab_path[tab_path_ctr];

  P4 := mediate(P0, P2, .5);

  if do_rotate:
    rotate_around P4 (P0, P1) 180;
  fi;

  if ddo_labels:
    label(decimal tab_path_ctr, P4) with_text_color red;
  fi;
  
enddef;    

%% ** (2) Macro tab

macro tab;

def tab {numeric pp, numeric qq, numeric offset, boolean ddo_labels,
         numeric width, numeric tab_path_ctr} =

  point P[];

  P0 := mediate(p[pp], p[qq], offset);

  P1 := mediate(p[qq], p[pp], offset);

  if ddo_labels:
    dotlabel.top("$P_0$", P0) with_text_color red;
    dotlabel.top("$P_1$", P1) with_text_color red;
  fi;

  P2 := P0 shifted (0, 1);

  P3 := (width * unit_vector(p[pp] - P0)) shifted by P0;
  rotate_around P3 (P0, P2) -112.5;
  
  P4 := (width * unit_vector(p[qq] - P1)) shifted by P1;
  P5 := P1 shifted (0, 1);
  rotate_around P4 (P1, P5) 112.5;

  if ddo_labels:
    dotlabel.top("$P_3$", P3) with_text_color red;
    dotlabel.top("$P_4$", P4) with_text_color red;
  fi;

  tab_path[tab_path_ctr] := P0 -- P3 -- P4 -- P1;
  
  draw tab_path[tab_path_ctr];

  P6 := mediate(mediate(P0, P1, .5), mediate(P3, P4, .5), .5);

  if ddo_labels:
    label(decimal tab_path_ctr, P6) with_text_color red;
  fi;
  
enddef;

%% ** (2) Fig. 1:  Net

beginfig(1);

%% *** (3)  

  path q[];
  rectangle r[];
  transform t[];
  bool do_labels;
  picture v[];
  numeric n[];

  numeric scale_val;

  scale_val := 2.375;
  
  do_labels := false; % true
  
  rp0 := (unit_pentagon scaled (scale_val, 0, scale_val)) rotated (0, 18);

  draw rp0;

  for i = 0 upto 4:
    p[i] := get_point (i) rp0;
  endfor;

  % show (p4 - p3);
  % show xpart p4;
  % show xpart p3;

  if do_labels:
    dotlabel.top("$p_0$", p0);
    dotlabel.lft("$p_1$", p1);
    dotlabel.lft("$p_2$", p2);
    dotlabel.urt("$p_3$", p3);
    dotlabel.lrt("$p_4$", p4);
  fi;
  
  p5 := p4 shifted (0, 1);

  p6 := p3 rotated_around (p4, p5) 90;

  if do_labels:
    dotlabel.rt("$p_6$", p6);
  fi;

  p7 := (p6 - p4) shifted by p3;

  if do_labels:
    dotlabel.rt("$p_7$", p7);
  fi;

  q0 := p3 -- p7 -- p6 -- p4 -- cycle;

  p22 := mediate(p6, p3, .5);

  if do_labels:
    dotlabel.top("$q_0$", p22);
    dotlabel.bot("$p_{22}$", p22);
  fi;
  
  
  draw q0;

  p9 := get_center rp0;

  if do_labels:
    dotlabel.top("$rp_0$", p9);
    dotlabel.bot("$p_9$", p9);
  fi;
  
  p10 := p6 rotated_around (p4, p5) 60;

  if do_labels:
    dotlabel.rt("$p_{10}$", p10);
  fi;
  
  q1 := p4 -- p6 -- p10 -- cycle;
  draw q1;
  
  q2 := p4 -- mediate(p10, p6, .5);
  %draw q2;

  q3 := p6 -- mediate(p10, p4, .5);
  %draw q3;

  p11 := q2 intersection_point q3;

  if do_labels:
    dotlabel.top("$q_1$", p11);
    dotlabel.bot("$p_{11}$", p11);
  fi;

  q4 := (q0 rotated_around (p4, p5) 60) rotated_around (p4, p10) 180;

  draw q4;

  for i = 0 upto 1:
    p[12 + i] := get_point (i) q4;
  endfor;

  if do_labels:
    dotlabel.lft("$p_{12}$", p12);
    dotlabel.lft("$p_{13}$", p13);
  fi;

  p23 := mediate(p13, p4, .5);

  if do_labels:
    dotlabel.top("$q_4$", p23);
    dotlabel.bot("$p_{23}$", p23);
  fi;

  p14 := mediate(p4, p3, .5);
  p15 := mediate(p6, p7, .5);

  if do_labels:
    dotlabel.lft("$p_{14}$", p14);
    dotlabel.rt("$p_{15}$", p15);
  fi;
  
  q5 := q1 rotated_around (p14, p15) 180;

  draw q5;

  p24 := p11 rotated_around (p14, p15) 180;

  if do_labels:
    dotlabel.top("$q_5$", p24);
    dotlabel.bot("$p_{24}$", p24);
  fi;

  q6 := q4 rotated_around (p14, p15) 180;

  draw q6;

  p25 := mediate(p13, p4, .5) rotated_around (p14, p15) 180;

  if do_labels:
    dotlabel.top("$q_6$", p25);
    dotlabel.bot("$p_{25}$", p25);
  fi;

  for i = 0 upto 3:
    p[16+i] := get_point (i) q6;
  endfor;

  if do_labels:
    dotlabel.lft("$p_{16}$", p16);
    dotlabel.ulft("$p_{17}$", p17);
    dotlabel.rt("$p_{18}$", p18) with_text_color blue;
  fi;

  p19 := mediate(p16, p3, .5);
  p20 := mediate(p17, p18, .5);

  if do_labels:
    dotlabel.top("$p_{19}$", p19);
    dotlabel.bot("$p_{20}$", p20);
  fi;

  q7 := q5 rotated_around (p19, p20) 180;

  draw q7;

  p26 := (p11 rotated_around (p14, p15) 180) rotated_around (p19, p20) 180;

  if do_labels:
    dotlabel.top("$q_7$", p26);
    dotlabel.bot("$p_{26}$", p26);
  fi;

  p21 := get_point (1) q7;

  if do_labels:
    dotlabel.lft("$p_{21}$", p21);
  fi;

  q8 := q0 shifted by (p21 - p4);
  p27 := p22 shifted by (p21 - p4);
  draw q8;

  if do_labels:
    dotlabel.top("$q_8$", p27);
    dotlabel.bot("$p_{27}$", p27);
  fi;
  
  p28 := mediate(p21, p27, 2);
  p29 := mediate(p17, p27, 2);

  if do_labels:
    dotlabel.rt("$p_{28}$", p28);
    dotlabel.lft("$p_{29}$", p29);
  fi;

  rp1 := (rp0 shifted by (p21 - p4)) rotated_around (p26, p27) 180;
  p30 := (p9 shifted by (p21 - p4)) rotated_around (p26, p27) 180;
  
  draw rp1;

  if do_labels:
    dotlabel.top("$rp_1$", p30);
    dotlabel.bot("$p_{30}$", p30);
  fi;

  q9 := q7 rotated_around (p27, p30) 180;
  draw q9;

  p36 := p26 rotated_around (p27, p30) 180;

  if do_labels:
    dotlabel.top("$q_9$", p36);
    dotlabel.bot("$p_{36}$", p36);
  fi;
    
  q10 := q6 rotated_around (p27, p30) 180;

  p37 := p25 rotated_around (p27, p30) 180;
  p38 := p16 rotated_around (p27, p30) 180;

  draw q10;

  if do_labels:
    dotlabel.top("$q_{10}$", p37);
    dotlabel.bot("$p_{37}$", p37);
    dotlabel.lft("$p_{38}$", p38);
  fi;

  q11 := q6 rotated_around (p22, p24) 180;
  draw q11;
  
  p31 := p16 rotated_around (p22, p24) 180;
  p32 := p17 rotated_around (p22, p24) 180;

  if do_labels:
    dotlabel.top("$p_{31}$", p31);
    dotlabel.top("$p_{32}$", p32) with_text_color blue;
  fi;


%% *** (3)
  
  v0 := current_picture;
  suppress_labels v0;
  
  shift v0 by (p31 - p16);
  current_picture += v0;
 
  shift v0 by (p31 - p16);
  current_picture += v0;

  shift v0 by (p31 - p16);
  current_picture += v0;

  shift v0 by (p31 - p16);
  current_picture += v0;

  rp2 := rp0 shifted by (p13 - p2);
  p35 := p9 shifted by (p13 - p2);
  
  p33 := get_point (3) rp2;
  n0 := (p33 - p13) angle (p10 - p13);

  message "n0:";
  show n0;

  p34 := p13 shifted (0, 1);

  t0 := identity rotated_around (p13, p34) -n0;

  t1 := identity shifted by (p31 - p16);
  
  p35 *= rp2 *= t0;

  rp3 := rp2;
  p39 := p35;

  rotate_around rp3 (p13, p10) 180;
  rotate_around p39 (p13, p10) 180;

  shift rp3 by (p38 - p13);
  shift p39 by (p38 - p13);
  
  shift rp3 by (4 * (p31 - p16));
  shift p39 by (4 * (p31 - p16));

  draw rp3; %%  with_color blue;  

  if do_labels:
    dotlabel.top("$rp_3$", p39) with_text_color blue;
    dotlabel.bot("$p_{39}$", p39) with_text_color blue;
  fi;
  
  p35 *= rp2 *= t1;
 
  draw rp2; %% with_color blue;
  
  if do_labels:
    dotlabel.top("$rp_2$", p35) with_text_color blue;
    dotlabel.bot("$p_{35}$", p35) with_text_color blue;
  fi;
   
  if do_labels:
    dotlabel.top("$p_{33}$", p33);
  fi;

  p40 := p32 shifted by (p38 - p18);
  p41 := p31 shifted by (p38 - p18);
  

  if do_labels:
    dotlabel.rt("$p_{40}$", p40);
    dotlabel.rt("$p_{41}$", p41);
  fi;

  for i = 0 upto 2:
    p[42+i] := get_point (i) rp1;
  endfor;

  if do_labels:
    dotlabel.top("$p_{42}$", p42);
    dotlabel.top("$p_{43}$", p43);
    dotlabel.top("$p_{44}$", p44);
  fi;
  
  for i = 0 upto 4:
    p[45+i] := get_point (i) rp2;
  endfor;

  if do_labels:
    dotlabel.top("$p_{45}$", p45);
    dotlabel.top("$p_{46}$", p46);
    dotlabel.lft("$p_{47}$", p47) with_text_color blue;
    dotlabel.rt("$p_{48}$", p48) with_text_color blue;
    dotlabel.top("$p_{49}$", p49);
  fi;

  for i = 0 upto 4:
    p[50+i] := get_point (i) rp3;
  endfor;

  if do_labels:
    dotlabel.top("$p_{50}$", p50);
    dotlabel.top("$p_{51}$", p51);
    dotlabel.bot("$p_{52}$", p52) with_text_color blue;
    dotlabel.rt ("$p_{53}$", p53); %with_text_color blue;
    dotlabel.top("$p_{54}$", p54);
  fi;
  

%% *** (3) Tabs

  n1 := 0;
  
  tab {2, 1, .2, false, .4, n1};
  n1 += 1;
  tab {1, 0, .2, false, .4, n1};
  n1 += 1;
  tab {12, 13, .2, false, .4, n1};
  n1 += 1;
  tab {21, 16, .2, false, .4, n1};
  n1 += 1;
  tab {29, 21, .2, false, .3, n1};
  n1 += 1;
  tab {38, 29, .2, false, .4, n1};
  n1 += 1;
  tab {40, 38, .2, false, .4, n1};
  n1 += 1;
  tab {47, 46, .2, false, .4, n1};
  n1 += 1;
  tab {51, 52, .2, false, .4, n1};
  n1 += 1;
  tab {50, 51, .2, false, .4, n1};
  n1 += 1;
  tab {32, 18, .2, false, .3, n1};
  n1 += 1;

  thin_tab {3, 2, .2, .15, false, .35, true, n1};
  n1 += 1;

  thin_tab {17, 42, .15, .2, false, .35, true, n1};
  n1 += 1;

  thin_tab {4, 0, .15, .2, false, .35, false, n1};
  n1 += 1;

  thin_tab {28, 44, .15, .2, false, .35, false, n1};
  n1 += 1;
  
  draw tab_path[0] shifted by (p31 - p16);
  draw tab_path[1] shifted by (p31 - p16);
  draw tab_path[2] shifted by (p31 - p16);
  draw tab_path[4] shifted by (p31 - p16);
  draw tab_path[5] shifted by (p31 - p16);
  draw tab_path[6] shifted by (p31 - p16);
  draw tab_path[10] shifted by (p31 - p16);
  draw tab_path[11] shifted by (p31 - p16);
  draw tab_path[12] shifted by (p31 - p16);
  draw tab_path[13] shifted by (p31 - p16);
  draw tab_path[14] shifted by (p31 - p16);

  draw tab_path[0] shifted by 2 * (p31 - p16);
  draw tab_path[1] shifted by 2 * (p31 - p16);
  draw tab_path[2] shifted by 2 * (p31 - p16);
  draw tab_path[4] shifted by 2 * (p31 - p16);
  draw tab_path[5] shifted by 2 * (p31 - p16);
  draw tab_path[6] shifted by 2 * (p31 - p16);
  draw tab_path[10] shifted by 2 * (p31 - p16);
  draw tab_path[11] shifted by 2 * (p31 - p16);
  draw tab_path[12] shifted by 2 * (p31 - p16);
  draw tab_path[13] shifted by 2 * (p31 - p16);
  draw tab_path[14] shifted by 2 * (p31 - p16);

  draw tab_path[0] shifted by 3 * (p31 - p16);
  draw tab_path[1] shifted by 3 * (p31 - p16);
  draw tab_path[2] shifted by 3 * (p31 - p16);
  draw tab_path[4] shifted by 3 * (p31 - p16);
  draw tab_path[5] shifted by 3 * (p31 - p16);
  draw tab_path[6] shifted by 3 * (p31 - p16);
  draw tab_path[10] shifted by 3 * (p31 - p16);
  draw tab_path[11] shifted by 3 * (p31 - p16);
  draw tab_path[12] shifted by 3 * (p31 - p16);
  draw tab_path[13] shifted by 3 * (p31 - p16);
  draw tab_path[14] shifted by 3 * (p31 - p16);

  draw tab_path[0] shifted by 4 * (p31 - p16);
  draw tab_path[1] shifted by 4 * (p31 - p16);
  draw tab_path[2] shifted by 4 * (p31 - p16);
  draw tab_path[4] shifted by 4 * (p31 - p16);
  draw tab_path[5] shifted by 4 * (p31 - p16);
  draw tab_path[10] shifted by 4 * (p31 - p16);
  draw tab_path[11] shifted by 4 * (p31 - p16);
  draw tab_path[12] shifted by 4 * (p31 - p16);
  draw tab_path[13] shifted by 4 * (p31 - p16);
  draw tab_path[14] shifted by 4 * (p31 - p16);
  
  tab {46, 45, .2, false, .4, n1};
  n1 += 1;
  tab {45, 49, .2, false, .4, n1};
  n1 += 1;
  
  
%% *** (3)

  
endfig with_projection parallel_x_z;

%% ** (2)

beginfig(2);
  draw rp0;
  draw p9 -- p0;
  n5 := magnitude(p0 - p9);

  message "n5:";
  show n5;
  %pause;

  drawdot p9 with_pen pencircle scaled (3pt, 3pt, 3pt);
  
  label.rt("{\small " & decimal n5 & "\\thinspace cm}", mediate(p0, p9));

  p63 := p14 shifted (.5cm, 0);

  p64 := p63 shifted (1cm, 0);

  draw (p63 shifted (.25pt, 0)) -- (p64 shifted (-.25pt, 0)) with_pen pencircle scaled (.5pt, .5pt, .5pt);

  drawdot (p63 shifted (.5pt, 0, .5pt)) with_pen pensquare scaled (1pt, 1pt, 1pt);
  drawdot (p64 shifted (-.5pt, 0, .5pt)) with_pen pensquare scaled (1pt, 1pt, 1pt);

  label.top("{\small 1\\thinspace cm}", mediate(p63, p64, .5));

  if do_labels:
    dotlabel.lft("$p_0$", p0);
    dotlabel.lft("$p_1$", p1);
    dotlabel.lft("$p_2$", p2);
    dotlabel.urt("$p_3$", p3);
    dotlabel.lrt("$p_4$", p4);
  fi;

  p55 := (.5 * unit_vector(p4 - p0)) shifted by p0;
  p56 := (.5 * unit_vector(p0 - p4)) shifted by p4;

  p57 := p0 shifted (0, 1);

  rotate_around p55 (p0, p57) 90;

  p58 := mediate(p0, p55, .3);

  p59 := p55 shifted by (p4 - p0);

  p60 := mediate(p4, p59, .3);

  draw p58 -- p55;
  draw p60 -- p59;

  side_length := magnitude(p4 - p0);

  p61 := (xpart p0, 0, zpart p4);

  n2 := (p0 - p4) angle (p61 - p4);
  
  label("{\small " & decimal side_length & "\\thinspace cm}", mediate(p55, p59, .5)) rotated (0, 0, -n2);

  p62 := mediate(p55, p59, .2);
  p63 := mediate(p59, p55, .2);

  draw p55 -- p62;
  draw p59 -- p63;
  
  if do_labels:
    dotlabel.lft("$p_{55}$", p55);
    dotlabel.lft("$p_{56}$", p56);
    dotlabel.rt("$p_{59}$", p59);
  %   dotlabel.rt("$p_{58}$", p58);
  fi;



  % p59 := mediate(p56, p58, .5);

  % p60 := (xpart p13, 0, zpart p10);

  % if do_labels:
  %   dotlabel.lft("$p_{60}$", p60);
  % fi;
 
  % % message "side_length:";
  % % show side_length;

  
  % p61 := mediate(p56, p58, .2);
  % p62 := mediate(p58, p56, .2);

  % if do_labels:
  %   dotlabel.top("$p_{61}$", p61);
  %   dotlabel.top("$p_{62}$", p62);
  % fi;

  % draw p55 -- p56 -- p61;
  % draw p57 -- p58 -- p62;


  
  
  %label("{\small " & decimal side_length & "\\thinspace cm}", p59) rotated (0, 0, -30);


  
endfig with_projection parallel_x_z;


%% ** (2)

verbatim_metapost "end";
  
end;


%% ** (2) End of 3DLDF code.

%% * (1) Emacs-Lisp code for use in indirect buffers when using the          
%%       GNU Emacs editor.  The local variable list is not evaluated when an 
%%       indirect buffer is visited, so it's necessary to evaluate the       
%%       following s-expression in order to use the facilities normally      
%%       accessed via the local variables list.                              
%%       \initials{LDF 2004.02.12}.                                          

%% (progn (metapost-mode) (outline-minor-mode t) (setq fill-column 80))

%% * (1) Local variables for Emacs.

%% Local Variables:
%% mode:Metapost
%% eval:(outline-minor-mode t)
%% eval:(read-abbrev-file abbrev-file-name)
%% abbrev-mode:t
%% outline-regexp:"%% [*\f]+"
%% End:
