@q creatnew.web @>
    
@q * Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing. @>
@q Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, @>
@q 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018 The Free Software Foundation @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version. @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details. @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html. @>

@q (``@@'' stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de @>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston                 @> 
@q c/o Free Software Foundation, Inc.  @>
@q 51 Franklin St, Fifth Floor         @> 
@q Boston, MA  02110-1301              @>
@q USA                                 @>

@q Laurence.Finston@@gmx.de (@@ stands for a single ``at'' sign.)@>


@q * (0) Dynamic allocation for |Shapes|.@>
@** Dynamic allocation for {\bf Shapes}.

\LOG
\initials{LDF 2003.12.29.}  
Added this template function.

\initials{LDF 2004.1.2.}  
Moved the code in this file from
\filename{pspglb.web} to \filename{creatnew.web} (this file).
\ENDLOG 

@q * Include files.@>
@ Include files.
@<Include files@>=
#include "loader.h++"
#include "pspglb.h++"
#include "io.h++"

@q * (1) Dynamic allocation for |Shapes| and other types.@>
@* Dynamic allocation for {\bf Shapes} and other types.

@q ** (2) Pointer argument.@>
@*1 Pointer argument.


\LOG
\initials{LDF 2004.10.10.}
Added optional |Scanner_Node scanner_node| argument.

\initials{LDF 2004.10.10.}
Now calling |new| within a |try| block.  If |new| fails and 
throws |bad_alloc|, this function rethrows it.
Added debugging and error output.

\initials{LDF 2004.10.11.}
@:BUG FIX@> BUG FIX: 
Now declaring |C* obj| outside of the |try| block.

\initials{LDF 2004.10.11.}
Now specifying default argument of 0 for |Scanner_Node scanner_node|
in the definition as well as the declaration.
Otherwise GCC cannot resolve calls to this function without an explicit
|scanner_node| argument.
\ENDLOG 


@q *** (3) Declaration.@> 

@<Declare |create_new|@>=

template <class C>
C*
create_new(const C* arg, Scanner_Node scanner_node = 0);

@q *** (3) Definition.@> 

@
@<Define |create_new|@>=
template <class C>
C*
create_new(const C* arg, Scanner_Node scanner_node = 0)
{

@q **** (4) Preliminaries.@> 

  bool DEBUG = false; /* |true| */ @; 

  using namespace Scan_Parse;

  stringstream cerr_strm;
  
  bool error_stop_value   = true;
  bool warning_stop_value = true;
  string thread_name      = "";

  if (scanner_node)
     scanner_node->get_thread_name_and_stop_values(&thread_name,
						   &error_stop_value,
						   &warning_stop_value);

@q **** (4).@> 


  C* obj;
  
  try
     {
        obj = new C;
     }

@q **** (4) Error handling:  |new C| failed.@> 

@ Error handling:  |new C| failed.
\initials{LDF 2004.10.10.}

\LOG
\initials{LDF 2004.12.10.}
@:BUG FIX@> BUG FIX:  Added |throw|.
\ENDLOG

@<Define |create_new|@>=

  catch (bad_alloc)
     {
#if DEBUG_COMPILE
       if (DEBUG)
         {
            cerr_strm << thread_name << "ERROR! In `create_new()':"
                      << endl 
                      << "`new' failed.  Rethrowing `bad_alloc'.";
   
            log_message(cerr_strm);
            cerr_message(cerr_strm, error_stop_value);
            cerr_strm.str("");

         }
#endif /* |DEBUG_COMPILE|  */ 

        throw;

     } /* |catch (bad_alloc)|  */

@q **** (4) |new C| succeeded.@> 

@ |new C| succeeded.
\initials{LDF 2004.10.10.}

@<Define |create_new|@>=

#if DEBUG_COMPILE
  if (DEBUG)
     {
        cerr_strm << thread_name << "In `create_new()':"
                  << endl 
                  << "`new' succeeded.";
   
            log_message(cerr_strm);
            cerr_message(cerr_strm);
            cerr_strm.str("");
     }
#endif /* |DEBUG_COMPILE|  */ 

  if (arg != static_cast<const C*>(0))
    *obj = *arg;

  return obj;

} /* End of |create_new| definition.  */


@q ** (2) Reference argument.@>

@*1 Reference argument.

\LOG
\initials{LDF 2004.10.10.}
Added optional |Scanner_Node scanner_node| argument.

\initials{LDF 2004.10.10.}
Now calling |new| within a |try| block.  If |new| fails and 
throws |bad_alloc|, this function rethrows it.
Added debugging and error output.

\initials{LDF 2004.10.11.}
@:BUG FIX@> BUG FIX: 
Now declaring |C* obj| outside of the |try| block.

\initials{LDF 2004.10.11.}
Now specifying default argument of 0 for |Scanner_Node scanner_node|
in the definition as well as the declaration.
Otherwise GCC cannot resolve calls to this function without an explicit
|scanner_node| argument.

\initials{LDF 2004.10.11.}
Added ``Preliminaries'' for debugging and error output.
\ENDLOG 

@q *** (3) Declaration.@> 

@<Declare |create_new|@>=
template <class C>
C*
create_new(const C& arg, Scanner_Node scanner_node = 0);

@q *** (3) Definition.@> 

@
@<Define |create_new|@>=
template <class C>
C*
create_new(const C& arg, Scanner_Node scanner_node = 0)
{


@q **** (4) Preliminaries.@> 

  bool DEBUG = false; /* |true| */ @; 

  using namespace Scan_Parse;

  stringstream cerr_strm;
  
  bool error_stop_value   = true;
  bool warning_stop_value = true;
  string thread_name      = "";

  if (scanner_node)
     scanner_node->get_thread_name_and_stop_values(&thread_name,
						   &error_stop_value,
						   &warning_stop_value);

@q **** (4).@> 

@q **** (4).@> 
  
  C* obj;

  try
     {
        obj = new C;
     }

@q **** (4) Error handling:  |new C| failed.@> 

@ Error handling:  |new C| failed.
\initials{LDF 2004.10.10.}

\LOG
\initials{LDF 2004.12.10.}
@:BUG FIX@> BUG FIX:  Added |throw|.
\ENDLOG

@<Define |create_new|@>=

  catch (bad_alloc)
     {
#if DEBUG_COMPILE
       if (DEBUG)
         {
            cerr_strm << thread_name << "ERROR! In `create_new()':"
                      << endl 
                      << "`new' failed.  Rethrowing `bad_alloc'.";
   
            log_message(cerr_strm);
            cerr_message(cerr_strm, error_stop_value);
            cerr_strm.str("");

         }
#endif /* |DEBUG_COMPILE|  */ 

 
       throw;

     } /* |catch (bad_alloc)|  */

@q **** (4) |new C| succeeded.@> 

@ |new C| succeeded.
\initials{LDF 2004.10.10.}

@<Define |create_new|@>=

#if DEBUG_COMPILE
  if (DEBUG)
     {
        cerr_strm << thread_name << "In `create_new()':"
                  << endl 
                  << "`new' succeeded.";
   
            log_message(cerr_strm);
            cerr_message(cerr_strm);
            cerr_strm.str("");
     }
#endif /* |DEBUG_COMPILE|  */ 

  *obj = arg;

  return obj;

}  /* End of |create_new| definition.  */

@q * (1) Putting creatnew together.@>
@* Putting {\tt creatnew} together.

@q ** This is what's compiled.@>
@ This is what's compiled.
I don't really need to compile the definition of |create_new| here,
because it must be included in all of the files that instantiate it,
anyway.  However, that may become unnecessary later, in which case it
will have to be compiled here.  In addition, if there's something
wrong with the definition, it may be helpful to catch the error here. 
\initials{LDF 2004.1.2.}
@c
@<Include files@>@;
@<Define |create_new|@>@;

@q ** This is what's written to \filename{creatnew.h}.@>
@ This is what's written to the \filename{creatnew.h}.
The file \filename{creatnew.h} must be included by all files that
define specializations of |create_new|.
\initials{LDF 2003.12.29.}
@(creatnew.h@>=
@<Define |create_new|@>@;
  

@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q run-cweb-on-file:"3DLDF.web" @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q End: @>

