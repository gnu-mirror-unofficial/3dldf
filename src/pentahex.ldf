%% pentahex.ldf
%% Created by Laurence D. Finston (LDF) Wed 22 Sep 2021 01:01:57 AM CEST

%% * (1) Copyright and License.

%%%% This file is part of GNU 3DLDF, a package for three-dimensional drawing.  
%%%% Copyright (C) 2021 The Free Software Foundation  

%%%% GNU 3DLDF is free software; you can redistribute it and/or modify 
%%%% it under the terms of the GNU General Public License as published by 
%%%% the Free Software Foundation; either version 3 of the License, or 
%%%% (at your option) any later version.  

%%%% GNU 3DLDF is distributed in the hope that it will be useful, 
%%%% but WITHOUT ANY WARRANTY; without even the implied warranty of 
%%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
%%%% GNU General Public License for more details.  

%%%% You should have received a copy of the GNU General Public License 
%%%% along with GNU 3DLDF; if not, write to the Free Software 
%%%% Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA 

%%%% GNU 3DLDF is a GNU package.  
%%%% It is part of the GNU Project of the  
%%%% Free Software Foundation 
%%%% and is published under the GNU General Public License. 
%%%% See the website http://www.gnu.org 
%%%% for more information.   
%%%% GNU 3DLDF is available for downloading from 
%%%% http://www.gnu.org/software/3dldf/LDF.html.

%%%% Please send bug reports to Laurence.Finston@gmx.de
%%%% The mailing list help-3dldf@gnu.org is available for people to 
%%%% ask other users for help.  
%%%% The mailing list info-3dldf@gnu.org is for sending 
%%%% announcements to users. To subscribe to these mailing lists, send an 
%%%% email with ``subscribe <email-address>'' as the subject.  

%%%% The author can be contacted at: 

%%%% Laurence D. Finston 
%%%% c/o Free Software Foundation, Inc. 
%%%% 51 Franklin St, Fifth Floor 
%%%% Boston, MA  02110-1301  
%%%% USA

%%%% Laurence.Finston@gmx.de


%% Pentagonal Hexecontahedron

%% Wolfram:
%% https://mathworld.wolfram.com/PentagonalHexecontahedron.html

%% Wikipedia:
%% https://en.wikipedia.org/wiki/Pentagonal_hexecontahedron

%% * (1)

verbatim_metapost "verbatimtex \font\Tiny=cmr4\font\SMALL=cmr6\font\Small=cmr7"
  & "\font\small=cmr8\font\medium=cmr9\font\largebf=cmbx12\font\Largebf=cmbx14\font\huge=cminch"
  & "\font\smallgreek=cmmi8\font\Smallgreek=cmmi7\font\SMALLgreek=cmmi6 "
  & "etex;";

%% * (1)

path tab_path[];


%% ** (2) Macro tab

macro tab;

def tab {numeric pp, numeric qq, numeric offset, numeric offset_one, numeric angle_zero, numeric angle_one,
         boolean ddo_labels, numeric width, numeric width_one, numeric tab_path_ctr} =

    
  point P[];

  if offset == 0:
    P0 := p[pp];
  else:
    P0 := mediate(p[pp], p[qq], offset);
  fi;

  if offset_one == 0:
    P1 := p[qq];
  else:
    P1 := mediate(p[qq], p[pp], offset_one);
  fi;

  if ddo_labels:
    %dotlabel.top("$P_0$", P0) with_text_color red;
    %dotlabel.top("$P_1$", P1) with_text_color red;
  fi;

  P2 := P0 shifted (0, 1);

  if (offset  == 0) or (width == 0):
    P3 := P0;
  else:
    P3 := (width * unit_vector(p[pp] - P0)) shifted by P0;
    rotate_around P3 (P0, P2) -angle_zero;
  fi;

  P5 := P1 shifted (0, 1);

  if (offset_one == 0) or (width_one == 0):
    P4 := P1;
  else:
    P4 := (width_one * unit_vector(p[qq] - P1)) shifted by P1;
    rotate_around P4 (P1, P5) angle_one;
  fi;

  if ddo_labels:
    %dotlabel.top("$P_3$", P3) with_text_color red;
    %dotlabel.top("$P_4$", P4) with_text_color red;
  fi;

  tab_path[tab_path_ctr] := P0 -- P3 -- P4 -- P1;

  draw tab_path[tab_path_ctr];

  P6 := mediate(mediate(P0, P1, .5), mediate(P3, P4, .5), .5);

  if ddo_labels:
    label(decimal tab_path_ctr, P6) with_text_color red;
  fi;
  
enddef;

%% * (1) Global variables

picture v[];


%% * (1)

beginfig(1);

%% ** (2)
  
  numeric n[];
  numeric ang[];
  numeric side_length[];
  point p[];
  path q[];
  transform t[];
  
  boolean do_labels;

  do_labels := true; % false
  
  ang0 := 118.137;
  ang1 := 67.4535;
    
  side_length0 := 2cm;
  
  p0 := origin;
  p1 := (side_length0, 0);
 
  p2 := p1 shifted (0, 1);

  p3 := p0 rotated_around (p2, p1) ang0;

  p4 := p0 shifted (0, 1);
  
  p5 := p1 rotated_around (p0, p4) ang0;

  p6 := p5 shifted (0, 1);
  p7 := p0 rotated_around (p5, p6) ang0;

  p8 := p3 shifted (0, 1);
  p9 := p1 rotated_around (p8, p3) ang0;

  p10 := mediate(p5, p7, 2);
  p11 := mediate(p3, p9, 2);	

  p12 := (p3 -- p11) intersection_point (p5 -- p10);
  
  ang2 := (p3 - p11) angle (p7 - p10);

  message "ang2:";
  show ang2;
  %pause;

  ang3 := (p9 - p3) angle (p1 - p3);

  message "ang3:";
  show ang3;
  %pause;
  
  q0 := p0 -- p1 -- p3 -- p12 -- p5 -- cycle;

  t0 := identity rotated (0, 5);
  
  q0 *= t0;

%% ** (2)
  
  for i = 1 upto 12:
    p[i] *= t0;
  endfor;

  if do_labels:
    dotlabel.bot("$p_0$", p0);
    dotlabel.bot("$p_1$", p1);
    dotlabel.rt("$p_3$", p3);
    dotlabel.lft("$p_5$", p5);
    %dotlabel.lft("$p_7$", p7);
    %dotlabel.rt("$p_9$", p9);
    %dotlabel.rt("$p_{10}$", p10);
    %dotlabel.lft("$p_{11}$", p11);
    dotlabel.rt("$p_{12}$", p12);
  fi;
 
  draw q0;

  q1 := q0 rotated_around (p3, p12) 180;
  draw q1;

  p20 := p1 rotated_around (p3, p12) 180;
  p21 := p0 rotated_around (p3, p12) 180;
  p22 := p5 rotated_around (p3, p12) 180;

  if do_labels:
    dotlabel.bot("$p_{20}$", p20);
    dotlabel.bot("$p_{21}$", p21);
    dotlabel.bot("$p_{22}$", p22);
  fi;

  tab {12, 22, .225, .1, 112.5, 112.5, true, .25, .4, 1};
  
  q2 := q0 rotated_around (p5, p12) 180;
  draw q2;

  p13 := p0 rotated_around (p5, p12) 180;
  p14 := p1 rotated_around (p5, p12) 180;
  p15 := p3 rotated_around (p5, p12) 180;


  if do_labels:
    dotlabel.bot("$p_{13}$", p13);
    dotlabel.lft("$p_{14}$", p14);
    dotlabel.bot("$p_{15}$", p15);
  fi;

  p16 := mediate(p0, p1);

  p17 := mediate(p16, p12, .45);

  
  p18 := p17 rotated_around (p3, p12) 180;
  p19 := p17 rotated_around (p5, p12) 180;

  if do_labels:
    dotlabel.top("$q_0$", p17);
    label.bot("$p_{17}$", p17);
    dotlabel.top("$q_1$", p18);
    label.bot("$p_{18}$", p18);
    dotlabel.top("$q_2$", p19);
    label.bot("$p_{19}$", p19);
  fi;

  q200 := q0 shifted (-4cm, 0, 11cm);

  for i = 0 upto 3:
    p[23+i] := get_point (i) q200;
  endfor;

  p59 := p17 shifted (-4cm, 0, 10cm);
  
  if do_labels:
    dotlabel.lft("$p_{23}$", p23);
    dotlabel.llft("$p_{24}$", p24);
    dotlabel.ulft("$p_{25}$", p25);
    label.lft("$p_{26}$", p26);
    dotlabel.top("$q_{200}$", p59);
    label.bot("$p_{59}$", p59);
  fi;

  label.urt("$\alpha$", p23 shifted (-2pt, 0, 2pt)) on_picture v0;
  label.bot("$\beta$", p26 shifted (0, 0, -3pt)) on_picture v0;

    p27 := (.6667cm * unit_vector(p25 - p26)) shifted by p26;

  p68 := (.5 * unit_vector(p24 - p23)) shifted by p23;
  p69 := p23 shifted (0, 1);

  p70 := get_point (4) q200;

  p71 := (.5 * unit_vector(p70 - p23)) shifted by p23;
  
  if do_labels:
    %dotlabel.rt("$p_{27}$", p27);
    dotlabel.lrt("$p_{68}$", p68);
    dotlabel.lft("$p_{70}$", p70);
    dotlabel.lft("$p_{71}$", p71);
  fi;
  
  p28 := p26 shifted (0, 1);
  p29 := p27 rotated_around (p26, p28) 90;

  p30 := (.25cm * unit_vector(p25 - p26)) shifted by p26;

  p72 := p68;

  q201 += ..;
  q201 += p72;
  
  forever:
    rotate_around p72 (p23, p69) 1;
    exitif xpart p72 <= xpart p71;
    q201 += p72;
  endfor;

  q201 += p71;

  draw q201 on_picture v0;
  
  p73 := (.575cm * unit_vector(p25 - p26)) shifted by p26;
  p74 := (.575cm * unit_vector(p70 - p26)) shifted by p26;

  if do_labels:
    dotlabel.rt("$p_{73}$", p73);
    dotlabel.lft("$p_{74}$", p74);
    %label.top("$p_{30}$", p30);
  fi;

  q202 += ..;
  q202 += p73;
  
  forever:
    rotate_around p73 (p26, p28) -1;
    exitif xpart p73 <= xpart p74;
    q202 += p73;
  endfor;

  draw q202 on_picture v0;

%% ** (2)

  p75 := p23 shifted (0, 0, -.9cm);

  label.rt("\vbox{\hbox{$\alpha\approx 118.137^\circ$}"
           & "\vskip2pt\hbox{$\beta\approx 67.4535^\circ$}}", p75) on_picture v0;
  
  if do_labels:
    dotlabel.lft("$p_{75}$", p75);
  fi;


%% ** (2)  

  
  p31 := p30 rotated_around (p26, p28) 90;

  if do_labels:
    dotlabel.lft("$p_{29}$", p29);
    dotlabel.rt("$p_{31}$", p31);
  fi;

  p32 := p31 shifted by (p25 - p26);

  if do_labels:
    dotlabel.top("$p_{32}$", p32);
  fi;

  p33 := p29 shifted by (p25 - p26);

  if do_labels:
    dotlabel.urt("$p_{33}$", p33);
  fi;

  n0 := magnitude(p25 - p26);

  message "n0:";
  show n0;
  %pause;
  
  draw p31 -- p29 on_picture v0;
  
  draw q200 on_picture v0;;

  p34 := mediate(p29, p33);

  if do_labels:
    %dotlabel.rt("$p_{34}$", p34);
  fi;

  p35 := p25 shifted (-1cm, 0);

  if do_labels:
    dotlabel.bot("$p_{35}$", p35);
  fi;

  %% ** (2)
  
  ang4 := (p25 - p30) angle (p25 - p35);

  message "ang4:";
  show ang4;
  %pause;

  label("{\small" & decimal n0 & "\\thinspace cm}", p34) rotated (0, 0, -ang4) on_picture v0;

  p60 := p25 shifted (0, 1);

  ang5 := (p25 - p24) angle (p25 - p35);
  
  p61 := p32 rotated_around (p25, p60) -ang5;
  p62 := p61 shifted by (p24 - p25);
  p63 := p33 rotated_around (p25, p60) -ang5;
  p64 := p63 shifted by (p24 - p25);
  p65 := mediate(p64, p63);

  p66 := mediate(p63, p64, .275);
  p67 := mediate(p64, p63, .275);

  p76 := p64 shifted (1cm);
  p77 := p76 shifted (0, 0, .25cm);
  p78 := p77 shifted (1cm);
  p79 := p78 shifted (0, 0, -.25cm);

  
  if do_labels:
    dotlabel.lft("$p_{76}$", p76);
    dotlabel.lft("$p_{77}$", p77);
    dotlabel.rt("$p_{78}$", p78);
    dotlabel.rt("$p_{79}$", p79);
  fi;
    
  draw p77 -- p76 -- p79 -- p78 on_picture v0;

  p80 := mediate(p77, p78);

  label("{\small 1\\thinspace cm}", p80 shifted (0, 0, 1pt)) on_picture v0;

  ang6 := (p64 - p63) angle (p25 - p35);

  n1 := magnitude(p24 - p25);

  label("{\small" & decimal n1 & "\\thinspace cm}", p65) rotated (0, 0, -ang6) on_picture v0;
  
  if do_labels:
    dotlabel.urt("$p_{61}$", p61);
    dotlabel.bot("$p_{62}$", p62);
    dotlabel.top("$p_{63}$", p63);
    dotlabel.bot("$p_{64}$", p64);
    %dotlabel.rt("$p_{65}$", p65);
    dotlabel.rt("$p_{66}$", p66);
    dotlabel.rt("$p_{67}$", p67);
  fi;

  draw p62 -- p64 -- p67 on_picture v0;
  draw p66 -- p63 -- p61 on_picture v0;
  
%% ** (2)
  
  p36 := mediate(p29, p33, .275);
  p37 := mediate(p33, p29, .275);

  if do_labels:
    label.rt("$p_{36}$", p36);
    label.rt("$p_{37}$", p37);
  fi;

  draw p29 -- p36 on_picture v0;
  draw p33 -- p37 on_picture v0;
  draw p32 -- p33 on_picture v0;

  q3 := q2 rotated_around (p15, p12) 180;
  draw q3;

  p38 := p14 rotated_around (p15, p12) 180;
  p39 := p13 rotated_around (p15, p12) 180;
  p40 := p5 rotated_around (p15, p12) 180;
  p41 := p19 rotated_around (p15, p12) 180;

  tab {38, 39, .15, .15, 112.5, 112.5, true, .333, .333, 3};
  tab {39, 40, .15, .15, 112.5, 112.5, true, .333, .333, 4};
  tab {15, 38, .15, .15, 112.5, 112.5, true, .333, .333, 5};
  tab {14, 15, .15, .15, 112.5, 112.5, true, .333, .333, 6};
  tab {13, 14, .15, .15, 112.5, 112.5, true, .333, .333, 7};
  tab {5, 13, .15, .15, 112.5, 112.5, true, .333, .333, 8};
  tab {0, 5, .15, .15, 112.5, 112.5, true, .333, .333, 9};
  tab {1, 0, .15, .15, 112.5, 112.5, true, .333, .333, 10};

    
  if do_labels:
    dotlabel.lft("$p_{38}$", p38);
    dotlabel.lft("$p_{39}$", p39);
    dotlabel.lft("$p_{40}$", p40);
    dotlabel.top("$q_{3}$", p41);
    label.bot("$p_{41}$", p41);
  fi;

  q4 := q3 rotated_around (p12, p40) 180;
  draw q4;

  p42 := p41 rotated_around (p12, p40) 180;
  p43 := p39 rotated_around (p12, p40) 180;
  p44 := p38 rotated_around (p12, p40) 180;
  p45 := p15 rotated_around (p12, p40) 180;
  
  if do_labels:
    dotlabel.lft("$p_{43}$", p43);
    dotlabel.lft("$p_{44}$", p44);
    dotlabel.lft("$p_{45}$", p45);
    dotlabel.top("$q_{4}$", p42);
    label.bot("$p_{42}$", p42);
  fi;

  tab {40, 43, .1, .1, 112.5, 112.5, true, .333, .333, 2};
  

  
  p46 := p20 shifted (0, 1);

  t1 := (identity rotated_around (p20, p46) ang0) shifted by (p21 - p3);
  
  q5 := q1 * t1;

  draw q5;
  
  p47 := p18 * t1;
  p48 := p12 * t1;
  p49 := p3 * t1;
  p50 := p20 * t1;
  
  if do_labels:
    dotlabel.top("$q_{5}$", p47);
    label.bot("$p_{47}$", p47);
    dotlabel.bot("$p_{48}$", p48);
    dotlabel.lrt("$p_{49}$", p49);
    dotlabel.llft("$p_{50}$", p50);
  fi;

  t2 := identity shifted by (p50 - p1);

  q6 := q5 rotated_around (p48, p49) 180;

  draw q6;

  p51 := p47 rotated_around (p48, p49) 180;
  p52 := p50 rotated_around (p48, p49) 180;
  p53 := p21 rotated_around (p48, p49) 180;
  p54 := p20 rotated_around (p48, p49) 180;
    
  if do_labels:
    dotlabel.top("$q_{6}$", p51);
    label.bot("$p_{51}$", p51);
    dotlabel.top("$p_{52}$", p52);
    dotlabel.rt("$p_{53}$", p53);
    dotlabel.bot("$p_{54}$", p54);
  fi;

  q7 := q5 rotated_around (p20, p48) 180;
  draw q7;

  p55 := p47 rotated_around (p20, p48) 180;
  p56 := p21 rotated_around (p20, p48) 180;
  p57 := p50 rotated_around (p20, p48) 180;
  p58 := p49 rotated_around (p20, p48) 180;

  tab {57, 56, .1, .1, 112.5, 112.5, true, .333, 0, 0};
 
  if do_labels:
    dotlabel.top("$q_{7}$", p55);
    label.bot("$p_{55}$", p55);
    dotlabel.lrt("$p_{56}$", p56);
    dotlabel.llft("$p_{57}$", p57);
    dotlabel.bot("$p_{58}$", p58);
  fi;

  q8 := q7 rotated_around (p58, p48) 180;
  draw q8;

  p81 := p55 rotated_around (p58, p48) 180;

  p82 := p57 rotated_around (p58, p48) 180;
  p83 := p56 rotated_around (p58, p48) 180;
  p84 := p20 rotated_around (p58, p48) 180;

  if do_labels:
    dotlabel.top("$q_{8}$", p81);
    label.bot("$p_{81}$", p81);
    dotlabel.lft("$p_{82}$", p82);
    dotlabel.lft("$p_{83}$", p83);
    dotlabel.rt("$p_{84}$", p84);
  fi;


  q9 := q8 rotated_around (p48, p84) 180;
  draw q9;

  p85 := p81 rotated_around (p48, p84) 180;
  p86 := p83 rotated_around (p48, p84) 180;
  p87 := p82 rotated_around (p48, p84) 180;
  p88 := p58 rotated_around (p48, p84) 180;

  if do_labels:
    dotlabel.top("$q_{9}$", p85);
    label.bot("$p_{85}$", p85);
    dotlabel.lft("$p_{86}$", p86);
    dotlabel.lft("$p_{87}$", p87);
    dotlabel.rt("$p_{88}$", p88);
  fi;

  tab {48, 88, .225, .1, 112.5, 112.5, true, .25, .4, 11};
  tab {58, 57, .15, .15, 112.5, 112.5, true, .333, .333, 12};
  tab {82, 58, .15, .15, 112.5, 112.5, true, .333, .333, 13};
  tab {83, 82, .15, .15, 112.5, 112.5, true, .333, .333, 14};
  tab {84, 83, .15, .15, 112.5, 112.5, true, .333, .333, 15};
  tab {86, 84, .15, .15, 112.5, 112.5, true, .333, .333, 16};
  tab {87, 86, .15, .15, 112.5, 112.5, true, .333, .333, 17};

  q10 := q0 shifted by (p52 - p1);
  draw q10;
  
  p89 := p17 shifted by (p52 - p1);
  p90 := p5 shifted by (p52 - p1);

  p91 := p12 shifted by (p52 - p1);
  p92 := p3 shifted by (p52 - p1);
  
  if do_labels:
    dotlabel.top("$q_{10}$", p89);
    label.bot("$p_{89}$", p89);
    dotlabel.lft("$p_{90}$", p90);
    dotlabel.top("$p_{91}$", p91);
    dotlabel.rt("$p_{92}$", p92);
  fi;

  q11 := q10 rotated_around (p90, p91) 180;
  draw q11;

  p93 := p89 rotated_around (p90, p91) 180;

  if do_labels:
    dotlabel.top("$q_{11}$", p93);
    label.bot("$p_{93}$", p93);
    dotlabel.lft("$p_{90}$", p90);
  fi;
  
%% ** (2)
  
  v1 := current_picture;

  current_picture += v0;

  
%% ** (2)
  
endfig with_projection parallel_x_z;

%% ** (2)

beginfig(2);

  v2 := v1;

  rotate v2 (180, 0);

  current_picture := v2;
  
endfig with_projection parallel_x_z;

%% ** (2)

verbatim_metapost "end";
  
end;

%% ** (2) End of 3DLDF code.

%% * (1) Emacs-Lisp code for use in indirect buffers when using the          
%%       GNU Emacs editor.  The local variable list is not evaluated when an 
%%       indirect buffer is visited, so it's necessary to evaluate the       
%%       following s-expression in order to use the facilities normally      
%%       accessed via the local variables list.                              
%%       \initials{LDF 2004.02.12}.                                          

%% (progn (metapost-mode) (outline-minor-mode t) (setq fill-column 80) (setq outline-regexp "%% [*\f]+")    

%% * (1) Local variables for Emacs.

%% Local Variables:
%% mode:Metapost
%% eval:(outline-minor-mode t)
%% eval:(read-abbrev-file abbrev-file-name)
%% abbrev-mode:t
%% outline-regexp:"%% [*\f]+"
%% End:


