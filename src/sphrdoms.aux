%%%% sphrdoms.aux
%%%% Created by Laurence D. Finston (LDF) Sun 17 Oct 2021 10:04:46 AM CEST

%% * (1) Copyright and License.

%%%% This file is part of GNU 3DLDF, a package for three-dimensional drawing.  
%%%% Copyright (C) 2021 The Free Software Foundation  

%%%% GNU 3DLDF is free software; you can redistribute it and/or modify 
%%%% it under the terms of the GNU General Public License as published by 
%%%% the Free Software Foundation; either version 3 of the License, or 
%%%% (at your option) any later version.  

%%%% GNU 3DLDF is distributed in the hope that it will be useful, 
%%%% but WITHOUT ANY WARRANTY; without even the implied warranty of 
%%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
%%%% GNU General Public License for more details.  

%%%% You should have received a copy of the GNU General Public License 
%%%% along with GNU 3DLDF; if not, write to the Free Software 
%%%% Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA 

%%%% GNU 3DLDF is a GNU package.  
%%%% It is part of the GNU Project of the  
%%%% Free Software Foundation 
%%%% and is published under the GNU General Public License. 
%%%% See the website http://www.gnu.org 
%%%% for more information.   
%%%% GNU 3DLDF is available for downloading from 
%%%% http://www.gnu.org/software/3dldf/LDF.html.
  

%%%% Please send bug reports to Laurence.Finston@gmx.de
%%%% The mailing list help-3dldf@gnu.org is available for people to 
%%%% ask other users for help.  
%%%% The mailing list info-3dldf@gnu.org is for sending 
%%%% announcements to users. To subscribe to these mailing lists, send an 
%%%% email with ``subscribe <email-address>'' as the subject.  

%%%% The author can be contacted at: 

%%%% Laurence D. Finston 
%%%% c/o Free Software Foundation, Inc. 
%%%% 51 Franklin St, Fifth Floor 
%%%% Boston, MA  02110-1301  
%%%% USA

%%%% Laurence.Finston@gmx.de

% * (1) Beginning of 3DLDF code.

%% ** (2)

picture save_picture;

%save_picture := tab_picture;

color label_color;
numeric n[];
numeric_vector nv;

label_color := black;

%% ** (2)

%% *** (3)

numeric vertical_label_shift_val;
vertical_label_shift_val := .25cm + 2pt;


beginfig(0);
  current_picture := bi_ang_pict[0];
  %draw_lines;
  %current_picture += tab_picture[0];
  
  % p200 := origin shifted by .5 * (p24 - p20);

  % if do_labels_ra_decl:
  %   label.rt("$\scriptstyle 0\rm{h}$", p200 shifted (-1pt, 0)) rotated (0, 0, 90)
  %     with_text_color label_color;
  % fi;

  % %draw p24 -- p20 with_color red;

  % p201 := mediate(p20, p24, .5);

  % n0 := (p24 - p20) angle (p21 - p20);

  % if do_labels_ra_decl:
  %   label.rt("$\scriptstyle 22\rm{h}\kern .16667em 30^\prime$",
  % 	p201 shifted (vertical_label_shift_val, 0)) rotated (0, 0, n0) with_text_color label_color;
  % fi;

  % n1 := ypart p25 - ypart p21;

  % %% This works.  I can rotate the labels if I rotate the picture.
  % %% !! TODO:  Add a command for rotating all the labels on a picture.
  % %% LDF 2021.10.16.
  
  % numeric label_rotate_val;
  % label_rotate_val := 0;

  % if do_labels_ra_decl:
  %   label.urt("$\scriptstyle 0^\circ$", origin) rotated (0, 0, label_rotate_val) with_text_color label_color;
  %   p202 := origin shifted (0, n1);
  %   label.urt("$\scriptstyle 11^\circ 15^\prime$", p202) with_text_color label_color;
  %   label.urt("$\scriptstyle -11^\circ 15^\prime$", p202 rotated (180, 0)) with_text_color label_color;
  %   shift p202 (0, n1);
  %   label.urt("$\scriptstyle 22^\circ 30^\prime$", p202) with_text_color label_color;
  %   label.urt("$\scriptstyle -22^\circ 30^\prime$", p202 rotated (180, 0)) with_text_color label_color;
  %   shift p202 (0, n1);
  %   label.urt("$\scriptstyle 33^\circ 45^\prime$", p202) with_text_color label_color;
  %   label.urt("$\scriptstyle -33^\circ 45^\prime$", p202 rotated (180, 0)) with_text_color label_color;
  %   shift p202 (0, n1);
  %   label.urt("$\scriptstyle 45^\circ$", p202) with_text_color label_color;
  %   label.urt("$\scriptscriptstyle -45^\circ$", (p202 rotated (180, 0)) shifted (0, -1.5pt))  with_text_color label_color;
  %   shift p202 (0, n1);
  %   label.llft("$\scriptstyle 56^\circ 15^\prime$", p202) with_text_color label_color;
  %   label.urt("$\scriptstyle -56^\circ 15^\prime$", p202 rotated (180, 0)) with_text_color label_color;
  %   shift p202 (0, n1);
  %   label.urt("$\scriptstyle 67^\circ 30^\prime$", p202) with_text_color label_color;
  %   label.urt("$\scriptstyle -67^\circ 30^\prime$", p202 rotated (180, 0)) with_text_color label_color;
  %   shift p202 (0, n1);
  %   label.top("$\scriptscriptstyle 78^\circ \hskip2pt 45^\prime$", p202 shifted (0pt, 0)) with_text_color label_color;
  %   label.bot("$\scriptscriptstyle -78^\circ\hskip-.5pt 45^\prime$", (p202 rotated (180, 0)) shifted (.5pt, 0))
  %     with_text_color label_color;
  % fi;  
  % %drawdot mediate(mediate(p24, p25, .5), mediate(p20, p21, .5), .5) with_pen medium_pen;

  %rotate current_picture (0, 0, 90);

  
endfig with_projection parallel_x_y;

%% *** (3)




%% * (1) Local variables for Emacs.

%% Local Variables:
%% mode:Metapost
%% eval:(outline-minor-mode t)
%% eval:(read-abbrev-file abbrev-file-name)
%% abbrev-mode:t
%% outline-regexp:"%% [*\f]+"
%% End:
