@q sudoku.web @>
@q Created by Laurence D. Finston (LDF) Wed Mar  5 12:18:33 CET 2014 @>

@q * Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing. @>
@q Copyright (C) 2014 The Free Software Foundation                          @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version. @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details. @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html. @>

@q (``@@'' stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de @>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston @>
@q Kreuzbergring 41 @>
@q D-37075 Goettingen @>
@q Germany @>

@q Laurence.Finston@@gmx.de (@@ stands for a single ``at'' sign.)@>





@
@<Include files@>=

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <limits.h>
#include <errno.h>

#include <string>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <bitset>

#if HAVE_CONFIG_H
#include <config.h>
#endif


#include <cmdlnopt.hxx>
#include <fldtype.hxx>
#include <dgrmtype.hxx>


@q * (1) @>

@
@<Global variable declarations@>=

/* !! START HERE:  LDF 2014.03.07. Start replacing |diagram| with an object of type 
   |Diagram_Type|.   
   Move the "checking" code here to `dgrmtype.web'.  

*/

string input_filename;
string output_filename;
int global_debug_level = 0;

ofstream out_strm;

int pass_limit = 100;


@q * (1) @>
@
@<|main| definition@>=

int 
main(int argc, char *argv[])
{
@q ** (2) @>

  bool DEBUG = true; /* |false|  */

  Field_Type *curr_field = 0;

  Diagram_Type<9, 9> diag;

  int status = 0;

  status = process_command_line_options(argc, argv);

#if DEBUG_COMPILE
  if (DEBUG)
  {
     cerr << "input_filename  == " << input_filename << endl
          << "output_filename == " << output_filename << endl;

  }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


@q ** (2) @>
@
@<|main| definition@>=

  if (!output_filename.empty()) 
  {
     out_strm.open(output_filename.c_str());
     
     if (!(out_strm && out_strm.is_open()))
     {
          cerr << "ERROR!  In `main':  `ofstream::open' failed."
               << endl
               << "Failed to open `" << output_filename << "'."
               << endl 
               << "Exiting `sudoku' unsuccessfully with exit status 1." 
               << endl;

          exit(1);

     }  /* |if|  */
     else
     {

#if DEBUG_COMPILE
         if (DEBUG)
         {
              cerr << "In `main':  `ofstream::open' succeeded."
                   << endl
                   << "Opened `" << output_filename << "' successfully."
                   << endl;

         }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

         time_t curr_time = time(0);

         string temp_str = asctime(localtime(&curr_time));

         out_strm << "%%%% " << output_filename << endl
                  << "%%%% Generated " << temp_str.substr(0, temp_str.length() - 1) 
                  << " by `sudoku'."
                  << endl
                  << endl;

     }  /* |else|  */

  }  /* |if (!output_filename.empty()) |  */

#if DEBUG_COMPILE
  else if (DEBUG)
  {
     cerr << "In `main':  `output_filename' is empty.  "
          << "Will write to standard output."
          << endl;

  }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


@q ** (2) @>
@
@<|main| definition@>=

  FILE *fp;

  if (!input_filename.empty())
  {
      errno = 0;
      fp = fopen(input_filename.c_str(), "r");

      if (fp == 0)
      {
          cerr << "ERROR!  In `main':  `fopen' failed, returning NULL:"
               << endl
               << strerror(errno)
               << endl 
               << "Exiting `sudoku' unsuccessfully with exit status 1." 
               << endl;

          out_strm.close();

          exit(1);
      }
      else
      {
          cerr << "In `main':  `fopen' succeeded.  Will read from "
               << "`" << input_filename << "'."
               << endl;

          yyin = fp;

      }
       
  }  /* |if (!input_filename.empty())|  */
  else  
  {
     yyin = stdin;
  }

  status = yylex();

  if (status != 0)
  {
     cerr << "ERROR!  In `main':  `yylex' failed, returning " << status << "."
          << endl
          << "Exiting `sudoku' unsuccessfully with exit status 1." 
          << endl;

     out_strm.close();

     exit(1);
  }

#if DEBUG_COMPILE
  else if (DEBUG)
  {
     cerr << "In `main':  `yylex' succeeded, returning 0."
          << endl;

     diag.output();

  }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

  if (fp)
  {
     fclose(fp);
     fp = 0;
  }

#if 0 
  diag.diagram[1][0].show("diag.diagram[1][0]:");
#endif 

@q ** (2) @>

  exit(0);



#if 0 


/* !! START HERE:  LDF 2014.03.07.  Fix this.  */

  diag.output();

#endif 

  if (Field_Type::set_field_ctr < 81)
  {
     cout << "ERROR!  In `main':  `Field_Type::set_field_ctr' == " 
          << Field_Type::set_field_ctr << " (< 81)"
          << endl 
          << "Failed to solve sudoku in " << pass_limit << " passes:"
          << endl;

     diag.output(false, true, true);
     diag.output(true, true, true);

     cout << "ERROR!  In `main':  `Field_Type::set_field_ctr' == " 
          << Field_Type::set_field_ctr << " (< 81)"
          << endl 
          << "Failed to solve sudoku in " << pass_limit << " passes."
          << endl
          << endl 
          << "Exiting `sudoku' unsuccessfully with exit status 3."
          << endl;

     out_strm.close();     

     exit(3);

  }  /* |if|  */

  else
  {
     out_strm.close();     

     exit(0);
  }

}  /* End of |main| definition  */


@q * (1) @>
@
@c
@<Include files@>@;@/
using namespace std;
@<Global variable declarations@>@;@/
int yylex(void);
extern FILE *yyin, *yyout;
@<|main| definition@>@;@/


@q Local Variables: @>
@q mode:CWEB @>
@q abbrev-mode:t @>
@q eval:(outline-minor-mode t) @>
@q eval:(font-lock-mode -1) @>
@q End: @>

