@q fldtype.web @>
@q Created by Laurence D. Finston (LDF) Wed Mar  5 12:16:23 CET 2014 @>

@q * Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing. @>
@q Copyright (C) 2014 The Free Software Foundation                          @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version. @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details. @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html. @>

@q (``@@'' stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de @>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston @>
@q Kreuzbergring 41 @>
@q D-37075 Goettingen @>
@q Germany @>

@q Laurence.Finston@@gmx.de (@@ stands for a single ``at'' sign.)@>




@
@<Include files@>=

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <string>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <bitset>

#if HAVE_CONFIG_H
#include <config.h>
#endif


@q * (1) @>
@
@<class |Field_Type| declaration@>=

class Field_Type
{
   friend int main(int, char *[]);

   template <int T, int U> friend class Diagram_Type;

   int ctr;
   unsigned int bit_field;

   public:

   static int set_field_ctr;


   @<|Field_Type| function declarations@>@;@/

   Field_Type(void);

   void show(string s = "");

   void set(unsigned int); 

};

@q * (1) @>
@
@<|Field_Type| constructor definition@>=

Field_Type::Field_Type(void) 
{
   ctr = 9; 

   for (int i = 1; i < 10; ++i)
   {
       bit_field |= 1UL;
       bit_field <<= 1;
   }


}  /* End of |Field_Type| constructor definition  */


@q * (1) @>
@
@<|Field_Type::show| definition@>=

void
Field_Type::show(string s)
{
    if (s.empty())
       s = "Field_Type:";

    bitset<sizeof(unsigned int) * 8> b(bit_field);

    cerr << s 
         << endl 
         << "ctr       == " << ctr
         << endl
         << "bit_field == " << bit_field << " == " 
         << b << endl; 

    if (bit_field & 2U)
        cerr << "1 ";
    if (bit_field & 4U)
        cerr << "2 ";
    if (bit_field & 8U)
        cerr << "3 ";
    if (bit_field & 16U)
        cerr << "4 ";
    if (bit_field & 32U)
        cerr << "5 ";
    if (bit_field & 64U)
        cerr << "6 ";
    if (bit_field & 128U)
        cerr << "7 ";
    if (bit_field & 256U)
        cerr << "8 ";
    if (bit_field & 512)
        cerr << "9 ";

    cerr << endl << endl;      


    return;


}

@q * (1) @>
@
@<|Field_Type::set| definition@>=
void
Field_Type::set(unsigned int num)
{
    unsigned int f = 1U;

    f <<= num;

    bit_field &= f;    


    ctr = 1;

    ++set_field_ctr;

    return;    

}


@q ** (2) Output  |output|.@>
@ Output  |output|.

@q *** (3) Declaration @>

@<|Field_Type| function declarations@>=

int 
output(int i, int j, bool full = true, bool tex = false, string *out_str = 0);

@q *** (3) Definition  @>
@       
@<|Field_Type::output| definition@>=

int 
Field_Type::output(int i, int j, bool full, bool tex, string *out_str)
{
    string s;

    stringstream temp_strm;

#if 0 
    if (full)
    {
       temp_strm << "[" << i << "][" << j << "]"
            << endl;
       s = " ";
    }
#endif 


    if (tex == true && ctr > 1)
    {
       temp_strm << "\\vbox{\\hbox{";
       s = "\\copy0 ";
    }
    else if (tex == true && ctr == 1)
       s = "";
    else
       s = " ";
    
    if (bit_field & 2U)
        temp_strm << "1";
    else
        temp_strm << s;

    if (bit_field & 4U)
        temp_strm << "2";
    else
        temp_strm << s;

    if (bit_field & 8U)
        temp_strm << "3";
    else
        temp_strm << s;

    if (bit_field & 16U)
        temp_strm << "4";
    else
        temp_strm << s;

    if (bit_field & 32U)
        temp_strm << "5";
    else
        temp_strm << s;

    if (tex == true && ctr > 1)
       temp_strm << "}\\hbox{";

    if (bit_field & 64U)
        temp_strm << "6";
    else
        temp_strm << s;

    if (bit_field & 128U)
        temp_strm << "7" ;
    else
        temp_strm << s;

    if (bit_field & 256U)
        temp_strm << "8" ;
    else
        temp_strm << s;

    if (bit_field & 512)
        temp_strm << "9" ;
    else
        temp_strm << s;

    if (tex == true && ctr > 1)
       temp_strm << "}}";

#if 0 
    if (full)
       temp_strm << endl << endl;
#endif 

    if (out_str)
       *out_str = temp_strm.str();
    else
       cerr << temp_strm.str();

   return 0;

}  /* End of |Field_Type::output| definition  */



@
@c
@<Include files@>@;@/
using namespace std;
template <int T, int U> class Diagram_Type;
@<class |Field_Type| declaration@>@;@/
int Field_Type::set_field_ctr = 0;
extern Field_Type diagram[9][9];
extern ofstream out_strm;
@<|Field_Type| constructor definition@>@;@/
@<|Field_Type::show| definition@>@;@/
@<|Field_Type::set| definition@>@;@/
@<|Field_Type::output| definition@>@;@/



@
@(fldtype.hxx@>=
using namespace std;
template <int T, int U> class Diagram_Type;
@<class |Field_Type| declaration@>@;@/




@q Local Variables: @>
@q mode:CWEB @>
@q abbrev-mode:t @>
@q outline-regexp:"@@q *\\*+" @>
@q eval:(outline-minor-mode t) @>
@q eval:(font-lock-mode -1) @>
@q End: @>


