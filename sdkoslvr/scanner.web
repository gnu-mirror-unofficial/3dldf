@q scanner.web @>
@q Created by Laurence Finston Do  6 Mär 2014 12:36:57 CET  @>

@q * Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing. @>
@q Copyright (C) 2014 The Free Software Foundation                          @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version. @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details. @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html. @>

@q (``@@'' stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de @>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston @>
@q Kreuzbergring 41 @>
@q D-37075 Goettingen @>
@q Germany @>

@q Laurence.Finston@@gmx.de (@@ stands for a single ``at'' sign.)@>



@* Scanner.

@q ** (2) Include header files @>
@
@<Include header files@>=

#include <stdlib.h>
#include <stdio.h>
#include <stdarg.h>

#include <limits.h>

#include <fstream>
#include <getopt.h>
#include <iomanip>
#include <ios>
#include <iostream>
#include <iterator>
#include <new>
#include <string>
#include <ctype.h>
#include <time.h>
#include <math.h>
#include <sstream>
#include <stdarg.h>
#include <stdexcept>

#include <vector>
#include <map>
#include <string>

using namespace std;

#if HAVE_CONFIG_H
#include <config.h>
#endif

#include <fldtype.hxx>

@q ** (2) @>
@
@<Declarations@>=

@q ** (2) Options @>
@
@<Options@>=

@q ** (2) Definitions @>
@
@<Definitions@>=

@q ** (2) @>
@
@<Local variables@>=

bool SCANNER_DEBUG = false; /* |true| */

int status = 0;

stringstream temp_strm;

@q ** (2) Rules @>

@q *** (3) @>
@
@<Rules@>=

@q *** (3) Comment. @>
@ Comment.
@<Rules@>=

@=#.*$ {@>

#if DEBUG_COMPILE
   if (SCANNER_DEBUG)
   {

        cerr << "Got comment: " << yytext << endl;

   } /* |if (SCANNER_DEBUG)| */
#endif /* |DEBUG_COMPILE| */

}

@q *** (3) 3 integers. @>
@ 3 integers.
\initials{LDF 2014.03.06.}

@<Rules@>=

@=^[[:blank:]]*[0-8][[:blank:]]*[0-8][[:blank:]]*[0-9][[:blank:]]*$ {@>

#if DEBUG_COMPILE
   if (SCANNER_DEBUG)
   {

        cerr << "Got three integers: " << yytext << endl;

   } /* |if (SCANNER_DEBUG)| */
#endif /* |DEBUG_COMPILE| */

   temp_strm.str("");
   temp_strm.clear();

   temp_strm << yytext;

   int i, j, k;

   temp_strm >> i >> j >> k;


   temp_strm.str("");
   temp_strm.clear();

#if DEBUG_COMPILE
   if (SCANNER_DEBUG)
   {

        cerr << "i == " << i << ", j == " << j << ", k == " << k
             << endl;

   } /* |if (SCANNER_DEBUG)| */
#endif /* |DEBUG_COMPILE| */

   diagram[i][j].set(k);

}

@q *** (3) END. @>
@ END.
\initials{LDF 2014.03.06.}

@<Rules@>=

@=end|END {@>

#if DEBUG_COMPILE
   if (SCANNER_DEBUG)
   {

        cerr << "END: " << yytext << endl;

   } /* |if (SCANNER_DEBUG)| */
#endif /* |DEBUG_COMPILE| */

   return 0;

}

@q *** (3) ENDINPUT. @>
@ ENDINPUT.
\initials{LDF 2014.03.06.}

@<Rules@>=

@=endinput|ENDINPUT {@>

#if DEBUG_COMPILE
   if (SCANNER_DEBUG)
   {

        cerr << "ENDINPUT: " << yytext << endl;

   } /* |if (SCANNER_DEBUG)| */
#endif /* |DEBUG_COMPILE| */

   return 0;

}


@q *** (3) Other characters. @>
@ Other characters.
\initials{LDF 2014.03.06.}

@<Rules@>=

@=.|\n {@>

#if DEBUG_COMPILE
   if (SCANNER_DEBUG)
   {
        cerr << "Other char or newline: " << yytext << endl;

   } /* |if (SCANNER_DEBUG)| */
#endif /* |DEBUG_COMPILE| */

}


@q *** (3) @>

@ End-of-file

@<Rules@>=

@=<<EOF>> {@>

#if DEBUG_COMPILE
   if (SCANNER_DEBUG)
   {
       cerr << "*** Scanning End of file ***" << endl;
   }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   return 0;
}




@q ** (2) Putting scanner together. @>

@ Putting scanner together.
\initials{LDF 2013.10.10.}

@c
@=%{@>
@<Include header files@>@;@/
@<Declarations@>@;@/
struct File_Node* file_node_ptr = 0;
extern Field_Type diagram[9][9];
@=%}@>
@<Options@>@;@/
@<Definitions@>@;@/
@=%%@>
@=%{@>
@<Local variables@>@;@/
@=%}@>
@<Rules@>@;@/
@=%%@>




int
yywrap(void)
{
    return 1;
}

int
yyerror(void)
{
    return 0;
}



@q * (1) @>

/*
 For use in indirect buffers.
(progn
 (outline-minor-mode t)
 (setq outline-regexp "/\\* *%+")
 )

*/

/* Local Variables: */
/* mode:CWEB */
/* outline-minor-mode:t */
/* outline-regexp:"/\\* *%+" */
/* End:  */ 