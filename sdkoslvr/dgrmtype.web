@q dgrmtype.web @>
@q Created by Laurence D. Finston (LDF) Wed Fri Mar  7 16:21:10 CET 2014 @>

@q * Copyright and License. @>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing. @>
@q Copyright (C) 2014 The Free Software Foundation                          @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version. @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details. @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html. @>

@q (``@@'' stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de @>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston @>
@q Kreuzbergring 41 @>
@q D-37075 Goettingen @>
@q Germany @>

@q Laurence.Finston@@gmx.de (@@ stands for a single ``at'' sign.)@>




@
@<Include files@>=

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <string>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <bitset>

#if HAVE_CONFIG_H
#include <config.h>
#endif

#include <fldtype.hxx>

@q * (1) @>
@
@<class |Diagram_Type| declaration@>=

template <int T, int U>
class Diagram_Type
{

  Field_Type diagram[T][U];

  int row_ctr;
  int column_ctr;

  public:

     @<|Diagram_Type| function declarations@>@;@/

};


@q * (1) @>
@
@q ** (2) Declaration @>

@<|Diagram_Type| function declarations@>=

Diagram_Type(void);

@q ** (2) Definition  @>
@
@<|Diagram_Type| constructor definition@>=

template <int T, int U>
Diagram_Type<T, U>::Diagram_Type(void) 
{
   cerr << "T == " << T << ", U == " << U << endl;

   row_ctr    = T;
   column_ctr = U;

   cerr << "row_ctr == " << row_ctr << ", column_ctr == " << column_ctr 
        << endl;

   return;

}  /* End of |Diagram_Type| constructor definition  */



@q * (1) @>
@
@<|Diagram_Type| function declarations@>=

#if 0 
void
show(string s);
#endif 

@
@<|Diagram_Type::show| definition@>=

#if 0 
void
Diagram_Type::show(string s)
{
    if (s.empty())
       s = "Diagram_Type:";

    cerr << s << endl;

    return;


}
#endif 

@q * (1) Solve (|solve|).  @>

@ Solve (|solve|).
\initials{LDF 2014.03.09.}

\LOG
\initials{LDF 2014.03.09.}
Added this function.
\ENDLOG

@q ** (2) Declaration  @>

@<|Diagram_Type| function declarations@>=

int 
solve(void);

@q ** (2) Definition  @>
@
@<|Diagram_Type::solve| definition@>=
template <int T, int U>
int Diagram_Type<T, U>::solve(void)
{
  bool DEBUG = true;  /* |false|  */

  int status = 0;

#if 1 /* |0| */

#if 0 
  set_debug_level(DEBUG, 0, 0); 
#endif 

  Field_Type *curr_field = 0;

  for (int iter_ctr = 1; iter_ctr <= pass_limit; ++iter_ctr)
  {
@q *** (3) @>

     cout << "Pass " << iter_ctr << endl;
     cerr << "Pass " << iter_ctr << endl;

#if DEBUG_COMPILE
     if (DEBUG)
     { 
         cerr << "Pass " << iter_ctr 
              << endl
              << "`iter_ctr' == " << iter_ctr 
              << endl
              << "Field_Type::set_field_ctr == " << Field_Type::set_field_ctr
              << endl;
     }
#endif

@q *** (3) @>

      for (int i = 0; i < 9; ++i)
      {
@q **** (4) @>

          for (int j = 0; j < 9; ++j)
          {
@q ***** (5) @>

#if DEBUG_COMPILE
      	      if (DEBUG)
      	      {
      	        cerr << "i == " << setw(2) << i << ", j == " << setw(2) << j 
                     << endl
                     << "Field_Type::set_field_ctr == " << Field_Type::set_field_ctr
                     << endl;

              }
#endif

@q **** (4) @>

               curr_field = &diagram[i][j];

               if (curr_field->ctr == 1)
               {
#if DEBUG_COMPILE
                  if (DEBUG)     
                  {
                      cerr << "`curr_field->ctr' == 1.  Not calling `Field_Type::check'.  "
                           << "Continuing."
                           << endl;

                  }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 
                  continue;
               }

@q **** (4) @>
@
@<|Diagram_Type::solve| definition@>=

               else
               {

      		   curr_field->show("*curr_field:");

                   status = check(i, j);

                   cerr << endl;
     
      		   curr_field->show("*curr_field:");

#if 0 
		   cerr << "Enter <RETURN> to continue:  ";
      		   getchar();
      		   cerr << endl;
#endif 



               }  /* |else|  */

@q **** (4) @> 
@
@<|Diagram_Type::solve| definition@>=


          }  /* |for|  */

#if DEBUG_COMPILE
          if (DEBUG)
          {
              cerr << endl;
          }
#endif  /* |DEBUG_COMPILE|  */ 

@q **** (4) @>

      }  /* |for|  */

@q *** (3) @>
@
@<|Diagram_Type::solve| definition@>=

      unsigned int curr_bit = 1U;
      int ctr = 0;

      Field_Type *save_field = 0;


@q *** (3) @>
@
@<|Diagram_Type::solve| definition@>=

      cerr << "Checking rows for single elements." << endl;

      curr_bit = 1U;
      ctr = 0;

      save_field = 0;

      for (int k = 1; k <= 9; ++k)
      {

          curr_bit <<= 1;

          cerr << "k == " << k << endl
               << "curr_bit == 0" << oct << curr_bit << " (octal)" << dec 
               << endl;

          for (int i = 0; i < 9; ++i)
          {

              ctr = 0;

              for (int j = 0; j < 9; ++j)
              {

                  cerr << "Checking [" << i << "][" << j << "]" << endl;

                  curr_field = &diagram[i][j];


                  curr_field->show("curr_field:");

                  if ((curr_field->bit_field & curr_bit) > 0 && curr_field->ctr == 1)
                  {
                      save_field = 0;
                      ctr = 2;
                      break;

                  }
                  else if ((curr_field->bit_field & curr_bit) > 0 && ctr == 0)
                  {
                     save_field = curr_field;
                     ++ctr;
                  }
                  else if ((curr_field->bit_field & curr_bit) > 0 && ctr == 1)
                  {
                     save_field = 0;
                     ++ctr;
                     break;
                  }

              }  /* |for|  */

              if (ctr == 1 && save_field != 0)
              {
                  cerr << "Found single element.  Setting."
                       << endl;

                  save_field->bit_field = curr_bit;
                  save_field->ctr       = 1;

                  ++Field_Type::set_field_ctr;
              }
            

          }  /* |for|  */

      }  /* |for|  */

@q **** (4) @>

      if (Field_Type::set_field_ctr >= 81)
      {
        cerr << "`Field_Type::set_field_ctr' == " << Field_Type::set_field_ctr << "(>= 81).  "
             << endl 
             << "Breaking." << endl;
        break;
      }

@q **** (4) @>

@q *** (3) @>
@
@<|Diagram_Type::solve| definition@>=

      curr_bit = 1U;
      ctr = 0;

      save_field = 0;

      cerr << "Checking columns for single elements." << endl;       

      for (int k = 1; k <= 9; ++k)
      {

          curr_bit <<= 1;

          cerr << "k == " << k << endl
               << "curr_bit == 0" << oct << curr_bit << " (octal)" << dec 
               << endl;

          for (int j = 0; j < 9; ++j)
          {

              ctr = 0;

              for (int i = 0; i < 9; ++i)
              {

                  cerr << "Checking [" << i << "][" << j << "]" << endl;

                  curr_field = &diagram[i][j];


                  curr_field->show("curr_field:");

                  if ((curr_field->bit_field & curr_bit) > 0 && curr_field->ctr == 1)
                  {
                      save_field = 0;
                      ctr = 2;
                      break;

                  }
                  else if ((curr_field->bit_field & curr_bit) > 0 && ctr == 0)
                  {
                     save_field = curr_field;
                     ++ctr;
                  }
                  else if ((curr_field->bit_field & curr_bit) > 0 && ctr == 1)
                  {
                     save_field = 0;
                     ++ctr;
                     break;
                  }

              }  /* |for|  */

              if (ctr == 1 && save_field != 0)
              {
                  cerr << "Found single element.  Setting."
                       << endl;

                  save_field->bit_field = curr_bit;
                  save_field->ctr       = 1;

                  ++Field_Type::set_field_ctr;
              }
            

          }  /* |for|  */

      }  /* |for|  */

@q **** (4) @>

      if (Field_Type::set_field_ctr >= 81)
      {
        cerr << "`Field_Type::set_field_ctr' == " << Field_Type::set_field_ctr << "(>= 81).  "
             << endl 
             << "Breaking." << endl;
        break;
      }


@q *** (3) @>

@ Check inner squares for single elements.

@<|Diagram_Type::solve| definition@>=

#if 1 
   
      curr_bit = 1U;
      ctr = 0;

      save_field = 0;

      cerr << "Checking inner squares for single elements." << endl;

      int m = 0;
      int n = 0;



@q *** (3) @>

      for (int k = 1; k <= 9; ++k)
      {
@q **** (4) @>

          curr_bit <<= 1;

          cerr << "k == " << k << endl
               << "curr_bit == 0" << oct << curr_bit << " (octal)" << dec 
               << endl;


@q **** (4) @>
@
@<|Diagram_Type::solve| definition@>=

          for (int m = 0; m < 9; m += 3)
          {
@q ***** (5) @>

              for (int n = 0; n < 9; n += 3)
              {
@q ****** (6) @>

                  for (int i = m; i < m + 3; ++i)
                  {
@q ******* (7) @>

                     for (int j = n; j < n + 3; ++j)
                     {
@q ******** (8) @>

                        cerr << "Checking [" << i << "][" << j << "]" << endl;

                        curr_field = &diagram[i][j];


                        curr_field->show("curr_field:");

                        if ((curr_field->bit_field & curr_bit) > 0 && curr_field->ctr == 1)
                        {
                            cerr << "Already set.  Breaking." << endl;

                            save_field = 0;
                            ctr = 2;
                            break;

                        }
                        else if ((curr_field->bit_field & curr_bit) > 0 && ctr == 0)
                        {
                           save_field = curr_field;
                           ++ctr;
                        }
                        else if ((curr_field->bit_field & curr_bit) > 0 && ctr == 1)
                        {

                           cerr << "Not single.  Breaking." << endl;

                           save_field = 0;
                           ++ctr;
                           break;
                        }

@q ******** (8) @>

                     }  /* |for|  */

@q ******* (7) @>

                  }  /* |for|  */

@q ****** (6) @>
@
@<|Diagram_Type::solve| definition@>=

                  cerr << endl;   

                  if (ctr == 1 && save_field != 0)
                  {
                      cerr << "Found single element.  Setting."
                           << endl;

                      save_field->bit_field = curr_bit;
                      save_field->ctr       = 1;

                      ++Field_Type::set_field_ctr;
                  }   

@q ****** (6) @>

              }  /* |for|  */

@q ***** (5) @>

          }  /* |for|  */

@q **** (4) @>

      }  /* |for|  */

#endif 

@q **** (4) @>

@q *** (3) @>
@
@<|Diagram_Type::solve| definition@>=
      

      if (Field_Type::set_field_ctr >= 81)
      {
        cerr << "`Field_Type::set_field_ctr' == " << Field_Type::set_field_ctr << "(>= 81).  "
             << endl 
             << "Breaking." << endl;
        break;
      }
      else if (iter_ctr > pass_limit)
      {
        cerr << "ERROR!  `iter_ctr' == " << iter_ctr << " (> " << pass_limit << ")."
             << endl
             << "Field_Type::set_field_ctr == " << Field_Type::set_field_ctr
             << endl 
             << "Failed to solve sudoku.  Breaking." 
             << endl;
        break;
      }
      else if (DEBUG)
      {
        cerr << "`Field_Type::set_field_ctr' == " << Field_Type::set_field_ctr << " (< 81)."
             << endl 
             << "Not Breaking." << endl;
      }

#if DEBUG_COMPILE
      if (DEBUG)
      {
           cerr << "End of pass " << iter_ctr 
                << endl
                << "Field_Type::set_field_ctr == " << Field_Type::set_field_ctr
                << endl;

  
           if (Field_Type::set_field_ctr >= 81)
              Field_Type::output(diagram, false, false);
           else
           {
#if 0 
/* !! START HERE:  LDF 2014.03.07.  Fix this.  */

              Field_Type::output(diagram, false, true, true);
#endif 
           }

           cerr << endl;


      }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


@q *** (3) @>

  }  /* |for|  */

#endif 

  return 0;

}  /* End of |Diagram_Type::solve| definition  */

@q ** (2) Output (|output|).  @>

@ Output (|output|).  
\initials{LDF 2014.03.09.}

@q *** (3) Declaration @>

@<|Diagram_Type| function declarations@>=

int 
output(bool tex = false, bool full = false, bool final = false);

@q *** (3) Definition  @>
@
@<|Diagram_Type::output| definition@>=

template <int T, int U>
int Diagram_Type<T, U>::output(bool tex, bool full, bool final)
{

   stringstream temp_strm;

@q **** (4) @>

   if (tex == false && full == true)
   {
      string s;

      for (int i = 0; i < row_ctr; ++i)
      {

          temp_strm << "|-----------|-----------|-----------|-----------|"
                    << "-----------|-----------|-----------|-----------|-----------|"
                    << endl
                    << "|   [" << i << "][0]  | " << "  [" << i << "][1]  |"
                    << "  [" << i << "][2]   | " << "  [" << i << "][3]  |"
                    << "  [" << i << "][4]   | " << "  [" << i << "][5]  |"
                    << "  [" << i << "][6]   | " << "  [" << i << "][7]  |"
                    << "  [" << i << "][8]   | " << endl
                    << "| ";

          for (int j = 0; j < column_ctr; ++j)
          {
              diagram[i][j].output(i, j, false, false, &s);
              temp_strm << s << " | ";
              s = "";
          }
          temp_strm << endl;
      }
      temp_strm << "|-----------|-----------|-----------|-----------|"
                << "-----------|-----------|-----------|-----------|-----------|"
                << endl;


      if (final)
      {
         cerr << temp_strm.str(); 
         cout << temp_strm.str(); 
      }

      temp_strm.str("");

   }  /* |if (tex == false && full == true)|  */


@q **** (4) @>


   else if (tex == false && full == false)
   {

       cerr << " | 0 1 2 3 4 5 6 7 8"
            << endl
            << "-  - - - - - - - - - "
            << endl;


       for (int i = 0; i < 9; ++i)
       {

          cerr << i << "| ";

          for (int j = 0; j < 9; ++j)
          {
     
              if (diagram[i][j].ctr == 1)
              {
                 diagram[i][j].output(i, j, full, false);
                 cerr << " ";
              }
              else 
                 cerr << "-" << " ";

          }
          cerr << endl;

       }   

   }  /* |else if (tex == false && full == false)|  */

@q **** (4) @>
@
@<|Diagram_Type::output| definition@>=

   else if (tex == true && full == false)
   {
       string s;

       temp_strm.str("");

       temp_strm << "pickup pensquare scaled 1pt;"
                 << endl 
                 << "path q;"
                 << endl 
                 << "pair p[];"
                 << endl 
                 << endl 
                 << "p0 = (1cm, -1cm);" << endl << endl 
                 << endl << endl 
                 << "transform t[];" << endl << endl 
                 << endl << endl 
                 << "verbatimtex \\font\\large=cmr12 scaled \\magstep3 "
                 << "etex"
                 << endl << endl 
                 << "beginfig(1);"
                 << endl 
                 << "q := (0, 0) -- (3cm, 0) -- (3cm, -3cm) -- (0, -3cm) -- cycle;"
                 << endl 
                 << endl 
                 << "draw q withcolor (.5, .5, .5) withpen pensquare scaled 2pt;" 
                 << endl 
                 << endl 
                 << "draw q shifted (6cm, 0) withcolor (.5, .5, .5) "
                 << "withpen pensquare scaled 2pt;"
                 << endl 
                 << endl 
                 << "draw q shifted (3cm, -3cm) withcolor (.5, .5, .5) "
                 << "withpen pensquare scaled 2pt;" 
                 << endl 
                 << endl 
                 << "draw q shifted (0cm, -6cm) withcolor (.5, .5, .5) "
                 << "withpen pensquare scaled 2pt;" 
                 << endl 
                 << endl 
                 << "draw q shifted (6cm, -6cm) withcolor (.5, .5, .5) "
                 << "withpen pensquare scaled 2pt;" 
                 << endl 
                 << endl 
                 << "for i = 0 downto -9:"
                 << endl 
                 << endl 
                 << "   draw (0, i*cm) -- (9cm, i*cm);"  
                 << endl 
                 << endl 
                 << "   draw (-i*cm, 0) -- (-i*cm, -9cm);"  
                 << endl 
                 << endl 
                 << "endfor;"
                 << endl 
                 << endl
                 << "t0 = identity shifted (1cm, 0);"
                 << endl << endl;

       for (int i = 0; i < 9; ++i)
       {
           for (int j = 0; j < 9; ++j)
           {

               diagram[i][j].output(i, j, false, true, &s);

               temp_strm << "label(btex {\\large " << s << "} etex, p0);"
                         << endl
                         << endl
                         << "p0 := p0 transformed t0;"
                         << endl 
                         << endl;

           }

           temp_strm << "p0 := p0 shifted (-9cm, -1cm);" << endl << endl;
   

       }

       temp_strm << "endinput"
                 << endl << endl;


       if (out_strm && out_strm.is_open())
          out_strm << temp_strm.str();
       else
          cout << temp_strm.str();

       temp_strm.str("");


   }  /* |else if (tex == true && full == false)|  */

@q **** (4) @>
@
@<|Diagram_Type::output| definition@>=

   else if (tex == true && full == false)
   {
       string s;

       temp_strm.str("");

       temp_strm << "pickup pensquare scaled 1pt;"
                 << endl 
                 << "path q;"
                 << endl 
                 << "pair p[];"
                 << endl 
                 << endl 
                 << "p0 = (1cm, -1cm);" << endl << endl 
                 << endl << endl;

       for (int i = 0; i < 9; ++i)
       {
           for (int j = 0; j < 9; ++j)
           {

               diagram[i][j].output(i, j, false, true, &s);

               temp_strm << "label(btex {\\large " << s << "} etex, p0);"
                         << endl
                         << endl
                         << "p0 := p0 transformed t0;"
                         << endl 
                         << endl;

           }

           temp_strm << "p0 := p0 shifted (-9cm, -1cm);" << endl << endl;
   

       }

       temp_strm << "endinput"
                 << endl << endl;


       if (out_strm && out_strm.is_open())
          out_strm << temp_strm.str();
       else
          cout << temp_strm.str();

       temp_strm.str("");


   }  /* |else if (tex == true && full == false)|  */

@q **** (4) @>

@ In \.{cmr10 scaled \\magstephalf}, the digits and the en-dash all have the same
width, so \.{\\hss} isn't really needed.  However, it may be if some other font is used.
\initials{LDF 2014.03.07.}

@<|Diagram_Type::output| definition@>=

   else if (tex == true && full == true)
   {
       string s;



       temp_strm << "verbatimtex \\font\\large=cmr17 scaled \\magstep3 "
                 << "\\font\\small=cmr10 scaled \\magstep1 "
                 << "\\font\\medium=cmr17 "
                 << "\\setbox1=\\hbox{{\\small 0}} "
                 << "\\setbox0=\\hbox to \\wd1{\\hss --\\hss} "
                 << "etex "
                 << endl << endl 
                 << "pickup pensquare scaled 1pt;"
                 << endl << endl 
                 << "path q;"
                 << endl << endl 
                 << "pair p[];"
                 << endl << endl 
                 << "square_len = 5cm;"
                 << endl << endl 
                 << "p0 = (square_len/6, -square_len/6);"
                 << endl 
                 << "p1 = p0 shifted (0, square_len/3);"
                 << endl 
                 << "p2 = p0 shifted (-square_len/3, 0);"
                 << endl << endl 
                 << "transform t[];"
                 << endl << endl 
                 << "t0 = identity shifted (square_len/3, 0);"
                 << endl 
                 << "t1 = identity shifted (0, -square_len/3);"
                 << endl << endl 
                 << endl << endl 
                 << "beginfig(1);"
                 << endl << endl 
                 << "q := (0, 0) -- (square_len, 0) -- (square_len, -square_len) "
                 << "-- (0, -square_len) -- cycle;"
                 << endl << endl 
                 << "draw q withcolor (.5, .5, .5) withpen pensquare scaled 2pt;"
                 << endl << endl 
                 << "draw q shifted (2square_len, 0) withcolor (.5, .5, .5) "
                 << "withpen pensquare scaled 2pt;"
                 << endl << endl 
                 << "draw q shifted (square_len, -square_len) withcolor (.5, .5, .5) "
                 << "withpen pensquare scaled 2pt;"
                 << endl << endl 
                 << "draw q shifted (0cm, -2square_len) withcolor (.5, .5, .5) "
                 << "withpen pensquare scaled 2pt;"
                 << endl << endl 
                 << "draw q shifted (2square_len, -2square_len) withcolor (.5, .5, .5) "
                 << "withpen pensquare scaled 2pt;"
                 << endl << endl;

       for (int i = 0; i < 9; ++i)
       {
          temp_strm << "label(btex {\\medium " << i << "} etex, p1);"
                    << endl
                    << "label(btex {\\medium " << i << "} etex, p2);"
                    << endl << endl 
                    << "p1 := p1 transformed t0;"
                    << endl 
                    << "p2 := p2 transformed t1;"
                    << endl << endl;
       }

       temp_strm << "for i = 0 downto -9:"
                 << endl << endl 
                 << "   draw (0, i*square_len/3) -- (3square_len, i*square_len/3);"
                 << endl << endl 
                 << "   draw (-i*square_len/3, 0) -- (-i*square_len/3, -3square_len);"
                 << endl << endl 
                 << "endfor;"
                 << endl << endl;

       for (int i = 0; i < 9; ++i)
       {
           temp_strm << "%% *** Row " << i << endl << endl;

           for (int j = 0; j < 9; ++j)
           {
               s = "";

               temp_strm << "%% [" << i << "][" << j << "]"
                         << endl << endl;

               diagram[i][j].output(i, j, false, true, &s);
 
               if (diagram[i][j].ctr == 1)
               {
                  temp_strm << "label(btex {\\large " << s << "} etex, p0);"
                            << endl << endl;

               }
               else 
               {
                  temp_strm << "label(btex {\\small " << s << "} etex, "
                            << "p0 shifted (0, square_len/16));";


               }
 
               temp_strm << endl
                         << endl
                         << "p0 := p0 transformed t0;"
                         << endl 
                         << endl;


           }

           temp_strm << "p0 := p0 shifted (-3square_len, -square_len/3);" 
                     << endl << endl;
   

       }  /* |for|  */

       temp_strm << "endfig;" << endl << endl << "endinput" << endl << endl;

       if (out_strm && out_strm.is_open())
          out_strm << temp_strm.str();
       else
          cout << temp_strm.str();

       temp_strm.str("");


   }  /* |else if (tex == true && full == true)|  */





   return 0;

}  /* End of |Diagram_Type::output| definition */


@q * (1) Check (|check|).  @>

@ Check (|check|).  
\initials{LDF 2014.03.09.}

@q ** (2) Declaration  @>


@<|Diagram_Type| function declarations@>=

int 
check(int ii, int jj);

@q ** (2) Definition  @>
@
@<|Diagram_Type::check| definition@>=

template <int T, int U>
int 
Diagram_Type<T, U>::check(int ii, int jj)
{
@q ** (2) @>

   bool DEBUG = true; /* |false|  */
  
   if (DEBUG)
   {
      cerr << "Entering `Diagram_Type::check'."
           << endl;

   }

@q ** (2) @>

   Diagram_Type *check_field = 0;

   if (ctr == 1)
   {
      cerr << "WARNING!  In `Diagram_Type::check':  `ctr' == 1."
           << endl
           << "Not checking.  Exiting  function with return value 2."
           << endl;
   }

@q ** (2) @>

#if DEBUG_COMPILE 
   if (DEBUG)
      cerr << "First loop:  Row."
           << endl;
#endif 


   for (int j = 0; j < 9; ++j)
   {
@q *** (3) @>

      if (j == jj)
         continue;

      check_field = &diagram[ii][j];

#if DEBUG_COMPILE 
      if (DEBUG)
      {
         cerr << "Comparing " << ii << ", " << jj << " to " << ii << ", " << j 
              << endl  
              << "check_field->ctr == " << check_field->ctr
              << endl
              << "(check_field->bit_field & bit_field) == " 
              << (check_field->bit_field & bit_field)
              << endl;
 
      }  /* |if (DEBUG)|  */

#endif 

@q *** (3) @>

      if (check_field->ctr == 1 && (check_field->bit_field & bit_field) > 0)
      {

          cerr << "ctr before: " << ctr
               << endl 
               << "Removing bit." << endl << "bit_field before:  0" << oct << bit_field
               << endl << dec;

          bit_field &= ~check_field->bit_field;


          --ctr;

          cerr << "`ctr' after:  " << ctr
               << endl 
               << "bit_field after:   0" << oct << bit_field
               << endl << dec;

          show();

          cerr << endl;

          if (ctr == 1)
          {

             ++set_field_ctr;

             if (DEBUG)
                cerr << "Found.  Exiting function successfully with return value 1."
                     << endl 
                     << "`set_field_ctr' == " << set_field_ctr
                     << endl << endl;

             return 1;


          }

      }  /* |if|  */

@q *** (3) @>

#if DEBUG_COMPILE
         else if (DEBUG)
         {
             cerr << endl;

         }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */          


@q *** (3) @>

   }  /* |for|  */

@q ** (2) @>

#if DEBUG_COMPILE 
   if (DEBUG)
      cerr << "Second loop:  Column."
           << endl;
#endif 


   for (int i = 0; i < 9; ++i)
   {
@q *** (3) @>

      if (i == ii)
         continue;

      check_field = &diagram[i][jj];

#if DEBUG_COMPILE 
      if (DEBUG)
      {
         cerr << "Comparing " << ii << ", " << jj << " to " << i << ", " << jj 
              << endl 
              << "check_field->ctr == " << check_field->ctr
              << endl
              << "(check_field->bit_field & bit_field) == " 
              << (check_field->bit_field & bit_field)
              << endl;
 
      }  /* |if (DEBUG)|  */

#endif 

@q *** (3) @>


      if (check_field->ctr == 1 && (check_field->bit_field & bit_field) > 0)
      {

 
          cerr << "ctr before: " << ctr
               << endl
               << "bit_field:               " << oct << bit_field  
               << " (octal)"
               << "check_field->bit_field:  " << oct << check_field->bit_field  
               << " (octal)"
               << endl 
               << dec
               << "Removing bit." << endl << "bit_field before:  0" << oct << bit_field
               << endl << dec;

          bit_field &= ~check_field->bit_field;


          --ctr;

          cerr << "`ctr' after:  " << ctr
               << endl 
               << "bit_field after:   0" << oct << bit_field
               << endl << dec;


          show();
          check_field->show("*check_field:");

          cerr << endl;

          if (ctr == 1)
          {

             ++set_field_ctr;

             if (DEBUG)
                cerr << "Found.  Exiting function successfully with return value 1."
                     << endl 
                     << "`set_field_ctr' == " << set_field_ctr
                     << endl << endl;

             return 1;


          }
      }  /* |if|  */

@q *** (3) @>

#if DEBUG_COMPILE
         else if (DEBUG)
         {
             cerr << endl;

         }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */          



@q *** (3) @>

   }  /* |for|  */


@q ** (2) @>

   int m = (ii / 3) * 3;
   int n = (jj / 3) * 3;

#if DEBUG_COMPILE    
   if (DEBUG)
   {
      cerr << "m == " << m << endl
           << "n == " << n << endl
           << "Third loop (double):  Inner squares."
           << endl;
   }
#endif 

   for (int i = m; i < m + 3; ++i)
   {
@q *** (3) @>

      for (int j = n; j < n + 3; ++j)
      {
@q **** (4) @>

          if (i == ii || j == jj)
             continue;

       	  if (DEBUG)
       	  {
             cerr << "Comparing " << ii << ", " << jj << " to " << i << ", " << j 
                  << endl;

       	  }

@q **** (4) @>

         check_field = &diagram[i][j];

         cerr << "check_field->ctr == " << check_field->ctr
              << endl
              << "(check_field->bit_field & bit_field) == " 
              << (check_field->bit_field & bit_field)
              << endl;

@q **** (4) @>

         if (check_field->ctr == 1 && (check_field->bit_field & bit_field) > 0)
         {
@q ***** (5) @>
 
             cerr << "ctr before: " << ctr
                  << endl 
                  << "Removing bit." << endl << "bit_field before:  0" << oct << bit_field
                  << endl << dec;

             bit_field &= ~check_field->bit_field;


             --ctr;

             cerr << "`ctr' after:  " << ctr
                  << endl 
                  << "bit_field after:   0" << oct << bit_field
                  << endl << dec;


             show();

             cerr << endl;

             if (ctr == 1)
             {

                ++set_field_ctr;

#if DEBUG_COMPILE
                if (DEBUG)
                   cerr << "Found.  Exiting function successfully with return value 1."
                        << endl 
                        << "`set_field_ctr' == " << set_field_ctr
                        << endl << endl;
#endif /* |DEBUG_COMPILE|  */


                return 1;

             }

         }  /* |if|  */

#if DEBUG_COMPILE
         else if (DEBUG)
         {
             cerr << endl;

         }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */          

@q **** (4) @>

      }  /* |for|  */

@q *** (3) @>

   }  /* |for|  */

   if (DEBUG)
   {
      cerr << "Exiting `Diagram_Type::check' successfully with return value 0."
           << endl << endl;
   }

   return 0;


}  /* End of |Diagram_Type::check| definition  */




@
@c
@<Include files@>@;@/
using namespace std;
@<class |Diagram_Type| declaration@>@;@/
extern ofstream out_strm;
extern int pass_limit;
@<|Diagram_Type| constructor definition@>@;@/
@<|Diagram_Type::solve| definition@>@;@/
@<|Diagram_Type::output| definition@>@;@/
@<|Diagram_Type::check| definition@>@;@/

#if 0 
@<|Diagram_Type::show| definition@>@;@/
#endif 

@
@(dgrmtype.hxx@>=
using namespace std;
extern int pass_limit;
extern ofstream out_strm;
@<class |Diagram_Type| declaration@>@;@/
@<|Diagram_Type| constructor definition@>@;@/
@<|Diagram_Type::solve| definition@>@;@/
@<|Diagram_Type::output| definition@>@;@/
@<|Diagram_Type::check| definition@>@;@/

@q Local Variables: @>
@q mode:CWEB @>
@q abbrev-mode:t @>
@q outline-regexp:"@@q *\\*+" @>
@q eval:(outline-minor-mode t) @>
@q eval:(font-lock-mode -1) @>
@q End: @>


