@q cmdlnopt.web @>
@q Created by Laurence D. Finston (LDF) Thu Mar  6 11:50:29 CET 2014  @>

@q * (1) Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing. @>
@q Copyright (C) 2014 The Free Software Foundation                          @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version. @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details. @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html. @>

@q (``@@'' stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de @>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston @>
@q Kreuzbergring 41 @>
@q D-37075 Goettingen @>
@q Germany @>

@q Laurence.Finston@@gmx.de (@@ stands for a single ``at'' sign.)@>




@q * (1) Command line option processing@>
@* Command line option processing.

\LOG
\initials{LDF 2014.03.06.}
Added this file.
\ENDLOG

@q ** (2) Include files  @>

@ Include files.

@<Include files@>=
#include <stdlib.h>
#include <stdio.h>
#include <sys/mman.h>

#include <getopt.h> 
#include <limits.h> 

#include <errno.h> 

#include <fstream>
#include <iomanip>
#include <ios>
#include <iostream>
#include <map>
#include <string>
#include <string.h>
#include <time.h>
#include <math.h>
#include <sstream>   

#if 0 
#include <deque>
#include <vector>
#endif 

#include <pthread.h>

#if HAVE_CONFIG_H
#include "config.h"
#endif


#ifndef _XOPEN_SOURCE
#define _XOPEN_SOURCE
#endif 

@q * (0) Command-Line Options Processing.  @>
@ Command-Line Options Processing.  
\initials{LDF 2014.03.06.}

@q ** (2) Process Command Line Options @>
@ Process Command Line Options.
\initials{LDF 2014.03.06.}

\LOG
\initials{LDF 2014.03.06.}
Added this function.
\ENDLOG

@q *** (3) Declaration  @>

@<|process_command_line_options| declaration@>=

int
process_command_line_options(int argc, char* argv[]);

@q *** (3) Definition  @>
@
@<|process_command_line_options| definition@>=
int
process_command_line_options(int argc, char* argv[])
{

   bool DEBUG = true;  /* |false|  */

   int status = 0;

@q **** (4) @>

   int option_ctr;
   int digit_optind = 0;

   size_t pos;
   char *temp_str = 0;

@q *** (3) Index constants.@>
@ Index constants.
\initials{LDF 2014.03.06.}


@q **** (4) Code  @> 

@<|process_command_line_options| definition@>=

  const unsigned short DEBUG_LEVEL_INDEX                    =  0;
  const unsigned short INPUT_FILENAME_INDEX                 =  1;
  const unsigned short OUTPUT_FILENAME_INDEX                =  2;
  const unsigned short PASS_LIMIT_INDEX                     =  3;
  const unsigned short STDIN_INDEX                          =  4;
  const unsigned short STDOUT_INDEX                         =  5;


@q **** (4) @>

@q *** (3) Option struct.@>
@ Option struct.
\initials{LDF 2014.03.06.}

@<|process_command_line_options| definition@>=

  static struct option long_options[] = {
    {"debug-level",  2, 0, 0},
    {"input-filename",  1, 0, 0},
    {"output-filename",  1, 0, 0},
    {"pass-limit",  1, 0, 0},
    {"stdin",  0, 0, 0},
    {"stdout",  0, 0, 0},
    {0, 0, 0, 0}
  };

  int option_index = 0;

  int this_option_optind = optind ? optind : 1;

@q *** (3) Loop for handling options.@>
@ Loop for handling options.
\initials{LDF 2014.03.06.}

@<|process_command_line_options| definition@>=

  while (1) 
  {

@q **** (4) @>

    option_ctr = getopt_long_only (argc,  
                                   argv, "",
                                   long_options, 
                                   &option_index);
#if DEBUG_COMPILE 
    if (DEBUG)
    {
        
        cerr << "option_ctr == " << option_ctr << endl
             << "option_index == " << option_index << endl;
        

        if (optarg)
        {
          
          cerr << "optarg == " << optarg << endl;
          

        }  /* |if (optarg)|  */

    }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q **** (4) @>

    if (option_ctr == -1)
      {
#if DEBUG_COMPILE 
        if (DEBUG)
        {
           
           cerr << "No more option arguments." << endl;
           
        }
#endif  /* |DEBUG_COMPILE|  */ 
        break;
      }

@q **** (4) Option.  @>
@ Option.  
\initials{LDF 2014.03.06.}

@<|process_command_line_options| definition@>=

    else if (option_ctr == 0)
    {

@q ***** (5) @>

#if DEBUG_COMPILE 
      if (DEBUG)
        {
          
          cerr << "option " << long_options[option_index].name;

          if (optarg)
          {
            cerr << " with arg " << optarg;
          }

          cerr << endl;
          
        }
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) input-filename.  @>
@ \.{input-filename}.
\initials{LDF 2014.03.06.}

\LOG
\initials{LDF 2014.03.06.}
Added this section.
\ENDLOG

@<|process_command_line_options| definition@>=

        if (option_index == INPUT_FILENAME_INDEX)        
        {

@q ****** (6) @>

#if DEBUG_COMPILE 
            if (DEBUG) 
            {
               
               cerr << "`option_index' "
                    << "== `INPUT_FILENAME_INDEX'" 
                    << endl;
 
               if (optarg)
                  cerr << "optarg == " << optarg << endl;
               
            }
#endif  /* |DEBUG_COMPILE|  */ 

            input_filename = optarg;
 
@q ****** (6) @>


        } /* |if (option_index == INPUT_FILENAME_INDEX)|  */

@q ***** (5) output-filename.@>

@ \.{output-filename}.
\initials{LDF 2014.03.06.}

\LOG
\initials{LDF 2014.03.06.}
Added this section.
\ENDLOG

@<|process_command_line_options| definition@>=

        else if (option_index == OUTPUT_FILENAME_INDEX)
        {

@q ****** (6) @>

#if DEBUG_COMPILE 
            if (DEBUG) 
            {
               
               cerr << "`option_index' == "
                    << "`OUTPUT_FILENAME_INDEX'" 
                    << endl;
 
               if (optarg)
                  cerr << "optarg == " << optarg << endl;
               
            }
#endif  /* |DEBUG_COMPILE|  */ 

            output_filename = optarg;


@q ****** (6) @>

        } /* |else if (option_index == OUTPUT_FILENAME_INDEX)|  */


@q ***** (5) pass-limit.@>

@ \.{pass-limit}.
\initials{LDF 2014.03.06.}

\LOG
\initials{LDF 2014.03.06.}
Added this section.
\ENDLOG

@<|process_command_line_options| definition@>=

        else if (option_index == PASS_LIMIT_INDEX)
        {

@q ****** (6) @>

#if DEBUG_COMPILE 
            if (DEBUG) 
            {
               
               cerr << "`option_index' == "
                    << "`PASS_LIMIT_INDEX'" 
                    << endl;
 
            }
#endif  /* |DEBUG_COMPILE|  */ 

            unsigned long int temp_val = 0UL;

            errno = 0;
            temp_val = strtoul(optarg, 0, 10);

            if (temp_val == ULONG_MAX)
            {
                cerr << "ERROR!  `strtoul' failed, returning `ULONG_MAX':"
                     << endl
                     << strerror(errno)
                     << endl 
                     << "Not resetting `pass_limit'.  Will use default value == " 
                     << pass_limit << "."
                     << endl;

            }
            else if (pass_limit > INT_MAX)
            {
                cerr << "WARNING!  `strtoul' returned " << temp_val << " "
                     << "(> `INT_MAX' == " << INT_MAX << ")"
                     << endl
                     << endl 
                     << "Value out of range.  Not resetting `pass_limit'.  "
                     << "Will use default value == " 
                     << pass_limit << "."
                     << endl;

            }
            else
            {

#if DEBUG_COMPILE
                if (DEBUG)
                {
                    cerr << "Resetting `pass_limit' to " << temp_val << "." 
                         << endl;

                }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 
                
                pass_limit = temp_val;

            }   

@q ****** (6) @>

        } /* |else if (option_index == PASS_LIMIT_INDEX)|  */



@q ***** (5) debug-level.  @>
@ \.{debug-level}.
\initials{LDF 2014.03.06.}

\LOG
\initials{LDF 2014.03.06.}
Added this section.
\ENDLOG

@<|process_command_line_options| definition@>=

        else if (option_index == DEBUG_LEVEL_INDEX)        
        {
@q ****** (6) @>

#if DEBUG_COMPILE
             if (DEBUG)
             {
                  
                 cerr << "In `process_command_line_options':  "
                      << "`option_index' "
                      << "== `DEBUG_LEVEL_INDEX'." 
                      << endl
                      << "Setting `global_debug_level'."
                      << endl;
                  

             }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) @>

             if (optarg)
             {
@q ******* (7) @>

                 long int temp_val = strtol(optarg, 0, 10);
          
                 if (temp_val == LONG_MAX || temp_val == LONG_MIN)
                 {
                  
                     cerr << "WARNING!  In `process_command_line_options':"
                          << endl
                          << "`strtol' failed, returning ";

                     if (temp_val == LONG_MAX)
                         cerr << "`LONG_MAX' == " << LONG_MAX << endl;
                     else
                         cerr << "`LONG_MIN' == " << LONG_MIN << endl;

 
                     cerr << "Not resetting `global_debug_level'.  "
                          << "Current value == " << global_debug_level
                          << endl;

                  


                 }  /* |if (temp_val == LONG_MAX || temp_val == LONG_MIN)|  */

@q ******* (7) @>

                 else if (temp_val < -10 || temp_val > 10)
                 {
                  
                     cerr << "WARNING!  In `process_command_line_options':"
                          << endl
                          << "Invalid value specified for `--debug-level' option:  "
                          << temp_val
                          << endl
                          << "Value must be within the range [-10, 10] (inclusive)."
                          << endl 
                          << "Not resetting `global_debug_level'.  "
                          << "Current value == " << global_debug_level
                          << endl;
                  

                 }   /* |else if (temp_val < -10 || temp_val > 10)|  */

@q ******* (7) @>

                 else
                 {
#if DEBUG_COMPILE
                     if (DEBUG)    
                     {
                      
                         cerr << "In `process_command_line_options':"
                              << endl
                              << "Setting `global_debug_level' to " << temp_val << "."
                              << endl;
                      

                     }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

                     global_debug_level = static_cast<int>(temp_val); 

                 }  /* |else|  */

@q ******* (7) @>

             }  /* |if (optarg)|  */
             else
                global_debug_level = 1;


@q ****** (6) @>

        } /* |else if (option_index == DEBUG_LEVEL_INDEX)|  */


@q ***** (5) Invalid option_index value.@>
@ Invalid {\tt option\_index} value.
\initials{LDF 2014.03.06.}

@<|process_command_line_options| definition@>=

        else 
        {
          
          cerr << "WARNING!  In `process_command_line_options':"
               << endl 
               << "`option_index' has invalid value: "
               << option_index << endl
               << "Will try to continue." 
               << endl;
          

        }

@q ***** (5) @>

      }  /* |else if (option_ctr == 0)|  */


@q **** (4) Ambiguous option.@>
@ Ambiguous option.
\initials{LDF 2012.07.02.}

@^!! TODO@> !! TODO: 
\initials{LDF 2012.07.02.}  
Fix asterisk comments.  
Possibly try grepping for one day at a time to reduce the amount of code.
Maybe put it into a file.

@<|process_command_line_options| definition@>=

    else if (option_ctr == '?')
    {

        
        cerr << "WARNING! In `process_command_line_options':"
             << endl
             << "`getopt_long_only' returned ambiguous match.  "
             << "Breaking."
             << endl;
        

        break;

    }  /* |else if (option_ctr == '?')|  */

@q **** (4) Invalid option.@>
@ Invalid option.

@<|process_command_line_options| definition@>=

    else
    {
#if DEBUG_COMPILE
        if (DEBUG) 
        {
           

           cerr << "`getopt_long_only' returned invalid option."
                << endl;
           
        }
#endif  /* |DEBUG_COMPILE|  */
    }




@q **** (4) End of while loop.@>
@ End of while loop.

@<|process_command_line_options| definition@>=

#if DEBUG_COMPILE
    if (DEBUG) 
    {
       
       cerr << "End of option processing" << endl;
       
    }
#endif  /* |DEBUG_COMPILE|  */


@q **** (4) @>

    } /* |while|  */
  
@q *** (3) Non-option command line arguments.  @>
@ Non-option command line arguments.  
\initials{LDF 2012.07.02.}

@<|process_command_line_options| definition@>=
        
@q **** (4) @>

  if (optind < argc)
  {
@q ***** (5) @>

#if DEBUG_COMPILE
       if (DEBUG)
       {
           
          cerr << "non-option ARGV-elements: ";
          

       }  /* |if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 
    
       int j = optind;

@q ***** (5) @>

       for (int i = 0; j < argc;  ++i, ++j)
       {
@q ****** (6) @>

#if DEBUG_COMPILE
           if (DEBUG)
           {
               
               cerr << "argv[" << j << "] == " << argv[j] << endl
                    << "strlen(argv[j]) == " << strlen(argv[j]) << endl;
               

           }  /* |if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) @>


       }  /* |for| */ 
   
@q ***** (5) @>
 
  } /* |if (optind < argc)|  */


@q ****** (6) @>
@
@<|process_command_line_options| definition@>=

@q ***** (5) @>

@q **** (4) @>

   return 0;

}  /* End of |process_command_line_options| definition  */


@q *** (3) @>

@q ** (2) Putting ``Command-line option processing'' together.@>

@ Putting ``Command-line option processing'' together.
\initials{LDF 2012.07.02.}

@q *** (3) @>

This is what's compiled.
\initials{LDF 2012.07.02.}

@c
@<Include files@>@;@/
using namespace std;
extern int global_debug_level;
extern string input_filename;
extern string output_filename;
extern int pass_limit;
@<|process_command_line_options| declaration@>@;@/
@<|process_command_line_options| definition@>@;

@q *** (3) @>

@ This is what's written to the header file \filename{cmdlnopt.h} (which is 
renamed to \filename{cmdlnopt.h++} if it has changed).
\initials{LDF 2012.07.02.}

@(cmdlnopt.hxx@>=
@<|process_command_line_options| declaration@>@;@/

@q (progn (cweb-mode) (outline-minor-mode))                                @>

@q * (1) Local variables for Emacs @>

@q * Local variables for Emacs.@>
@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q abbrev-mode:t @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q fill-column:80 @>
@q End: @>
