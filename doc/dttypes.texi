@c dttypes.texi

@c Created by Laurence D. Finston (LDF) Wed Nov  6 16:56:11 CET 2013

@c This file is part of the 3DLDF 2.0.4 User Manual.
@c Copyright (C) 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021 The Free Software Foundation
@c See the section "GNU Free Documentation License" in the file 
@c fdl.texi for copying conditions.

@c Author:  Laurence D. Finston (LDF)

@c * (1) Data Types

@node Data Types, Points, Invoking, Top
@chapter Data Types

@c ** (2) Numeric types

@section Numeric types
@table @code
@item @code{numeric}
Integers and floating point numbers.

@item boolean
@code{true} or @code{false}

@item ulong_long
Unsigned long long integers.  Corresponds to the C type @code{unsigned long long int}.

@item complex
Complex number.

@item matrix
Matrix.
@end table


@c ** (2) Types for drawing and labeling:

@section Types for drawing and labeling:

@table @code 
@item transform
Transformation matrix.

@item focus
@cindex perspective projection
@c
Focus for the @dfn{perspective projection}.

@item pen

@itemx dash_pattern

@itemx color

@itemx string
@end table 

@section Types for pictures:
@table @code
@item picture

@item figure
@end table


@c ** (2) Shape types
@section Shape types
@table @code 
@item point

@itemx bool_point

@itemx path

@itemx nurb

@itemx line

@itemx plane

@itemx polygon

@itemx triangle

@itemx rectangle

@itemx polygon

@itemx reg_polygon

@itemx curve

@itemx arc

@itemx conic_section

@itemx conic_section_lattice

@itemx circle

@itemx circle_slice

@itemx ellipse

@itemx ellipse_slice

@itemx parabola

@itemx hyperbola

@itemx solid

@itemx faced_solid

@itemx cuboid

@itemx polyhedron

@itemx polyhedron_slice

@itemx dodecahedron

@itemx rhombic_triacontahedron

@itemx cylinder

@itemx cone

@itemx sphere

@itemx sphere_development

@itemx ellipsoid

@itemx paraboloid

@itemx helix

@itemx glyph 

@itemx origami_figure
@end table 

@c ** (2) Arrays and Vector types

@section Arrays and Vector types

Ordinary arrays are declared in 3DLDF as they are in @MF and @MP, e.g.:

@example
numeric n[];
@end example

Now, variables @code{n0}, @code{n1}, @code{n25}, etc., may be assigned to:

@example
n0 := 24;
n1 := 63;
n25 := 712;
show n0;
@result{} >> 24
show n1;
@result{} >> 63
show n25;
@result{} >> 712
show n73;
@result{} >> 0
@end example

Since @code{n[]} is of type numeric, @code{n73}, which hasn't been assigned to,
is automatically created with the type @code{numeric}.  For an unknown member
of an array of a different type, the result of showing is different:

@example
point p[];
show p0;
@result{} >> (unknown point)
@end example

However, there is no way to access these arrays as a whole:

@example
show n;
@result{} >> 0
show p;
@result{} >> 0
@end example

Here, @code{n} and @code{p} are simply treated as unknown @code{numerics}, i.e.,
they are automatically created and assigned the value 0.

Internally, a vector-type object contains an ordinary array, with a single
numerical subscript, but it is possible to access it as a whole, i.e.,
to show or perform an operation on all members of the array with a
single command and without iterating through all of them with a loop.

@example
point_vector pv;
pv += (1, 2, 3);
pv += (10, 20, 30);
show pv;
@result{} >> point_vector:
size of vector: 2
0: `valarray<real> v.size() == 4
(1.00000000, 2.00000000, 3.00000000, 1.00000000)
1: `valarray<real> v.size() == 4
(10.00000000, 20.00000000, 30.00000000, 1.00000000)
@end example

Please note that assignments must be made to a vector-type object
using the @code{+=} operator.  Explicitly assigning to a member of
the underlying array will not produce the desired results:

@example
point_vector pv;
pv0 := (1, 2, 3); %% Don't do this!
show pv0;
point: `valarray<real> v.size() == 4
(1.00000000, 2.00000000, 3.00000000, 1.00000000)
show pv;
>> point_vector:
size of vector: 0
@end example

The assignment to @code{pv0} works, but 3DLDF only  ``registers'' the
assignment to the array belonging to @code{pv};  the underlying @code{point}
object is not accessible via @code{pv}.

@example
pv += (11, 12, 13);
show pv0;
point: `valarray<real> v.size() == 4
(11.00000000, 12.00000000, 13.00000000, 1.00000000)
show pv;
>> point_vector:
size of vector: 1
0: `valarray<real> v.size() == 4
(11.00000000, 12.00000000, 13.00000000, 1.00000000)
@end example

Here, the command @code{pv += (11, 12, 13)} causes the value of @code{pv0}
to be overwritten.  In addition, @code{pv0} is now accessible via @code{pv} and
the @code{show} command shows its (new) value.

Assignment to other @code{pointer_vector} types is performed similarly:

@example
color_vector cv;
cv += red;
cv += green;
cv += blue;
show cv;
>> color_vector:
size of vector: 3
0:
red_part == 1.00000000
green_part == 0.00000000
blue_part == 0.00000000

1:
red_part == 0.00000000
green_part == 1.00000000
blue_part == 0.00000000

2:
red_part == 0.00000000
green_part == 0.00000000
blue_part == 1.00000000
@end example

@table @code 
@item numeric_vector

@itemx boolean_vector

@itemx unsigned_long_long_vector

@itemx complex_number_vector

@itemx matrix_vector

@itemx dash_pattern_vector

@itemx color_vector

@itemx focus_vector

@itemx string_vector

@itemx pen_vector

@itemx transform_vector

@itemx point_vector

@itemx bool_point_vector

@itemx path_vector

@itemx nurb_vector

@itemx plane_vector

@itemx triangle_vector

@itemx rectangle_vector

@itemx polygon_vector

@itemx regular_polygon_vector

@itemx arc_vector

@itemx circle_vector

@itemx ellipse_vector

@itemx polyhedron_vector

@itemx parabola_vector

@itemx hyperbola_vector

@itemx cylinder_vector

@itemx cone_vector

@itemx cuboid_vector

@itemx sphere_vector

@itemx sphere_development_vector

@itemx ellipsoid_vector

@itemx paraboloid_vector

@itemx helix_vector

@itemx glyph_vector

@itemx origami_figure_vector
@end table 

@c ***

@c ** (2)

@c * (1) Local Variables for Emacs

@c For use in indirect buffers:
@c
@c (progn (texinfo-mode) (outline-minor-mode t) (setq outline-regexp "@c *\\*+") (ignore (quote 
@c )) (set (make-local-variable 'run-texi2dvi-on-file) "3dldf.texi"))
  
@c Local Variables:
@c mode:Texinfo
@c abbrev-mode:t
@c eval:(outline-minor-mode t)
@c outline-regexp:"@c *\\*+"
@c eval:(set (make-local-variable 'run-texi2dvi-on-file) "3dldf.texi")
@c fill-column:80
@c End:


