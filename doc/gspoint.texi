@c gspoint.texi
  
@c This file is part of the 3DLDF User and Reference Manual.
@c Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
@c 2015, 2016, 2017, 2018, 2019, 2020, 2021 The Free Software Foundation, Inc. 
@c See the section "GNU Free Documentation License" in the file 
@c fdl-1.3.texi for copying conditions.

@node Points, Transforming points, Using 3DLDF, Top
@chapter Points

@menu
* Declaring points::  
* Setting and Assigning to points::  
@end menu
 
@node Declaring and assigning to points
@section Declaring and assigning to points

@tindex Point
The most basic drawable object in 3DLDF is @code{point}.  It is
analogous to @code{pair} in Metafont.  For example, in Metafont one
can define a @code{pair} using the ``z'' syntax as
follows:

@example
z0 = (1cm, 1cm);
@end example

@noindent
This is the usual way of declaring and assigning to @code{pairs} in METAFONT (and MetaPost), but 
@code{pairs} can also be declared explicitly:

@example
pair p;
p = (1cm, 1cm);
@end example

In 3DLDF, @code{points} @emph{must be} declared explicitly:

@example
point p;
point a, b, c;
@end example

As in @MF{} and @MP{}, an array of @code{points} may be declared:

@example
point pt[];
@end example

@noindent
Now I can assign to @code{pt0}, @code{pt1}, @code{pt2}, etc.

@vindex Point::world_coordinates
@vindex Point::user_coordinates
@vindex Point::view_coordinates
@vindex Point::projective_coordinates
@vindex world_coordinates (Point)
@vindex user_coordinates (Point)
@vindex view_coordinates (Point)
@vindex projective_coordinates (Point)
Another difference between 3DLDF's @code{points} and METAFONT's @code{pairs} is
that the @code{points} @code{a}, @code{b}, @code{c}, @code{pt0}, @code{pt1}, etc., 
have four coordinates (not three, see below), whereas @code{z0} has
only two, x and y.  Actually, the difference goes deeper than this.  In
Metafont, a @code{pair} has two parts, @code{xpart} and @code{ypart},
which can be examined by the user.  In 3DLDF, a @code{point} contains
the following sets of coordinates:

@example
world_coordinates
user_coordinates
view_coordinates
projective_coordinates
@end example

@noindent
These are sets of 3-dimensional @dfn{homogeneous} coordinates, which
means that they contain four coordinates, conventionally named x, y, z, and w.  Homogeneous
coordinates are used in the affine and perspective transformations
(@pxref{Transforms}). 

Currently, only @code{world_coordinates} and
@code{projective_coordinates} are used in 3DLDF.
The @code{world_coordinates} refer to the position of a @code{Point} in
3DLDF's basic, unchanging coordinate system.  
The @code{projective_coordinates} are the coordinates of the
two-dimensional projection of the @code{Point} onto a plane.
This projection is what is ultimately printed out or displayed on the
computer screen.  Please note, that when the coordinates of a
@code{Point} are referred to in this manual, the
@code{world_coordinates} are meant, unless otherwise stated.

@code{points} can be declared and their values can be set in different
ways.  

@example
point pt[];
pt0 := 1;
pt1 := (2.3, 52);
pt2 := (4.5, 7, 13.205);
show pt0;
@print{}
(1.00000000, 0.00000000, 0.00000000, 1.00000000)
show pt1;
@print{}
(2.29999995, 52.00000000, 0.00000000, 1.00000000)
show pt2;
@print{}
(4.50000000, 7.00000000, 13.20499992, 1.00000000)
@end example

@code{pt0} is assigned to using a single argument for the x-coordinate, 
so its y and z-coordinates are both set to 0.  A @code{point's} w-coordinate
cannot be set by the user.  In a @code{point's} world coordinates, the w-coordinate is always 1.
The w-coordinate in a @code{point's} projective coordinates only takes on a value not
equal to 1 in the case of a @dfn{non-affine transformation}, in particular, the
@dfn{perspective projection}.

Actually, in the previous example, the y-coordinate of @code{pt0} and the z-coordinates
of @code{pt0} and @code{pt1} are set to the values of the pre-defined @code{numeric} variables
@code{curr_y} and @code{curr_z}.  Their values are normally 0 but they can be set to other values
by the user:

@example
curr_y := 10;
curr_z := 20;
pt3 := 1;
show pt3;
@print{}
(1.00000000, 10.00000000, 20.00000000, 1.00000000)
@end example


@c !! START HERE!

Please note that @code{pt0} is constructed using a the default
constructor, whereas the other @code{points} are constructed using a
constructor with one required argument (for the x-coordinate), and two
optional arguments (for the y and z-coordinates).  The default
constructor always sets all the coordinates to 0, irrespective of the
values of @code{CURR_Y} and @code{CURR_Z}.

@node Setting and Assigning to points,  , Declaring points, Points
@section Setting and Assigning to points

@findex Point::operator=
@findex operator= (for points)
@findex Point::set
@findex set (for points)
It is possible to change the value of the coordinates of @code{points}
by using the @dfn{assignment operator} @code{=}
(@code{Point::operator=()}) or the function @code{Point::set()} 
(with appropriate arguments): 

@example
Point pt0(2, 3.3, 7);
Point pt1;
pt1 = pt0;
pt0.set(34, 99, 107.5);
pt0.show("pt0:");
@print{} pt0: (34, 99, 107.5)
pt1.show("pt1:");
@print{} pt1: (2, 3.3, 7)
@end example

In this example, @code{pt0} is initialized with the coordinates @code{(2, 3.3, 7)},
and @code{pt1} with the coordinates @code{(0, 0, 0)}.  
@code{pt1 = pt0} causes @code{pt1} to have the same coordinates as
@code{pt0}, then the coordinates of @code{pt0} are changed to @code{(34,
99, 107.5)}. This doesn't affect @code{pt1}, whose coordinates remain 
@code{(2, 3.3, 7)}. 

Another way of declaring and initializing @code{points} is by using the
@dfn{copy constructor}:  

@example
Point pt0(1, 3.5, 19);
Point pt1(pt0);
Point pt2 = pt0;
Point pt3;
pt3 = pt0;
@end example

In this example, @code{pt1} and @code{pt2} are both declared and
initialized using the copy constructor;  @code{Point pt2 = pt0} does not
invoke the assignment operator.  @code{pt3}, on the other hand, is
declared using the default constructor, and not initialized.  In the
following line, @code{pt3 = pt0} does invoke the assignment operator,
thus resetting the coordinate values of @code{pt3} to those of
@code{pt0}.   

