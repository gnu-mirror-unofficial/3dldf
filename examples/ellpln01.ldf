%%%% ellpln01.ldf
%%%% Created by Laurence D. Finston (LDF) Wed Nov  2 22:11:38 CET 2005

%% * (1) Copyright and License.

%%%% This file is part of GNU 3DLDF, a package for three-dimensional drawing. 
%%%% Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014 The Free Software Foundation 

%%%% GNU 3DLDF is free software; you can redistribute it and/or modify 
%%%% it under the terms of the GNU General Public License as published by 
%%%% the Free Software Foundation; either version 3 of the License, or 
%%%% (at your option) any later version. 

%%%% GNU 3DLDF is distributed in the hope that it will be useful, 
%%%% but WITHOUT ANY WARRANTY; without even the implied warranty of 
%%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
%%%% GNU General Public License for more details. 

%%%% You should have received a copy of the GNU General Public License 
%%%% along with GNU 3DLDF; if not, write to the Free Software 
%%%% Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA



%% Run these commands:

%% 3dldf ellpln01
%% mpost ellpln01
%% tex ellpln01.txt
%% dvips -o ellpln01.ps ellpln01
%% gv ellpln01 & 
%%
%% LDF 2005.11.03.

%% * (1) The intersection of an `ellipsoid' and a `plane'.
%%          The figure formed is an `ellipse'.
%%          LDF 2005.11.03.

verbatim_metapost "verbatimtex  \magnification=\magstep2 \font\large=cmr17 etex";

picture save_picture;

focus f;

set f with_position (-1, 5, -20) with_direction (-1, 5, 10) 
      with_distance 20;


ellipsoid e;
set e with_center (0, 0, 0) with_axis_x 15 with_axis_y 8 with_axis_z 10
      with_divisions_x 16 with_divisions_y 16 with_divisions_z 2
      with_point_count 64;




transform t[];

t0 := identity rotated (15, 30, 0);

e *= t0;

t1 := identity shifted (-1, -1, 3);

e *= t1;

ellipse g;

rectangle r;
r := unit_rectangle scaled 15;

t2 := identity rotated (0, 15, 45);

r *= t2;

shift r (1, 0);

%% ***** (5) Figure 1.

beginfig(1); 

   pickup pencircle scaled (.8mm, .8mm);

   draw r with_color blue;
   draw e;
   
   string s;

   bool_point_vector bpv;

   point pt;

   e_size := size e;

   pickup pencircle scaled (2mm, 2mm);

   for i = 0 upto e_size - 1:
   g := get_ellipse (i) e;
       bpv := g intersection_points r;
       	 for j = 0 upto size bpv - 1:
            pt := bpv[j];
            if pt is_on_ellipse g:
               drawdot bpv[j] with_color red;
            fi;
       	 endfor;
         clear bpv;
    endfor;

   save_picture := current_picture;
   output current_picture with_focus f no_sort;   

   clear current_picture;

   label("{\large Perspective}", (2, -15));

endfig with_projection parallel_x_y;

%% ***** (5) 

beginfig(2);
current_picture := save_picture;
label("{\large Parallel X-Y }", (0, -10));
endfig with_projection parallel_x_y;


%% ***** (5) 

beginfig(3);
output save_picture with_projection parallel_x_z;  
label("{\large Parallel X-Z}", (0, -10));
endfig with_projection parallel_x_y;

%% ***** (5) 

beginfig(4);
current_picture := save_picture;
label("{\large Parallel Z-Y}", (0, -10, 0));
endfig with_projection parallel_x_z;  

verbatim_metapost "end";

end;
