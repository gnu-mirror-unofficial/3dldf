%%%% kntpoly1.ldf
%%%% Created by Laurence D. Finston (LDF) Tue Aug  5 21:07:43 CEST 2008


%% * (1) Copyright and License.

%%%% This file is part of GNU 3DLDF, a package for three-dimensional drawing.  
%%%% Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013, 2014 The Free Software Foundation  

%%%% GNU 3DLDF is free software; you can redistribute it and/or modify 
%%%% it under the terms of the GNU General Public License as published by 
%%%% the Free Software Foundation; either version 3 of the License, or 
%%%% (at your option) any later version.  

%%%% GNU 3DLDF is distributed in the hope that it will be useful, 
%%%% but WITHOUT ANY WARRANTY; without even the implied warranty of 
%%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
%%%% GNU General Public License for more details.  

%%%% You should have received a copy of the GNU General Public License 
%%%% along with GNU 3DLDF; if not, write to the Free Software 
%%%% Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA 

%%%% GNU 3DLDF is a GNU package.  
%%%% It is part of the GNU Project of the  
%%%% Free Software Foundation 
%%%% and is published under the GNU General Public License. 
%%%% See the website http://www.gnu.org 
%%%% for more information.   
%%%% GNU 3DLDF is available for downloading from 
%%%% http://www.gnu.org/software/3dldf/LDF.html.

%%%% Please send bug reports to Laurence.Finston@gmx.de
%%%% The mailing list help-3dldf@gnu.org is available for people to 
%%%% ask other users for help.  
%%%% The mailing list info-3dldf@gnu.org is for sending 
%%%% announcements to users. To subscribe to these mailing lists, send an 
%%%% email with ``subscribe <email-address>'' as the subject.  

%%%% The author can be contacted at: 

%%%% Laurence D. Finston 
%%%% c/o Free Software Foundation, Inc. 
%%%% 51 Franklin St, Fifth Floor 
%%%% Boston, MA  02110-1301  
%%%% USA

%%%% Laurence.Finston@gmx.de
 


%% Last updated:  August 5, 2008

%% LDF 2010.12.17.  Knitting Pattern for a polyhedron.  This didn't work well.
%% The code that refers to this file and the related ones in `polymodl.html'
%% is commented-out.

%% Run like this:

%% 3dldf kntpoly1.ldf 
%% mpost kntpoly1.mp 
%% tex kntpoly1.txt 
%% dvips -o kntpoly1.ps kntpoly1.dvi

%% All on one line:
if false:
3dldf kntpoly1.ldf; mpost kntpoly1.mp; tex kntpoly1.txt; \
dvips -o kntpoly1.ps kntpoly1.dvi
fi;

%% View using Ghostview like this:
%% gv kntpoly1.ps &

% * (1) Beginning of 3DLDF code.

%% Now putting current sample code here and "old" sample code
%% in `sample1.ldf'.
%% LDF 2007.09.18.

% Row 1:  5 Stitches, P 
% Row 2:  6 Stitches, K 
% Row 3:  6 P 
% Row 4:  7 K 
% Row 5:  7 P 
% Row 6:  7 K 
% Row 7:  8 P 
% Row 8:  7 K 
% Row 9:  5 P 
% Row 10: 3 K 
% Row 11: 1 P

verbatim_metapost "verbatimtex \font\eightrm=cmr8 etex";

%% ** (2)

point p[];

reg_polygon pentagon[];

rectangle r[];

pickup pencircle scaled (.375mm, .375mm, .375mm);

beginfig(1);

w := .625;
h := .4347;

p0 := origin;
p1 := p0 shifted (5w, 0);
p2 := p1 rotated (0, 108);

p3 := p1 rotated (0, 54);

p4 := p1 shifted (0, 1);
p5 := p0 rotated_around (p1, p4) -54;


p6 := (p0 -- p3) intersection_point (p1 -- p5);


message "length (p6 - p1)";
show length (p6 - p1);

%message "length (p6 - p0)";
%show length (p6 - p0);

diameter := 2 * length (p6 - p0);


%draw p2 -- p0 -- p1;
%draw p0 -- p3;
%draw p1 -- p5;

%dotlabel.top("$p_0$", p0);
%dotlabel.top("$p_1$", p1);
%dotlabel.bot("$p_2$", p2);
%dotlabel.bot("$p_3$", p3);
%dotlabel.bot("$p_5$", p5);
%dotlabel.bot("$p_6$", p6);


set pentagon0 with_sides 5 with_center p6 with_diameter diameter;

for i = -2 upto 7:
   p[i + 9] := p0 shifted (i * w, 0);
endfor;

%% Bottom

if false: 
   dotlabel.bot("$p_7$",  p7);
   dotlabel.bot("$p_8$",  p8);
   dotlabel.bot("$p_9$",  p9);
   dotlabel.bot("$p_{10}$", p10);
   dotlabel.bot("$p_{11}$", p11);
   dotlabel.bot("$p_{12}$", p12);
   dotlabel.bot("$p_{13}$", p13);
   dotlabel.bot("$p_{14}$", p14);
   dotlabel.bot("$p_{15}$", p15);
   dotlabel.bot("$p_{16}$", p16);
fi; 


p29 := p7 shifted (0, 0, 12h);

%dotlabel.ulft("$p_{29}$", p29);

j := 1;

for i := 30 upto 38:
   p[i] := p29 shifted (j * w, 0);
   j := j + 1;
endfor;


if false: 
   dotlabel.top("$p_{30}$", p30);
   dotlabel.top("$p_{31}$", p31);
   dotlabel.top("$p_{32}$", p32);
   dotlabel.top("$p_{33}$", p33);
   dotlabel.top("$p_{34}$", p34);
   dotlabel.top("$p_{35}$", p35);
   dotlabel.top("$p_{36}$", p36);
   dotlabel.top("$p_{37}$", p37);
   dotlabel.top("$p_{38}$", p38);
fi; 

%% ** (2)

j := 1;
for i := 7 upto 18:
   p[i + 32] := p7 shifted (0, 0, j * h);
   j := j + 1;
endfor;




% for i := 29 upto 38:
%   shift p[i] (0, 0, k);
% endfor;

for i := 7 upto 16:
   draw p[i] -- p[i + 22] withcolor dark_gray;
endfor;


% %% Top


%% Left side

if false: 
   dotlabel.lft("$p_{39}$", p39);
   dotlabel.lft("$p_{40}$", p40);
   dotlabel.lft("$p_{41}$", p41);
   dotlabel.lft("$p_{42}$", p42);
   dotlabel.lft("$p_{43}$", p43);
   dotlabel.lft("$p_{44}$", p44);
   dotlabel.lft("$p_{45}$", p45);
   dotlabel.lft("$p_{46}$", p46);
   dotlabel.lft("$p_{47}$", p47);
   dotlabel.lft("$p_{48}$", p48);
   dotlabel.lft("$p_{49}$", p49);
fi; 

j := 1;
for i := 39 upto 50:
   p[i + 12] := p16 shifted (0, 0, j * h);
   j := j + 1;
endfor;

%% Right side

% dotlabel.rt("$p_{16}$", p16);

% dotlabel.rt("$p_{51}$", p51);
% dotlabel.rt("$p_{52}$", p52);
% dotlabel.rt("$p_{53}$", p53);
% dotlabel.rt("$p_{54}$", p54);
% dotlabel.rt("$p_{55}$", p55);
% dotlabel.rt("$p_{56}$", p56);
% dotlabel.rt("$p_{57}$", p57);
% dotlabel.rt("$p_{58}$", p58);
% dotlabel.rt("$p_{59}$", p59);
% dotlabel.rt("$p_{60}$", p60);
% dotlabel.rt("$p_{61}$", p61);
% dotlabel.rt("$p_{62}$", p62);

draw p7 -- p16 withcolor dark_gray;

for i := 39 upto 50:
   draw p[i] -- p[i + 12] withcolor dark_gray;
endfor;

%% Numbers, bottom 

string s;

for i := 7 upto 15:
   s := "{\eightrm " & decimal (i - 6) & "}";
   label.bot(s, mediate(p[i], p[i + 1]));
endfor;

%% Numbers, right side

verbatim_metapost "verbatimtex \setbox0=\hbox{{\eightrm 00.}} etex";

label.rt("{\eightrm \hbox to \wd0{1.\hss} P 5}", mediate(p16, p51));
label.rt("{\eightrm \hbox to \wd0{2.\hss}  K 6}", mediate(p51, p52));
label.rt("{\eightrm \hbox to \wd0{3.\hss}  P 6}", mediate(p52, p53));
label.rt("{\eightrm \hbox to \wd0{4.\hss}  K 7}", mediate(p53, p54));
label.rt("{\eightrm \hbox to \wd0{5.\hss}  P 7}", mediate(p54, p55));
label.rt("{\eightrm \hbox to \wd0{6.\hss}  K 7}", mediate(p55, p56));
label.rt("{\eightrm \hbox to \wd0{7.\hss}  P 8}", mediate(p56, p57));
label.rt("{\eightrm \hbox to \wd0{8.\hss}  K 7}", mediate(p57, p58));
label.rt("{\eightrm \hbox to \wd0{9.\hss}  P 5}", mediate(p58, p59));
label.rt("{\eightrm \hbox to \wd0{10.\hss} K 3}", mediate(p59, p60));
label.rt("{\eightrm \hbox to \wd0{11.\hss} P 1}", mediate(p60, p61));

% for i := 51 upto 61:
%    label.rt(i - 49, mediate(p[i], p[i + 1]));
% endfor;


p70 := p9 shifted (0, 0, h);
p71 := p10 shifted (0, 0, h);

r0 := (p9, p70, p71, p10);

filldraw r0 with_draw_color black with_fill_color light_gray;

for i := 0 upto 3:
   shift r0 (w, 0);
   filldraw r0 with_draw_color black with_fill_color light_gray;
endfor;

shift r0 (0, 0, h);
filldraw r0 with_draw_color black with_fill_color light_gray;

for i := 0 upto 3:
   shift r0 (-w, 0);
   filldraw r0 with_draw_color black with_fill_color light_gray;
endfor;

shift r0 (0, 0, h);
filldraw r0 with_draw_color black with_fill_color light_gray;

for i := 0 upto 3:
   shift r0 (w, 0);
   filldraw r0 with_draw_color black with_fill_color light_gray;
endfor;

shift r0 (w, 0, h);
filldraw r0 with_draw_color black with_fill_color light_gray;


for i := 0 upto 5:
   shift r0 (-w, 0);
   filldraw r0 with_draw_color black with_fill_color light_gray;
endfor;

shift r0 (0, 0, h);
filldraw r0 with_draw_color black with_fill_color light_gray;


for i := 0 upto 5:
   shift r0 (w, 0);
   filldraw r0 with_draw_color black with_fill_color light_gray;
endfor;


shift r0 (0, 0, h);
filldraw r0 with_draw_color black with_fill_color light_gray;


for i := 0 upto 5:
   shift r0 (-w, 0);
   filldraw r0 with_draw_color black with_fill_color light_gray;
endfor;


shift r0 (0, 0, h);
filldraw r0 with_draw_color black with_fill_color light_gray;


for i := 0 upto 5:
   shift r0 (w, 0);
   filldraw r0 with_draw_color black with_fill_color light_gray;
endfor;


shift r0 (0, 0, h);
filldraw r0 with_draw_color black with_fill_color light_gray;


for i := 0 upto 5:
   shift r0 (-w, 0);
   filldraw r0 with_draw_color black with_fill_color light_gray;
endfor;


shift r0 (w, 0, h);
filldraw r0 with_draw_color black with_fill_color light_gray;

for i := 0 upto 3:
   shift r0 (w, 0);
   filldraw r0 with_draw_color black with_fill_color light_gray;
endfor;



shift r0 (-w, 0, h);
filldraw r0 with_draw_color black with_fill_color light_gray;

for i := 0 upto 1:
   shift r0 (-w, 0);
   filldraw r0 with_draw_color black with_fill_color light_gray;
endfor;

shift r0 (w, 0, h);
filldraw r0 with_draw_color black with_fill_color light_gray;


p72 := p39 shifted (1.5w, 0);
p74 := p72 shifted (0, 0, h);

p73 := p39 shifted (2w, 0);
p75 := p73 shifted (0, 0, h);

%% ** (2) Half-rectangles

r1 := (p72, p73, p75, p74);

filldraw r1 with_draw_color black with_fill_color light_gray;

shift r1 (5.5w, 0);
filldraw r1 with_draw_color black with_fill_color light_gray;

shift r1 (0, 0, h);
filldraw r1 with_draw_color black with_fill_color light_gray;

shift r1 (-5.5w, 0);
filldraw r1 with_draw_color black with_fill_color light_gray;

shift r1 (5.5w, 0);
filldraw r1 with_draw_color black with_fill_color light_gray;


shift r1 (w, 0, 4h);
filldraw r1 with_draw_color black with_fill_color light_gray;

shift r1 (-7.5w, 0);
filldraw r1 with_draw_color black with_fill_color light_gray;


draw pentagon0;


%% *** (3) End of 3DLDF code

endfig with_projection parallel_x_z no_sort;  

verbatim_metapost "end;";

end;

%% ** (2) 

%% * (1) Emacs-Lisp code for use in indirect buffers when using the          
%%   	 GNU Emacs editor.  The local variable list is not evaluated when an 
%%   	 indirect buffer is visited, so it's necessary to evaluate the       
%%   	 following s-expression in order to use the facilities normally      
%%   	 accessed via the local variables list.                              
%%   	 \initials{LDF 2004.02.12}.                                          

%% (progn (metafont-mode) (outline-minor-mode t) (setq fill-column 80) (ignore '(  
%% )) (setq outline-regexp "%% [*\f]+"))

%% * (1) Local variables for Emacs.

%% Local Variables:
%% mode:Metafont
%% eval:(outline-minor-mode t)
%% eval:(read-abbrev-file abbrev-file-name)
%% outline-regexp:"%% [*\f]+"
%% End:

